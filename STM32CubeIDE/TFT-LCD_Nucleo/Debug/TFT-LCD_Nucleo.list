
TFT-LCD_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002858  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080029f0  080029f0  000039f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a08  08002a08  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a10  08002a10  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a10  08002a10  00003a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002a24  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002a24  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000990c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b61  00000000  00000000  0000d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0000f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a3  00000000  00000000  0000fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001620d  00000000  00000000  0001040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc32  00000000  00000000  00026618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877af  00000000  00000000  0003224a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b99f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002258  00000000  00000000  000b9a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bbc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080029d8 	.word	0x080029d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080029d8 	.word	0x080029d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	@ 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b40      	ldr	r3, [pc, #256]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a3f      	ldr	r2, [pc, #252]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b3d      	ldr	r3, [pc, #244]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b39      	ldr	r3, [pc, #228]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a38      	ldr	r2, [pc, #224]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b36      	ldr	r3, [pc, #216]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b32      	ldr	r3, [pc, #200]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a31      	ldr	r2, [pc, #196]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a2a      	ldr	r2, [pc, #168]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <MX_GPIO_Init+0x11c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	4825      	ldr	r0, [pc, #148]	@ (80005e8 <MX_GPIO_Init+0x120>)
 8000554:	f000 fd60 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2180      	movs	r1, #128	@ 0x80
 800055c:	4823      	ldr	r0, [pc, #140]	@ (80005ec <MX_GPIO_Init+0x124>)
 800055e:	f000 fd5b 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000562:	2201      	movs	r2, #1
 8000564:	2140      	movs	r1, #64	@ 0x40
 8000566:	4822      	ldr	r0, [pc, #136]	@ (80005f0 <MX_GPIO_Init+0x128>)
 8000568:	f000 fd56 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000572:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	481a      	ldr	r0, [pc, #104]	@ (80005ec <MX_GPIO_Init+0x124>)
 8000584:	f000 fbc4 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000588:	2310      	movs	r3, #16
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <MX_GPIO_Init+0x120>)
 80005a0:	f000 fbb6 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	480c      	ldr	r0, [pc, #48]	@ (80005ec <MX_GPIO_Init+0x124>)
 80005bc:	f000 fba8 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005c0:	2340      	movs	r3, #64	@ 0x40
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_GPIO_Init+0x128>)
 80005d8:	f000 fb9a 	bl	8000d10 <HAL_GPIO_Init>

}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	@ 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020000 	.word	0x40020000
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020400 	.word	0x40020400

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fa0d 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f819 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f7ff ff61 	bl	80004c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f96b 	bl	80008e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 f881 	bl	8000710 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lcd_config();
 800060e:	f001 ff87 	bl	8002520 <lcd_config>

  lcd_setbackgroundcolor(ILI9486_BLACK);
 8000612:	2000      	movs	r0, #0
 8000614:	f002 f906 	bl	8002824 <lcd_setbackgroundcolor>

  HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800061c:	f000 fa6e 	bl	8000afc <HAL_Delay>

  lcd_FillRectangle(135, 215, 50, 50, ILI9486_BLUE);
 8000620:	231f      	movs	r3, #31
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2332      	movs	r3, #50	@ 0x32
 8000626:	2232      	movs	r2, #50	@ 0x32
 8000628:	21d7      	movs	r1, #215	@ 0xd7
 800062a:	2087      	movs	r0, #135	@ 0x87
 800062c:	f002 f93a 	bl	80028a4 <lcd_FillRectangle>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x3c>

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 f99c 	bl	8002980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <SystemClock_Config+0xc8>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <SystemClock_Config+0xcc>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fcc7 	bl	800104c <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f81e 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2103      	movs	r1, #3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 ff29 	bl	800153c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 f808 	bl	8000704 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	@ 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2218      	movs	r2, #24
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f001 f90b 	bl	800197c <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f7ff ffca 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	40013000 	.word	0x40013000

0800077c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	@ 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a19      	ldr	r2, [pc, #100]	@ (8000800 <HAL_SPI_MspInit+0x84>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d12b      	bne.n	80007f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <HAL_SPI_MspInit+0x88>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <HAL_SPI_MspInit+0x88>)
 80007a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HAL_SPI_MspInit+0x88>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <HAL_SPI_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <HAL_SPI_MspInit+0x88>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_SPI_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007d6:	23e0      	movs	r3, #224	@ 0xe0
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e6:	2305      	movs	r3, #5
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <HAL_SPI_MspInit+0x8c>)
 80007f2:	f000 fa8d 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	@ 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40013000 	.word	0x40013000
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081a:	4a0f      	ldr	r2, [pc, #60]	@ (8000858 <HAL_MspInit+0x4c>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000820:	6453      	str	r3, [r2, #68]	@ 0x44
 8000822:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	4a08      	ldr	r2, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	@ 0x40
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800084a:	2007      	movs	r0, #7
 800084c:	f000 fa2c 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f903 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <SystemInit+0x20>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <SystemInit+0x20>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f001 fada 	bl	8001ed0 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f7ff feef 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000080 	.word	0x20000080
 8000930:	40004400 	.word	0x40004400

08000934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	@ (80009b8 <HAL_UART_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12b      	bne.n	80009ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <HAL_UART_MspInit+0x88>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800098e:	230c      	movs	r3, #12
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099e:	2307      	movs	r3, #7
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <HAL_UART_MspInit+0x8c>)
 80009aa:	f000 f9b1 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	@ 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c8:	f7ff ff78 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f001 ffcd 	bl	8002990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fdfd 	bl	80005f4 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a08:	08002a18 	.word	0x08002a18
  ldr r2, =_sbss
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a10:	200000cc 	.word	0x200000cc

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	@ (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f931 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fede 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f93b 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f911 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200000c8 	.word	0x200000c8

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	200000c8 	.word	0x200000c8

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff ffee 	bl	8000ae4 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b22:	bf00      	nop
 8000b24:	f7ff ffde 	bl	8000ae4 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	@ (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	@ (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff47 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff5c 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff8e 	bl	8000bfc <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffb0 	bl	8000c64 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	@ 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e159      	b.n	8000fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8148 	bne.w	8000fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a2 	beq.w	8000fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b57      	ldr	r3, [pc, #348]	@ (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a56      	ldr	r2, [pc, #344]	@ (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a52      	ldr	r2, [pc, #328]	@ (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a49      	ldr	r2, [pc, #292]	@ (8001000 <HAL_GPIO_Init+0x2f0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x202>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a48      	ldr	r2, [pc, #288]	@ (8001004 <HAL_GPIO_Init+0x2f4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1fe>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	@ (8001008 <HAL_GPIO_Init+0x2f8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	@ (800100c <HAL_GPIO_Init+0x2fc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a45      	ldr	r2, [pc, #276]	@ (8001010 <HAL_GPIO_Init+0x300>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1f2>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	@ (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a2f      	ldr	r2, [pc, #188]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a24      	ldr	r2, [pc, #144]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000faa:	4a1a      	ldr	r2, [pc, #104]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_GPIO_Init+0x304>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aea2 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800
 800100c:	40020c00 	.word	0x40020c00
 8001010:	40021000 	.word	0x40021000
 8001014:	40013c00 	.word	0x40013c00

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e267      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d075      	beq.n	8001156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800106a:	4b88      	ldr	r3, [pc, #544]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b04      	cmp	r3, #4
 8001074:	d00c      	beq.n	8001090 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001076:	4b85      	ldr	r3, [pc, #532]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800107e:	2b08      	cmp	r3, #8
 8001080:	d112      	bne.n	80010a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001082:	4b82      	ldr	r3, [pc, #520]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800108e:	d10b      	bne.n	80010a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	4b7e      	ldr	r3, [pc, #504]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d05b      	beq.n	8001154 <HAL_RCC_OscConfig+0x108>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d157      	bne.n	8001154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e242      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b0:	d106      	bne.n	80010c0 <HAL_RCC_OscConfig+0x74>
 80010b2:	4b76      	ldr	r3, [pc, #472]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a75      	ldr	r2, [pc, #468]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e01d      	b.n	80010fc <HAL_RCC_OscConfig+0xb0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x98>
 80010ca:	4b70      	ldr	r3, [pc, #448]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6f      	ldr	r2, [pc, #444]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b6d      	ldr	r3, [pc, #436]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6c      	ldr	r2, [pc, #432]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e00b      	b.n	80010fc <HAL_RCC_OscConfig+0xb0>
 80010e4:	4b69      	ldr	r3, [pc, #420]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a68      	ldr	r2, [pc, #416]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b66      	ldr	r3, [pc, #408]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a65      	ldr	r2, [pc, #404]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d013      	beq.n	800112c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fcee 	bl	8000ae4 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800110c:	f7ff fcea 	bl	8000ae4 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b64      	cmp	r3, #100	@ 0x64
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e207      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	4b5b      	ldr	r3, [pc, #364]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0xc0>
 800112a:	e014      	b.n	8001156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fcda 	bl	8000ae4 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fcd6 	bl	8000ae4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	@ 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1f3      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	4b51      	ldr	r3, [pc, #324]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0xe8>
 8001152:	e000      	b.n	8001156 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d063      	beq.n	800122a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001162:	4b4a      	ldr	r3, [pc, #296]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001176:	2b08      	cmp	r3, #8
 8001178:	d11c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117a:	4b44      	ldr	r3, [pc, #272]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d116      	bne.n	80011b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001186:	4b41      	ldr	r3, [pc, #260]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x152>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d001      	beq.n	800119e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e1c7      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4937      	ldr	r1, [pc, #220]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b2:	e03a      	b.n	800122a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <HAL_RCC_OscConfig+0x244>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c2:	f7ff fc8f 	bl	8000ae4 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc8b 	bl	8000ae4 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1a8      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4925      	ldr	r1, [pc, #148]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fe:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <HAL_RCC_OscConfig+0x244>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff fc6e 	bl	8000ae4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff fc6a 	bl	8000ae4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e187      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d036      	beq.n	80012a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d016      	beq.n	800126c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_RCC_OscConfig+0x248>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff fc4e 	bl	8000ae4 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fc4a 	bl	8000ae4 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e167      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_RCC_OscConfig+0x240>)
 8001260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x200>
 800126a:	e01b      	b.n	80012a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_RCC_OscConfig+0x248>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff fc37 	bl	8000ae4 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001278:	e00e      	b.n	8001298 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127a:	f7ff fc33 	bl	8000ae4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d907      	bls.n	8001298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e150      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
 800128c:	40023800 	.word	0x40023800
 8001290:	42470000 	.word	0x42470000
 8001294:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	4b88      	ldr	r3, [pc, #544]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800129a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ea      	bne.n	800127a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8097 	beq.w	80013e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b6:	4b81      	ldr	r3, [pc, #516]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b7d      	ldr	r3, [pc, #500]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a7c      	ldr	r2, [pc, #496]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b7a      	ldr	r3, [pc, #488]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012de:	2301      	movs	r3, #1
 80012e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e2:	4b77      	ldr	r3, [pc, #476]	@ (80014c0 <HAL_RCC_OscConfig+0x474>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d118      	bne.n	8001320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ee:	4b74      	ldr	r3, [pc, #464]	@ (80014c0 <HAL_RCC_OscConfig+0x474>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a73      	ldr	r2, [pc, #460]	@ (80014c0 <HAL_RCC_OscConfig+0x474>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fbf3 	bl	8000ae4 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001302:	f7ff fbef 	bl	8000ae4 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e10c      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	4b6a      	ldr	r3, [pc, #424]	@ (80014c0 <HAL_RCC_OscConfig+0x474>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x2ea>
 8001328:	4b64      	ldr	r3, [pc, #400]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800132a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132c:	4a63      	ldr	r2, [pc, #396]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6713      	str	r3, [r2, #112]	@ 0x70
 8001334:	e01c      	b.n	8001370 <HAL_RCC_OscConfig+0x324>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b05      	cmp	r3, #5
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x30c>
 800133e:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001342:	4a5e      	ldr	r2, [pc, #376]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6713      	str	r3, [r2, #112]	@ 0x70
 800134a:	4b5c      	ldr	r3, [pc, #368]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134e:	4a5b      	ldr	r2, [pc, #364]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6713      	str	r3, [r2, #112]	@ 0x70
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0x324>
 8001358:	4b58      	ldr	r3, [pc, #352]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135c:	4a57      	ldr	r2, [pc, #348]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800135e:	f023 0301 	bic.w	r3, r3, #1
 8001362:	6713      	str	r3, [r2, #112]	@ 0x70
 8001364:	4b55      	ldr	r3, [pc, #340]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001368:	4a54      	ldr	r2, [pc, #336]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d015      	beq.n	80013a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff fbb4 	bl	8000ae4 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137e:	e00a      	b.n	8001396 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001380:	f7ff fbb0 	bl	8000ae4 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800138e:	4293      	cmp	r3, r2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0cb      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	4b49      	ldr	r3, [pc, #292]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0ee      	beq.n	8001380 <HAL_RCC_OscConfig+0x334>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff fb9e 	bl	8000ae4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013aa:	e00a      	b.n	80013c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff fb9a 	bl	8000ae4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0b5      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c2:	4b3e      	ldr	r3, [pc, #248]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ee      	bne.n	80013ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d4:	4b39      	ldr	r3, [pc, #228]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	4a38      	ldr	r2, [pc, #224]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80013da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a1 	beq.w	800152c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ea:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d05c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d141      	bne.n	8001482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b31      	ldr	r3, [pc, #196]	@ (80014c4 <HAL_RCC_OscConfig+0x478>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb6e 	bl	8000ae4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb6a 	bl	8000ae4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e087      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69da      	ldr	r2, [r3, #28]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	019b      	lsls	r3, r3, #6
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	3b01      	subs	r3, #1
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	491b      	ldr	r1, [pc, #108]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_RCC_OscConfig+0x478>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fb43 	bl	8000ae4 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001462:	f7ff fb3f 	bl	8000ae4 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e05c      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x416>
 8001480:	e054      	b.n	800152c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_RCC_OscConfig+0x478>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb2c 	bl	8000ae4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fb28 	bl	8000ae4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e045      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_RCC_OscConfig+0x470>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x444>
 80014ae:	e03d      	b.n	800152c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d107      	bne.n	80014c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e038      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000
 80014c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_RCC_OscConfig+0x4ec>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d028      	beq.n	8001528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d121      	bne.n	8001528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d11a      	bne.n	8001528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014f8:	4013      	ands	r3, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001500:	4293      	cmp	r3, r2
 8001502:	d111      	bne.n	8001528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	3b01      	subs	r3, #1
 8001512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d107      	bne.n	8001528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0cc      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b68      	ldr	r3, [pc, #416]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d90c      	bls.n	8001578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b65      	ldr	r3, [pc, #404]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b63      	ldr	r3, [pc, #396]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0b8      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001590:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a58      	ldr	r2, [pc, #352]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800159a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a8:	4b53      	ldr	r3, [pc, #332]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a52      	ldr	r2, [pc, #328]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	4b50      	ldr	r3, [pc, #320]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	494d      	ldr	r1, [pc, #308]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d044      	beq.n	800165c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d119      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e07f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b3f      	ldr	r3, [pc, #252]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e06f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3b      	ldr	r3, [pc, #236]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e067      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4934      	ldr	r1, [pc, #208]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800162c:	f7ff fa5a 	bl	8000ae4 <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff fa56 	bl	8000ae4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e04f      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d20c      	bcs.n	8001684 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e032      	b.n	80016ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001690:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4916      	ldr	r1, [pc, #88]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	490e      	ldr	r1, [pc, #56]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016c2:	f000 f821 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	490a      	ldr	r1, [pc, #40]	@ (80016fc <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	5ccb      	ldrb	r3, [r1, r3]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f9ba 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	080029f0 	.word	0x080029f0
 8001700:	20000000 	.word	0x20000000
 8001704:	20000004 	.word	0x20000004

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800170c:	b094      	sub	sp, #80	@ 0x50
 800170e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001720:	4b79      	ldr	r3, [pc, #484]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x200>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d00d      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x40>
 800172c:	2b08      	cmp	r3, #8
 800172e:	f200 80e1 	bhi.w	80018f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x34>
 8001736:	2b04      	cmp	r3, #4
 8001738:	d003      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x3a>
 800173a:	e0db      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b73      	ldr	r3, [pc, #460]	@ (800190c <HAL_RCC_GetSysClockFreq+0x204>)
 800173e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001740:	e0db      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001742:	4b73      	ldr	r3, [pc, #460]	@ (8001910 <HAL_RCC_GetSysClockFreq+0x208>)
 8001744:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001746:	e0d8      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001748:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x200>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001750:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001752:	4b6d      	ldr	r3, [pc, #436]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x200>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d063      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x200>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	2200      	movs	r2, #0
 8001766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001768:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800176a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001770:	633b      	str	r3, [r7, #48]	@ 0x30
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
 8001776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800177a:	4622      	mov	r2, r4
 800177c:	462b      	mov	r3, r5
 800177e:	f04f 0000 	mov.w	r0, #0
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	0159      	lsls	r1, r3, #5
 8001788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178c:	0150      	lsls	r0, r2, #5
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4621      	mov	r1, r4
 8001794:	1a51      	subs	r1, r2, r1
 8001796:	6139      	str	r1, [r7, #16]
 8001798:	4629      	mov	r1, r5
 800179a:	eb63 0301 	sbc.w	r3, r3, r1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017ac:	4659      	mov	r1, fp
 80017ae:	018b      	lsls	r3, r1, #6
 80017b0:	4651      	mov	r1, sl
 80017b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b6:	4651      	mov	r1, sl
 80017b8:	018a      	lsls	r2, r1, #6
 80017ba:	4651      	mov	r1, sl
 80017bc:	ebb2 0801 	subs.w	r8, r2, r1
 80017c0:	4659      	mov	r1, fp
 80017c2:	eb63 0901 	sbc.w	r9, r3, r1
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017da:	4690      	mov	r8, r2
 80017dc:	4699      	mov	r9, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	eb18 0303 	adds.w	r3, r8, r3
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	462b      	mov	r3, r5
 80017e8:	eb49 0303 	adc.w	r3, r9, r3
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017fa:	4629      	mov	r1, r5
 80017fc:	024b      	lsls	r3, r1, #9
 80017fe:	4621      	mov	r1, r4
 8001800:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001804:	4621      	mov	r1, r4
 8001806:	024a      	lsls	r2, r1, #9
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800180e:	2200      	movs	r2, #0
 8001810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001818:	f7fe fcde 	bl	80001d8 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001824:	e058      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b38      	ldr	r3, [pc, #224]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x200>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	2200      	movs	r2, #0
 800182e:	4618      	mov	r0, r3
 8001830:	4611      	mov	r1, r2
 8001832:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
 800183c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001840:	4642      	mov	r2, r8
 8001842:	464b      	mov	r3, r9
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	0159      	lsls	r1, r3, #5
 800184e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001852:	0150      	lsls	r0, r2, #5
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4641      	mov	r1, r8
 800185a:	ebb2 0a01 	subs.w	sl, r2, r1
 800185e:	4649      	mov	r1, r9
 8001860:	eb63 0b01 	sbc.w	fp, r3, r1
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001870:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001874:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001878:	ebb2 040a 	subs.w	r4, r2, sl
 800187c:	eb63 050b 	sbc.w	r5, r3, fp
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	00eb      	lsls	r3, r5, #3
 800188a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800188e:	00e2      	lsls	r2, r4, #3
 8001890:	4614      	mov	r4, r2
 8001892:	461d      	mov	r5, r3
 8001894:	4643      	mov	r3, r8
 8001896:	18e3      	adds	r3, r4, r3
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	464b      	mov	r3, r9
 800189c:	eb45 0303 	adc.w	r3, r5, r3
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ae:	4629      	mov	r1, r5
 80018b0:	028b      	lsls	r3, r1, #10
 80018b2:	4621      	mov	r1, r4
 80018b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018b8:	4621      	mov	r1, r4
 80018ba:	028a      	lsls	r2, r1, #10
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018c2:	2200      	movs	r2, #0
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	61fa      	str	r2, [r7, #28]
 80018c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018cc:	f7fe fc84 	bl	80001d8 <__aeabi_uldivmod>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4613      	mov	r3, r2
 80018d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	3301      	adds	r3, #1
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018f2:	e002      	b.n	80018fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_RCC_GetSysClockFreq+0x204>)
 80018f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3750      	adds	r7, #80	@ 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	00f42400 	.word	0x00f42400
 8001910:	007a1200 	.word	0x007a1200

08001914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_RCC_GetHCLKFreq+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001930:	f7ff fff0 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	0a9b      	lsrs	r3, r3, #10
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	@ (8001950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	08002a00 	.word	0x08002a00

08001954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001958:	f7ff ffdc 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 800195c:	4602      	mov	r2, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0b5b      	lsrs	r3, r3, #13
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4903      	ldr	r1, [pc, #12]	@ (8001978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800196a:	5ccb      	ldrb	r3, [r1, r3]
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08002a00 	.word	0x08002a00

0800197c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07b      	b.n	8001a86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d108      	bne.n	80019a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800199e:	d009      	beq.n	80019b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
 80019a6:	e005      	b.n	80019b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fed4 	bl	800077c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a38:	ea42 0103 	orr.w	r1, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	0c1b      	lsrs	r3, r3, #16
 8001a52:	f003 0104 	and.w	r1, r3, #4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	f003 0210 	and.w	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b088      	sub	sp, #32
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a9e:	f7ff f821 	bl	8000ae4 <HAL_GetTick>
 8001aa2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d001      	beq.n	8001ab8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e12a      	b.n	8001d0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_SPI_Transmit+0x36>
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e122      	b.n	8001d0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_SPI_Transmit+0x48>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e11b      	b.n	8001d0e <HAL_SPI_Transmit+0x280>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b24:	d10f      	bne.n	8001b46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	2b40      	cmp	r3, #64	@ 0x40
 8001b52:	d007      	beq.n	8001b64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b6c:	d152      	bne.n	8001c14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_SPI_Transmit+0xee>
 8001b76:	8b7b      	ldrh	r3, [r7, #26]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d145      	bne.n	8001c08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	881a      	ldrh	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	1c9a      	adds	r2, r3, #2
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ba0:	e032      	b.n	8001c08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d112      	bne.n	8001bd6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	1c9a      	adds	r2, r3, #2
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001bd4:	e018      	b.n	8001c08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bd6:	f7fe ff85 	bl	8000ae4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d803      	bhi.n	8001bee <HAL_SPI_Transmit+0x160>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d102      	bne.n	8001bf4 <HAL_SPI_Transmit+0x166>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e082      	b.n	8001d0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1c7      	bne.n	8001ba2 <HAL_SPI_Transmit+0x114>
 8001c12:	e053      	b.n	8001cbc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_SPI_Transmit+0x194>
 8001c1c:	8b7b      	ldrh	r3, [r7, #26]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d147      	bne.n	8001cb2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	7812      	ldrb	r2, [r2, #0]
 8001c2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c48:	e033      	b.n	8001cb2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d113      	bne.n	8001c80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	330c      	adds	r3, #12
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c7e:	e018      	b.n	8001cb2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c80:	f7fe ff30 	bl	8000ae4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d803      	bhi.n	8001c98 <HAL_SPI_Transmit+0x20a>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c96:	d102      	bne.n	8001c9e <HAL_SPI_Transmit+0x210>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e02d      	b.n	8001d0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1c6      	bne.n	8001c4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f8b1 	bl	8001e28 <SPI_EndRxTxTransaction>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d28:	f7fe fedc 	bl	8000ae4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d38:	f7fe fed4 	bl	8000ae4 <HAL_GetTick>
 8001d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d3e:	4b39      	ldr	r3, [pc, #228]	@ (8001e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	015b      	lsls	r3, r3, #5
 8001d44:	0d1b      	lsrs	r3, r3, #20
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d4e:	e054      	b.n	8001dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d56:	d050      	beq.n	8001dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d58:	f7fe fec4 	bl	8000ae4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d902      	bls.n	8001d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d13d      	bne.n	8001dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d86:	d111      	bne.n	8001dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d90:	d004      	beq.n	8001d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9a:	d107      	bne.n	8001dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001db4:	d10f      	bne.n	8001dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e017      	b.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4013      	ands	r3, r2
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d19b      	bne.n	8001d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000000 	.word	0x20000000

08001e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff ff6a 	bl	8001d18 <SPI_WaitFlagStateUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	f043 0220 	orr.w	r2, r3, #32
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e032      	b.n	8001ec0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <SPI_EndRxTxTransaction+0xa0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <SPI_EndRxTxTransaction+0xa4>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	0d5b      	lsrs	r3, r3, #21
 8001e66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e78:	d112      	bne.n	8001ea0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2200      	movs	r2, #0
 8001e82:	2180      	movs	r1, #128	@ 0x80
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7ff ff47 	bl	8001d18 <SPI_WaitFlagStateUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d016      	beq.n	8001ebe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e94:	f043 0220 	orr.w	r2, r3, #32
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e00f      	b.n	8001ec0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb6:	2b80      	cmp	r3, #128	@ 0x80
 8001eb8:	d0f2      	beq.n	8001ea0 <SPI_EndRxTxTransaction+0x78>
 8001eba:	e000      	b.n	8001ebe <SPI_EndRxTxTransaction+0x96>
        break;
 8001ebc:	bf00      	nop
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	165e9f81 	.word	0x165e9f81

08001ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e042      	b.n	8001f68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fd1c 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	@ 0x24
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f82b 	bl	8001f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f74:	b0c0      	sub	sp, #256	@ 0x100
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f8c:	68d9      	ldr	r1, [r3, #12]
 8001f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	ea40 0301 	orr.w	r3, r0, r1
 8001f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fc8:	f021 010c 	bic.w	r1, r1, #12
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fea:	6999      	ldr	r1, [r3, #24]
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	ea40 0301 	orr.w	r3, r0, r1
 8001ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800223c <UART_SetConfig+0x2cc>)
 8002000:	429a      	cmp	r2, r3
 8002002:	d005      	beq.n	8002010 <UART_SetConfig+0xa0>
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b8d      	ldr	r3, [pc, #564]	@ (8002240 <UART_SetConfig+0x2d0>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d104      	bne.n	800201a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002010:	f7ff fca0 	bl	8001954 <HAL_RCC_GetPCLK2Freq>
 8002014:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002018:	e003      	b.n	8002022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800201a:	f7ff fc87 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 800201e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800202c:	f040 810c 	bne.w	8002248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002034:	2200      	movs	r2, #0
 8002036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800203a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800203e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002042:	4622      	mov	r2, r4
 8002044:	462b      	mov	r3, r5
 8002046:	1891      	adds	r1, r2, r2
 8002048:	65b9      	str	r1, [r7, #88]	@ 0x58
 800204a:	415b      	adcs	r3, r3
 800204c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800204e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002052:	4621      	mov	r1, r4
 8002054:	eb12 0801 	adds.w	r8, r2, r1
 8002058:	4629      	mov	r1, r5
 800205a:	eb43 0901 	adc.w	r9, r3, r1
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800206a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800206e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002072:	4690      	mov	r8, r2
 8002074:	4699      	mov	r9, r3
 8002076:	4623      	mov	r3, r4
 8002078:	eb18 0303 	adds.w	r3, r8, r3
 800207c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002080:	462b      	mov	r3, r5
 8002082:	eb49 0303 	adc.w	r3, r9, r3
 8002086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002096:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800209a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800209e:	460b      	mov	r3, r1
 80020a0:	18db      	adds	r3, r3, r3
 80020a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020a4:	4613      	mov	r3, r2
 80020a6:	eb42 0303 	adc.w	r3, r2, r3
 80020aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80020ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020b4:	f7fe f890 	bl	80001d8 <__aeabi_uldivmod>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4b61      	ldr	r3, [pc, #388]	@ (8002244 <UART_SetConfig+0x2d4>)
 80020be:	fba3 2302 	umull	r2, r3, r3, r2
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	011c      	lsls	r4, r3, #4
 80020c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020d8:	4642      	mov	r2, r8
 80020da:	464b      	mov	r3, r9
 80020dc:	1891      	adds	r1, r2, r2
 80020de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020e0:	415b      	adcs	r3, r3
 80020e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80020e8:	4641      	mov	r1, r8
 80020ea:	eb12 0a01 	adds.w	sl, r2, r1
 80020ee:	4649      	mov	r1, r9
 80020f0:	eb43 0b01 	adc.w	fp, r3, r1
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002108:	4692      	mov	sl, r2
 800210a:	469b      	mov	fp, r3
 800210c:	4643      	mov	r3, r8
 800210e:	eb1a 0303 	adds.w	r3, sl, r3
 8002112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002116:	464b      	mov	r3, r9
 8002118:	eb4b 0303 	adc.w	r3, fp, r3
 800211c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800212c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002134:	460b      	mov	r3, r1
 8002136:	18db      	adds	r3, r3, r3
 8002138:	643b      	str	r3, [r7, #64]	@ 0x40
 800213a:	4613      	mov	r3, r2
 800213c:	eb42 0303 	adc.w	r3, r2, r3
 8002140:	647b      	str	r3, [r7, #68]	@ 0x44
 8002142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800214a:	f7fe f845 	bl	80001d8 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4611      	mov	r1, r2
 8002154:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <UART_SetConfig+0x2d4>)
 8002156:	fba3 2301 	umull	r2, r3, r3, r1
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2264      	movs	r2, #100	@ 0x64
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800216a:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <UART_SetConfig+0x2d4>)
 800216c:	fba3 2302 	umull	r2, r3, r3, r2
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002178:	441c      	add	r4, r3
 800217a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002184:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800218c:	4642      	mov	r2, r8
 800218e:	464b      	mov	r3, r9
 8002190:	1891      	adds	r1, r2, r2
 8002192:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002194:	415b      	adcs	r3, r3
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800219c:	4641      	mov	r1, r8
 800219e:	1851      	adds	r1, r2, r1
 80021a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80021a2:	4649      	mov	r1, r9
 80021a4:	414b      	adcs	r3, r1
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021b4:	4659      	mov	r1, fp
 80021b6:	00cb      	lsls	r3, r1, #3
 80021b8:	4651      	mov	r1, sl
 80021ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021be:	4651      	mov	r1, sl
 80021c0:	00ca      	lsls	r2, r1, #3
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	4642      	mov	r2, r8
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021d0:	464b      	mov	r3, r9
 80021d2:	460a      	mov	r2, r1
 80021d4:	eb42 0303 	adc.w	r3, r2, r3
 80021d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80021e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80021ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80021f0:	460b      	mov	r3, r1
 80021f2:	18db      	adds	r3, r3, r3
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f6:	4613      	mov	r3, r2
 80021f8:	eb42 0303 	adc.w	r3, r2, r3
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002206:	f7fd ffe7 	bl	80001d8 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <UART_SetConfig+0x2d4>)
 8002210:	fba3 1302 	umull	r1, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	2164      	movs	r1, #100	@ 0x64
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	3332      	adds	r3, #50	@ 0x32
 8002222:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <UART_SetConfig+0x2d4>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	f003 0207 	and.w	r2, r3, #7
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4422      	add	r2, r4
 8002236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002238:	e106      	b.n	8002448 <UART_SetConfig+0x4d8>
 800223a:	bf00      	nop
 800223c:	40011000 	.word	0x40011000
 8002240:	40011400 	.word	0x40011400
 8002244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800224c:	2200      	movs	r2, #0
 800224e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002252:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800225a:	4642      	mov	r2, r8
 800225c:	464b      	mov	r3, r9
 800225e:	1891      	adds	r1, r2, r2
 8002260:	6239      	str	r1, [r7, #32]
 8002262:	415b      	adcs	r3, r3
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800226a:	4641      	mov	r1, r8
 800226c:	1854      	adds	r4, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb43 0501 	adc.w	r5, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	00eb      	lsls	r3, r5, #3
 800227e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002282:	00e2      	lsls	r2, r4, #3
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
 8002288:	4643      	mov	r3, r8
 800228a:	18e3      	adds	r3, r4, r3
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002290:	464b      	mov	r3, r9
 8002292:	eb45 0303 	adc.w	r3, r5, r3
 8002296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800229a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022b6:	4629      	mov	r1, r5
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	4621      	mov	r1, r4
 80022bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022c0:	4621      	mov	r1, r4
 80022c2:	008a      	lsls	r2, r1, #2
 80022c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022c8:	f7fd ff86 	bl	80001d8 <__aeabi_uldivmod>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4b60      	ldr	r3, [pc, #384]	@ (8002454 <UART_SetConfig+0x4e4>)
 80022d2:	fba3 2302 	umull	r2, r3, r3, r2
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	011c      	lsls	r4, r3, #4
 80022da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022de:	2200      	movs	r2, #0
 80022e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80022ec:	4642      	mov	r2, r8
 80022ee:	464b      	mov	r3, r9
 80022f0:	1891      	adds	r1, r2, r2
 80022f2:	61b9      	str	r1, [r7, #24]
 80022f4:	415b      	adcs	r3, r3
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fc:	4641      	mov	r1, r8
 80022fe:	1851      	adds	r1, r2, r1
 8002300:	6139      	str	r1, [r7, #16]
 8002302:	4649      	mov	r1, r9
 8002304:	414b      	adcs	r3, r1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002314:	4659      	mov	r1, fp
 8002316:	00cb      	lsls	r3, r1, #3
 8002318:	4651      	mov	r1, sl
 800231a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231e:	4651      	mov	r1, sl
 8002320:	00ca      	lsls	r2, r1, #3
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	4603      	mov	r3, r0
 8002328:	4642      	mov	r2, r8
 800232a:	189b      	adds	r3, r3, r2
 800232c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002330:	464b      	mov	r3, r9
 8002332:	460a      	mov	r2, r1
 8002334:	eb42 0303 	adc.w	r3, r2, r3
 8002338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002346:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002354:	4649      	mov	r1, r9
 8002356:	008b      	lsls	r3, r1, #2
 8002358:	4641      	mov	r1, r8
 800235a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800235e:	4641      	mov	r1, r8
 8002360:	008a      	lsls	r2, r1, #2
 8002362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002366:	f7fd ff37 	bl	80001d8 <__aeabi_uldivmod>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4611      	mov	r1, r2
 8002370:	4b38      	ldr	r3, [pc, #224]	@ (8002454 <UART_SetConfig+0x4e4>)
 8002372:	fba3 2301 	umull	r2, r3, r3, r1
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2264      	movs	r2, #100	@ 0x64
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	1acb      	subs	r3, r1, r3
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	3332      	adds	r3, #50	@ 0x32
 8002384:	4a33      	ldr	r2, [pc, #204]	@ (8002454 <UART_SetConfig+0x4e4>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002390:	441c      	add	r4, r3
 8002392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002396:	2200      	movs	r2, #0
 8002398:	673b      	str	r3, [r7, #112]	@ 0x70
 800239a:	677a      	str	r2, [r7, #116]	@ 0x74
 800239c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023a0:	4642      	mov	r2, r8
 80023a2:	464b      	mov	r3, r9
 80023a4:	1891      	adds	r1, r2, r2
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	415b      	adcs	r3, r3
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b0:	4641      	mov	r1, r8
 80023b2:	1851      	adds	r1, r2, r1
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	4649      	mov	r1, r9
 80023b8:	414b      	adcs	r3, r1
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023c8:	4659      	mov	r1, fp
 80023ca:	00cb      	lsls	r3, r1, #3
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d2:	4651      	mov	r1, sl
 80023d4:	00ca      	lsls	r2, r1, #3
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	4642      	mov	r2, r8
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023e2:	464b      	mov	r3, r9
 80023e4:	460a      	mov	r2, r1
 80023e6:	eb42 0303 	adc.w	r3, r2, r3
 80023ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80023f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002404:	4649      	mov	r1, r9
 8002406:	008b      	lsls	r3, r1, #2
 8002408:	4641      	mov	r1, r8
 800240a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800240e:	4641      	mov	r1, r8
 8002410:	008a      	lsls	r2, r1, #2
 8002412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002416:	f7fd fedf 	bl	80001d8 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <UART_SetConfig+0x4e4>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	3332      	adds	r3, #50	@ 0x32
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <UART_SetConfig+0x4e4>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	f003 020f 	and.w	r2, r3, #15
 800243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4422      	add	r2, r4
 8002446:	609a      	str	r2, [r3, #8]
}
 8002448:	bf00      	nop
 800244a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800244e:	46bd      	mov	sp, r7
 8002450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002454:	51eb851f 	.word	0x51eb851f

08002458 <lcd_reset>:
#define	DC_C()		HAL_GPIO_WritePin(LCD_DC_Port, LCD_DC_Pin, LOW)
#define	DC_D()		HAL_GPIO_WritePin(LCD_DC_Port, LCD_DC_Pin, HIGH)
#define	CS_LOW()	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, LOW)
#define	CS_HIGH()	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, HIGH)

void lcd_reset(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_Port, LCD_RST_Pin, LOW);
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	@ 0x80
 8002460:	4807      	ldr	r0, [pc, #28]	@ (8002480 <lcd_reset+0x28>)
 8002462:	f7fe fdd9 	bl	8001018 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8002466:	20fa      	movs	r0, #250	@ 0xfa
 8002468:	f7fe fb48 	bl	8000afc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_Port, LCD_RST_Pin, HIGH);
 800246c:	2201      	movs	r2, #1
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	4803      	ldr	r0, [pc, #12]	@ (8002480 <lcd_reset+0x28>)
 8002472:	f7fe fdd1 	bl	8001018 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8002476:	20fa      	movs	r0, #250	@ 0xfa
 8002478:	f7fe fb40 	bl	8000afc <HAL_Delay>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40020800 	.word	0x40020800

08002484 <lcd_write_cmd>:

void lcd_write_cmd(uint8_t cmd) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0x00;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
	DC_C();
 8002492:	2200      	movs	r2, #0
 8002494:	2140      	movs	r1, #64	@ 0x40
 8002496:	480a      	ldr	r0, [pc, #40]	@ (80024c0 <lcd_write_cmd+0x3c>)
 8002498:	f7fe fdbe 	bl	8001018 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 800249c:	f107 010f 	add.w	r1, r7, #15
 80024a0:	2364      	movs	r3, #100	@ 0x64
 80024a2:	2201      	movs	r2, #1
 80024a4:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <lcd_write_cmd+0x40>)
 80024a6:	f7ff faf2 	bl	8001a8e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80024aa:	1df9      	adds	r1, r7, #7
 80024ac:	2364      	movs	r3, #100	@ 0x64
 80024ae:	2201      	movs	r2, #1
 80024b0:	4804      	ldr	r0, [pc, #16]	@ (80024c4 <lcd_write_cmd+0x40>)
 80024b2:	f7ff faec 	bl	8001a8e <HAL_SPI_Transmit>

}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40020400 	.word	0x40020400
 80024c4:	20000028 	.word	0x20000028

080024c8 <lcd_write_8data>:

void lcd_write_8data(uint8_t *buf, uint16_t len) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
	uint8_t temp = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
	DC_D();
 80024d8:	2201      	movs	r2, #1
 80024da:	2140      	movs	r1, #64	@ 0x40
 80024dc:	480e      	ldr	r0, [pc, #56]	@ (8002518 <lcd_write_8data+0x50>)
 80024de:	f7fe fd9b 	bl	8001018 <HAL_GPIO_WritePin>
	while (len--) {
 80024e2:	e00f      	b.n	8002504 <lcd_write_8data+0x3c>
		HAL_SPI_Transmit(&hspi1, &temp, 1, 100);
 80024e4:	f107 010f 	add.w	r1, r7, #15
 80024e8:	2364      	movs	r3, #100	@ 0x64
 80024ea:	2201      	movs	r2, #1
 80024ec:	480b      	ldr	r0, [pc, #44]	@ (800251c <lcd_write_8data+0x54>)
 80024ee:	f7ff face 	bl	8001a8e <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 80024f2:	2364      	movs	r3, #100	@ 0x64
 80024f4:	2201      	movs	r2, #1
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4808      	ldr	r0, [pc, #32]	@ (800251c <lcd_write_8data+0x54>)
 80024fa:	f7ff fac8 	bl	8001a8e <HAL_SPI_Transmit>
		buf++;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3301      	adds	r3, #1
 8002502:	607b      	str	r3, [r7, #4]
	while (len--) {
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	807a      	strh	r2, [r7, #2]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ea      	bne.n	80024e4 <lcd_write_8data+0x1c>
	}
}
 800250e:	bf00      	nop
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40020400 	.word	0x40020400
 800251c:	20000028 	.word	0x20000028

08002520 <lcd_config>:
		HAL_SPI_Transmit(&hspi1, data_buf, 2, HAL_MAX_DELAY);
		ptr++;
	}
}

void lcd_config(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0

	uint8_t para[20] = { 0 };
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]

	lcd_reset();
 8002538:	f7ff ff8e 	bl	8002458 <lcd_reset>

	CS_LOW();
 800253c:	2200      	movs	r2, #0
 800253e:	2110      	movs	r1, #16
 8002540:	4890      	ldr	r0, [pc, #576]	@ (8002784 <lcd_config+0x264>)
 8002542:	f7fe fd69 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_SWRST); // SW reset
 8002546:	2001      	movs	r0, #1
 8002548:	f7ff ff9c 	bl	8002484 <lcd_write_cmd>
	CS_HIGH();
 800254c:	2201      	movs	r2, #1
 800254e:	2110      	movs	r1, #16
 8002550:	488c      	ldr	r0, [pc, #560]	@ (8002784 <lcd_config+0x264>)
 8002552:	f7fe fd61 	bl	8001018 <HAL_GPIO_WritePin>

	HAL_Delay(250);
 8002556:	20fa      	movs	r0, #250	@ 0xfa
 8002558:	f7fe fad0 	bl	8000afc <HAL_Delay>

	CS_LOW();
 800255c:	2200      	movs	r2, #0
 800255e:	2110      	movs	r1, #16
 8002560:	4888      	ldr	r0, [pc, #544]	@ (8002784 <lcd_config+0x264>)
 8002562:	f7fe fd59 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_SLPOUT); // Sleep out, also SW reset
 8002566:	2011      	movs	r0, #17
 8002568:	f7ff ff8c 	bl	8002484 <lcd_write_cmd>
	CS_HIGH();
 800256c:	2201      	movs	r2, #1
 800256e:	2110      	movs	r1, #16
 8002570:	4884      	ldr	r0, [pc, #528]	@ (8002784 <lcd_config+0x264>)
 8002572:	f7fe fd51 	bl	8001018 <HAL_GPIO_WritePin>

	HAL_Delay(250);
 8002576:	20fa      	movs	r0, #250	@ 0xfa
 8002578:	f7fe fac0 	bl	8000afc <HAL_Delay>

	para[0] = TFT_PIX_FMT_16BIT;
 800257c:	2355      	movs	r3, #85	@ 0x55
 800257e:	713b      	strb	r3, [r7, #4]
	CS_LOW();
 8002580:	2200      	movs	r2, #0
 8002582:	2110      	movs	r1, #16
 8002584:	487f      	ldr	r0, [pc, #508]	@ (8002784 <lcd_config+0x264>)
 8002586:	f7fe fd47 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_PIX_FMT); //Set Pixel Format Value
 800258a:	203a      	movs	r0, #58	@ 0x3a
 800258c:	f7ff ff7a 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 1); //Set 16bit Pixel Format
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff97 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 800259a:	2201      	movs	r2, #1
 800259c:	2110      	movs	r1, #16
 800259e:	4879      	ldr	r0, [pc, #484]	@ (8002784 <lcd_config+0x264>)
 80025a0:	f7fe fd3a 	bl	8001018 <HAL_GPIO_WritePin>

	// By default is also same
	para[0] = 0x0E; //                          0001.0111   ... VRH1
 80025a4:	230e      	movs	r3, #14
 80025a6:	713b      	strb	r3, [r7, #4]
	para[1] = 0x0E; //                          0001.0101   ... VRH2
 80025a8:	230e      	movs	r3, #14
 80025aa:	717b      	strb	r3, [r7, #5]
	CS_LOW();
 80025ac:	2200      	movs	r2, #0
 80025ae:	2110      	movs	r1, #16
 80025b0:	4874      	ldr	r0, [pc, #464]	@ (8002784 <lcd_config+0x264>)
 80025b2:	f7fe fd31 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_PWRCTRL1); //Set Power Control 1
 80025b6:	20c0      	movs	r0, #192	@ 0xc0
 80025b8:	f7ff ff64 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 2);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2102      	movs	r1, #2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff81 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 80025c6:	2201      	movs	r2, #1
 80025c8:	2110      	movs	r1, #16
 80025ca:	486e      	ldr	r0, [pc, #440]	@ (8002784 <lcd_config+0x264>)
 80025cc:	f7fe fd24 	bl	8001018 <HAL_GPIO_WritePin>

	para[0] = 0x41; //                          0100.0001   . SAP BT
 80025d0:	2341      	movs	r3, #65	@ 0x41
 80025d2:	713b      	strb	r3, [r7, #4]
	para[1] = 0x00; //                          0000.0000   ..... VC
 80025d4:	2300      	movs	r3, #0
 80025d6:	717b      	strb	r3, [r7, #5]
	CS_LOW();
 80025d8:	2200      	movs	r2, #0
 80025da:	2110      	movs	r1, #16
 80025dc:	4869      	ldr	r0, [pc, #420]	@ (8002784 <lcd_config+0x264>)
 80025de:	f7fe fd1b 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_PWRCTRL2); //                          1100.0001 Power Control 2
 80025e2:	20c1      	movs	r0, #193	@ 0xc1
 80025e4:	f7ff ff4e 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 2);
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2102      	movs	r1, #2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff6b 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 80025f2:	2201      	movs	r2, #1
 80025f4:	2110      	movs	r1, #16
 80025f6:	4863      	ldr	r0, [pc, #396]	@ (8002784 <lcd_config+0x264>)
 80025f8:	f7fe fd0e 	bl	8001018 <HAL_GPIO_WritePin>

	para[0] = 0x55; //     nb. was 0x44         0101.0101   . DCA1 . DCA0
 80025fc:	2355      	movs	r3, #85	@ 0x55
 80025fe:	713b      	strb	r3, [r7, #4]
	CS_LOW();
 8002600:	2200      	movs	r2, #0
 8002602:	2110      	movs	r1, #16
 8002604:	485f      	ldr	r0, [pc, #380]	@ (8002784 <lcd_config+0x264>)
 8002606:	f7fe fd07 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_PWRCTRL3); //                          1100.0010 Power Control 3
 800260a:	20c2      	movs	r0, #194	@ 0xc2
 800260c:	f7ff ff3a 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 1);
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff57 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 800261a:	2201      	movs	r2, #1
 800261c:	2110      	movs	r1, #16
 800261e:	4859      	ldr	r0, [pc, #356]	@ (8002784 <lcd_config+0x264>)
 8002620:	f7fe fcfa 	bl	8001018 <HAL_GPIO_WritePin>

	para[0] = 0x00;
 8002624:	2300      	movs	r3, #0
 8002626:	713b      	strb	r3, [r7, #4]
	para[1] = 0x00;
 8002628:	2300      	movs	r3, #0
 800262a:	717b      	strb	r3, [r7, #5]
	para[2] = 0x00;
 800262c:	2300      	movs	r3, #0
 800262e:	71bb      	strb	r3, [r7, #6]
	para[3] = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	71fb      	strb	r3, [r7, #7]
	CS_LOW();
 8002634:	2200      	movs	r2, #0
 8002636:	2110      	movs	r1, #16
 8002638:	4852      	ldr	r0, [pc, #328]	@ (8002784 <lcd_config+0x264>)
 800263a:	f7fe fced 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_VCOM_CTRL);
 800263e:	20c5      	movs	r0, #197	@ 0xc5
 8002640:	f7ff ff20 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 4);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	2104      	movs	r1, #4
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff3d 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 800264e:	2201      	movs	r2, #1
 8002650:	2110      	movs	r1, #16
 8002652:	484c      	ldr	r0, [pc, #304]	@ (8002784 <lcd_config+0x264>)
 8002654:	f7fe fce0 	bl	8001018 <HAL_GPIO_WritePin>

	para[0] = 0x0F;
 8002658:	230f      	movs	r3, #15
 800265a:	713b      	strb	r3, [r7, #4]
	para[1] = 0x1F;
 800265c:	231f      	movs	r3, #31
 800265e:	717b      	strb	r3, [r7, #5]
	para[2] = 0x1C;
 8002660:	231c      	movs	r3, #28
 8002662:	71bb      	strb	r3, [r7, #6]
	para[3] = 0x0C;
 8002664:	230c      	movs	r3, #12
 8002666:	71fb      	strb	r3, [r7, #7]
	para[4] = 0x0F;
 8002668:	230f      	movs	r3, #15
 800266a:	723b      	strb	r3, [r7, #8]
	para[5] = 0x08;
 800266c:	2308      	movs	r3, #8
 800266e:	727b      	strb	r3, [r7, #9]
	para[6] = 0x48;
 8002670:	2348      	movs	r3, #72	@ 0x48
 8002672:	72bb      	strb	r3, [r7, #10]
	para[7] = 0x98;
 8002674:	2398      	movs	r3, #152	@ 0x98
 8002676:	72fb      	strb	r3, [r7, #11]
	para[8] = 0x37;
 8002678:	2337      	movs	r3, #55	@ 0x37
 800267a:	733b      	strb	r3, [r7, #12]
	para[9] = 0x0A;
 800267c:	230a      	movs	r3, #10
 800267e:	737b      	strb	r3, [r7, #13]
	para[10] = 0x13;
 8002680:	2313      	movs	r3, #19
 8002682:	73bb      	strb	r3, [r7, #14]
	para[11] = 0x04;
 8002684:	2304      	movs	r3, #4
 8002686:	73fb      	strb	r3, [r7, #15]
	para[12] = 0x11;
 8002688:	2311      	movs	r3, #17
 800268a:	743b      	strb	r3, [r7, #16]
	para[13] = 0x0D;
 800268c:	230d      	movs	r3, #13
 800268e:	747b      	strb	r3, [r7, #17]
	para[14] = 0x00;
 8002690:	2300      	movs	r3, #0
 8002692:	74bb      	strb	r3, [r7, #18]
	CS_LOW();
 8002694:	2200      	movs	r2, #0
 8002696:	2110      	movs	r1, #16
 8002698:	483a      	ldr	r0, [pc, #232]	@ (8002784 <lcd_config+0x264>)
 800269a:	f7fe fcbd 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_PGAMCTRL);
 800269e:	20e0      	movs	r0, #224	@ 0xe0
 80026a0:	f7ff fef0 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 15);
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	210f      	movs	r1, #15
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff0d 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 80026ae:	2201      	movs	r2, #1
 80026b0:	2110      	movs	r1, #16
 80026b2:	4834      	ldr	r0, [pc, #208]	@ (8002784 <lcd_config+0x264>)
 80026b4:	f7fe fcb0 	bl	8001018 <HAL_GPIO_WritePin>

	para[0] = 0x0F;
 80026b8:	230f      	movs	r3, #15
 80026ba:	713b      	strb	r3, [r7, #4]
	para[1] = 0x32;
 80026bc:	2332      	movs	r3, #50	@ 0x32
 80026be:	717b      	strb	r3, [r7, #5]
	para[2] = 0x2E;
 80026c0:	232e      	movs	r3, #46	@ 0x2e
 80026c2:	71bb      	strb	r3, [r7, #6]
	para[3] = 0x0B;
 80026c4:	230b      	movs	r3, #11
 80026c6:	71fb      	strb	r3, [r7, #7]
	para[4] = 0x0D;
 80026c8:	230d      	movs	r3, #13
 80026ca:	723b      	strb	r3, [r7, #8]
	para[5] = 0x05;
 80026cc:	2305      	movs	r3, #5
 80026ce:	727b      	strb	r3, [r7, #9]
	para[6] = 0x47;
 80026d0:	2347      	movs	r3, #71	@ 0x47
 80026d2:	72bb      	strb	r3, [r7, #10]
	para[7] = 0x75;
 80026d4:	2375      	movs	r3, #117	@ 0x75
 80026d6:	72fb      	strb	r3, [r7, #11]
	para[8] = 0x37;
 80026d8:	2337      	movs	r3, #55	@ 0x37
 80026da:	733b      	strb	r3, [r7, #12]
	para[9] = 0x06;
 80026dc:	2306      	movs	r3, #6
 80026de:	737b      	strb	r3, [r7, #13]
	para[10] = 0x10;
 80026e0:	2310      	movs	r3, #16
 80026e2:	73bb      	strb	r3, [r7, #14]
	para[11] = 0x03;
 80026e4:	2303      	movs	r3, #3
 80026e6:	73fb      	strb	r3, [r7, #15]
	para[12] = 0x24;
 80026e8:	2324      	movs	r3, #36	@ 0x24
 80026ea:	743b      	strb	r3, [r7, #16]
	para[13] = 0x20;
 80026ec:	2320      	movs	r3, #32
 80026ee:	747b      	strb	r3, [r7, #17]
	para[14] = 0x00;
 80026f0:	2300      	movs	r3, #0
 80026f2:	74bb      	strb	r3, [r7, #18]
	CS_LOW();
 80026f4:	2200      	movs	r2, #0
 80026f6:	2110      	movs	r1, #16
 80026f8:	4822      	ldr	r0, [pc, #136]	@ (8002784 <lcd_config+0x264>)
 80026fa:	f7fe fc8d 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_NGAMCTRL);
 80026fe:	20e1      	movs	r0, #225	@ 0xe1
 8002700:	f7ff fec0 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 15);
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	210f      	movs	r1, #15
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fedd 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 800270e:	2201      	movs	r2, #1
 8002710:	2110      	movs	r1, #16
 8002712:	481c      	ldr	r0, [pc, #112]	@ (8002784 <lcd_config+0x264>)
 8002714:	f7fe fc80 	bl	8001018 <HAL_GPIO_WritePin>

	CS_LOW();
 8002718:	2200      	movs	r2, #0
 800271a:	2110      	movs	r1, #16
 800271c:	4819      	ldr	r0, [pc, #100]	@ (8002784 <lcd_config+0x264>)
 800271e:	f7fe fc7b 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_INVOFF); //Display Inversion OFF
 8002722:	2020      	movs	r0, #32
 8002724:	f7ff feae 	bl	8002484 <lcd_write_cmd>
	CS_HIGH();
 8002728:	2201      	movs	r2, #1
 800272a:	2110      	movs	r1, #16
 800272c:	4815      	ldr	r0, [pc, #84]	@ (8002784 <lcd_config+0x264>)
 800272e:	f7fe fc73 	bl	8001018 <HAL_GPIO_WritePin>

	para[0] = (TFT_MAD_MX | TFT_MAD_BGR); // Set MX = 1, BGR = 1
 8002732:	2348      	movs	r3, #72	@ 0x48
 8002734:	713b      	strb	r3, [r7, #4]
	CS_LOW();
 8002736:	2200      	movs	r2, #0
 8002738:	2110      	movs	r1, #16
 800273a:	4812      	ldr	r0, [pc, #72]	@ (8002784 <lcd_config+0x264>)
 800273c:	f7fe fc6c 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_MADCTL); //Set Memory Access Control
 8002740:	2036      	movs	r0, #54	@ 0x36
 8002742:	f7ff fe9f 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(para, 1);
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2101      	movs	r1, #1
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff febc 	bl	80024c8 <lcd_write_8data>
	CS_HIGH();
 8002750:	2201      	movs	r2, #1
 8002752:	2110      	movs	r1, #16
 8002754:	480b      	ldr	r0, [pc, #44]	@ (8002784 <lcd_config+0x264>)
 8002756:	f7fe fc5f 	bl	8001018 <HAL_GPIO_WritePin>

	CS_LOW();
 800275a:	2200      	movs	r2, #0
 800275c:	2110      	movs	r1, #16
 800275e:	4809      	ldr	r0, [pc, #36]	@ (8002784 <lcd_config+0x264>)
 8002760:	f7fe fc5a 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_write_cmd(TFT_DISPLAY_ON); // display on
 8002764:	2029      	movs	r0, #41	@ 0x29
 8002766:	f7ff fe8d 	bl	8002484 <lcd_write_cmd>
	CS_HIGH();
 800276a:	2201      	movs	r2, #1
 800276c:	2110      	movs	r1, #16
 800276e:	4805      	ldr	r0, [pc, #20]	@ (8002784 <lcd_config+0x264>)
 8002770:	f7fe fc52 	bl	8001018 <HAL_GPIO_WritePin>

	HAL_Delay(150);
 8002774:	2096      	movs	r0, #150	@ 0x96
 8002776:	f7fe f9c1 	bl	8000afc <HAL_Delay>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40020000 	.word	0x40020000

08002788 <lcd_set_display_area>:

void lcd_set_display_area(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2) {
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	4604      	mov	r4, r0
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4623      	mov	r3, r4
 8002798:	80fb      	strh	r3, [r7, #6]
 800279a:	4603      	mov	r3, r0
 800279c:	80bb      	strh	r3, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	807b      	strh	r3, [r7, #2]
 80027a2:	4613      	mov	r3, r2
 80027a4:	803b      	strh	r3, [r7, #0]
	uint8_t params[4];
	/*Column address set(2Ah) */
	x2--;
 80027a6:	88bb      	ldrh	r3, [r7, #4]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	80bb      	strh	r3, [r7, #4]
	y2--;
 80027ac:	883b      	ldrh	r3, [r7, #0]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	803b      	strh	r3, [r7, #0]
	params[0] = (uint8_t) ((x1 >> 8) & 0xFF);
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	733b      	strb	r3, [r7, #12]
	params[1] = (uint8_t) (x1 & 0xFF);
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	737b      	strb	r3, [r7, #13]
	params[2] = (uint8_t) ((x2 >> 8) & 0xFF);
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	73bb      	strb	r3, [r7, #14]
	params[3] = (uint8_t) (x2 & 0xFF);
 80027cc:	88bb      	ldrh	r3, [r7, #4]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(TFT_CASET);
 80027d2:	202a      	movs	r0, #42	@ 0x2a
 80027d4:	f7ff fe56 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(params, 4);
 80027d8:	f107 030c 	add.w	r3, r7, #12
 80027dc:	2104      	movs	r1, #4
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe72 	bl	80024c8 <lcd_write_8data>

	params[0] = (uint8_t) ((y1 >> 8) & 0xFF);
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	733b      	strb	r3, [r7, #12]
	params[1] = (uint8_t) (y1 & 0xFF);
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	737b      	strb	r3, [r7, #13]
	params[2] = (uint8_t) ((y2 >> 8) & 0xFF);
 80027f4:	883b      	ldrh	r3, [r7, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	73bb      	strb	r3, [r7, #14]
	params[3] = (uint8_t) (y2 & 0xFF);
 80027fe:	883b      	ldrh	r3, [r7, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(TFT_PASET);
 8002804:	202b      	movs	r0, #43	@ 0x2b
 8002806:	f7ff fe3d 	bl	8002484 <lcd_write_cmd>
	lcd_write_8data(params, 4);
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	2104      	movs	r1, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fe59 	bl	80024c8 <lcd_write_8data>

	lcd_write_cmd(TFT_RAMWR);
 8002816:	202c      	movs	r0, #44	@ 0x2c
 8002818:	f7ff fe34 	bl	8002484 <lcd_write_cmd>
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bd90      	pop	{r4, r7, pc}

08002824 <lcd_setbackgroundcolor>:
	g = (rgb888 >> 10) & 0x3FU;
	b = (rgb888 >> 3) & 0x1FU;
	return (uint16_t) ((r << 11) | (g << 5) | b);
}

void lcd_setbackgroundcolor(uint16_t color) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
	uint8_t pixel[] = { color >> 8, color & 0xFF };
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	b29b      	uxth	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	723b      	strb	r3, [r7, #8]
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	727b      	strb	r3, [r7, #9]
	CS_LOW();
 800283e:	2200      	movs	r2, #0
 8002840:	2110      	movs	r1, #16
 8002842:	4815      	ldr	r0, [pc, #84]	@ (8002898 <lcd_setbackgroundcolor+0x74>)
 8002844:	f7fe fbe8 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_set_display_area(0, TFT_WIDTH, 0, TFT_HEIGHT);
 8002848:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800284c:	2200      	movs	r2, #0
 800284e:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff ff98 	bl	8002788 <lcd_set_display_area>

	DC_D();
 8002858:	2201      	movs	r2, #1
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	480f      	ldr	r0, [pc, #60]	@ (800289c <lcd_setbackgroundcolor+0x78>)
 800285e:	f7fe fbdb 	bl	8001018 <HAL_GPIO_WritePin>
	for (int i = 0; i < (TFT_WIDTH * TFT_HEIGHT); i++) {
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e009      	b.n	800287c <lcd_setbackgroundcolor+0x58>
		HAL_SPI_Transmit(&hspi1, pixel, 2, 100);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	2364      	movs	r3, #100	@ 0x64
 800286e:	2202      	movs	r2, #2
 8002870:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <lcd_setbackgroundcolor+0x7c>)
 8002872:	f7ff f90c 	bl	8001a8e <HAL_SPI_Transmit>
	for (int i = 0; i < (TFT_WIDTH * TFT_HEIGHT); i++) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f5b3 3f16 	cmp.w	r3, #153600	@ 0x25800
 8002882:	dbf1      	blt.n	8002868 <lcd_setbackgroundcolor+0x44>
	}
	CS_HIGH();
 8002884:	2201      	movs	r2, #1
 8002886:	2110      	movs	r1, #16
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <lcd_setbackgroundcolor+0x74>)
 800288a:	f7fe fbc5 	bl	8001018 <HAL_GPIO_WritePin>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40020000 	.word	0x40020000
 800289c:	40020400 	.word	0x40020400
 80028a0:	20000028 	.word	0x20000028

080028a4 <lcd_FillRectangle>:

void lcd_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t color) {
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	80fb      	strh	r3, [r7, #6]
 80028b6:	4603      	mov	r3, r0
 80028b8:	80bb      	strh	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	803b      	strh	r3, [r7, #0]
	// clipping
	if ((x >= TFT_WIDTH) || (y >= TFT_HEIGHT))
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028c8:	d24f      	bcs.n	800296a <lcd_FillRectangle+0xc6>
 80028ca:	88bb      	ldrh	r3, [r7, #4]
 80028cc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80028d0:	d24b      	bcs.n	800296a <lcd_FillRectangle+0xc6>
		return;
	if ((x + w - 1) >= TFT_WIDTH)
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4413      	add	r3, r2
 80028d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028dc:	dd03      	ble.n	80028e6 <lcd_FillRectangle+0x42>
		w = TFT_HEIGHT - x;
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80028e4:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= TFT_WIDTH)
 80028e6:	88ba      	ldrh	r2, [r7, #4]
 80028e8:	883b      	ldrh	r3, [r7, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028f0:	dd03      	ble.n	80028fa <lcd_FillRectangle+0x56>
		h = TFT_HEIGHT - y;
 80028f2:	88bb      	ldrh	r3, [r7, #4]
 80028f4:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80028f8:	803b      	strh	r3, [r7, #0]

//  Prepare whole line in a single buffer
	uint8_t pixel[] = { color >> 8, color & 0xFF };
 80028fa:	8c3b      	ldrh	r3, [r7, #32]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	b29b      	uxth	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	733b      	strb	r3, [r7, #12]
 8002904:	8c3b      	ldrh	r3, [r7, #32]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	737b      	strb	r3, [r7, #13]

	CS_LOW();
 800290a:	2200      	movs	r2, #0
 800290c:	2110      	movs	r1, #16
 800290e:	4819      	ldr	r0, [pc, #100]	@ (8002974 <lcd_FillRectangle+0xd0>)
 8002910:	f7fe fb82 	bl	8001018 <HAL_GPIO_WritePin>
	lcd_set_display_area(x, x + w, y, y + h);
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	4413      	add	r3, r2
 800291a:	b299      	uxth	r1, r3
 800291c:	88ba      	ldrh	r2, [r7, #4]
 800291e:	883b      	ldrh	r3, [r7, #0]
 8002920:	4413      	add	r3, r2
 8002922:	b29b      	uxth	r3, r3
 8002924:	88ba      	ldrh	r2, [r7, #4]
 8002926:	88f8      	ldrh	r0, [r7, #6]
 8002928:	f7ff ff2e 	bl	8002788 <lcd_set_display_area>

	DC_D();
 800292c:	2201      	movs	r2, #1
 800292e:	2140      	movs	r1, #64	@ 0x40
 8002930:	4811      	ldr	r0, [pc, #68]	@ (8002978 <lcd_FillRectangle+0xd4>)
 8002932:	f7fe fb71 	bl	8001018 <HAL_GPIO_WritePin>
	for (x = 0; x < w * h; ++x) {
 8002936:	2300      	movs	r3, #0
 8002938:	80fb      	strh	r3, [r7, #6]
 800293a:	e009      	b.n	8002950 <lcd_FillRectangle+0xac>
		HAL_SPI_Transmit(&hspi1, pixel, 2, 100);
 800293c:	f107 010c 	add.w	r1, r7, #12
 8002940:	2364      	movs	r3, #100	@ 0x64
 8002942:	2202      	movs	r2, #2
 8002944:	480d      	ldr	r0, [pc, #52]	@ (800297c <lcd_FillRectangle+0xd8>)
 8002946:	f7ff f8a2 	bl	8001a8e <HAL_SPI_Transmit>
	for (x = 0; x < w * h; ++x) {
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	3301      	adds	r3, #1
 800294e:	80fb      	strh	r3, [r7, #6]
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	8839      	ldrh	r1, [r7, #0]
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	429a      	cmp	r2, r3
 800295c:	dbee      	blt.n	800293c <lcd_FillRectangle+0x98>
	}
	CS_HIGH();
 800295e:	2201      	movs	r2, #1
 8002960:	2110      	movs	r1, #16
 8002962:	4804      	ldr	r0, [pc, #16]	@ (8002974 <lcd_FillRectangle+0xd0>)
 8002964:	f7fe fb58 	bl	8001018 <HAL_GPIO_WritePin>
 8002968:	e000      	b.n	800296c <lcd_FillRectangle+0xc8>
		return;
 800296a:	bf00      	nop
}
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	20000028 	.word	0x20000028

08002980 <memset>:
 8002980:	4402      	add	r2, r0
 8002982:	4603      	mov	r3, r0
 8002984:	4293      	cmp	r3, r2
 8002986:	d100      	bne.n	800298a <memset+0xa>
 8002988:	4770      	bx	lr
 800298a:	f803 1b01 	strb.w	r1, [r3], #1
 800298e:	e7f9      	b.n	8002984 <memset+0x4>

08002990 <__libc_init_array>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4d0d      	ldr	r5, [pc, #52]	@ (80029c8 <__libc_init_array+0x38>)
 8002994:	4c0d      	ldr	r4, [pc, #52]	@ (80029cc <__libc_init_array+0x3c>)
 8002996:	1b64      	subs	r4, r4, r5
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	2600      	movs	r6, #0
 800299c:	42a6      	cmp	r6, r4
 800299e:	d109      	bne.n	80029b4 <__libc_init_array+0x24>
 80029a0:	4d0b      	ldr	r5, [pc, #44]	@ (80029d0 <__libc_init_array+0x40>)
 80029a2:	4c0c      	ldr	r4, [pc, #48]	@ (80029d4 <__libc_init_array+0x44>)
 80029a4:	f000 f818 	bl	80029d8 <_init>
 80029a8:	1b64      	subs	r4, r4, r5
 80029aa:	10a4      	asrs	r4, r4, #2
 80029ac:	2600      	movs	r6, #0
 80029ae:	42a6      	cmp	r6, r4
 80029b0:	d105      	bne.n	80029be <__libc_init_array+0x2e>
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b8:	4798      	blx	r3
 80029ba:	3601      	adds	r6, #1
 80029bc:	e7ee      	b.n	800299c <__libc_init_array+0xc>
 80029be:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c2:	4798      	blx	r3
 80029c4:	3601      	adds	r6, #1
 80029c6:	e7f2      	b.n	80029ae <__libc_init_array+0x1e>
 80029c8:	08002a10 	.word	0x08002a10
 80029cc:	08002a10 	.word	0x08002a10
 80029d0:	08002a10 	.word	0x08002a10
 80029d4:	08002a14 	.word	0x08002a14

080029d8 <_init>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	bf00      	nop
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr

080029e4 <_fini>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	bf00      	nop
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr
