
TFT-LCD_Driver_LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e128  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000370c  0801e2c0  0801e2c0  0001f2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080219cc  080219cc  00023014  2**0
                  CONTENTS
  4 .ARM          00000008  080219cc  080219cc  000229cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080219d4  080219d4  00023014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080219d4  080219d4  000229d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080219d8  080219d8  000229d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080219dc  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010228  20000014  080219f0  00023014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001023c  080219f0  0002323c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006f195  00000000  00000000  00023044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d455  00000000  00000000  000921d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038c8  00000000  00000000  0009f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002d88  00000000  00000000  000a2ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000308e7  00000000  00000000  000a5c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0009fe10  00000000  00000000  000d6567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0256  00000000  00000000  00176377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002165cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ec10  00000000  00000000  00216610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00225220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0801e2a8 	.word	0x0801e2a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	0801e2a8 	.word	0x0801e2a8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b2a      	ldr	r3, [pc, #168]	@ (800058c <MX_GPIO_Init+0xc4>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a29      	ldr	r2, [pc, #164]	@ (800058c <MX_GPIO_Init+0xc4>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b27      	ldr	r3, [pc, #156]	@ (800058c <MX_GPIO_Init+0xc4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b23      	ldr	r3, [pc, #140]	@ (800058c <MX_GPIO_Init+0xc4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a22      	ldr	r2, [pc, #136]	@ (800058c <MX_GPIO_Init+0xc4>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b20      	ldr	r3, [pc, #128]	@ (800058c <MX_GPIO_Init+0xc4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <MX_GPIO_Init+0xc4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a1b      	ldr	r2, [pc, #108]	@ (800058c <MX_GPIO_Init+0xc4>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b19      	ldr	r3, [pc, #100]	@ (800058c <MX_GPIO_Init+0xc4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <MX_GPIO_Init+0xc8>)
 8000538:	f000 fcc2 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f240 4107 	movw	r1, #1031	@ 0x407
 8000542:	4814      	ldr	r0, [pc, #80]	@ (8000594 <MX_GPIO_Init+0xcc>)
 8000544:	f000 fcbc 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000548:	2310      	movs	r3, #16
 800054a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	4619      	mov	r1, r3
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <MX_GPIO_Init+0xc8>)
 8000560:	f000 fb2a 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000564:	f240 4307 	movw	r3, #1031	@ 0x407
 8000568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <MX_GPIO_Init+0xcc>)
 800057e:	f000 fb1b 	bl	8000bb8 <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000
 8000594:	40020400 	.word	0x40020400

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 f990 	bl	80008c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f80e 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f7ff ff90 	bl	80004c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a8:	f000 f878 	bl	800069c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
lcd_config();
 80005ac:	f001 fbf2 	bl	8001d94 <lcd_config>
lcd_setbackgroundcolor(ILI9486_PURPLE);
 80005b0:	f647 000f 	movw	r0, #30735	@ 0x780f
 80005b4:	f001 fd34 	bl	8002020 <lcd_setbackgroundcolor>
lv_init();
 80005b8:	f019 fc4e 	bl	8019e58 <lv_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x24>

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	@ 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f01d fe30 	bl	801e234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	@ (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	@ (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000630:	2319      	movs	r3, #25
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000634:	23c0      	movs	r3, #192	@ 0xc0
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fc55 	bl	8000ef4 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f81e 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2103      	movs	r1, #3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 feb7 	bl	80013e4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800067c:	f000 f808 	bl	8000690 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	@ 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <Error_Handler+0x8>

0800069c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006a2:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <MX_SPI1_Init+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006d0:	2220      	movs	r2, #32
 80006d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006e8:	220a      	movs	r2, #10
 80006ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_SPI1_Init+0x64>)
 80006ee:	f001 f825 	bl	800173c <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f8:	f7ff ffca 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000030 	.word	0x20000030
 8000704:	40013000 	.word	0x40013000

08000708 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a19      	ldr	r2, [pc, #100]	@ (800078c <HAL_SPI_MspInit+0x84>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d12b      	bne.n	8000782 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <HAL_SPI_MspInit+0x88>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000732:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <HAL_SPI_MspInit+0x88>)
 8000734:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000738:	6453      	str	r3, [r2, #68]	@ 0x44
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_SPI_MspInit+0x88>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <HAL_SPI_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a10      	ldr	r2, [pc, #64]	@ (8000790 <HAL_SPI_MspInit+0x88>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <HAL_SPI_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000762:	23e0      	movs	r3, #224	@ 0xe0
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000772:	2305      	movs	r3, #5
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	@ (8000794 <HAL_SPI_MspInit+0x8c>)
 800077e:	f000 fa1b 	bl	8000bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40013000 	.word	0x40013000
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <NMI_Handler+0x4>

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <UsageFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 f891 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000870:	f7ff ffea 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	@ (80008ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	@ (80008b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089a:	f01d fcd3 	bl	801e244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089e:	f7ff fe7b 	bl	8000598 <main>
  bx  lr    
 80008a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008b0:	080219dc 	.word	0x080219dc
  ldr r2, =_sbss
 80008b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008b8:	2001023c 	.word	0x2001023c

080008bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <HAL_Init+0x40>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <HAL_Init+0x40>)
 80008d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	@ (8000900 <HAL_Init+0x40>)
 80008e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f931 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	200f      	movs	r0, #15
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff ff50 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023c00 	.word	0x40023c00

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f93b 	bl	8000b9e <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f000 f911 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	@ (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_IncTick+0x20>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_IncTick+0x24>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <HAL_IncTick+0x24>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008
 8000988:	20000088 	.word	0x20000088

0800098c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b03      	ldr	r3, [pc, #12]	@ (80009a0 <HAL_GetTick+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000088 	.word	0x20000088

080009a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ac:	f7ff ffee 	bl	800098c <HAL_GetTick>
 80009b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d005      	beq.n	80009ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_Delay+0x44>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ca:	bf00      	nop
 80009cc:	f7ff ffde 	bl	800098c <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d8f7      	bhi.n	80009cc <HAL_Delay+0x28>
  {
  }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	@ (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	@ (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	@ 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff47 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff5c 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff ffb0 	bl	8000b0c <SysTick_Config>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e159      	b.n	8000e88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8148 	bne.w	8000e82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d005      	beq.n	8000c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d130      	bne.n	8000c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c40:	2201      	movs	r2, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	f003 0201 	and.w	r2, r3, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d017      	beq.n	8000ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d123      	bne.n	8000cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	08da      	lsrs	r2, r3, #3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3208      	adds	r2, #8
 8000cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	691a      	ldr	r2, [r3, #16]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	69b9      	ldr	r1, [r7, #24]
 8000cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0203 	and.w	r2, r3, #3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80a2 	beq.w	8000e82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b57      	ldr	r3, [pc, #348]	@ (8000ea0 <HAL_GPIO_Init+0x2e8>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a56      	ldr	r2, [pc, #344]	@ (8000ea0 <HAL_GPIO_Init+0x2e8>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b54      	ldr	r3, [pc, #336]	@ (8000ea0 <HAL_GPIO_Init+0x2e8>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5a:	4a52      	ldr	r2, [pc, #328]	@ (8000ea4 <HAL_GPIO_Init+0x2ec>)
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a49      	ldr	r2, [pc, #292]	@ (8000ea8 <HAL_GPIO_Init+0x2f0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d019      	beq.n	8000dba <HAL_GPIO_Init+0x202>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a48      	ldr	r2, [pc, #288]	@ (8000eac <HAL_GPIO_Init+0x2f4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0x1fe>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a47      	ldr	r2, [pc, #284]	@ (8000eb0 <HAL_GPIO_Init+0x2f8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00d      	beq.n	8000db2 <HAL_GPIO_Init+0x1fa>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a46      	ldr	r2, [pc, #280]	@ (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d007      	beq.n	8000dae <HAL_GPIO_Init+0x1f6>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a45      	ldr	r2, [pc, #276]	@ (8000eb8 <HAL_GPIO_Init+0x300>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_GPIO_Init+0x1f2>
 8000da6:	2304      	movs	r3, #4
 8000da8:	e008      	b.n	8000dbc <HAL_GPIO_Init+0x204>
 8000daa:	2307      	movs	r3, #7
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x204>
 8000dae:	2303      	movs	r3, #3
 8000db0:	e004      	b.n	8000dbc <HAL_GPIO_Init+0x204>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x204>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_GPIO_Init+0x204>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	f002 0203 	and.w	r2, r2, #3
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dcc:	4935      	ldr	r1, [pc, #212]	@ (8000ea4 <HAL_GPIO_Init+0x2ec>)
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dda:	4b38      	ldr	r3, [pc, #224]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e28:	4a24      	ldr	r2, [pc, #144]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e52:	4a1a      	ldr	r2, [pc, #104]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <HAL_GPIO_Init+0x304>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3301      	adds	r3, #1
 8000e86:	61fb      	str	r3, [r7, #28]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	f67f aea2 	bls.w	8000bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3724      	adds	r7, #36	@ 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40013800 	.word	0x40013800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e267      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d075      	beq.n	8000ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f12:	4b88      	ldr	r3, [pc, #544]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d00c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1e:	4b85      	ldr	r3, [pc, #532]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d112      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f2a:	4b82      	ldr	r3, [pc, #520]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f36:	d10b      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	4b7e      	ldr	r3, [pc, #504]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05b      	beq.n	8000ffc <HAL_RCC_OscConfig+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d157      	bne.n	8000ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e242      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f58:	d106      	bne.n	8000f68 <HAL_RCC_OscConfig+0x74>
 8000f5a:	4b76      	ldr	r3, [pc, #472]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a75      	ldr	r2, [pc, #468]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01d      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b70      	ldr	r3, [pc, #448]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6f      	ldr	r2, [pc, #444]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a6c      	ldr	r2, [pc, #432]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f8c:	4b69      	ldr	r3, [pc, #420]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a68      	ldr	r2, [pc, #416]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b66      	ldr	r3, [pc, #408]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a65      	ldr	r2, [pc, #404]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fcee 	bl	800098c <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fcea 	bl	800098c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	@ 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e207      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcda 	bl	800098c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fcd6 	bl	800098c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	@ 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1f3      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	4b51      	ldr	r3, [pc, #324]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0xe8>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d063      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800100a:	4b4a      	ldr	r3, [pc, #296]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001016:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800101e:	2b08      	cmp	r3, #8
 8001020:	d11c      	bne.n	800105c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001022:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d116      	bne.n	800105c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <HAL_RCC_OscConfig+0x152>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1c7      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4937      	ldr	r1, [pc, #220]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e03a      	b.n	80010d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d020      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001064:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <HAL_RCC_OscConfig+0x244>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fc8f 	bl	800098c <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fc8b 	bl	800098c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e1a8      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4925      	ldr	r1, [pc, #148]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <HAL_RCC_OscConfig+0x244>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc6e 	bl	800098c <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fc6a 	bl	800098c <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e187      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d036      	beq.n	800114c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d016      	beq.n	8001114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_RCC_OscConfig+0x248>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ec:	f7ff fc4e 	bl	800098c <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f4:	f7ff fc4a 	bl	800098c <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e167      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x200>
 8001112:	e01b      	b.n	800114c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_RCC_OscConfig+0x248>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fc37 	bl	800098c <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	e00e      	b.n	8001140 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001122:	f7ff fc33 	bl	800098c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d907      	bls.n	8001140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e150      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
 8001134:	40023800 	.word	0x40023800
 8001138:	42470000 	.word	0x42470000
 800113c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b88      	ldr	r3, [pc, #544]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ea      	bne.n	8001122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8097 	beq.w	8001288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b81      	ldr	r3, [pc, #516]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b7d      	ldr	r3, [pc, #500]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a7c      	ldr	r2, [pc, #496]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b7a      	ldr	r3, [pc, #488]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001186:	2301      	movs	r3, #1
 8001188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118a:	4b77      	ldr	r3, [pc, #476]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001196:	4b74      	ldr	r3, [pc, #464]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a73      	ldr	r2, [pc, #460]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fbf3 	bl	800098c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff fbef 	bl	800098c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e10c      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x2ea>
 80011d0:	4b64      	ldr	r3, [pc, #400]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d4:	4a63      	ldr	r2, [pc, #396]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6713      	str	r3, [r2, #112]	@ 0x70
 80011dc:	e01c      	b.n	8001218 <HAL_RCC_OscConfig+0x324>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x30c>
 80011e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0x324>
 8001200:	4b58      	ldr	r3, [pc, #352]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001204:	4a57      	ldr	r2, [pc, #348]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	6713      	str	r3, [r2, #112]	@ 0x70
 800120c:	4b55      	ldr	r3, [pc, #340]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001210:	4a54      	ldr	r2, [pc, #336]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d015      	beq.n	800124c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fbb4 	bl	800098c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	e00a      	b.n	800123e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fbb0 	bl	800098c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e0cb      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123e:	4b49      	ldr	r3, [pc, #292]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0ee      	beq.n	8001228 <HAL_RCC_OscConfig+0x334>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fb9e 	bl	800098c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff fb9a 	bl	800098c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e0b5      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	4b3e      	ldr	r3, [pc, #248]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1ee      	bne.n	8001254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127c:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a38      	ldr	r2, [pc, #224]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80a1 	beq.w	80013d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001292:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d05c      	beq.n	8001358 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d141      	bne.n	800132a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a6:	4b31      	ldr	r3, [pc, #196]	@ (800136c <HAL_RCC_OscConfig+0x478>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fb6e 	bl	800098c <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fb6a 	bl	800098c <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e087      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	3b01      	subs	r3, #1
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	491b      	ldr	r1, [pc, #108]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_RCC_OscConfig+0x478>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb43 	bl	800098c <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fb3f 	bl	800098c <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e05c      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x416>
 8001328:	e054      	b.n	80013d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_RCC_OscConfig+0x478>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fb2c 	bl	800098c <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff fb28 	bl	800098c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e045      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x444>
 8001356:	e03d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e038      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000
 800136c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_RCC_OscConfig+0x4ec>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d028      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d121      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d11a      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013a0:	4013      	ands	r3, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d111      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0cc      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b68      	ldr	r3, [pc, #416]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d90c      	bls.n	8001420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b65      	ldr	r3, [pc, #404]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a58      	ldr	r2, [pc, #352]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a52      	ldr	r2, [pc, #328]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800145a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d044      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d119      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b3f      	ldr	r3, [pc, #252]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e06f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e067      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c2:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4934      	ldr	r1, [pc, #208]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fa5a 	bl	800098c <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fa56 	bl	800098c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e04f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 020c 	and.w	r2, r3, #12
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1eb      	bne.n	80014dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d20c      	bcs.n	800152c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f821 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_RCC_ClockConfig+0x1c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f9ba 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	0801e2ec 	.word	0x0801e2ec
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b4:	b090      	sub	sp, #64	@ 0x40
 80015b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d00d      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x40>
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	f200 80a1 	bhi.w	800171c <HAL_RCC_GetSysClockFreq+0x16c>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x34>
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x3a>
 80015e2:	e09b      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x184>)
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015e8:	e09b      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ea:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x188>)
 80015ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015ee:	e098      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d028      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001606:	4b4a      	ldr	r3, [pc, #296]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	099b      	lsrs	r3, r3, #6
 800160c:	2200      	movs	r2, #0
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	627a      	str	r2, [r7, #36]	@ 0x24
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001618:	2100      	movs	r1, #0
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x188>)
 800161c:	fb03 f201 	mul.w	r2, r3, r1
 8001620:	2300      	movs	r3, #0
 8001622:	fb00 f303 	mul.w	r3, r0, r3
 8001626:	4413      	add	r3, r2
 8001628:	4a43      	ldr	r2, [pc, #268]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x188>)
 800162a:	fba0 1202 	umull	r1, r2, r0, r2
 800162e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001630:	460a      	mov	r2, r1
 8001632:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001636:	4413      	add	r3, r2
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800163a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163c:	2200      	movs	r2, #0
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	61fa      	str	r2, [r7, #28]
 8001642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800164a:	f7fe fdc5 	bl	80001d8 <__aeabi_uldivmod>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4613      	mov	r3, r2
 8001654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001656:	e053      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001658:	4b35      	ldr	r3, [pc, #212]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	617a      	str	r2, [r7, #20]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800166a:	f04f 0b00 	mov.w	fp, #0
 800166e:	4652      	mov	r2, sl
 8001670:	465b      	mov	r3, fp
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0159      	lsls	r1, r3, #5
 800167c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001680:	0150      	lsls	r0, r2, #5
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ebb2 080a 	subs.w	r8, r2, sl
 800168a:	eb63 090b 	sbc.w	r9, r3, fp
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800169a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800169e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016a2:	ebb2 0408 	subs.w	r4, r2, r8
 80016a6:	eb63 0509 	sbc.w	r5, r3, r9
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	00eb      	lsls	r3, r5, #3
 80016b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b8:	00e2      	lsls	r2, r4, #3
 80016ba:	4614      	mov	r4, r2
 80016bc:	461d      	mov	r5, r3
 80016be:	eb14 030a 	adds.w	r3, r4, sl
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	eb45 030b 	adc.w	r3, r5, fp
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016d6:	4629      	mov	r1, r5
 80016d8:	028b      	lsls	r3, r1, #10
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e0:	4621      	mov	r1, r4
 80016e2:	028a      	lsls	r2, r1, #10
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	2200      	movs	r2, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	60fa      	str	r2, [r7, #12]
 80016f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016f4:	f7fe fd70 	bl	80001d8 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0c1b      	lsrs	r3, r3, #16
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	3301      	adds	r3, #1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800171a:	e002      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x184>)
 800171e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001724:	4618      	mov	r0, r3
 8001726:	3740      	adds	r7, #64	@ 0x40
 8001728:	46bd      	mov	sp, r7
 800172a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	017d7840 	.word	0x017d7840

0800173c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e07b      	b.n	8001846 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	2b00      	cmp	r3, #0
 8001754:	d108      	bne.n	8001768 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800175e:	d009      	beq.n	8001774 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
 8001766:	e005      	b.n	8001774 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7fe ffba 	bl	8000708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f8:	ea42 0103 	orr.w	r1, r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f003 0104 	and.w	r1, r3, #4
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	f003 0210 	and.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b088      	sub	sp, #32
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800185e:	f7ff f895 	bl	800098c <HAL_GetTick>
 8001862:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d001      	beq.n	8001878 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
 8001876:	e12a      	b.n	8001ace <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_SPI_Transmit+0x36>
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e122      	b.n	8001ace <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_SPI_Transmit+0x48>
 8001892:	2302      	movs	r3, #2
 8001894:	e11b      	b.n	8001ace <HAL_SPI_Transmit+0x280>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2203      	movs	r2, #3
 80018a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	88fa      	ldrh	r2, [r7, #6]
 80018bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018e4:	d10f      	bne.n	8001906 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001910:	2b40      	cmp	r3, #64	@ 0x40
 8001912:	d007      	beq.n	8001924 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800192c:	d152      	bne.n	80019d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_SPI_Transmit+0xee>
 8001936:	8b7b      	ldrh	r3, [r7, #26]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d145      	bne.n	80019c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	1c9a      	adds	r2, r3, #2
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001960:	e032      	b.n	80019c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b02      	cmp	r3, #2
 800196e:	d112      	bne.n	8001996 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	1c9a      	adds	r2, r3, #2
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001994:	e018      	b.n	80019c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001996:	f7fe fff9 	bl	800098c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d803      	bhi.n	80019ae <HAL_SPI_Transmit+0x160>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d102      	bne.n	80019b4 <HAL_SPI_Transmit+0x166>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e082      	b.n	8001ace <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1c7      	bne.n	8001962 <HAL_SPI_Transmit+0x114>
 80019d2:	e053      	b.n	8001a7c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_SPI_Transmit+0x194>
 80019dc:	8b7b      	ldrh	r3, [r7, #26]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d147      	bne.n	8001a72 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	330c      	adds	r3, #12
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a08:	e033      	b.n	8001a72 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d113      	bne.n	8001a40 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	330c      	adds	r3, #12
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a3e:	e018      	b.n	8001a72 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a40:	f7fe ffa4 	bl	800098c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d803      	bhi.n	8001a58 <HAL_SPI_Transmit+0x20a>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d102      	bne.n	8001a5e <HAL_SPI_Transmit+0x210>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e02d      	b.n	8001ace <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1c6      	bne.n	8001a0a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f8b1 	bl	8001be8 <SPI_EndRxTxTransaction>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ae8:	f7fe ff50 	bl	800098c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001af8:	f7fe ff48 	bl	800098c <HAL_GetTick>
 8001afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001afe:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	0d1b      	lsrs	r3, r3, #20
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	fb02 f303 	mul.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b0e:	e054      	b.n	8001bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b16:	d050      	beq.n	8001bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b18:	f7fe ff38 	bl	800098c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d902      	bls.n	8001b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d13d      	bne.n	8001baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b46:	d111      	bne.n	8001b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b50:	d004      	beq.n	8001b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5a:	d107      	bne.n	8001b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b74:	d10f      	bne.n	8001b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e017      	b.n	8001bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d19b      	bne.n	8001b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000

08001be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff ff6a 	bl	8001ad8 <SPI_WaitFlagStateUntilTimeout>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0e:	f043 0220 	orr.w	r2, r3, #32
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e032      	b.n	8001c80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <SPI_EndRxTxTransaction+0xa0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c8c <SPI_EndRxTxTransaction+0xa4>)
 8001c20:	fba2 2303 	umull	r2, r3, r2, r3
 8001c24:	0d5b      	lsrs	r3, r3, #21
 8001c26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c38:	d112      	bne.n	8001c60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2200      	movs	r2, #0
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff ff47 	bl	8001ad8 <SPI_WaitFlagStateUntilTimeout>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d016      	beq.n	8001c7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e00f      	b.n	8001c80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c76:	2b80      	cmp	r3, #128	@ 0x80
 8001c78:	d0f2      	beq.n	8001c60 <SPI_EndRxTxTransaction+0x78>
 8001c7a:	e000      	b.n	8001c7e <SPI_EndRxTxTransaction+0x96>
        break;
 8001c7c:	bf00      	nop
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	165e9f81 	.word	0x165e9f81

08001c90 <lcd_write_cmd>:
	HAL_Delay(250);
	HAL_GPIO_WritePin(LCD_RST_Port, LCD_RST_Pin, HIGH);
	HAL_Delay(250);
}

void lcd_write_cmd(uint8_t cmd){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, LOW);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <lcd_write_cmd+0x48>)
 8001ca0:	f7ff f90e 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_Port, LCD_DC_Pin, LOW);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <lcd_write_cmd+0x4c>)
 8001caa:	f7ff f909 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8001cae:	1df9      	adds	r1, r7, #7
 8001cb0:	2364      	movs	r3, #100	@ 0x64
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	480a      	ldr	r0, [pc, #40]	@ (8001ce0 <lcd_write_cmd+0x50>)
 8001cb6:	f7ff fdca 	bl	800184e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_DC_Port, LCD_DC_Pin, HIGH);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <lcd_write_cmd+0x4c>)
 8001cc0:	f7ff f8fe 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, HIGH);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <lcd_write_cmd+0x48>)
 8001cca:	f7ff f8f9 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	20000030 	.word	0x20000030

08001ce4 <lcd_write_8data>:

void lcd_write_8data(uint8_t *buf, uint16_t len){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, LOW);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <lcd_write_8data+0x38>)
 8001cf6:	f7ff f8e3 	bl	8000ec0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buf, len, HAL_MAX_DELAY);
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4807      	ldr	r0, [pc, #28]	@ (8001d20 <lcd_write_8data+0x3c>)
 8001d04:	f7ff fda3 	bl	800184e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, HIGH);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <lcd_write_8data+0x38>)
 8001d0e:	f7ff f8d7 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	20000030 	.word	0x20000030

08001d24 <lcd_write_16data>:

void lcd_write_16data(uint16_t *buf, uint16_t len){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
	uint8_t data_buf[2] = {0x00,0x00};
 8001d30:	2300      	movs	r3, #0
 8001d32:	813b      	strh	r3, [r7, #8]
	uint16_t *ptr = buf;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, LOW);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	4813      	ldr	r0, [pc, #76]	@ (8001d8c <lcd_write_16data+0x68>)
 8001d3e:	f7ff f8bf 	bl	8000ec0 <HAL_GPIO_WritePin>
	while(len--){
 8001d42:	e014      	b.n	8001d6e <lcd_write_16data+0x4a>
		data_buf[0] = (uint8_t)((*buf >> 8) & 0xFF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	723b      	strb	r3, [r7, #8]
		data_buf[1] = (uint8_t)(*buf & 0xFF);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	727b      	strb	r3, [r7, #9]
		HAL_SPI_Transmit(&hspi1, data_buf, 2, HAL_MAX_DELAY);
 8001d58:	f107 0108 	add.w	r1, r7, #8
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	2202      	movs	r2, #2
 8001d62:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <lcd_write_16data+0x6c>)
 8001d64:	f7ff fd73 	bl	800184e <HAL_SPI_Transmit>
		ptr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	60fb      	str	r3, [r7, #12]
	while(len--){
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	807a      	strh	r2, [r7, #2]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e5      	bne.n	8001d44 <lcd_write_16data+0x20>
		}
	HAL_GPIO_WritePin(LCD_CS_Port, LCD_CS_Pin, HIGH);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <lcd_write_16data+0x68>)
 8001d7e:	f7ff f89f 	bl	8000ec0 <HAL_GPIO_WritePin>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	20000030 	.word	0x20000030

08001d94 <lcd_config>:

void lcd_config(void){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

	lcd_write_cmd(TFT_SWRST); // SW reset
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff ff79 	bl	8001c90 <lcd_write_cmd>
    HAL_Delay(120);
 8001d9e:	2078      	movs	r0, #120	@ 0x78
 8001da0:	f7fe fe00 	bl	80009a4 <HAL_Delay>

	lcd_write_cmd(TFT_SLPOUT); // Sleep out, also SW reset
 8001da4:	2011      	movs	r0, #17
 8001da6:	f7ff ff73 	bl	8001c90 <lcd_write_cmd>
    HAL_Delay(120);
 8001daa:	2078      	movs	r0, #120	@ 0x78
 8001dac:	f7fe fdfa 	bl	80009a4 <HAL_Delay>

	lcd_write_cmd(TFT_PIX_FMT); //Set Pixel Format Value
 8001db0:	203a      	movs	r0, #58	@ 0x3a
 8001db2:	f7ff ff6d 	bl	8001c90 <lcd_write_cmd>
	lcd_write_8data((uint8_t*)TFT_PIX_FMT_16BIT,1); //Set 16bit Pixel Format
 8001db6:	2101      	movs	r1, #1
 8001db8:	2055      	movs	r0, #85	@ 0x55
 8001dba:	f7ff ff93 	bl	8001ce4 <lcd_write_8data>

	// By default is also same
	lcd_write_cmd(TFT_PWRCTRL1); //Set Power Control 1
 8001dbe:	20c0      	movs	r0, #192	@ 0xc0
 8001dc0:	f7ff ff66 	bl	8001c90 <lcd_write_cmd>
	lcd_write_8data((uint8_t*)0x0E,1);    //                          0001.0111   ... VRH1
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	200e      	movs	r0, #14
 8001dc8:	f7ff ff8c 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0E,1);    //                          0001.0101   ... VRH2
 8001dcc:	2101      	movs	r1, #1
 8001dce:	200e      	movs	r0, #14
 8001dd0:	f7ff ff88 	bl	8001ce4 <lcd_write_8data>
    
	lcd_write_cmd(TFT_PWRCTRL2); //                          1100.0001 Power Control 2
 8001dd4:	20c1      	movs	r0, #193	@ 0xc1
 8001dd6:	f7ff ff5b 	bl	8001c90 <lcd_write_cmd>
    lcd_write_8data((uint8_t*)0x41,1);    //                          0100.0001   . SAP BT
 8001dda:	2101      	movs	r1, #1
 8001ddc:	2041      	movs	r0, #65	@ 0x41
 8001dde:	f7ff ff81 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x00,1);    //                          0000.0000   ..... VC
 8001de2:	2101      	movs	r1, #1
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff ff7d 	bl	8001ce4 <lcd_write_8data>
    
	lcd_write_cmd(TFT_PWRCTRL3); //                          1100.0010 Power Control 3
 8001dea:	20c2      	movs	r0, #194	@ 0xc2
 8001dec:	f7ff ff50 	bl	8001c90 <lcd_write_cmd>
    lcd_write_8data((uint8_t*)0x55,1);    //     nb. was 0x44         0101.0101   . DCA1 . DCA0
 8001df0:	2101      	movs	r1, #1
 8001df2:	2055      	movs	r0, #85	@ 0x55
 8001df4:	f7ff ff76 	bl	8001ce4 <lcd_write_8data>

	lcd_write_cmd(TFT_VCOM_CTRL);
 8001df8:	20c5      	movs	r0, #197	@ 0xc5
 8001dfa:	f7ff ff49 	bl	8001c90 <lcd_write_cmd>
    lcd_write_8data((uint8_t*)0x00,1);
 8001dfe:	2101      	movs	r1, #1
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff ff6f 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x00,1);
 8001e06:	2101      	movs	r1, #1
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff ff6b 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x00,1);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff ff67 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x00,1);
 8001e16:	2101      	movs	r1, #1
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff ff63 	bl	8001ce4 <lcd_write_8data>

	lcd_write_cmd(TFT_PGAMCTRL);
 8001e1e:	20e0      	movs	r0, #224	@ 0xe0
 8001e20:	f7ff ff36 	bl	8001c90 <lcd_write_cmd>
    lcd_write_8data((uint8_t*)0x0F,1);
 8001e24:	2101      	movs	r1, #1
 8001e26:	200f      	movs	r0, #15
 8001e28:	f7ff ff5c 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x1F,1);
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	201f      	movs	r0, #31
 8001e30:	f7ff ff58 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x1C,1);
 8001e34:	2101      	movs	r1, #1
 8001e36:	201c      	movs	r0, #28
 8001e38:	f7ff ff54 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0C,1);
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	200c      	movs	r0, #12
 8001e40:	f7ff ff50 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0F,1);
 8001e44:	2101      	movs	r1, #1
 8001e46:	200f      	movs	r0, #15
 8001e48:	f7ff ff4c 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x08,1);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	2008      	movs	r0, #8
 8001e50:	f7ff ff48 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x48,1);
 8001e54:	2101      	movs	r1, #1
 8001e56:	2048      	movs	r0, #72	@ 0x48
 8001e58:	f7ff ff44 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x98,1);
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2098      	movs	r0, #152	@ 0x98
 8001e60:	f7ff ff40 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x37,1);
 8001e64:	2101      	movs	r1, #1
 8001e66:	2037      	movs	r0, #55	@ 0x37
 8001e68:	f7ff ff3c 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0A,1);
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	200a      	movs	r0, #10
 8001e70:	f7ff ff38 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x13,1);
 8001e74:	2101      	movs	r1, #1
 8001e76:	2013      	movs	r0, #19
 8001e78:	f7ff ff34 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x04,1);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	2004      	movs	r0, #4
 8001e80:	f7ff ff30 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x11,1);
 8001e84:	2101      	movs	r1, #1
 8001e86:	2011      	movs	r0, #17
 8001e88:	f7ff ff2c 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0D,1);
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	200d      	movs	r0, #13
 8001e90:	f7ff ff28 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x00,1);
 8001e94:	2101      	movs	r1, #1
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff ff24 	bl	8001ce4 <lcd_write_8data>
 
	lcd_write_cmd(TFT_NGAMCTRL);
 8001e9c:	20e1      	movs	r0, #225	@ 0xe1
 8001e9e:	f7ff fef7 	bl	8001c90 <lcd_write_cmd>
    lcd_write_8data((uint8_t*)0x0F,1);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f7ff ff1d 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x32,1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2032      	movs	r0, #50	@ 0x32
 8001eae:	f7ff ff19 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x2E,1);
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	202e      	movs	r0, #46	@ 0x2e
 8001eb6:	f7ff ff15 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0B,1);
 8001eba:	2101      	movs	r1, #1
 8001ebc:	200b      	movs	r0, #11
 8001ebe:	f7ff ff11 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x0D,1);
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	200d      	movs	r0, #13
 8001ec6:	f7ff ff0d 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x05,1);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2005      	movs	r0, #5
 8001ece:	f7ff ff09 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x47,1);
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	2047      	movs	r0, #71	@ 0x47
 8001ed6:	f7ff ff05 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x75,1);
 8001eda:	2101      	movs	r1, #1
 8001edc:	2075      	movs	r0, #117	@ 0x75
 8001ede:	f7ff ff01 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x37,1);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2037      	movs	r0, #55	@ 0x37
 8001ee6:	f7ff fefd 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x06,1);
 8001eea:	2101      	movs	r1, #1
 8001eec:	2006      	movs	r0, #6
 8001eee:	f7ff fef9 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x10,1);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2010      	movs	r0, #16
 8001ef6:	f7ff fef5 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x03,1);
 8001efa:	2101      	movs	r1, #1
 8001efc:	2003      	movs	r0, #3
 8001efe:	f7ff fef1 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x24,1);
 8001f02:	2101      	movs	r1, #1
 8001f04:	2024      	movs	r0, #36	@ 0x24
 8001f06:	f7ff feed 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x20,1);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	2020      	movs	r0, #32
 8001f0e:	f7ff fee9 	bl	8001ce4 <lcd_write_8data>
    lcd_write_8data((uint8_t*)0x00,1);
 8001f12:	2101      	movs	r1, #1
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff fee5 	bl	8001ce4 <lcd_write_8data>

	lcd_write_cmd(TFT_INVOFF); //Display Inversion OFF
 8001f1a:	2020      	movs	r0, #32
 8001f1c:	f7ff feb8 	bl	8001c90 <lcd_write_cmd>

	lcd_write_cmd(TFT_MADCTL); //Set Memory Access Control
 8001f20:	2036      	movs	r0, #54	@ 0x36
 8001f22:	f7ff feb5 	bl	8001c90 <lcd_write_cmd>
	lcd_write_8data((uint8_t*)(TFT_MAD_MX | TFT_MAD_BGR),1); // Set MX = 1, BGR = 1
 8001f26:	2101      	movs	r1, #1
 8001f28:	2048      	movs	r0, #72	@ 0x48
 8001f2a:	f7ff fedb 	bl	8001ce4 <lcd_write_8data>

	lcd_write_cmd(TFT_DISPLAY_ON); // display on
 8001f2e:	2029      	movs	r0, #41	@ 0x29
 8001f30:	f7ff feae 	bl	8001c90 <lcd_write_cmd>
    HAL_Delay(150);
 8001f34:	2096      	movs	r0, #150	@ 0x96
 8001f36:	f7fe fd35 	bl	80009a4 <HAL_Delay>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <lcd_set_display_area>:

void lcd_set_display_area(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4604      	mov	r4, r0
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	80fb      	strh	r3, [r7, #6]
 8001f50:	4603      	mov	r3, r0
 8001f52:	80bb      	strh	r3, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	803b      	strh	r3, [r7, #0]
	uint8_t params[4];
	/*Column address set(2Ah) */
	params[0] = (uint8_t)((x1 >> 8) & 0xFF);
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	733b      	strb	r3, [r7, #12]
	params[1] = (uint8_t)(x1 & 0xFF);
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	737b      	strb	r3, [r7, #13]
	params[2] = (uint8_t)((x2 >> 8) & 0xFF);
 8001f6c:	88bb      	ldrh	r3, [r7, #4]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	73bb      	strb	r3, [r7, #14]
	params[3] = (uint8_t)(x2 & 0xFF);
 8001f76:	88bb      	ldrh	r3, [r7, #4]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(TFT_CASET);
 8001f7c:	202a      	movs	r0, #42	@ 0x2a
 8001f7e:	f7ff fe87 	bl	8001c90 <lcd_write_cmd>
	lcd_write_8data(params, 4);
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	2104      	movs	r1, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff feab 	bl	8001ce4 <lcd_write_8data>

	params[0] = (uint8_t)((y1 >> 8) & 0xFF);
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	733b      	strb	r3, [r7, #12]
	params[1] = (uint8_t)(y1 & 0xFF);
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	737b      	strb	r3, [r7, #13]
	params[2] = (uint8_t)((y2 >> 8) & 0xFF);
 8001f9e:	883b      	ldrh	r3, [r7, #0]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	73bb      	strb	r3, [r7, #14]
	params[3] = (uint8_t)(y2 & 0xFF);
 8001fa8:	883b      	ldrh	r3, [r7, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	73fb      	strb	r3, [r7, #15]
	lcd_write_cmd(TFT_PASET);
 8001fae:	202b      	movs	r0, #43	@ 0x2b
 8001fb0:	f7ff fe6e 	bl	8001c90 <lcd_write_cmd>
	lcd_write_8data(params, 4);
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe92 	bl	8001ce4 <lcd_write_8data>

	lcd_write_cmd(TFT_RAMWR);
 8001fc0:	202c      	movs	r0, #44	@ 0x2c
 8001fc2:	f7ff fe65 	bl	8001c90 <lcd_write_cmd>
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}

08001fce <convert_rgb888_to_rgb565>:

uint16_t convert_rgb888_to_rgb565(uint32_t rgb888)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
    uint16_t r,g,b;
	r = (rgb888 >> 19) & 0x1FU;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0cdb      	lsrs	r3, r3, #19
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	81fb      	strh	r3, [r7, #14]
	g = (rgb888 >> 10) & 0x3FU;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0a9b      	lsrs	r3, r3, #10
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fec:	81bb      	strh	r3, [r7, #12]
	b = (rgb888 >> 3)  & 0x1FU;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	817b      	strh	r3, [r7, #10]
	return (uint16_t)((r << 11) | (g << 5) | b);
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	02db      	lsls	r3, r3, #11
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	89bb      	ldrh	r3, [r7, #12]
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21a      	sxth	r2, r3
 800200a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29b      	uxth	r3, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <lcd_setbackgroundcolor>:

void lcd_setbackgroundcolor(uint16_t color){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
	color = convert_rgb888_to_rgb565(color);
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ffce 	bl	8001fce <convert_rgb888_to_rgb565>
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
	lcd_set_display_area(0,TFT_WIDTH,0,TFT_HEIGHT);
 8002036:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff ff7c 	bl	8001f3e <lcd_set_display_area>
	for(int i = 0; i < (TFT_WIDTH * TFT_HEIGHT); i++){
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e007      	b.n	800205c <lcd_setbackgroundcolor+0x3c>
		lcd_write_16data(&color,1);
 800204c:	1dbb      	adds	r3, r7, #6
 800204e:	2101      	movs	r1, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fe67 	bl	8001d24 <lcd_write_16data>
	for(int i = 0; i < (TFT_WIDTH * TFT_HEIGHT); i++){
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3301      	adds	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f5b3 3f16 	cmp.w	r3, #153600	@ 0x25800
 8002062:	dbf3      	blt.n	800204c <lcd_setbackgroundcolor+0x2c>
	}
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
    _lv_ll_init(group_ll_p, sizeof(lv_group_t));
 8002074:	2120      	movs	r1, #32
 8002076:	4802      	ldr	r0, [pc, #8]	@ (8002080 <_lv_group_init+0x10>)
 8002078:	f019 fe27 	bl	801bcca <_lv_ll_init>
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200000c0 	.word	0x200000c0

08002084 <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4013      	ands	r3, r2
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return !!(obj->flags & f);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11f      	bne.n	8002126 <lv_obj_allocate_spec_attr+0x50>
        obj->spec_attr = lv_malloc_zeroed(sizeof(_lv_obj_spec_attr_t));
 80020e6:	202c      	movs	r0, #44	@ 0x2c
 80020e8:	f01b fff0 	bl	801e0cc <lv_malloc_zeroed>
 80020ec:	4602      	mov	r2, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <lv_obj_allocate_spec_attr+0x28>
 80020fa:	bf00      	nop
 80020fc:	e7fd      	b.n	80020fa <lv_obj_allocate_spec_attr+0x24>
        if(obj->spec_attr == NULL) return;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00e      	beq.n	8002124 <lv_obj_allocate_spec_attr+0x4e>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	8d53      	ldrh	r3, [r2, #42]	@ 0x2a
 800210c:	f443 7370 	orr.w	r3, r3, #960	@ 0x3c0
 8002110:	8553      	strh	r3, [r2, #42]	@ 0x2a
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 800211a:	f043 0303 	orr.w	r3, r3, #3
 800211e:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8002122:	e000      	b.n	8002126 <lv_obj_allocate_spec_attr+0x50>
        if(obj->spec_attr == NULL) return;
 8002124:	bf00      	nop
    }
}
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <lv_obj_refresh_ext_draw_size>:

    return s;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    int32_t s_old = _lv_obj_get_ext_draw_size(obj);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f828 	bl	800218a <_lv_obj_get_ext_draw_size>
 800213a:	60f8      	str	r0, [r7, #12]
    int32_t s_new = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
    lv_obj_send_event(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	461a      	mov	r2, r3
 8002146:	2115      	movs	r1, #21
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f848 	bl	80021de <lv_obj_send_event>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d004      	beq.n	8002160 <lv_obj_refresh_ext_draw_size+0x34>
        obj->spec_attr->ext_draw_size = s_new;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	625a      	str	r2, [r3, #36]	@ 0x24
 800215e:	e009      	b.n	8002174 <lv_obj_refresh_ext_draw_size+0x48>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <lv_obj_refresh_ext_draw_size+0x48>
        lv_obj_allocate_spec_attr(obj);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffb5 	bl	80020d6 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d002      	beq.n	8002182 <lv_obj_refresh_ext_draw_size+0x56>
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f001 f838 	bl	80031f2 <lv_obj_invalidate>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_lv_obj_get_ext_draw_size>:

int32_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <_lv_obj_get_ext_draw_size+0x18>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	e000      	b.n	80021a4 <_lv_obj_get_ext_draw_size+0x1a>
    else return 0;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return (lv_layer_type_t)obj->spec_attr->layer_type;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <_lv_obj_get_layer_type+0x20>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80021c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e000      	b.n	80021d2 <_lv_obj_get_layer_type+0x22>
    else return LV_LAYER_TYPE_NONE;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <lv_obj_send_event>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_result_t lv_obj_send_event(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08c      	sub	sp, #48	@ 0x30
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	460b      	mov	r3, r1
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	817b      	strh	r3, [r7, #10]
    if(obj == NULL) return LV_RESULT_OK;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <lv_obj_send_event+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e02f      	b.n	8002256 <lv_obj_send_event+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.current_target = obj;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	613b      	str	r3, [r7, #16]
    e.original_target = obj;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 80021fe:	897b      	ldrh	r3, [r7, #10]
 8002200:	833b      	strh	r3, [r7, #24]
    e.user_data = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
    e.param = param;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 800220a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800220e:	f36f 0300 	bfc	r3, #0, #1
 8002212:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    e.stop_bubbling = 0;
 8002216:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800221a:	f36f 0382 	bfc	r3, #2, #1
 800221e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    e.stop_processing = 0;
 8002222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002226:	f36f 0341 	bfc	r3, #1, #1
 800222a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

    _lv_event_push(&e);
 800222e:	f107 0310 	add.w	r3, r7, #16
 8002232:	4618      	mov	r0, r3
 8002234:	f019 f910 	bl	801b458 <_lv_event_push>

    /*Send the event*/
    lv_result_t res = event_send_core(&e);
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f84c 	bl	80022da <event_send_core>
 8002242:	4603      	mov	r3, r0
 8002244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /*Remove this element from the list*/
    _lv_event_pop(&e);
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	4618      	mov	r0, r3
 800224e:	f019 f917 	bl	801b480 <_lv_event_pop>

    return res;
 8002252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002256:	4618      	mov	r0, r3
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <lv_obj_event_base>:

lv_result_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = ((lv_obj_t *)e->current_target)->class_p;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <lv_obj_event_base+0x1a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e006      	b.n	8002286 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 800227e:	e002      	b.n	8002286 <lv_obj_event_base+0x28>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <lv_obj_event_base+0x36>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f5      	beq.n	8002280 <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RESULT_OK;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <lv_obj_event_base+0x40>
 800229a:	2301      	movs	r3, #1
 800229c:	e019      	b.n	80022d2 <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RESULT_OK;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <lv_obj_event_base+0x4c>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e013      	b.n	80022d2 <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	4798      	blx	r3

    lv_result_t res = LV_RESULT_OK;
 80022ba:	2301      	movs	r3, #1
 80022bc:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RESULT_INVALID;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	7e1b      	ldrb	r3, [r3, #24]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <lv_obj_event_base+0x72>
 80022cc:	2300      	movs	r3, #0
 80022ce:	72fb      	strb	r3, [r7, #11]

    return res;
 80022d0:	7afb      	ldrb	r3, [r7, #11]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <event_send_core>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_result_t event_send_core(lv_event_t * e)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b088      	sub	sp, #32
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
    LV_TRACE_EVENT("Sending event %d to %p with %p param", e->code, (void *)e->original_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_active();
 80022e2:	f013 ff7f 	bl	80161e4 <lv_indev_active>
 80022e6:	61b8      	str	r0, [r7, #24]
    if(indev_act) {
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d011      	beq.n	8002312 <event_send_core+0x38>
        if(e->stop_processing) return LV_RESULT_OK;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e1b      	ldrb	r3, [r3, #24]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <event_send_core+0x26>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e057      	b.n	80023b0 <event_send_core+0xd6>
        if(e->deleted) return LV_RESULT_INVALID;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <event_send_core+0x38>
 800230e:	2300      	movs	r3, #0
 8002310:	e04e      	b.n	80023b0 <event_send_core+0xd6>
    }

    lv_obj_t * target = e->current_target;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	617b      	str	r3, [r7, #20]
    lv_result_t res = LV_RESULT_OK;
 8002318:	2301      	movs	r3, #1
 800231a:	77fb      	strb	r3, [r7, #31]
    lv_event_list_t * list = target->spec_attr ?  &target->spec_attr->event_list : NULL;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <event_send_core+0x52>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	3308      	adds	r3, #8
 800232a:	e000      	b.n	800232e <event_send_core+0x54>
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]

    res = lv_event_send(list, e, true);
 8002330:	2201      	movs	r2, #1
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	6938      	ldr	r0, [r7, #16]
 8002336:	f019 f8b3 	bl	801b4a0 <lv_event_send>
 800233a:	4603      	mov	r3, r0
 800233c:	77fb      	strb	r3, [r7, #31]
    if(res != LV_RESULT_OK) return res;
 800233e:	7ffb      	ldrb	r3, [r7, #31]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <event_send_core+0x6e>
 8002344:	7ffb      	ldrb	r3, [r7, #31]
 8002346:	e033      	b.n	80023b0 <event_send_core+0xd6>

    res = lv_obj_event_base(NULL, e);
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff ff87 	bl	800225e <lv_obj_event_base>
 8002350:	4603      	mov	r3, r0
 8002352:	77fb      	strb	r3, [r7, #31]
    if(res != LV_RESULT_OK) return res;
 8002354:	7ffb      	ldrb	r3, [r7, #31]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d001      	beq.n	800235e <event_send_core+0x84>
 800235a:	7ffb      	ldrb	r3, [r7, #31]
 800235c:	e028      	b.n	80023b0 <event_send_core+0xd6>

    res = lv_event_send(list, e, false);
 800235e:	2200      	movs	r2, #0
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	6938      	ldr	r0, [r7, #16]
 8002364:	f019 f89c 	bl	801b4a0 <lv_event_send>
 8002368:	4603      	mov	r3, r0
 800236a:	77fb      	strb	r3, [r7, #31]
    if(res != LV_RESULT_OK) return res;
 800236c:	7ffb      	ldrb	r3, [r7, #31]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <event_send_core+0x9c>
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	e01c      	b.n	80023b0 <event_send_core+0xd6>

    lv_obj_t * parent = lv_obj_get_parent(e->current_target);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 ff76 	bl	800526c <lv_obj_get_parent>
 8002380:	60f8      	str	r0, [r7, #12]
    if(parent && event_is_bubbled(e)) {
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <event_send_core+0xd4>
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f815 	bl	80023b8 <event_is_bubbled>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00c      	beq.n	80023ae <event_send_core+0xd4>
        e->current_target = parent;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	601a      	str	r2, [r3, #0]
        res = event_send_core(e);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff9d 	bl	80022da <event_send_core>
 80023a0:	4603      	mov	r3, r0
 80023a2:	77fb      	strb	r3, [r7, #31]
        if(res != LV_RESULT_OK) return res;
 80023a4:	7ffb      	ldrb	r3, [r7, #31]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d001      	beq.n	80023ae <event_send_core+0xd4>
 80023aa:	7ffb      	ldrb	r3, [r7, #31]
 80023ac:	e000      	b.n	80023b0 <event_send_core+0xd6>
    }

    return res;
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e1b      	ldrb	r3, [r3, #24]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <event_is_bubbled+0x1a>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e02f      	b.n	8002432 <event_is_bubbled+0x7a>

    /*Event codes that always bubble*/
    switch(e->code) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	891b      	ldrh	r3, [r3, #8]
 80023d6:	3b25      	subs	r3, #37	@ 0x25
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d801      	bhi.n	80023e0 <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 80023dc:	2301      	movs	r3, #1
 80023de:	e028      	b.n	8002432 <event_is_bubbled+0x7a>
        default:
            break;
 80023e0:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fe4a 	bl	8002084 <lv_obj_has_flag>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <event_is_bubbled+0x48>
 80023fc:	2300      	movs	r3, #0
 80023fe:	e018      	b.n	8002432 <event_is_bubbled+0x7a>

    switch(e->code) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	891b      	ldrh	r3, [r3, #8]
 8002404:	3b12      	subs	r3, #18
 8002406:	2b1c      	cmp	r3, #28
 8002408:	bf8c      	ite	hi
 800240a:	2201      	movhi	r2, #1
 800240c:	2200      	movls	r2, #0
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	2a00      	cmp	r2, #0
 8002412:	d10d      	bne.n	8002430 <event_is_bubbled+0x78>
 8002414:	4a09      	ldr	r2, [pc, #36]	@ (800243c <event_is_bubbled+0x84>)
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <event_is_bubbled+0x78>
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <event_is_bubbled+0x7a>
        default:
            return true;
 8002430:	2301      	movs	r3, #1
    }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	161e27fd 	.word	0x161e27fd

08002440 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	60da      	str	r2, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	3301      	adds	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	3301      	adds	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <lv_obj_get_style_width>:
#include "../misc/lv_area.h"
#include "../misc/lv_style.h"
#include "../core/lv_obj_style.h"

static inline int32_t lv_obj_get_style_width(const lv_obj_t * obj, uint32_t part)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80024c0:	2201      	movs	r2, #1
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f002 fcd9 	bl	8004e7c <lv_obj_get_style_prop>
 80024ca:	4603      	mov	r3, r0
 80024cc:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <lv_obj_get_style_min_width>:

static inline int32_t lv_obj_get_style_min_width(const lv_obj_t * obj, uint32_t part)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80024e2:	2204      	movs	r2, #4
 80024e4:	6839      	ldr	r1, [r7, #0]
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f002 fcc8 	bl	8004e7c <lv_obj_get_style_prop>
 80024ec:	4603      	mov	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80024f0:	68fb      	ldr	r3, [r7, #12]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <lv_obj_get_style_max_width>:

static inline int32_t lv_obj_get_style_max_width(const lv_obj_t * obj, uint32_t part)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8002504:	2205      	movs	r2, #5
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f002 fcb7 	bl	8004e7c <lv_obj_get_style_prop>
 800250e:	4603      	mov	r3, r0
 8002510:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <lv_obj_get_style_height>:

static inline int32_t lv_obj_get_style_height(const lv_obj_t * obj, uint32_t part)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8002526:	2202      	movs	r2, #2
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f002 fca6 	bl	8004e7c <lv_obj_get_style_prop>
 8002530:	4603      	mov	r3, r0
 8002532:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <lv_obj_get_style_min_height>:

static inline int32_t lv_obj_get_style_min_height(const lv_obj_t * obj, uint32_t part)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8002548:	2206      	movs	r2, #6
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f002 fc95 	bl	8004e7c <lv_obj_get_style_prop>
 8002552:	4603      	mov	r3, r0
 8002554:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <lv_obj_get_style_max_height>:

static inline int32_t lv_obj_get_style_max_height(const lv_obj_t * obj, uint32_t part)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800256a:	2207      	movs	r2, #7
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f002 fc84 	bl	8004e7c <lv_obj_get_style_prop>
 8002574:	4603      	mov	r3, r0
 8002576:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <lv_obj_get_style_x>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LENGTH);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_x(const lv_obj_t * obj, uint32_t part)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800258c:	2208      	movs	r2, #8
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f002 fc73 	bl	8004e7c <lv_obj_get_style_prop>
 8002596:	4603      	mov	r3, r0
 8002598:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <lv_obj_get_style_y>:

static inline int32_t lv_obj_get_style_y(const lv_obj_t * obj, uint32_t part)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80025ae:	2209      	movs	r2, #9
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f002 fc62 	bl	8004e7c <lv_obj_get_style_prop>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <lv_obj_get_style_align>:

static inline lv_align_t lv_obj_get_style_align(const lv_obj_t * obj, uint32_t part)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80025d0:	220a      	movs	r2, #10
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 fc51 	bl	8004e7c <lv_obj_get_style_prop>
 80025da:	4603      	mov	r3, r0
 80025dc:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	b2db      	uxtb	r3, r3
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <lv_obj_get_style_transform_scale_x>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_transform_scale_x(const lv_obj_t * obj, uint32_t part)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_SCALE_X);
 80025f4:	226c      	movs	r2, #108	@ 0x6c
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f002 fc3f 	bl	8004e7c <lv_obj_get_style_prop>
 80025fe:	4603      	mov	r3, r0
 8002600:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <lv_obj_get_style_transform_scale_y>:

static inline int32_t lv_obj_get_style_transform_scale_y(const lv_obj_t * obj, uint32_t part)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_SCALE_Y);
 8002616:	226d      	movs	r2, #109	@ 0x6d
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f002 fc2e 	bl	8004e7c <lv_obj_get_style_prop>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002624:	68fb      	ldr	r3, [r7, #12]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <lv_obj_get_style_transform_rotation>:

static inline int32_t lv_obj_get_style_transform_rotation(const lv_obj_t * obj, uint32_t part)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ROTATION);
 8002638:	226e      	movs	r2, #110	@ 0x6e
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f002 fc1d 	bl	8004e7c <lv_obj_get_style_prop>
 8002642:	4603      	mov	r3, r0
 8002644:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <lv_obj_get_style_transform_pivot_x>:

static inline int32_t lv_obj_get_style_transform_pivot_x(const lv_obj_t * obj, uint32_t part)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800265a:	226f      	movs	r2, #111	@ 0x6f
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f002 fc0c 	bl	8004e7c <lv_obj_get_style_prop>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <lv_obj_get_style_transform_pivot_y>:

static inline int32_t lv_obj_get_style_transform_pivot_y(const lv_obj_t * obj, uint32_t part)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800267c:	2270      	movs	r2, #112	@ 0x70
 800267e:	6839      	ldr	r1, [r7, #0]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f002 fbfb 	bl	8004e7c <lv_obj_get_style_prop>
 8002686:	4603      	mov	r3, r0
 8002688:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_SKEW_Y);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_top(const lv_obj_t * obj, uint32_t part)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800269e:	2210      	movs	r2, #16
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f002 fbea 	bl	8004e7c <lv_obj_get_style_prop>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <lv_obj_get_style_pad_bottom>:

static inline int32_t lv_obj_get_style_pad_bottom(const lv_obj_t * obj, uint32_t part)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80026c0:	2211      	movs	r2, #17
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f002 fbd9 	bl	8004e7c <lv_obj_get_style_prop>
 80026ca:	4603      	mov	r3, r0
 80026cc:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <lv_obj_get_style_pad_left>:

static inline int32_t lv_obj_get_style_pad_left(const lv_obj_t * obj, uint32_t part)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80026e2:	2212      	movs	r2, #18
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f002 fbc8 	bl	8004e7c <lv_obj_get_style_prop>
 80026ec:	4603      	mov	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <lv_obj_get_style_pad_right>:

static inline int32_t lv_obj_get_style_pad_right(const lv_obj_t * obj, uint32_t part)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002704:	2213      	movs	r2, #19
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f002 fbb7 	bl	8004e7c <lv_obj_get_style_prop>
 800270e:	4603      	mov	r3, r0
 8002710:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <lv_obj_get_style_margin_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_margin_top(const lv_obj_t * obj, uint32_t part)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_TOP);
 8002726:	2218      	movs	r2, #24
 8002728:	6839      	ldr	r1, [r7, #0]
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f002 fba6 	bl	8004e7c <lv_obj_get_style_prop>
 8002730:	4603      	mov	r3, r0
 8002732:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <lv_obj_get_style_margin_bottom>:

static inline int32_t lv_obj_get_style_margin_bottom(const lv_obj_t * obj, uint32_t part)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_BOTTOM);
 8002748:	2219      	movs	r2, #25
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f002 fb95 	bl	8004e7c <lv_obj_get_style_prop>
 8002752:	4603      	mov	r3, r0
 8002754:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <lv_obj_get_style_margin_left>:

static inline int32_t lv_obj_get_style_margin_left(const lv_obj_t * obj, uint32_t part)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_LEFT);
 800276a:	221a      	movs	r2, #26
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f002 fb84 	bl	8004e7c <lv_obj_get_style_prop>
 8002774:	4603      	mov	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8002778:	68fb      	ldr	r3, [r7, #12]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <lv_obj_get_style_margin_right>:

static inline int32_t lv_obj_get_style_margin_right(const lv_obj_t * obj, uint32_t part)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_RIGHT);
 800278c:	221b      	movs	r2, #27
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f002 fb73 	bl	8004e7c <lv_obj_get_style_prop>
 8002796:	4603      	mov	r3, r0
 8002798:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <lv_obj_get_style_border_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
    return (lv_opa_t)v.num;
}

static inline int32_t lv_obj_get_style_border_width(const lv_obj_t * obj, uint32_t part)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80027ae:	2230      	movs	r2, #48	@ 0x30
 80027b0:	6839      	ldr	r1, [r7, #0]
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f002 fb62 	bl	8004e7c <lv_obj_get_style_prop>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80027bc:	68fb      	ldr	r3, [r7, #12]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <lv_obj_get_style_border_side>:

static inline lv_border_side_t lv_obj_get_style_border_side(const lv_obj_t * obj, uint32_t part)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80027d0:	2234      	movs	r2, #52	@ 0x34
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f002 fb51 	bl	8004e7c <lv_obj_get_style_prop>
 80027da:	4603      	mov	r3, r0
 80027dc:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	b2db      	uxtb	r3, r3
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const lv_obj_t * obj, uint32_t part)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80027f4:	2216      	movs	r2, #22
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f002 fb3f 	bl	8004e7c <lv_obj_get_style_prop>
 80027fe:	4603      	mov	r3, r0
 8002800:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	b29b      	uxth	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const lv_obj_t * obj, uint32_t part)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8002818:	2227      	movs	r2, #39	@ 0x27
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f002 fb2d 	bl	8004e7c <lv_obj_get_style_prop>
 8002822:	4603      	mov	r3, r0
 8002824:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	b2db      	uxtb	r3, r3
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <lv_obj_get_style_space_left>:
    lv_obj_set_style_transform_scale_x(obj, value, selector);
    lv_obj_set_style_transform_scale_y(obj, value, selector);
}

static inline int32_t lv_obj_get_style_space_left(const lv_obj_t * obj, uint32_t part)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_left(obj, part);
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ff4a 	bl	80026d8 <lv_obj_get_style_pad_left>
 8002844:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ffab 	bl	80027a4 <lv_obj_get_style_border_width>
 800284e:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffb7 	bl	80027c6 <lv_obj_get_style_border_side>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_LEFT) ? padding + border_width : padding;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <lv_obj_get_style_space_left+0x3c>
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	e000      	b.n	8002870 <lv_obj_get_style_space_left+0x3e>
 800286e:	697b      	ldr	r3, [r7, #20]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <lv_obj_get_style_space_right>:

static inline int32_t lv_obj_get_style_space_right(const lv_obj_t * obj, uint32_t part)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_right(obj, part);
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff38 	bl	80026fa <lv_obj_get_style_pad_right>
 800288a:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 800288c:	6839      	ldr	r1, [r7, #0]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff88 	bl	80027a4 <lv_obj_get_style_border_width>
 8002894:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff94 	bl	80027c6 <lv_obj_get_style_border_side>
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_RIGHT) ? padding + border_width : padding;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <lv_obj_get_style_space_right+0x3c>
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	e000      	b.n	80028b6 <lv_obj_get_style_space_right+0x3e>
 80028b4:	697b      	ldr	r3, [r7, #20]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <lv_obj_get_style_space_top>:

static inline int32_t lv_obj_get_style_space_top(const lv_obj_t * obj, uint32_t part)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_top(obj, part);
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff fee2 	bl	8002694 <lv_obj_get_style_pad_top>
 80028d0:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff65 	bl	80027a4 <lv_obj_get_style_border_width>
 80028da:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff71 	bl	80027c6 <lv_obj_get_style_border_side>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_TOP) ? padding + border_width : padding;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <lv_obj_get_style_space_top+0x3c>
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	e000      	b.n	80028fc <lv_obj_get_style_space_top+0x3e>
 80028fa:	697b      	ldr	r3, [r7, #20]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <lv_obj_get_style_space_bottom>:

static inline int32_t lv_obj_get_style_space_bottom(const lv_obj_t * obj, uint32_t part)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_bottom(obj, part);
 800290e:	6839      	ldr	r1, [r7, #0]
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fed0 	bl	80026b6 <lv_obj_get_style_pad_bottom>
 8002916:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8002918:	6839      	ldr	r1, [r7, #0]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff42 	bl	80027a4 <lv_obj_get_style_border_width>
 8002920:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff4e 	bl	80027c6 <lv_obj_get_style_border_side>
 800292a:	4603      	mov	r3, r0
 800292c:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_BOTTOM) ? padding + border_width : padding;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <lv_obj_get_style_space_bottom+0x3c>
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	e000      	b.n	8002942 <lv_obj_get_style_space_bottom+0x3e>
 8002940:	697b      	ldr	r3, [r7, #20]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <lv_obj_get_style_transform_scale_x_safe>:

lv_text_align_t lv_obj_calculate_style_text_align(const lv_obj_t * obj, lv_part_t part, const char * txt);

static inline int32_t lv_obj_get_style_transform_scale_x_safe(const lv_obj_t * obj, uint32_t part)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
    int16_t zoom = lv_obj_get_style_transform_scale_x(obj, part);
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fe47 	bl	80025ea <lv_obj_get_style_transform_scale_x>
 800295c:	4603      	mov	r3, r0
 800295e:	81fb      	strh	r3, [r7, #14]
    return zoom != 0 ? zoom : 1;
 8002960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <lv_obj_get_style_transform_scale_x_safe+0x24>
 8002968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296c:	e000      	b.n	8002970 <lv_obj_get_style_transform_scale_x_safe+0x26>
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <lv_obj_get_style_transform_scale_y_safe>:

static inline int32_t lv_obj_get_style_transform_scale_y_safe(const lv_obj_t * obj, uint32_t part)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
    int16_t zoom = lv_obj_get_style_transform_scale_y(obj, part);
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fe41 	bl	800260c <lv_obj_get_style_transform_scale_y>
 800298a:	4603      	mov	r3, r0
 800298c:	81fb      	strh	r3, [r7, #14]
    return zoom != 0 ? zoom : 1;
 800298e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <lv_obj_get_style_transform_scale_y_safe+0x24>
 8002996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800299a:	e000      	b.n	800299e <lv_obj_get_style_transform_scale_y_safe+0x26>
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <lv_obj_refr_size>:
        lv_obj_set_style_y(obj, y, 0);
    }
}

bool lv_obj_refr_size(lv_obj_t * obj)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b097      	sub	sp, #92	@ 0x5c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <lv_obj_refr_size+0x2c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <lv_obj_refr_size+0x2c>
 80029d0:	2300      	movs	r3, #0
 80029d2:	e1cf      	b.n	8002d74 <lv_obj_refr_size+0x3cc>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f002 fc49 	bl	800526c <lv_obj_get_parent>
 80029da:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if(parent == NULL) return false;
 80029dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <lv_obj_refr_size+0x3e>
 80029e2:	2300      	movs	r3, #0
 80029e4:	e1c6      	b.n	8002d74 <lv_obj_refr_size+0x3cc>

    bool w_is_content = false;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    bool w_is_pct = false;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

    int32_t w;
    if(obj->w_layout) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <lv_obj_refr_size+0x64>
        w = lv_obj_get_width(obj);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9f1 	bl	8002dea <lv_obj_get_width>
 8002a08:	6578      	str	r0, [r7, #84]	@ 0x54
 8002a0a:	e089      	b.n	8002b20 <lv_obj_refr_size+0x178>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fd51 	bl	80024b6 <lv_obj_get_style_width>
 8002a14:	6578      	str	r0, [r7, #84]	@ 0x54
        w_is_content = w == LV_SIZE_CONTENT;
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	4a98      	ldr	r2, [pc, #608]	@ (8002c7c <lv_obj_refr_size+0x2d4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        w_is_pct = LV_COORD_IS_PCT(w);
 8002a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a28:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8002a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a30:	d107      	bne.n	8002a42 <lv_obj_refr_size+0x9a>
 8002a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a34:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002a38:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002a3c:	dc01      	bgt.n	8002a42 <lv_obj_refr_size+0x9a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <lv_obj_refr_size+0x9c>
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8002a48:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        int32_t parent_w = lv_obj_get_content_width(parent);
 8002a54:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a56:	f000 f9e4 	bl	8002e22 <lv_obj_get_content_width>
 8002a5a:	6478      	str	r0, [r7, #68]	@ 0x44

        if(w_is_content) {
 8002a5c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <lv_obj_refr_size+0xc6>
            w = calc_content_width(obj);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fd61 	bl	800352c <calc_content_width>
 8002a6a:	6578      	str	r0, [r7, #84]	@ 0x54
 8002a6c:	e047      	b.n	8002afe <lv_obj_refr_size+0x156>
        }
        else if(w_is_pct) {
 8002a6e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d043      	beq.n	8002afe <lv_obj_refr_size+0x156>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8002a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a78:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <lv_obj_refr_size+0x108>
 8002a86:	2100      	movs	r1, #0
 8002a88:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002a8a:	f7ff fd14 	bl	80024b6 <lv_obj_get_style_width>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a7a      	ldr	r2, [pc, #488]	@ (8002c7c <lv_obj_refr_size+0x2d4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10c      	bne.n	8002ab0 <lv_obj_refr_size+0x108>
                w = lv_obj_get_style_space_left(obj, 0) + lv_obj_get_style_space_right(obj, 0);
 8002a96:	2100      	movs	r1, #0
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feca 	bl	8002832 <lv_obj_get_style_space_left>
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fee8 	bl	8002878 <lv_obj_get_style_space_right>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4423      	add	r3, r4
 8002aac:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aae:	e026      	b.n	8002afe <lv_obj_refr_size+0x156>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002ab6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aba:	dd05      	ble.n	8002ac8 <lv_obj_refr_size+0x120>
 8002abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002ac2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8002ac6:	e002      	b.n	8002ace <lv_obj_refr_size+0x126>
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c80 <lv_obj_refr_size+0x2d8>)
 8002ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8002ada:	1152      	asrs	r2, r2, #5
 8002adc:	17db      	asrs	r3, r3, #31
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	657b      	str	r3, [r7, #84]	@ 0x54
                w -= lv_obj_get_style_margin_left(obj, LV_PART_MAIN) + lv_obj_get_style_margin_right(obj, LV_PART_MAIN);
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fe3b 	bl	8002760 <lv_obj_get_style_margin_left>
 8002aea:	4604      	mov	r4, r0
 8002aec:	2100      	movs	r1, #0
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fe47 	bl	8002782 <lv_obj_get_style_margin_right>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4423      	add	r3, r4
 8002af8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }

        int32_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 8002afe:	2100      	movs	r1, #0
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fce9 	bl	80024d8 <lv_obj_get_style_min_width>
 8002b06:	6438      	str	r0, [r7, #64]	@ 0x40
        int32_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 8002b08:	2100      	movs	r1, #0
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fcf5 	bl	80024fa <lv_obj_get_style_max_width>
 8002b10:	63f8      	str	r0, [r7, #60]	@ 0x3c
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8002b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b18:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b1a:	f000 fc43 	bl	80033a4 <lv_clamp_width>
 8002b1e:	6578      	str	r0, [r7, #84]	@ 0x54
    }

    int32_t h;
    bool h_is_content = false;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    bool h_is_pct = false;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    if(obj->h_layout) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <lv_obj_refr_size+0x19e>
        h = lv_obj_get_height(obj);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f962 	bl	8002e06 <lv_obj_get_height>
 8002b42:	6538      	str	r0, [r7, #80]	@ 0x50
 8002b44:	e089      	b.n	8002c5a <lv_obj_refr_size+0x2b2>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8002b46:	2100      	movs	r1, #0
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fce7 	bl	800251c <lv_obj_get_style_height>
 8002b4e:	6538      	str	r0, [r7, #80]	@ 0x50
        h_is_content = h == LV_SIZE_CONTENT;
 8002b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b52:	4a4a      	ldr	r2, [pc, #296]	@ (8002c7c <lv_obj_refr_size+0x2d4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        h_is_pct = LV_COORD_IS_PCT(h);
 8002b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b62:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8002b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b6a:	d107      	bne.n	8002b7c <lv_obj_refr_size+0x1d4>
 8002b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002b72:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002b76:	dc01      	bgt.n	8002b7c <lv_obj_refr_size+0x1d4>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <lv_obj_refr_size+0x1d6>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8002b82:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        int32_t parent_h = lv_obj_get_content_height(parent);
 8002b8e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b90:	f000 f961 	bl	8002e56 <lv_obj_get_content_height>
 8002b94:	6378      	str	r0, [r7, #52]	@ 0x34

        if(h_is_content) {
 8002b96:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <lv_obj_refr_size+0x200>
            h = calc_content_height(obj);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fe20 	bl	80037e4 <calc_content_height>
 8002ba4:	6538      	str	r0, [r7, #80]	@ 0x50
 8002ba6:	e047      	b.n	8002c38 <lv_obj_refr_size+0x290>
        }
        else if(h_is_pct) {
 8002ba8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d043      	beq.n	8002c38 <lv_obj_refr_size+0x290>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8002bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bb2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d114      	bne.n	8002bea <lv_obj_refr_size+0x242>
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002bc4:	f7ff fcaa 	bl	800251c <lv_obj_get_style_height>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4a2c      	ldr	r2, [pc, #176]	@ (8002c7c <lv_obj_refr_size+0x2d4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10c      	bne.n	8002bea <lv_obj_refr_size+0x242>
                h = lv_obj_get_style_space_top(obj, 0) + lv_obj_get_style_space_bottom(obj, 0);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fe73 	bl	80028be <lv_obj_get_style_space_top>
 8002bd8:	4604      	mov	r4, r0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff fe91 	bl	8002904 <lv_obj_get_style_space_bottom>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4423      	add	r3, r4
 8002be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be8:	e026      	b.n	8002c38 <lv_obj_refr_size+0x290>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8002bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bec:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bf4:	dd05      	ble.n	8002c02 <lv_obj_refr_size+0x25a>
 8002bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bf8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002bfc:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8002c00:	e002      	b.n	8002c08 <lv_obj_refr_size+0x260>
 8002c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c04:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8002c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <lv_obj_refr_size+0x2d8>)
 8002c10:	fb82 1203 	smull	r1, r2, r2, r3
 8002c14:	1152      	asrs	r2, r2, #5
 8002c16:	17db      	asrs	r3, r3, #31
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	653b      	str	r3, [r7, #80]	@ 0x50
                h -= lv_obj_get_style_margin_top(obj, LV_PART_MAIN) + lv_obj_get_style_margin_bottom(obj, LV_PART_MAIN);
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fd7c 	bl	800271c <lv_obj_get_style_margin_top>
 8002c24:	4604      	mov	r4, r0
 8002c26:	2100      	movs	r1, #0
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fd88 	bl	800273e <lv_obj_get_style_margin_bottom>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4423      	add	r3, r4
 8002c32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	653b      	str	r3, [r7, #80]	@ 0x50
            }
        }

        int32_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fc7f 	bl	800253e <lv_obj_get_style_min_height>
 8002c40:	6338      	str	r0, [r7, #48]	@ 0x30
        int32_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 8002c42:	2100      	movs	r1, #0
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fc8b 	bl	8002560 <lv_obj_get_style_max_height>
 8002c4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c52:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002c54:	f000 fc08 	bl	8003468 <lv_clamp_height>
 8002c58:	6538      	str	r0, [r7, #80]	@ 0x50
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8c5 	bl	8002dea <lv_obj_get_width>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10d      	bne.n	8002c84 <lv_obj_refr_size+0x2dc>
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f8cc 	bl	8002e06 <lv_obj_get_height>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d106      	bne.n	8002c84 <lv_obj_refr_size+0x2dc>
 8002c76:	2300      	movs	r3, #0
 8002c78:	e07c      	b.n	8002d74 <lv_obj_refr_size+0x3cc>
 8002c7a:	bf00      	nop
 8002c7c:	200007d1 	.word	0x200007d1
 8002c80:	51eb851f 	.word	0x51eb851f

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fab4 	bl	80031f2 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 8002c8a:	f107 0318 	add.w	r3, r7, #24
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f89b 	bl	8002dcc <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c9e:	f000 f8f4 	bl	8002e8a <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8002ca2:	f107 0108 	add.w	r1, r7, #8
 8002ca6:	f107 0318 	add.w	r3, r7, #24
 8002caa:	2200      	movs	r2, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f017 fe5d 	bl	801a96c <_lv_area_is_in>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8002cb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cbc:	f083 0301 	eor.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <lv_obj_refr_size+0x324>
 8002cc6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002cc8:	f001 fee6 	bl	8004a98 <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd2:	4413      	add	r3, r2
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8002cda:	2100      	movs	r1, #0
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fd96 	bl	800280e <lv_obj_get_style_base_dir>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <lv_obj_refr_size+0x350>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	615a      	str	r2, [r3, #20]
 8002cf6:	e006      	b.n	8002d06 <lv_obj_refr_size+0x35e>
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfe:	4413      	add	r3, r2
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	61da      	str	r2, [r3, #28]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_obj_send_event(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	212b      	movs	r1, #43	@ 0x2b
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fa65 	bl	80021de <lv_obj_send_event>

    /*Call the ancestor's event handler to the parent too*/
    lv_obj_send_event(parent, LV_EVENT_CHILD_CHANGED, obj);
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	2124      	movs	r1, #36	@ 0x24
 8002d18:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d1a:	f7ff fa60 	bl	80021de <lv_obj_send_event>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa67 	bl	80031f2 <lv_obj_invalidate>

    obj->readjust_scroll_after_layout = 1;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 8002d2a:	f043 0302 	orr.w	r3, r3, #2
 8002d2e:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3314      	adds	r3, #20
 8002d36:	f107 0108 	add.w	r1, r7, #8
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f017 fe15 	bl	801a96c <_lv_area_is_in>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8002d48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <lv_obj_refr_size+0x3be>
 8002d50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d006      	beq.n	8002d6c <lv_obj_refr_size+0x3c4>
 8002d5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <lv_obj_refr_size+0x3c4>
 8002d66:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d68:	f001 fe96 	bl	8004a98 <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff f9dd 	bl	800212c <lv_obj_refresh_ext_draw_size>

    return true;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	375c      	adds	r7, #92	@ 0x5c
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}

08002d7c <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8002d84:	4910      	ldr	r1, [pc, #64]	@ (8002dc8 <lv_obj_is_layout_positioned+0x4c>)
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff f991 	bl	80020ae <lv_obj_has_flag_any>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <lv_obj_is_layout_positioned+0x1a>
 8002d92:	2300      	movs	r3, #0
 8002d94:	e014      	b.n	8002dc0 <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f002 fa68 	bl	800526c <lv_obj_get_parent>
 8002d9c:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <lv_obj_is_layout_positioned+0x2c>
 8002da4:	2300      	movs	r3, #0
 8002da6:	e00b      	b.n	8002dc0 <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 8002da8:	2100      	movs	r1, #0
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff fd1d 	bl	80027ea <lv_obj_get_style_layout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <lv_obj_is_layout_positioned+0x42>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <lv_obj_is_layout_positioned+0x44>
    else return false;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	00060001 	.word	0x00060001

08002dcc <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	f7ff fb2f 	bl	8002440 <lv_area_copy>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <lv_obj_get_width>:
{
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}

int32_t lv_obj_get_width(const lv_obj_t * obj)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3314      	adds	r3, #20
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fb3d 	bl	8002476 <lv_area_get_width>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <lv_obj_get_height>:

int32_t lv_obj_get_height(const lv_obj_t * obj)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3314      	adds	r3, #20
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fb3f 	bl	8002496 <lv_area_get_height>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <lv_obj_get_content_width>:

int32_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    int32_t left = lv_obj_get_style_space_left(obj, LV_PART_MAIN);
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fd00 	bl	8002832 <lv_obj_get_style_space_left>
 8002e32:	60f8      	str	r0, [r7, #12]
    int32_t right = lv_obj_get_style_space_right(obj, LV_PART_MAIN);
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fd1e 	bl	8002878 <lv_obj_get_style_space_right>
 8002e3c:	60b8      	str	r0, [r7, #8]

    return lv_obj_get_width(obj) - left - right;
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffd3 	bl	8002dea <lv_obj_get_width>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad2      	subs	r2, r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <lv_obj_get_content_height>:

int32_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    int32_t top = lv_obj_get_style_space_top(obj, LV_PART_MAIN);
 8002e5e:	2100      	movs	r1, #0
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fd2c 	bl	80028be <lv_obj_get_style_space_top>
 8002e66:	60f8      	str	r0, [r7, #12]
    int32_t bottom = lv_obj_get_style_space_bottom(obj, LV_PART_MAIN);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fd4a 	bl	8002904 <lv_obj_get_style_space_bottom>
 8002e70:	60b8      	str	r0, [r7, #8]

    return lv_obj_get_height(obj) - top - bottom;
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffc7 	bl	8002e06 <lv_obj_get_height>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad2      	subs	r2, r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_get_coords(obj, area);
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff98 	bl	8002dcc <lv_obj_get_coords>
    area->x1 += lv_obj_get_style_space_left(obj, LV_PART_MAIN);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fcc7 	bl	8002832 <lv_obj_get_style_space_left>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	441a      	add	r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	601a      	str	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_space_right(obj, LV_PART_MAIN);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fce0 	bl	8002878 <lv_obj_get_style_space_right>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	1a9a      	subs	r2, r3, r2
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	609a      	str	r2, [r3, #8]
    area->y1 += lv_obj_get_style_space_top(obj, LV_PART_MAIN);
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff fcf9 	bl	80028be <lv_obj_get_style_space_top>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	441a      	add	r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
    area->y2 -= lv_obj_get_style_space_bottom(obj, LV_PART_MAIN);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fd12 	bl	8002904 <lv_obj_get_style_space_bottom>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	1a9a      	subs	r2, r3, r2
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	60da      	str	r2, [r3, #12]

}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <lv_obj_get_self_width>:

int32_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <lv_obj_get_self_width+0x28>)
 8002f02:	60fb      	str	r3, [r7, #12]
    lv_obj_send_event((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	461a      	mov	r2, r3
 8002f0a:	212e      	movs	r1, #46	@ 0x2e
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff f966 	bl	80021de <lv_obj_send_event>
    return p.x;
 8002f12:	68bb      	ldr	r3, [r7, #8]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	e0000001 	.word	0xe0000001

08002f20 <lv_obj_get_self_height>:

int32_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 8002f28:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <lv_obj_get_self_height+0x28>)
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
    lv_obj_send_event((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	461a      	mov	r2, r3
 8002f36:	212e      	movs	r1, #46	@ 0x2e
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff f950 	bl	80021de <lv_obj_send_event>
    return p.y;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	e0000001 	.word	0xe0000001

08002f4c <lv_obj_move_children_by>:
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
    }
}

void lv_obj_move_children_by(lv_obj_t * obj, int32_t x_diff, int32_t y_diff, bool ignore_floating)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	70fb      	strb	r3, [r7, #3]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_count(obj);
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f002 f9cc 	bl	80052f8 <lv_obj_get_child_count>
 8002f60:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e035      	b.n	8002fd4 <lv_obj_move_children_by+0x88>
        lv_obj_t * child = obj->spec_attr->children[i];
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <lv_obj_move_children_by+0x42>
 8002f7e:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff f87e 	bl	8002084 <lv_obj_has_flag>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11e      	bne.n	8002fcc <lv_obj_move_children_by+0x80>
        child->coords.x1 += x_diff;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	441a      	add	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	615a      	str	r2, [r3, #20]
        child->coords.y1 += y_diff;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	619a      	str	r2, [r3, #24]
        child->coords.x2 += x_diff;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	441a      	add	r2, r3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	61da      	str	r2, [r3, #28]
        child->coords.y2 += y_diff;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	441a      	add	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	621a      	str	r2, [r3, #32]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	6978      	ldr	r0, [r7, #20]
 8002fc6:	f7ff ffc1 	bl	8002f4c <lv_obj_move_children_by>
 8002fca:	e000      	b.n	8002fce <lv_obj_move_children_by+0x82>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8002fcc:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3c5      	bcc.n	8002f68 <lv_obj_move_children_by+0x1c>
    }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	71fb      	strb	r3, [r7, #7]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d036      	beq.n	8003070 <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff f8d4 	bl	80021b0 <_lv_obj_get_layer_type>
 8003008:	4603      	mov	r3, r0
 800300a:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b02      	cmp	r3, #2
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 8003018:	79bb      	ldrb	r3, [r7, #6]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d014      	beq.n	8003048 <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d007      	beq.n	8003034 <lv_obj_transform_point+0x4e>
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f002 f921 	bl	800526c <lv_obj_get_parent>
 800302a:	79bb      	ldrb	r3, [r7, #6]
 800302c:	79fa      	ldrb	r2, [r7, #7]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	f7ff ffd9 	bl	8002fe6 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8003034:	7dbb      	ldrb	r3, [r7, #22]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01a      	beq.n	8003070 <lv_obj_transform_point+0x8a>
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	461a      	mov	r2, r3
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fc83 	bl	800394c <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 8003046:	e013      	b.n	8003070 <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 8003048:	7dbb      	ldrb	r3, [r7, #22]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <lv_obj_transform_point+0x74>
 800304e:	79bb      	ldrb	r3, [r7, #6]
 8003050:	461a      	mov	r2, r3
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fc79 	bl	800394c <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <lv_obj_transform_point+0x8a>
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f002 f903 	bl	800526c <lv_obj_get_parent>
 8003066:	79bb      	ldrb	r3, [r7, #6]
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	f7ff ffbb 	bl	8002fe6 <lv_obj_transform_point>
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	@ 0x30
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	460b      	mov	r3, r1
 8003088:	71fb      	strb	r3, [r7, #7]
 800308a:	4613      	mov	r3, r2
 800308c:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	681b      	ldr	r3, [r3, #0]
    lv_point_t p[4] = {
 8003092:	613b      	str	r3, [r7, #16]
        {area->x1, area->y1},
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	685b      	ldr	r3, [r3, #4]
    lv_point_t p[4] = {
 8003098:	617b      	str	r3, [r7, #20]
        {area->x1, area->y2},
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	681b      	ldr	r3, [r3, #0]
    lv_point_t p[4] = {
 800309e:	61bb      	str	r3, [r7, #24]
        {area->x1, area->y2},
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	68db      	ldr	r3, [r3, #12]
    lv_point_t p[4] = {
 80030a4:	61fb      	str	r3, [r7, #28]
        {area->x2, area->y1},
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	689b      	ldr	r3, [r3, #8]
    lv_point_t p[4] = {
 80030aa:	623b      	str	r3, [r7, #32]
        {area->x2, area->y1},
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	685b      	ldr	r3, [r3, #4]
    lv_point_t p[4] = {
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
        {area->x2, area->y2},
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	689b      	ldr	r3, [r3, #8]
    lv_point_t p[4] = {
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        {area->x2, area->y2},
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	68db      	ldr	r3, [r3, #12]
    lv_point_t p[4] = {
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	79fa      	ldrb	r2, [r7, #7]
 80030c2:	f107 0110 	add.w	r1, r7, #16
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff ff8d 	bl	8002fe6 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 80030cc:	79b8      	ldrb	r0, [r7, #6]
 80030ce:	79fa      	ldrb	r2, [r7, #7]
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	f103 0108 	add.w	r1, r3, #8
 80030d8:	4603      	mov	r3, r0
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff83 	bl	8002fe6 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 80030e0:	79b8      	ldrb	r0, [r7, #6]
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	f103 0110 	add.w	r1, r3, #16
 80030ec:	4603      	mov	r3, r0
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ff79 	bl	8002fe6 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 80030f4:	79b8      	ldrb	r0, [r7, #6]
 80030f6:	79fa      	ldrb	r2, [r7, #7]
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	f103 0118 	add.w	r1, r3, #24
 8003100:	4603      	mov	r3, r0
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff6f 	bl	8002fe6 <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8003108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	429a      	cmp	r2, r3
 800310e:	bfa8      	it	ge
 8003110:	461a      	movge	r2, r3
 8003112:	69b9      	ldr	r1, [r7, #24]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	428b      	cmp	r3, r1
 8003118:	bfa8      	it	ge
 800311a:	460b      	movge	r3, r1
 800311c:	429a      	cmp	r2, r3
 800311e:	bfa8      	it	ge
 8003120:	461a      	movge	r2, r3
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	601a      	str	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 8003126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	429a      	cmp	r2, r3
 800312c:	bfb8      	it	lt
 800312e:	461a      	movlt	r2, r3
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	428b      	cmp	r3, r1
 8003136:	bfb8      	it	lt
 8003138:	460b      	movlt	r3, r1
 800313a:	429a      	cmp	r2, r3
 800313c:	bfb8      	it	lt
 800313e:	461a      	movlt	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8003144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	429a      	cmp	r2, r3
 800314a:	bfa8      	it	ge
 800314c:	461a      	movge	r2, r3
 800314e:	69f9      	ldr	r1, [r7, #28]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	428b      	cmp	r3, r1
 8003154:	bfa8      	it	ge
 8003156:	460b      	movge	r3, r1
 8003158:	429a      	cmp	r2, r3
 800315a:	bfa8      	it	ge
 800315c:	461a      	movge	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	605a      	str	r2, [r3, #4]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	429a      	cmp	r2, r3
 8003168:	bfb8      	it	lt
 800316a:	461a      	movlt	r2, r3
 800316c:	69f9      	ldr	r1, [r7, #28]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	428b      	cmp	r3, r1
 8003172:	bfb8      	it	lt
 8003174:	460b      	movlt	r3, r1
 8003176:	429a      	cmp	r2, r3
 8003178:	bfb8      	it	lt
 800317a:	461a      	movlt	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	60da      	str	r2, [r3, #12]
}
 8003180:	bf00      	nop
 8003182:	3730      	adds	r7, #48	@ 0x30
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <lv_obj_invalidate_area>:

void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_display_t * disp   = lv_obj_get_display(obj);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f002 f82c 	bl	80051f0 <lv_obj_get_display>
 8003198:	61f8      	str	r0, [r7, #28]
    if(!lv_display_is_invalidation_enabled(disp)) return;
 800319a:	69f8      	ldr	r0, [r7, #28]
 800319c:	f002 fae6 	bl	800576c <lv_display_is_invalidation_enabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f083 0301 	eor.w	r3, r3, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11c      	bne.n	80031e6 <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f944 	bl	8002440 <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f842 	bl	8003248 <lv_obj_area_is_visible>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f083 0301 	eor.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10c      	bne.n	80031ea <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_display(obj),  &area_tmp);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f002 f80d 	bl	80051f0 <lv_obj_get_display>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f002 f8bf 	bl	8005362 <_lv_inv_area>
 80031e4:	e002      	b.n	80031ec <lv_obj_invalidate_area+0x64>
    if(!lv_display_is_invalidation_enabled(disp)) return;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80031ea:	bf00      	nop
}
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b088      	sub	sp, #32
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    int32_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe ffc5 	bl	800218a <_lv_obj_get_ext_draw_size>
 8003200:	61f8      	str	r0, [r7, #28]
    lv_area_copy(&obj_coords, &obj->coords);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f103 0214 	add.w	r2, r3, #20
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f916 	bl	8002440 <lv_area_copy>
    obj_coords.x1 -= ext_size;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	60fb      	str	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	613b      	str	r3, [r7, #16]
    obj_coords.x2 += ext_size;
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    obj_coords.y2 += ext_size;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]

    lv_obj_invalidate_area(obj, &obj_coords);
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa4 	bl	8003188 <lv_obj_invalidate_area>
}
 8003240:	bf00      	nop
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b091      	sub	sp, #68	@ 0x44
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8003252:	2101      	movs	r1, #1
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fe ff15 	bl	8002084 <lv_obj_has_flag>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <lv_obj_area_is_visible+0x1c>
 8003260:	2300      	movs	r3, #0
 8003262:	e09b      	b.n	800339c <lv_obj_area_is_visible+0x154>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f001 ffaf 	bl	80051c8 <lv_obj_get_screen>
 800326a:	63b8      	str	r0, [r7, #56]	@ 0x38
    lv_display_t * disp   = lv_obj_get_display(obj_scr);
 800326c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800326e:	f001 ffbf 	bl	80051f0 <lv_obj_get_display>
 8003272:	6378      	str	r0, [r7, #52]	@ 0x34
    if(obj_scr != lv_display_get_screen_active(disp) &&
 8003274:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003276:	f002 f9ca 	bl	800560e <lv_display_get_screen_active>
 800327a:	4602      	mov	r2, r0
 800327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327e:	4293      	cmp	r3, r2
 8003280:	d01d      	beq.n	80032be <lv_obj_area_is_visible+0x76>
       obj_scr != lv_display_get_screen_prev(disp) &&
 8003282:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003284:	f002 f9d9 	bl	800563a <lv_display_get_screen_prev>
 8003288:	4602      	mov	r2, r0
    if(obj_scr != lv_display_get_screen_active(disp) &&
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	4293      	cmp	r3, r2
 800328e:	d016      	beq.n	80032be <lv_obj_area_is_visible+0x76>
       obj_scr != lv_display_get_layer_bottom(disp) &&
 8003290:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003292:	f002 fa14 	bl	80056be <lv_display_get_layer_bottom>
 8003296:	4602      	mov	r2, r0
       obj_scr != lv_display_get_screen_prev(disp) &&
 8003298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329a:	4293      	cmp	r3, r2
 800329c:	d00f      	beq.n	80032be <lv_obj_area_is_visible+0x76>
       obj_scr != lv_display_get_layer_top(disp) &&
 800329e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032a0:	f002 f9e1 	bl	8005666 <lv_display_get_layer_top>
 80032a4:	4602      	mov	r2, r0
       obj_scr != lv_display_get_layer_bottom(disp) &&
 80032a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d008      	beq.n	80032be <lv_obj_area_is_visible+0x76>
       obj_scr != lv_display_get_layer_sys(disp)) {
 80032ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032ae:	f002 f9f0 	bl	8005692 <lv_display_get_layer_sys>
 80032b2:	4602      	mov	r2, r0
       obj_scr != lv_display_get_layer_top(disp) &&
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d001      	beq.n	80032be <lv_obj_area_is_visible+0x76>
        return false;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e06e      	b.n	800339c <lv_obj_area_is_visible+0x154>
    }

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    int32_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe ff63 	bl	800218a <_lv_obj_get_ext_draw_size>
 80032c4:	6338      	str	r0, [r7, #48]	@ 0x30
    lv_area_copy(&obj_coords, &obj->coords);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0214 	add.w	r2, r3, #20
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f8b4 	bl	8002440 <lv_area_copy>
    lv_area_increase(&obj_coords, ext_size, ext_size);
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e0:	4618      	mov	r0, r3
 80032e2:	f017 f9d7 	bl	801a694 <lv_area_increase>

    /*The area is not on the object*/
    if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	461a      	mov	r2, r3
 80032ec:	6839      	ldr	r1, [r7, #0]
 80032ee:	6838      	ldr	r0, [r7, #0]
 80032f0:	f017 fa18 	bl	801a724 <_lv_area_intersect>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <lv_obj_area_is_visible+0xbc>
 8003300:	2300      	movs	r3, #0
 8003302:	e04b      	b.n	800339c <lv_obj_area_is_visible+0x154>

    lv_obj_get_transformed_area(obj, area, true, false);
 8003304:	2300      	movs	r3, #0
 8003306:	2201      	movs	r2, #1
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff feb4 	bl	8003078 <lv_obj_get_transformed_area>

    /*Truncate recursively to the parents*/
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f001 ffab 	bl	800526c <lv_obj_get_parent>
 8003316:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while(parent != NULL) {
 8003318:	e03c      	b.n	8003394 <lv_obj_area_is_visible+0x14c>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) return false;
 800331a:	2101      	movs	r1, #1
 800331c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800331e:	f7fe feb1 	bl	8002084 <lv_obj_has_flag>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <lv_obj_area_is_visible+0xe4>
 8003328:	2300      	movs	r3, #0
 800332a:	e037      	b.n	800339c <lv_obj_area_is_visible+0x154>

        /*Truncate to the parent and if no common parts break*/
        lv_area_t parent_coords = parent->coords;
 800332c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332e:	f107 040c 	add.w	r4, r7, #12
 8003332:	3314      	adds	r3, #20
 8003334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if(lv_obj_has_flag(parent, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800333a:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800333e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003340:	f7fe fea0 	bl	8002084 <lv_obj_has_flag>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <lv_obj_area_is_visible+0x118>
            int32_t parent_ext_size = _lv_obj_get_ext_draw_size(parent);
 800334a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800334c:	f7fe ff1d 	bl	800218a <_lv_obj_get_ext_draw_size>
 8003350:	62f8      	str	r0, [r7, #44]	@ 0x2c
            lv_area_increase(&parent_coords, parent_ext_size, parent_ext_size);
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800335a:	4618      	mov	r0, r3
 800335c:	f017 f99a 	bl	801a694 <lv_area_increase>
        }

        lv_obj_get_transformed_area(parent, &parent_coords, true, false);
 8003360:	f107 010c 	add.w	r1, r7, #12
 8003364:	2300      	movs	r3, #0
 8003366:	2201      	movs	r2, #1
 8003368:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800336a:	f7ff fe85 	bl	8003078 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(area, area, &parent_coords)) return false;
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	461a      	mov	r2, r3
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f017 f9d4 	bl	801a724 <_lv_area_intersect>
 800337c:	4603      	mov	r3, r0
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <lv_obj_area_is_visible+0x144>
 8003388:	2300      	movs	r3, #0
 800338a:	e007      	b.n	800339c <lv_obj_area_is_visible+0x154>

        parent = lv_obj_get_parent(parent);
 800338c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800338e:	f001 ff6d 	bl	800526c <lv_obj_get_parent>
 8003392:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while(parent != NULL) {
 8003394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1bf      	bne.n	800331a <lv_obj_area_is_visible+0xd2>
    }

    return true;
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	3744      	adds	r7, #68	@ 0x44
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}

080033a4 <lv_clamp_width>:

    return res;
}

int32_t lv_clamp_width(int32_t width, int32_t min_width, int32_t max_width, int32_t ref_width)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80033b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033bc:	d11e      	bne.n	80033fc <lv_clamp_width+0x58>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80033c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80033c8:	dc18      	bgt.n	80033fc <lv_clamp_width+0x58>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80033d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d4:	dd05      	ble.n	80033e2 <lv_clamp_width+0x3e>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80033dc:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80033e0:	e002      	b.n	80033e8 <lv_clamp_width+0x44>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003464 <lv_clamp_width+0xc0>)
 80033f0:	fb82 1203 	smull	r1, r2, r2, r3
 80033f4:	1152      	asrs	r2, r2, #5
 80033f6:	17db      	asrs	r3, r3, #31
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	60bb      	str	r3, [r7, #8]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003406:	d11e      	bne.n	8003446 <lv_clamp_width+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800340e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003412:	dc18      	bgt.n	8003446 <lv_clamp_width+0xa2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800341a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800341e:	dd05      	ble.n	800342c <lv_clamp_width+0x88>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003426:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800342a:	e002      	b.n	8003432 <lv_clamp_width+0x8e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a0a      	ldr	r2, [pc, #40]	@ (8003464 <lv_clamp_width+0xc0>)
 800343a:	fb82 1203 	smull	r1, r2, r2, r3
 800343e:	1152      	asrs	r2, r2, #5
 8003440:	17db      	asrs	r3, r3, #31
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	607b      	str	r3, [r7, #4]
    return LV_CLAMP(min_width, width, max_width);
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	429a      	cmp	r2, r3
 800344c:	bfa8      	it	ge
 800344e:	461a      	movge	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4293      	cmp	r3, r2
 8003454:	bfb8      	it	lt
 8003456:	4613      	movlt	r3, r2
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	51eb851f 	.word	0x51eb851f

08003468 <lv_clamp_height>:

int32_t lv_clamp_height(int32_t height, int32_t min_height, int32_t max_height, int32_t ref_height)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003480:	d11e      	bne.n	80034c0 <lv_clamp_height+0x58>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003488:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800348c:	dc18      	bgt.n	80034c0 <lv_clamp_height+0x58>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003498:	dd05      	ble.n	80034a6 <lv_clamp_height+0x3e>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80034a0:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80034a4:	e002      	b.n	80034ac <lv_clamp_height+0x44>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <lv_clamp_height+0xc0>)
 80034b4:	fb82 1203 	smull	r1, r2, r2, r3
 80034b8:	1152      	asrs	r2, r2, #5
 80034ba:	17db      	asrs	r3, r3, #31
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	60bb      	str	r3, [r7, #8]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80034c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034ca:	d11e      	bne.n	800350a <lv_clamp_height+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80034d2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80034d6:	dc18      	bgt.n	800350a <lv_clamp_height+0xa2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80034de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034e2:	dd05      	ble.n	80034f0 <lv_clamp_height+0x88>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80034ea:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80034ee:	e002      	b.n	80034f6 <lv_clamp_height+0x8e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <lv_clamp_height+0xc0>)
 80034fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003502:	1152      	asrs	r2, r2, #5
 8003504:	17db      	asrs	r3, r3, #31
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	607b      	str	r3, [r7, #4]
    return LV_CLAMP(min_height, height, max_height);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	429a      	cmp	r2, r3
 8003510:	bfa8      	it	ge
 8003512:	461a      	movge	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4293      	cmp	r3, r2
 8003518:	bfb8      	it	lt
 800351a:	4613      	movlt	r3, r2
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	51eb851f 	.word	0x51eb851f

0800352c <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static int32_t calc_content_width(lv_obj_t * obj)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b090      	sub	sp, #64	@ 0x40
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    int32_t scroll_x_tmp = lv_obj_get_scroll_x(obj);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fc5f 	bl	8003df8 <lv_obj_get_scroll_x>
 800353a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if(obj->spec_attr) obj->spec_attr->scroll.x = 0;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <calc_content_width+0x20>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]

    int32_t space_right = lv_obj_get_style_space_right(obj, LV_PART_MAIN);
 800354c:	2100      	movs	r1, #0
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff f992 	bl	8002878 <lv_obj_get_style_space_right>
 8003554:	62b8      	str	r0, [r7, #40]	@ 0x28
    int32_t space_left = lv_obj_get_style_space_left(obj, LV_PART_MAIN);
 8003556:	2100      	movs	r1, #0
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff f96a 	bl	8002832 <lv_obj_get_style_space_left>
 800355e:	6278      	str	r0, [r7, #36]	@ 0x24

    int32_t self_w;
    self_w = lv_obj_get_self_width(obj) + space_left + space_right;
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fcc7 	bl	8002ef4 <lv_obj_get_self_width>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	4413      	add	r3, r2
 800356c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800356e:	4413      	add	r3, r2
 8003570:	623b      	str	r3, [r7, #32]

    int32_t child_res = LV_COORD_MIN;
 8003572:	4b9a      	ldr	r3, [pc, #616]	@ (80037dc <calc_content_width+0x2b0>)
 8003574:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_count(obj);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f001 febe 	bl	80052f8 <lv_obj_get_child_count>
 800357c:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800357e:	2100      	movs	r1, #0
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff f944 	bl	800280e <lv_obj_get_style_base_dir>
 8003586:	4603      	mov	r3, r0
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 8089 	bne.w	80036a0 <calc_content_width+0x174>
        for(i = 0; i < child_cnt; i++) {
 800358e:	2300      	movs	r3, #0
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003592:	e077      	b.n	8003684 <calc_content_width+0x158>
            int32_t child_res_tmp = LV_COORD_MIN;
 8003594:	4b91      	ldr	r3, [pc, #580]	@ (80037dc <calc_content_width+0x2b0>)
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
            lv_obj_t * child = obj->spec_attr->children[i];
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80035a8:	498d      	ldr	r1, [pc, #564]	@ (80037e0 <calc_content_width+0x2b4>)
 80035aa:	6938      	ldr	r0, [r7, #16]
 80035ac:	f7fe fd7f 	bl	80020ae <lv_obj_has_flag_any>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d162      	bne.n	800367c <calc_content_width+0x150>

            if(!lv_obj_is_layout_positioned(child)) {
 80035b6:	6938      	ldr	r0, [r7, #16]
 80035b8:	f7ff fbe0 	bl	8002d7c <lv_obj_is_layout_positioned>
 80035bc:	4603      	mov	r3, r0
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03b      	beq.n	8003640 <calc_content_width+0x114>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 80035c8:	2100      	movs	r1, #0
 80035ca:	6938      	ldr	r0, [r7, #16]
 80035cc:	f7fe fffb 	bl	80025c6 <lv_obj_get_style_align>
 80035d0:	4603      	mov	r3, r0
 80035d2:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	bf8c      	ite	hi
 80035da:	2201      	movhi	r2, #1
 80035dc:	2200      	movls	r2, #0
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	2a00      	cmp	r2, #0
 80035e2:	d114      	bne.n	800360e <calc_content_width+0xe2>
 80035e4:	f240 1249 	movw	r2, #329	@ 0x149
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <calc_content_width+0xe2>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res_tmp = obj->coords.x2 - child->coords.x1 + 1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	3301      	adds	r3, #1
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
                        break;
 800360c:	e021      	b.n	8003652 <calc_content_width+0x126>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 800360e:	2100      	movs	r1, #0
 8003610:	6938      	ldr	r0, [r7, #16]
 8003612:	f7fe ffb6 	bl	8002582 <lv_obj_get_style_x>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d119      	bne.n	8003650 <calc_content_width+0x124>
                            child_res_tmp = lv_area_get_width(&child->coords) + space_right;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	3314      	adds	r3, #20
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe ff28 	bl	8002476 <lv_area_get_width>
 8003626:	4602      	mov	r2, r0
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	4413      	add	r3, r2
 800362c:	637b      	str	r3, [r7, #52]	@ 0x34
                            child_res_tmp += lv_obj_get_style_margin_left(child, LV_PART_MAIN);
 800362e:	2100      	movs	r1, #0
 8003630:	6938      	ldr	r0, [r7, #16]
 8003632:	f7ff f895 	bl	8002760 <lv_obj_get_style_margin_left>
 8003636:	4602      	mov	r2, r0
 8003638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363a:	4413      	add	r3, r2
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
                        }
                        break;
 800363e:	e007      	b.n	8003650 <calc_content_width+0x124>
                }
            }
            else {
                child_res_tmp = obj->coords.x2 - child->coords.x1 + 1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	3301      	adds	r3, #1
 800364c:	637b      	str	r3, [r7, #52]	@ 0x34
 800364e:	e000      	b.n	8003652 <calc_content_width+0x126>
                        break;
 8003650:	bf00      	nop
            }
            child_res = LV_MAX(child_res, child_res_tmp + lv_obj_get_style_margin_left(child, LV_PART_MAIN));
 8003652:	2100      	movs	r1, #0
 8003654:	6938      	ldr	r0, [r7, #16]
 8003656:	f7ff f883 	bl	8002760 <lv_obj_get_style_margin_left>
 800365a:	4602      	mov	r2, r0
 800365c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365e:	4413      	add	r3, r2
 8003660:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003662:	429a      	cmp	r2, r3
 8003664:	dc07      	bgt.n	8003676 <calc_content_width+0x14a>
 8003666:	2100      	movs	r1, #0
 8003668:	6938      	ldr	r0, [r7, #16]
 800366a:	f7ff f879 	bl	8002760 <lv_obj_get_style_margin_left>
 800366e:	4602      	mov	r2, r0
 8003670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003672:	4413      	add	r3, r2
 8003674:	e000      	b.n	8003678 <calc_content_width+0x14c>
 8003676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800367a:	e000      	b.n	800367e <calc_content_width+0x152>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800367c:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	3301      	adds	r3, #1
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	429a      	cmp	r2, r3
 800368a:	d383      	bcc.n	8003594 <calc_content_width+0x68>
        }
        if(child_res != LV_COORD_MIN) {
 800368c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368e:	4a53      	ldr	r2, [pc, #332]	@ (80037dc <calc_content_width+0x2b0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	f000 808b 	beq.w	80037ac <calc_content_width+0x280>
            child_res += space_left;
 8003696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	4413      	add	r3, r2
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369e:	e085      	b.n	80037ac <calc_content_width+0x280>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 80036a0:	2300      	movs	r3, #0
 80036a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036a4:	e076      	b.n	8003794 <calc_content_width+0x268>
            int32_t child_res_tmp = LV_COORD_MIN;
 80036a6:	4b4d      	ldr	r3, [pc, #308]	@ (80037dc <calc_content_width+0x2b0>)
 80036a8:	633b      	str	r3, [r7, #48]	@ 0x30
            lv_obj_t * child = obj->spec_attr->children[i];
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80036ba:	4949      	ldr	r1, [pc, #292]	@ (80037e0 <calc_content_width+0x2b4>)
 80036bc:	69b8      	ldr	r0, [r7, #24]
 80036be:	f7fe fcf6 	bl	80020ae <lv_obj_has_flag_any>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d161      	bne.n	800378c <calc_content_width+0x260>

            if(!lv_obj_is_layout_positioned(child)) {
 80036c8:	69b8      	ldr	r0, [r7, #24]
 80036ca:	f7ff fb57 	bl	8002d7c <lv_obj_is_layout_positioned>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03a      	beq.n	8003750 <calc_content_width+0x224>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 80036da:	2100      	movs	r1, #0
 80036dc:	69b8      	ldr	r0, [r7, #24]
 80036de:	f7fe ff72 	bl	80025c6 <lv_obj_get_style_align>
 80036e2:	4603      	mov	r3, r0
 80036e4:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b07      	cmp	r3, #7
 80036ea:	bf8c      	ite	hi
 80036ec:	2201      	movhi	r2, #1
 80036ee:	2200      	movls	r2, #0
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	d113      	bne.n	800371e <calc_content_width+0x1f2>
 80036f6:	2293      	movs	r2, #147	@ 0x93
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <calc_content_width+0x1f2>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res_tmp = child->coords.x2 - obj->coords.x1 + 1;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	69da      	ldr	r2, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	3301      	adds	r3, #1
 800371a:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 800371c:	e021      	b.n	8003762 <calc_content_width+0x236>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 800371e:	2100      	movs	r1, #0
 8003720:	69b8      	ldr	r0, [r7, #24]
 8003722:	f7fe ff3f 	bl	80025a4 <lv_obj_get_style_y>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d119      	bne.n	8003760 <calc_content_width+0x234>
                            child_res_tmp = lv_area_get_width(&child->coords) + space_left;
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	3314      	adds	r3, #20
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fea0 	bl	8002476 <lv_area_get_width>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	4413      	add	r3, r2
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
                            child_res_tmp += lv_obj_get_style_margin_right(child, LV_PART_MAIN);
 800373e:	2100      	movs	r1, #0
 8003740:	69b8      	ldr	r0, [r7, #24]
 8003742:	f7ff f81e 	bl	8002782 <lv_obj_get_style_margin_right>
 8003746:	4602      	mov	r2, r0
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	4413      	add	r3, r2
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
                        }
                        break;
 800374e:	e007      	b.n	8003760 <calc_content_width+0x234>
                }
            }
            else {
                child_res_tmp = child->coords.x2 - obj->coords.x1 + 1;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	3301      	adds	r3, #1
 800375c:	633b      	str	r3, [r7, #48]	@ 0x30
 800375e:	e000      	b.n	8003762 <calc_content_width+0x236>
                        break;
 8003760:	bf00      	nop
            }

            child_res = LV_MAX(child_res, child_res_tmp + lv_obj_get_style_margin_right(child, LV_PART_MAIN));
 8003762:	2100      	movs	r1, #0
 8003764:	69b8      	ldr	r0, [r7, #24]
 8003766:	f7ff f80c 	bl	8002782 <lv_obj_get_style_margin_right>
 800376a:	4602      	mov	r2, r0
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	4413      	add	r3, r2
 8003770:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003772:	429a      	cmp	r2, r3
 8003774:	dc07      	bgt.n	8003786 <calc_content_width+0x25a>
 8003776:	2100      	movs	r1, #0
 8003778:	69b8      	ldr	r0, [r7, #24]
 800377a:	f7ff f802 	bl	8002782 <lv_obj_get_style_margin_right>
 800377e:	4602      	mov	r2, r0
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	4413      	add	r3, r2
 8003784:	e000      	b.n	8003788 <calc_content_width+0x25c>
 8003786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800378a:	e000      	b.n	800378e <calc_content_width+0x262>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800378c:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	3301      	adds	r3, #1
 8003792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	429a      	cmp	r2, r3
 800379a:	d384      	bcc.n	80036a6 <calc_content_width+0x17a>
        }

        if(child_res != LV_COORD_MIN) {
 800379c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800379e:	4a0f      	ldr	r2, [pc, #60]	@ (80037dc <calc_content_width+0x2b0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <calc_content_width+0x280>
            child_res += space_right;
 80037a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a8:	4413      	add	r3, r2
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    if(obj->spec_attr) obj->spec_attr->scroll.x = -scroll_x_tmp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <calc_content_width+0x292>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ba:	4252      	negs	r2, r2
 80037bc:	619a      	str	r2, [r3, #24]

    if(child_res == LV_COORD_MIN) return self_w;
 80037be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c0:	4a06      	ldr	r2, [pc, #24]	@ (80037dc <calc_content_width+0x2b0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <calc_content_width+0x29e>
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	e004      	b.n	80037d4 <calc_content_width+0x2a8>
    return LV_MAX(child_res, self_w);
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ce:	4293      	cmp	r3, r2
 80037d0:	bfb8      	it	lt
 80037d2:	4613      	movlt	r3, r2
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3740      	adds	r7, #64	@ 0x40
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	e0000001 	.word	0xe0000001
 80037e0:	00040001 	.word	0x00040001

080037e4 <calc_content_height>:

static int32_t calc_content_height(lv_obj_t * obj)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08c      	sub	sp, #48	@ 0x30
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    int32_t scroll_y_tmp = lv_obj_get_scroll_y(obj);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fb17 	bl	8003e20 <lv_obj_get_scroll_y>
 80037f2:	6238      	str	r0, [r7, #32]
    if(obj->spec_attr) obj->spec_attr->scroll.y = 0;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <calc_content_height+0x20>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	61da      	str	r2, [r3, #28]

    int32_t space_top = lv_obj_get_style_space_top(obj, LV_PART_MAIN);
 8003804:	2100      	movs	r1, #0
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff f859 	bl	80028be <lv_obj_get_style_space_top>
 800380c:	61f8      	str	r0, [r7, #28]
    int32_t space_bottom = lv_obj_get_style_space_bottom(obj, LV_PART_MAIN);
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff f877 	bl	8002904 <lv_obj_get_style_space_bottom>
 8003816:	61b8      	str	r0, [r7, #24]

    int32_t self_h;
    self_h = lv_obj_get_self_height(obj) + space_top + space_bottom;
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fb81 	bl	8002f20 <lv_obj_get_self_height>
 800381e:	4602      	mov	r2, r0
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4413      	add	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

    int32_t child_res = LV_COORD_MIN;
 800382a:	4b46      	ldr	r3, [pc, #280]	@ (8003944 <calc_content_height+0x160>)
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_count(obj);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f001 fd62 	bl	80052f8 <lv_obj_get_child_count>
 8003834:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 8003836:	2300      	movs	r3, #0
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800383a:	e065      	b.n	8003908 <calc_content_height+0x124>
        int32_t child_res_tmp = LV_COORD_MIN;
 800383c:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <calc_content_height+0x160>)
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
        lv_obj_t * child = obj->spec_attr->children[i];
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003850:	493d      	ldr	r1, [pc, #244]	@ (8003948 <calc_content_height+0x164>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f7fe fc2b 	bl	80020ae <lv_obj_has_flag_any>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d150      	bne.n	8003900 <calc_content_height+0x11c>

        if(!lv_obj_is_layout_positioned(child)) {
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff fa8c 	bl	8002d7c <lv_obj_is_layout_positioned>
 8003864:	4603      	mov	r3, r0
 8003866:	f083 0301 	eor.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d029      	beq.n	80038c4 <calc_content_height+0xe0>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 8003870:	2100      	movs	r1, #0
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7fe fea7 	bl	80025c6 <lv_obj_get_style_align>
 8003878:	4603      	mov	r3, r0
 800387a:	72fb      	strb	r3, [r7, #11]
            switch(align) {
 800387c:	7afb      	ldrb	r3, [r7, #11]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d807      	bhi.n	8003892 <calc_content_height+0xae>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res_tmp = child->coords.y2 - obj->coords.y1 + 1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1a      	ldr	r2, [r3, #32]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	3301      	adds	r3, #1
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8003890:	e021      	b.n	80038d6 <calc_content_height+0xf2>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8003892:	2100      	movs	r1, #0
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7fe fe85 	bl	80025a4 <lv_obj_get_style_y>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d119      	bne.n	80038d4 <calc_content_height+0xf0>
                        child_res_tmp = lv_area_get_height(&child->coords) + space_top;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3314      	adds	r3, #20
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe fdf6 	bl	8002496 <lv_area_get_height>
 80038aa:	4602      	mov	r2, r0
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
                        child_res_tmp += lv_obj_get_style_margin_top(child, LV_PART_MAIN);
 80038b2:	2100      	movs	r1, #0
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fe ff31 	bl	800271c <lv_obj_get_style_margin_top>
 80038ba:	4602      	mov	r2, r0
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	4413      	add	r3, r2
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                    break;
 80038c2:	e007      	b.n	80038d4 <calc_content_height+0xf0>
            }
        }
        else {
            child_res_tmp = child->coords.y2 - obj->coords.y1 + 1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d2:	e000      	b.n	80038d6 <calc_content_height+0xf2>
                    break;
 80038d4:	bf00      	nop
        }

        child_res = LV_MAX(child_res, child_res_tmp + lv_obj_get_style_margin_bottom(child, LV_PART_MAIN));
 80038d6:	2100      	movs	r1, #0
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7fe ff30 	bl	800273e <lv_obj_get_style_margin_bottom>
 80038de:	4602      	mov	r2, r0
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	4413      	add	r3, r2
 80038e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e6:	429a      	cmp	r2, r3
 80038e8:	dc07      	bgt.n	80038fa <calc_content_height+0x116>
 80038ea:	2100      	movs	r1, #0
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7fe ff26 	bl	800273e <lv_obj_get_style_margin_bottom>
 80038f2:	4602      	mov	r2, r0
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	4413      	add	r3, r2
 80038f8:	e000      	b.n	80038fc <calc_content_height+0x118>
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038fe:	e000      	b.n	8003902 <calc_content_height+0x11e>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003900:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	3301      	adds	r3, #1
 8003906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d395      	bcc.n	800383c <calc_content_height+0x58>
    }

    if(obj->spec_attr) obj->spec_attr->scroll.y = -scroll_y_tmp;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <calc_content_height+0x13e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	4252      	negs	r2, r2
 8003920:	61da      	str	r2, [r3, #28]

    if(child_res == LV_COORD_MIN) return self_h;
 8003922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003924:	4a07      	ldr	r2, [pc, #28]	@ (8003944 <calc_content_height+0x160>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d101      	bne.n	800392e <calc_content_height+0x14a>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	e006      	b.n	800393c <calc_content_height+0x158>
    return LV_MAX(self_h, child_res + space_bottom);
 800392e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	441a      	add	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4293      	cmp	r3, r2
 8003938:	bfb8      	it	lt
 800393a:	4613      	movlt	r3, r2
}
 800393c:	4618      	mov	r0, r3
 800393e:	3730      	adds	r7, #48	@ 0x30
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	e0000001 	.word	0xe0000001
 8003948:	00040001 	.word	0x00040001

0800394c <transform_point>:
        lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b08d      	sub	sp, #52	@ 0x34
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	71fb      	strb	r3, [r7, #7]
    int32_t angle = lv_obj_get_style_transform_rotation(obj, 0);
 800395a:	2100      	movs	r1, #0
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7fe fe66 	bl	800262e <lv_obj_get_style_transform_rotation>
 8003962:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t scale_x = lv_obj_get_style_transform_scale_x_safe(obj, 0);
 8003964:	2100      	movs	r1, #0
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7fe ffef 	bl	800294a <lv_obj_get_style_transform_scale_x_safe>
 800396c:	6238      	str	r0, [r7, #32]
    int32_t scale_y = lv_obj_get_style_transform_scale_y_safe(obj, 0);
 800396e:	2100      	movs	r1, #0
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff f801 	bl	8002978 <lv_obj_get_style_transform_scale_y_safe>
 8003976:	61f8      	str	r0, [r7, #28]

    if(angle == 0 && scale_x == LV_SCALE_NONE && scale_y == LV_SCALE_NONE) return;
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <transform_point+0x44>
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003984:	d104      	bne.n	8003990 <transform_point+0x44>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398c:	f000 8093 	beq.w	8003ab6 <transform_point+0x16a>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 8003990:	2100      	movs	r1, #0
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7fe fe5c 	bl	8002650 <lv_obj_get_style_transform_pivot_x>
 8003998:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800399a:	617b      	str	r3, [r7, #20]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800399c:	2100      	movs	r1, #0
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7fe fe67 	bl	8002672 <lv_obj_get_style_transform_pivot_y>
 80039a4:	4603      	mov	r3, r0
    lv_point_t pivot = {
 80039a6:	61bb      	str	r3, [r7, #24]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80039ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b2:	d123      	bne.n	80039fc <transform_point+0xb0>
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80039ba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80039be:	dc1d      	bgt.n	80039fc <transform_point+0xb0>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80039c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039ca:	dd05      	ble.n	80039d8 <transform_point+0x8c>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80039d2:	f5c3 747a 	rsb	r4, r3, #1000	@ 0x3e8
 80039d6:	e002      	b.n	80039de <transform_point+0x92>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 44c0 	bic.w	r4, r3, #1610612736	@ 0x60000000
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3314      	adds	r3, #20
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fd47 	bl	8002476 <lv_area_get_width>
 80039e8:	4603      	mov	r3, r0
 80039ea:	fb04 f303 	mul.w	r3, r4, r3
 80039ee:	4a34      	ldr	r2, [pc, #208]	@ (8003ac0 <transform_point+0x174>)
 80039f0:	fb82 1203 	smull	r1, r2, r2, r3
 80039f4:	1152      	asrs	r2, r2, #5
 80039f6:	17db      	asrs	r3, r3, #31
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003a02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a06:	d123      	bne.n	8003a50 <transform_point+0x104>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a0e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003a12:	dc1d      	bgt.n	8003a50 <transform_point+0x104>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a1e:	dd05      	ble.n	8003a2c <transform_point+0xe0>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a26:	f5c3 747a 	rsb	r4, r3, #1000	@ 0x3e8
 8003a2a:	e002      	b.n	8003a32 <transform_point+0xe6>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f023 44c0 	bic.w	r4, r3, #1610612736	@ 0x60000000
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3314      	adds	r3, #20
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fd2d 	bl	8002496 <lv_area_get_height>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	fb04 f303 	mul.w	r3, r4, r3
 8003a42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <transform_point+0x174>)
 8003a44:	fb82 1203 	smull	r1, r2, r2, r3
 8003a48:	1152      	asrs	r2, r2, #5
 8003a4a:	17db      	asrs	r3, r3, #31
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
    pivot.y = obj->coords.y1 + pivot.y;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4413      	add	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]

    if(inv) {
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <transform_point+0x13c>
        angle = -angle;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	425b      	negs	r3, r3
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        scale_x = (256 * 256) / scale_x;
 8003a70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a7a:	623b      	str	r3, [r7, #32]
        scale_y = (256 * 256) / scale_y;
 8003a7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a86:	61fb      	str	r3, [r7, #28]
    }

    lv_point_transform(p, angle, scale_x, scale_y, &pivot, !inv);
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f083 0301 	eor.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	9301      	str	r3, [sp, #4]
 8003aa2:	f107 0314 	add.w	r3, r7, #20
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aae:	68b8      	ldr	r0, [r7, #8]
 8003ab0:	f017 fa58 	bl	801af64 <lv_point_transform>
 8003ab4:	e000      	b.n	8003ab8 <transform_point+0x16c>
    if(angle == 0 && scale_x == LV_SCALE_NONE && scale_y == LV_SCALE_NONE) return;
 8003ab6:	bf00      	nop
}
 8003ab8:	372c      	adds	r7, #44	@ 0x2c
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	51eb851f 	.word	0x51eb851f

08003ac4 <lv_obj_get_style_width>:
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8003ace:	2201      	movs	r2, #1
 8003ad0:	6839      	ldr	r1, [r7, #0]
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f001 f9d2 	bl	8004e7c <lv_obj_get_style_prop>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <lv_obj_get_style_pad_top>:
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003af0:	2210      	movs	r2, #16
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f001 f9c1 	bl	8004e7c <lv_obj_get_style_prop>
 8003afa:	4603      	mov	r3, r0
 8003afc:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <lv_obj_get_style_pad_bottom>:
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003b12:	2211      	movs	r2, #17
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 f9b0 	bl	8004e7c <lv_obj_get_style_prop>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <lv_obj_get_style_pad_left>:
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003b34:	2212      	movs	r2, #18
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f001 f99f 	bl	8004e7c <lv_obj_get_style_prop>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003b42:	68fb      	ldr	r3, [r7, #12]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <lv_obj_get_style_pad_right>:
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003b56:	2213      	movs	r2, #19
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f001 f98e 	bl	8004e7c <lv_obj_get_style_prop>
 8003b60:	4603      	mov	r3, r0
 8003b62:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <lv_obj_get_style_margin_bottom>:
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_BOTTOM);
 8003b78:	2219      	movs	r2, #25
 8003b7a:	6839      	ldr	r1, [r7, #0]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f001 f97d 	bl	8004e7c <lv_obj_get_style_prop>
 8003b82:	4603      	mov	r3, r0
 8003b84:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <lv_obj_get_style_margin_left>:
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_LEFT);
 8003b9a:	221a      	movs	r2, #26
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f001 f96c 	bl	8004e7c <lv_obj_get_style_prop>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <lv_obj_get_style_margin_right>:
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_RIGHT);
 8003bbc:	221b      	movs	r2, #27
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f001 f95b 	bl	8004e7c <lv_obj_get_style_prop>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003bca:	68fb      	ldr	r3, [r7, #12]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <lv_obj_get_style_bg_opa>:
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8003bde:	221d      	movs	r2, #29
 8003be0:	6839      	ldr	r1, [r7, #0]
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f94a 	bl	8004e7c <lv_obj_get_style_prop>
 8003be8:	4603      	mov	r3, r0
 8003bea:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	b2db      	uxtb	r3, r3
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <lv_obj_get_style_border_opa>:
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8003c02:	2232      	movs	r2, #50	@ 0x32
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f001 f938 	bl	8004e7c <lv_obj_get_style_prop>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	b2db      	uxtb	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <lv_obj_get_style_border_width>:
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8003c26:	2230      	movs	r2, #48	@ 0x30
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 f926 	bl	8004e7c <lv_obj_get_style_prop>
 8003c30:	4603      	mov	r3, r0
 8003c32:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8003c34:	68fb      	ldr	r3, [r7, #12]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <lv_obj_get_style_border_side>:
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8003c48:	2234      	movs	r2, #52	@ 0x34
 8003c4a:	6839      	ldr	r1, [r7, #0]
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f001 f915 	bl	8004e7c <lv_obj_get_style_prop>
 8003c52:	4603      	mov	r3, r0
 8003c54:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	b2db      	uxtb	r3, r3
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <lv_obj_get_style_base_dir>:
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8003c6c:	2227      	movs	r2, #39	@ 0x27
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f001 f903 	bl	8004e7c <lv_obj_get_style_prop>
 8003c76:	4603      	mov	r3, r0
 8003c78:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	b2db      	uxtb	r3, r3
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <lv_obj_get_style_space_left>:
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_left(obj, part);
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff49 	bl	8003b2a <lv_obj_get_style_pad_left>
 8003c98:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffbd 	bl	8003c1c <lv_obj_get_style_border_width>
 8003ca2:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ffc9 	bl	8003c3e <lv_obj_get_style_border_side>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_LEFT) ? padding + border_width : padding;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <lv_obj_get_style_space_left+0x3c>
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	e000      	b.n	8003cc4 <lv_obj_get_style_space_left+0x3e>
 8003cc2:	697b      	ldr	r3, [r7, #20]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <lv_obj_get_style_space_right>:
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_right(obj, part);
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff37 	bl	8003b4c <lv_obj_get_style_pad_right>
 8003cde:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff9a 	bl	8003c1c <lv_obj_get_style_border_width>
 8003ce8:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ffa6 	bl	8003c3e <lv_obj_get_style_border_side>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_RIGHT) ? padding + border_width : padding;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <lv_obj_get_style_space_right+0x3c>
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	e000      	b.n	8003d0a <lv_obj_get_style_space_right+0x3e>
 8003d08:	697b      	ldr	r3, [r7, #20]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <lv_obj_get_style_space_top>:
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_top(obj, part);
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fee1 	bl	8003ae6 <lv_obj_get_style_pad_top>
 8003d24:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff77 	bl	8003c1c <lv_obj_get_style_border_width>
 8003d2e:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff83 	bl	8003c3e <lv_obj_get_style_border_side>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_TOP) ? padding + border_width : padding;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <lv_obj_get_style_space_top+0x3c>
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	e000      	b.n	8003d50 <lv_obj_get_style_space_top+0x3e>
 8003d4e:	697b      	ldr	r3, [r7, #20]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <lv_obj_get_style_space_bottom>:
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_bottom(obj, part);
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fecf 	bl	8003b08 <lv_obj_get_style_pad_bottom>
 8003d6a:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff54 	bl	8003c1c <lv_obj_get_style_border_width>
 8003d74:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff60 	bl	8003c3e <lv_obj_get_style_border_side>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_BOTTOM) ? padding + border_width : padding;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <lv_obj_get_style_space_bottom+0x3c>
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	e000      	b.n	8003d96 <lv_obj_get_style_space_bottom+0x3e>
 8003d94:	697b      	ldr	r3, [r7, #20]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <lv_obj_get_scrollbar_mode+0x20>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003db6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e000      	b.n	8003dc0 <lv_obj_get_scrollbar_mode+0x22>
    else return LV_SCROLLBAR_MODE_AUTO;
 8003dbe:	2303      	movs	r3, #3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <lv_obj_get_scroll_dir+0x1e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de2:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e000      	b.n	8003dec <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 8003dea:	230f      	movs	r3, #15
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <lv_obj_get_scroll_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
    else return LV_SCROLL_SNAP_NONE;
}

int32_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <lv_obj_get_scroll_x+0x14>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e003      	b.n	8003e14 <lv_obj_get_scroll_x+0x1c>
    return -obj->spec_attr->scroll.x;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	425b      	negs	r3, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <lv_obj_get_scroll_y>:

int32_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <lv_obj_get_scroll_y+0x14>
 8003e30:	2300      	movs	r3, #0
 8003e32:	e003      	b.n	8003e3c <lv_obj_get_scroll_y+0x1c>
    return -obj->spec_attr->scroll.y;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	425b      	negs	r3, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <lv_obj_get_scroll_top>:

int32_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <lv_obj_get_scroll_top+0x14>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e003      	b.n	8003e64 <lv_obj_get_scroll_top+0x1c>
    return -obj->spec_attr->scroll.y;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	425b      	negs	r3, r3
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <lv_obj_get_scroll_bottom>:

int32_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b08b      	sub	sp, #44	@ 0x2c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    int32_t child_res = LV_COORD_MIN;
 8003e78:	4b31      	ldr	r3, [pc, #196]	@ (8003f40 <lv_obj_get_scroll_bottom+0xd0>)
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_count(obj);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f001 fa3b 	bl	80052f8 <lv_obj_get_child_count>
 8003e82:	61f8      	str	r0, [r7, #28]
    for(i = 0; i < child_cnt; i++) {
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	e022      	b.n	8003ed0 <lv_obj_get_scroll_bottom+0x60>
        lv_obj_t * child = obj->spec_attr->children[i];
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003e9a:	492a      	ldr	r1, [pc, #168]	@ (8003f44 <lv_obj_get_scroll_bottom+0xd4>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7fe f906 	bl	80020ae <lv_obj_has_flag_any>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10f      	bne.n	8003ec8 <lv_obj_get_scroll_bottom+0x58>

        int32_t tmp_y = child->coords.y2 + lv_obj_get_style_margin_bottom(child, LV_PART_MAIN);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1c      	ldr	r4, [r3, #32]
 8003eac:	2100      	movs	r1, #0
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff fe5d 	bl	8003b6e <lv_obj_get_style_margin_bottom>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4423      	add	r3, r4
 8003eb8:	60bb      	str	r3, [r7, #8]
        child_res = LV_MAX(child_res, tmp_y);
 8003eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	bfb8      	it	lt
 8003ec2:	4613      	movlt	r3, r2
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec6:	e000      	b.n	8003eca <lv_obj_get_scroll_bottom+0x5a>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003ec8:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d3d8      	bcc.n	8003e8a <lv_obj_get_scroll_bottom+0x1a>
    }

    int32_t space_top = lv_obj_get_style_space_top(obj, LV_PART_MAIN);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ff19 	bl	8003d12 <lv_obj_get_style_space_top>
 8003ee0:	61b8      	str	r0, [r7, #24]
    int32_t space_bottom = lv_obj_get_style_space_bottom(obj, LV_PART_MAIN);
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff37 	bl	8003d58 <lv_obj_get_style_space_bottom>
 8003eea:	6178      	str	r0, [r7, #20]

    if(child_res != LV_COORD_MIN) {
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <lv_obj_get_scroll_bottom+0xd0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d006      	beq.n	8003f02 <lv_obj_get_scroll_bottom+0x92>
        child_res -= (obj->coords.y2 - space_bottom);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    int32_t self_h = lv_obj_get_self_height(obj);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff f80c 	bl	8002f20 <lv_obj_get_self_height>
 8003f08:	6138      	str	r0, [r7, #16]
    self_h = self_h - (lv_obj_get_height(obj) - space_top - space_bottom);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fe ff7b 	bl	8002e06 <lv_obj_get_height>
 8003f10:	4602      	mov	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	613b      	str	r3, [r7, #16]
    self_h -= lv_obj_get_scroll_y(obj);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff7d 	bl	8003e20 <lv_obj_get_scroll_y>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
    return LV_MAX(child_res, self_h);
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bfb8      	it	lt
 8003f36:	4613      	movlt	r3, r2
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	372c      	adds	r7, #44	@ 0x2c
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd90      	pop	{r4, r7, pc}
 8003f40:	e0000001 	.word	0xe0000001
 8003f44:	00040001 	.word	0x00040001

08003f48 <lv_obj_get_scroll_left>:

int32_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b08d      	sub	sp, #52	@ 0x34
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8003f50:	2100      	movs	r1, #0
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fe85 	bl	8003c62 <lv_obj_get_style_base_dir>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d00a      	beq.n	8003f74 <lv_obj_get_scroll_left+0x2c>
        if(obj->spec_attr == NULL) return 0;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <lv_obj_get_scroll_left+0x22>
 8003f66:	2300      	movs	r3, #0
 8003f68:	e06d      	b.n	8004046 <lv_obj_get_scroll_left+0xfe>
        return -obj->spec_attr->scroll.x;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	425b      	negs	r3, r3
 8003f72:	e068      	b.n	8004046 <lv_obj_get_scroll_left+0xfe>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    int32_t space_right = lv_obj_get_style_space_right(obj, LV_PART_MAIN);
 8003f74:	2100      	movs	r1, #0
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fea8 	bl	8003ccc <lv_obj_get_style_space_right>
 8003f7c:	6238      	str	r0, [r7, #32]
    int32_t space_left = lv_obj_get_style_space_left(obj, LV_PART_MAIN);
 8003f7e:	2100      	movs	r1, #0
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff fe80 	bl	8003c86 <lv_obj_get_style_space_left>
 8003f86:	61f8      	str	r0, [r7, #28]

    int32_t child_res = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint32_t i;
    int32_t x1 = LV_COORD_MAX;
 8003f8c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t child_cnt = lv_obj_get_child_count(obj);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 f9b0 	bl	80052f8 <lv_obj_get_child_count>
 8003f98:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f9e:	e022      	b.n	8003fe6 <lv_obj_get_scroll_left+0x9e>
        lv_obj_t * child = obj->spec_attr->children[i];
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003fb0:	4927      	ldr	r1, [pc, #156]	@ (8004050 <lv_obj_get_scroll_left+0x108>)
 8003fb2:	6938      	ldr	r0, [r7, #16]
 8003fb4:	f7fe f87b 	bl	80020ae <lv_obj_has_flag_any>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <lv_obj_get_scroll_left+0x96>

        int32_t tmp_x = child->coords.x1 - lv_obj_get_style_margin_left(child, LV_PART_MAIN);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	695c      	ldr	r4, [r3, #20]
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6938      	ldr	r0, [r7, #16]
 8003fc6:	f7ff fde3 	bl	8003b90 <lv_obj_get_style_margin_left>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	1ae3      	subs	r3, r4, r3
 8003fce:	60fb      	str	r3, [r7, #12]
        x1 = LV_MIN(x1, tmp_x);
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bfa8      	it	ge
 8003fd8:	4613      	movge	r3, r2
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fdc:	e000      	b.n	8003fe0 <lv_obj_get_scroll_left+0x98>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8003fde:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3d8      	bcc.n	8003fa0 <lv_obj_get_scroll_left+0x58>
    }

    if(x1 != LV_COORD_MAX) {
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <lv_obj_get_scroll_left+0xc4>
        child_res = x1;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        child_res = (obj->coords.x1 + space_left) - child_res;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	441a      	add	r2, r3
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400a:	e001      	b.n	8004010 <lv_obj_get_scroll_left+0xc8>
    }
    else {
        child_res = LV_COORD_MIN;
 800400c:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <lv_obj_get_scroll_left+0x10c>)
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    int32_t self_w = lv_obj_get_self_width(obj);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fe ff6f 	bl	8002ef4 <lv_obj_get_self_width>
 8004016:	6178      	str	r0, [r7, #20]
    self_w = self_w - (lv_obj_get_width(obj) - space_right - space_left);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fe fee6 	bl	8002dea <lv_obj_get_width>
 800401e:	4602      	mov	r2, r0
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    self_w += lv_obj_get_scroll_x(obj);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fee2 	bl	8003df8 <lv_obj_get_scroll_x>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

    return LV_MAX(child_res, self_w);
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	4293      	cmp	r3, r2
 8004042:	bfb8      	it	lt
 8004044:	4613      	movlt	r3, r2
}
 8004046:	4618      	mov	r0, r3
 8004048:	3734      	adds	r7, #52	@ 0x34
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	00040001 	.word	0x00040001
 8004054:	e0000001 	.word	0xe0000001

08004058 <lv_obj_get_scroll_right>:

int32_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b08b      	sub	sp, #44	@ 0x2c
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8004060:	2100      	movs	r1, #0
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fdfd 	bl	8003c62 <lv_obj_get_style_base_dir>
 8004068:	4603      	mov	r3, r0
 800406a:	2b01      	cmp	r3, #1
 800406c:	d109      	bne.n	8004082 <lv_obj_get_scroll_right+0x2a>
        if(obj->spec_attr == NULL) return 0;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <lv_obj_get_scroll_right+0x22>
 8004076:	2300      	movs	r3, #0
 8004078:	e063      	b.n	8004142 <lv_obj_get_scroll_right+0xea>
        return obj->spec_attr->scroll.x;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	e05f      	b.n	8004142 <lv_obj_get_scroll_right+0xea>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    int32_t child_res = LV_COORD_MIN;
 8004082:	4b32      	ldr	r3, [pc, #200]	@ (800414c <lv_obj_get_scroll_right+0xf4>)
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_count(obj);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f001 f936 	bl	80052f8 <lv_obj_get_child_count>
 800408c:	61f8      	str	r0, [r7, #28]
    for(i = 0; i < child_cnt; i++) {
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
 8004092:	e022      	b.n	80040da <lv_obj_get_scroll_right+0x82>
        lv_obj_t * child = obj->spec_attr->children[i];
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80040a4:	492a      	ldr	r1, [pc, #168]	@ (8004150 <lv_obj_get_scroll_right+0xf8>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7fe f801 	bl	80020ae <lv_obj_has_flag_any>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <lv_obj_get_scroll_right+0x7a>

        int32_t tmp_x = child->coords.x2 + lv_obj_get_style_margin_right(child, LV_PART_MAIN);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	69dc      	ldr	r4, [r3, #28]
 80040b6:	2100      	movs	r1, #0
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fd7a 	bl	8003bb2 <lv_obj_get_style_margin_right>
 80040be:	4603      	mov	r3, r0
 80040c0:	4423      	add	r3, r4
 80040c2:	60bb      	str	r3, [r7, #8]
        child_res = LV_MAX(child_res, tmp_x);
 80040c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	bfb8      	it	lt
 80040cc:	4613      	movlt	r3, r2
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d0:	e000      	b.n	80040d4 <lv_obj_get_scroll_right+0x7c>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80040d2:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	3301      	adds	r3, #1
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3d8      	bcc.n	8004094 <lv_obj_get_scroll_right+0x3c>
    }

    int32_t space_right = lv_obj_get_style_space_right(obj, LV_PART_MAIN);
 80040e2:	2100      	movs	r1, #0
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fdf1 	bl	8003ccc <lv_obj_get_style_space_right>
 80040ea:	61b8      	str	r0, [r7, #24]
    int32_t space_left = lv_obj_get_style_space_left(obj, LV_PART_MAIN);
 80040ec:	2100      	movs	r1, #0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fdc9 	bl	8003c86 <lv_obj_get_style_space_left>
 80040f4:	6178      	str	r0, [r7, #20]

    if(child_res != LV_COORD_MIN) {
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	4a14      	ldr	r2, [pc, #80]	@ (800414c <lv_obj_get_scroll_right+0xf4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d006      	beq.n	800410c <lv_obj_get_scroll_right+0xb4>
        child_res -= (obj->coords.x2 - space_right);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    int32_t self_w;
    self_w = lv_obj_get_self_width(obj);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fe fef1 	bl	8002ef4 <lv_obj_get_self_width>
 8004112:	6138      	str	r0, [r7, #16]
    self_w = self_w - (lv_obj_get_width(obj) - space_right - space_left);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fe fe68 	bl	8002dea <lv_obj_get_width>
 800411a:	4602      	mov	r2, r0
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	613b      	str	r3, [r7, #16]
    self_w -= lv_obj_get_scroll_x(obj);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fe64 	bl	8003df8 <lv_obj_get_scroll_x>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	613b      	str	r3, [r7, #16]
    return LV_MAX(child_res, self_w);
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	4293      	cmp	r3, r2
 800413e:	bfb8      	it	lt
 8004140:	4613      	movlt	r3, r2
}
 8004142:	4618      	mov	r0, r3
 8004144:	372c      	adds	r7, #44	@ 0x2c
 8004146:	46bd      	mov	sp, r7
 8004148:	bd90      	pop	{r4, r7, pc}
 800414a:	bf00      	nop
 800414c:	e0000001 	.word	0xe0000001
 8004150:	00040001 	.word	0x00040001

08004154 <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b0a1      	sub	sp, #132	@ 0x84
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	68b8      	ldr	r0, [r7, #8]
 8004170:	f016 fa38 	bl	801a5e4 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	2200      	movs	r2, #0
 8004180:	2100      	movs	r1, #0
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f016 fa2e 	bl	801a5e4 <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8004188:	2110      	movs	r1, #16
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7fd ff7a 	bl	8002084 <lv_obj_has_flag>
 8004190:	4603      	mov	r3, r0
 8004192:	f083 0301 	eor.w	r3, r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 846e 	bne.w	8004a7a <lv_obj_get_scrollbar_area+0x926>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff fdfd 	bl	8003d9e <lv_obj_get_scrollbar_mode>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 80041aa:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8465 	beq.w	8004a7e <lv_obj_get_scrollbar_area+0x92a>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f011 fffd 	bl	80161b4 <lv_indev_get_next>
 80041ba:	6778      	str	r0, [r7, #116]	@ 0x74
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 80041bc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d114      	bne.n	80041ee <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 80041c4:	e00a      	b.n	80041dc <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 80041c6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80041c8:	f012 f837 	bl	801623a <lv_indev_get_scroll_obj>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 80041d4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80041d6:	f011 ffed 	bl	80161b4 <lv_indev_get_next>
 80041da:	6778      	str	r0, [r7, #116]	@ 0x74
        while(indev) {
 80041dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f1      	bne.n	80041c6 <lv_obj_get_scrollbar_area+0x72>
 80041e2:	e000      	b.n	80041e6 <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 80041e4:	bf00      	nop
        }
        if(indev == NULL)  return;
 80041e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 844a 	beq.w	8004a82 <lv_obj_get_scrollbar_area+0x92e>
    }

    int32_t st = lv_obj_get_scroll_top(obj);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fe2a 	bl	8003e48 <lv_obj_get_scroll_top>
 80041f4:	66f8      	str	r0, [r7, #108]	@ 0x6c
    int32_t sb = lv_obj_get_scroll_bottom(obj);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fe3a 	bl	8003e70 <lv_obj_get_scroll_bottom>
 80041fc:	66b8      	str	r0, [r7, #104]	@ 0x68
    int32_t sl = lv_obj_get_scroll_left(obj);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fea2 	bl	8003f48 <lv_obj_get_scroll_left>
 8004204:	6678      	str	r0, [r7, #100]	@ 0x64
    int32_t sr = lv_obj_get_scroll_right(obj);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff ff26 	bl	8004058 <lv_obj_get_scroll_right>
 800420c:	6638      	str	r0, [r7, #96]	@ 0x60

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fddc 	bl	8003dcc <lv_obj_get_scroll_dir>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

    bool ver_draw = false;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    if((dir & LV_DIR_VER) &&
 8004220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01a      	beq.n	8004262 <lv_obj_get_scrollbar_area+0x10e>
 800422c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8004230:	2b01      	cmp	r3, #1
 8004232:	d013      	beq.n	800425c <lv_obj_get_scrollbar_area+0x108>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8004234:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8004238:	2b03      	cmp	r3, #3
 800423a:	d105      	bne.n	8004248 <lv_obj_get_scrollbar_area+0xf4>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800423c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800423e:	2b00      	cmp	r3, #0
 8004240:	dc0c      	bgt.n	800425c <lv_obj_get_scrollbar_area+0x108>
 8004242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004244:	2b00      	cmp	r3, #0
 8004246:	dc09      	bgt.n	800425c <lv_obj_get_scrollbar_area+0x108>
 8004248:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 800424c:	2b02      	cmp	r3, #2
 800424e:	d108      	bne.n	8004262 <lv_obj_get_scrollbar_area+0x10e>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8004250:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004252:	f011 ffd3 	bl	80161fc <lv_indev_get_scroll_dir>
 8004256:	4603      	mov	r3, r0
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d102      	bne.n	8004262 <lv_obj_get_scrollbar_area+0x10e>
        ver_draw = true;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    }

    bool hor_draw = false;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    if((dir & LV_DIR_HOR) &&
 8004268:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <lv_obj_get_scrollbar_area+0x156>
 8004274:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8004278:	2b01      	cmp	r3, #1
 800427a:	d013      	beq.n	80042a4 <lv_obj_get_scrollbar_area+0x150>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800427c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8004280:	2b03      	cmp	r3, #3
 8004282:	d105      	bne.n	8004290 <lv_obj_get_scrollbar_area+0x13c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8004284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004286:	2b00      	cmp	r3, #0
 8004288:	dc0c      	bgt.n	80042a4 <lv_obj_get_scrollbar_area+0x150>
 800428a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800428c:	2b00      	cmp	r3, #0
 800428e:	dc09      	bgt.n	80042a4 <lv_obj_get_scrollbar_area+0x150>
 8004290:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8004294:	2b02      	cmp	r3, #2
 8004296:	d108      	bne.n	80042aa <lv_obj_get_scrollbar_area+0x156>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8004298:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800429a:	f011 ffaf 	bl	80161fc <lv_indev_get_scroll_dir>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d102      	bne.n	80042aa <lv_obj_get_scrollbar_area+0x156>
        hor_draw = true;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    }

    if(!hor_draw && !ver_draw) return;
 80042aa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80042ae:	f083 0301 	eor.w	r3, r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <lv_obj_get_scrollbar_area+0x174>
 80042b8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80042bc:	f083 0301 	eor.w	r3, r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f040 83df 	bne.w	8004a86 <lv_obj_get_scrollbar_area+0x932>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL;
 80042c8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff fcc8 	bl	8003c62 <lv_obj_get_style_base_dir>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

    int32_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 80042e0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fbfe 	bl	8003ae6 <lv_obj_get_style_pad_top>
 80042ea:	65b8      	str	r0, [r7, #88]	@ 0x58
    int32_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 80042ec:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7ff fc09 	bl	8003b08 <lv_obj_get_style_pad_bottom>
 80042f6:	6578      	str	r0, [r7, #84]	@ 0x54
    int32_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 80042f8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff fc14 	bl	8003b2a <lv_obj_get_style_pad_left>
 8004302:	6538      	str	r0, [r7, #80]	@ 0x50
    int32_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 8004304:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fc1f 	bl	8003b4c <lv_obj_get_style_pad_right>
 800430e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    int32_t thickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 8004310:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff fbd5 	bl	8003ac4 <lv_obj_get_style_width>
 800431a:	64b8      	str	r0, [r7, #72]	@ 0x48

    int32_t obj_h = lv_obj_get_height(obj);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7fe fd72 	bl	8002e06 <lv_obj_get_height>
 8004322:	6478      	str	r0, [r7, #68]	@ 0x44
    int32_t obj_w = lv_obj_get_width(obj);
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7fe fd60 	bl	8002dea <lv_obj_get_width>
 800432a:	6438      	str	r0, [r7, #64]	@ 0x40

    /*Space required for the vertical and horizontal scrollbars*/
    int32_t ver_reg_space = ver_draw ? thickness : 0;
 800432c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <lv_obj_get_scrollbar_area+0x1e4>
 8004334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004336:	e000      	b.n	800433a <lv_obj_get_scrollbar_area+0x1e6>
 8004338:	2300      	movs	r3, #0
 800433a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t hor_req_space = hor_draw ? thickness : 0;
 800433c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <lv_obj_get_scrollbar_area+0x1f4>
 8004344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004346:	e000      	b.n	800434a <lv_obj_get_scrollbar_area+0x1f6>
 8004348:	2300      	movs	r3, #0
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800434c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fc3f 	bl	8003bd4 <lv_obj_get_style_bg_opa>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d808      	bhi.n	800436e <lv_obj_get_scrollbar_area+0x21a>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 800435c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fc49 	bl	8003bf8 <lv_obj_get_style_border_opa>
 8004366:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8004368:	2b01      	cmp	r3, #1
 800436a:	f240 838e 	bls.w	8004a8a <lv_obj_get_scrollbar_area+0x936>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    int32_t content_h = obj_h + st + sb;
 800436e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004372:	4413      	add	r3, r2
 8004374:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004376:	4413      	add	r3, r2
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
    if(ver_draw && content_h) {
 800437a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8155 	beq.w	800462e <lv_obj_get_scrollbar_area+0x4da>
 8004384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8151 	beq.w	800462e <lv_obj_get_scrollbar_area+0x4da>
        ver_area->y1 = obj->coords.y1;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	605a      	str	r2, [r3, #4]
        ver_area->y2 = obj->coords.y2;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
        if(rtl) {
 800439c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <lv_obj_get_scrollbar_area+0x26c>
            ver_area->x1 = obj->coords.x1 + left_space;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + thickness - 1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b6:	4413      	add	r3, r2
 80043b8:	1e5a      	subs	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	e00c      	b.n	80043da <lv_obj_get_scrollbar_area+0x286>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c6:	1ad2      	subs	r2, r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	609a      	str	r2, [r3, #8]
            ver_area->x1 = ver_area->x2 - thickness + 1;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
        }

        int32_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 80043da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e2:	1ad2      	subs	r2, r2, r3
 80043e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ea:	fb03 f202 	mul.w	r2, r3, r2
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f001 f8de 	bl	80055b8 <lv_display_get_dpi>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2bef      	cmp	r3, #239	@ 0xef
 8004408:	dd0f      	ble.n	800442a <lv_obj_get_scrollbar_area+0x2d6>
 800440a:	2000      	movs	r0, #0
 800440c:	f001 f8d4 	bl	80055b8 <lv_display_get_dpi>
 8004410:	4602      	mov	r2, r0
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	3350      	adds	r3, #80	@ 0x50
 800441c:	4aaa      	ldr	r2, [pc, #680]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 800441e:	fb82 1203 	smull	r1, r2, r2, r3
 8004422:	1192      	asrs	r2, r2, #6
 8004424:	17db      	asrs	r3, r3, #31
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	e000      	b.n	800442c <lv_obj_get_scrollbar_area+0x2d8>
 800442a:	2301      	movs	r3, #1
 800442c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442e:	4293      	cmp	r3, r2
 8004430:	db1b      	blt.n	800446a <lv_obj_get_scrollbar_area+0x316>
 8004432:	2000      	movs	r0, #0
 8004434:	f001 f8c0 	bl	80055b8 <lv_display_get_dpi>
 8004438:	4602      	mov	r2, r0
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2bef      	cmp	r3, #239	@ 0xef
 8004444:	dd0f      	ble.n	8004466 <lv_obj_get_scrollbar_area+0x312>
 8004446:	2000      	movs	r0, #0
 8004448:	f001 f8b6 	bl	80055b8 <lv_display_get_dpi>
 800444c:	4602      	mov	r2, r0
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	3350      	adds	r3, #80	@ 0x50
 8004458:	4a9b      	ldr	r2, [pc, #620]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 800445a:	fb82 1203 	smull	r1, r2, r2, r3
 800445e:	1192      	asrs	r2, r2, #6
 8004460:	17db      	asrs	r3, r3, #31
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	e002      	b.n	800446c <lv_obj_get_scrollbar_area+0x318>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <lv_obj_get_scrollbar_area+0x318>
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	633b      	str	r3, [r7, #48]	@ 0x30
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800446e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004472:	1ad2      	subs	r2, r2, r3
 8004474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        int32_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8004482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(scroll_h <= 0) {
 800448a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	dc0f      	bgt.n	80044b0 <lv_obj_get_scrollbar_area+0x35c>
            ver_area->y1 = obj->coords.y1 + top_space;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004496:	441a      	add	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a2:	1ad2      	subs	r2, r2, r3
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	1e5a      	subs	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	e0be      	b.n	800462e <lv_obj_get_scrollbar_area+0x4da>
        }
        else {
            int32_t sb_y = (rem * sb) / scroll_h;
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80044b4:	fb03 f202 	mul.w	r2, r3, r2
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
            sb_y = rem - sb_y;
 80044c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	441a      	add	r2, r3
 80044d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044d2:	441a      	add	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	605a      	str	r2, [r3, #4]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	4413      	add	r3, r2
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60da      	str	r2, [r3, #12]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6999      	ldr	r1, [r3, #24]
 80044ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044f0:	440b      	add	r3, r1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	da47      	bge.n	8004586 <lv_obj_get_scrollbar_area+0x432>
                ver_area->y1 = obj->coords.y1 + top_space;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685c      	ldr	r4, [r3, #4]
 8004506:	2000      	movs	r0, #0
 8004508:	f001 f856 	bl	80055b8 <lv_display_get_dpi>
 800450c:	4602      	mov	r2, r0
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2bef      	cmp	r3, #239	@ 0xef
 8004518:	dd0f      	ble.n	800453a <lv_obj_get_scrollbar_area+0x3e6>
 800451a:	2000      	movs	r0, #0
 800451c:	f001 f84c 	bl	80055b8 <lv_display_get_dpi>
 8004520:	4602      	mov	r2, r0
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	3350      	adds	r3, #80	@ 0x50
 800452c:	4a66      	ldr	r2, [pc, #408]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 800452e:	fb82 1203 	smull	r1, r2, r2, r3
 8004532:	1192      	asrs	r2, r2, #6
 8004534:	17db      	asrs	r3, r3, #31
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	e000      	b.n	800453c <lv_obj_get_scrollbar_area+0x3e8>
 800453a:	2301      	movs	r3, #1
 800453c:	191a      	adds	r2, r3, r4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	429a      	cmp	r2, r3
 8004544:	dd1f      	ble.n	8004586 <lv_obj_get_scrollbar_area+0x432>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685c      	ldr	r4, [r3, #4]
 800454a:	2000      	movs	r0, #0
 800454c:	f001 f834 	bl	80055b8 <lv_display_get_dpi>
 8004550:	4602      	mov	r2, r0
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2bef      	cmp	r3, #239	@ 0xef
 800455c:	dd0f      	ble.n	800457e <lv_obj_get_scrollbar_area+0x42a>
 800455e:	2000      	movs	r0, #0
 8004560:	f001 f82a 	bl	80055b8 <lv_display_get_dpi>
 8004564:	4602      	mov	r2, r0
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	3350      	adds	r3, #80	@ 0x50
 8004570:	4a55      	ldr	r2, [pc, #340]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 8004572:	fb82 1203 	smull	r1, r2, r2, r3
 8004576:	1192      	asrs	r2, r2, #6
 8004578:	17db      	asrs	r3, r3, #31
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	e000      	b.n	8004580 <lv_obj_get_scrollbar_area+0x42c>
 800457e:	2301      	movs	r3, #1
 8004580:	191a      	adds	r2, r3, r4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a19      	ldr	r1, [r3, #32]
 800458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004590:	1ac9      	subs	r1, r1, r3
 8004592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004594:	1acb      	subs	r3, r1, r3
 8004596:	429a      	cmp	r2, r3
 8004598:	dd49      	ble.n	800462e <lv_obj_get_scrollbar_area+0x4da>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	1ad2      	subs	r2, r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68dc      	ldr	r4, [r3, #12]
 80045ae:	2000      	movs	r0, #0
 80045b0:	f001 f802 	bl	80055b8 <lv_display_get_dpi>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	2bef      	cmp	r3, #239	@ 0xef
 80045c0:	dd0f      	ble.n	80045e2 <lv_obj_get_scrollbar_area+0x48e>
 80045c2:	2000      	movs	r0, #0
 80045c4:	f000 fff8 	bl	80055b8 <lv_display_get_dpi>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	3350      	adds	r3, #80	@ 0x50
 80045d4:	4a3c      	ldr	r2, [pc, #240]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 80045d6:	fb82 1203 	smull	r1, r2, r2, r3
 80045da:	1192      	asrs	r2, r2, #6
 80045dc:	17db      	asrs	r3, r3, #31
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	e000      	b.n	80045e4 <lv_obj_get_scrollbar_area+0x490>
 80045e2:	2301      	movs	r3, #1
 80045e4:	1ae2      	subs	r2, r4, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	da1f      	bge.n	800462e <lv_obj_get_scrollbar_area+0x4da>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68dc      	ldr	r4, [r3, #12]
 80045f2:	2000      	movs	r0, #0
 80045f4:	f000 ffe0 	bl	80055b8 <lv_display_get_dpi>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2bef      	cmp	r3, #239	@ 0xef
 8004604:	dd0f      	ble.n	8004626 <lv_obj_get_scrollbar_area+0x4d2>
 8004606:	2000      	movs	r0, #0
 8004608:	f000 ffd6 	bl	80055b8 <lv_display_get_dpi>
 800460c:	4602      	mov	r2, r0
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	3350      	adds	r3, #80	@ 0x50
 8004618:	4a2b      	ldr	r2, [pc, #172]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 800461a:	fb82 1203 	smull	r1, r2, r2, r3
 800461e:	1192      	asrs	r2, r2, #6
 8004620:	17db      	asrs	r3, r3, #31
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	e000      	b.n	8004628 <lv_obj_get_scrollbar_area+0x4d4>
 8004626:	2301      	movs	r3, #1
 8004628:	1ae2      	subs	r2, r4, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	605a      	str	r2, [r3, #4]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    int32_t content_w = obj_w + sl + sr;
 800462e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004632:	4413      	add	r3, r2
 8004634:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004636:	4413      	add	r3, r2
 8004638:	623b      	str	r3, [r7, #32]
    if(hor_draw && content_w) {
 800463a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8224 	beq.w	8004a8c <lv_obj_get_scrollbar_area+0x938>
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8220 	beq.w	8004a8c <lv_obj_get_scrollbar_area+0x938>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004652:	1ad2      	subs	r2, r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60da      	str	r2, [r3, #12]
        hor_area->y1 = hor_area->y2 - thickness + 1;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	605a      	str	r2, [r3, #4]
        hor_area->x1 = obj->coords.x1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	601a      	str	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	609a      	str	r2, [r3, #8]

        int32_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 8004676:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800467e:	1ad2      	subs	r2, r2, r3
 8004680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004686:	fb03 f202 	mul.w	r2, r3, r2
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004690:	61fb      	str	r3, [r7, #28]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8004692:	2000      	movs	r0, #0
 8004694:	f000 ff90 	bl	80055b8 <lv_display_get_dpi>
 8004698:	4602      	mov	r2, r0
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2bef      	cmp	r3, #239	@ 0xef
 80046a4:	dd12      	ble.n	80046cc <lv_obj_get_scrollbar_area+0x578>
 80046a6:	2000      	movs	r0, #0
 80046a8:	f000 ff86 	bl	80055b8 <lv_display_get_dpi>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	3350      	adds	r3, #80	@ 0x50
 80046b8:	4a03      	ldr	r2, [pc, #12]	@ (80046c8 <lv_obj_get_scrollbar_area+0x574>)
 80046ba:	fb82 1203 	smull	r1, r2, r2, r3
 80046be:	1192      	asrs	r2, r2, #6
 80046c0:	17db      	asrs	r3, r3, #31
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	e003      	b.n	80046ce <lv_obj_get_scrollbar_area+0x57a>
 80046c6:	bf00      	nop
 80046c8:	66666667 	.word	0x66666667
 80046cc:	2301      	movs	r3, #1
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	4293      	cmp	r3, r2
 80046d2:	db1b      	blt.n	800470c <lv_obj_get_scrollbar_area+0x5b8>
 80046d4:	2000      	movs	r0, #0
 80046d6:	f000 ff6f 	bl	80055b8 <lv_display_get_dpi>
 80046da:	4602      	mov	r2, r0
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	2bef      	cmp	r3, #239	@ 0xef
 80046e6:	dd0f      	ble.n	8004708 <lv_obj_get_scrollbar_area+0x5b4>
 80046e8:	2000      	movs	r0, #0
 80046ea:	f000 ff65 	bl	80055b8 <lv_display_get_dpi>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	3350      	adds	r3, #80	@ 0x50
 80046fa:	4aa1      	ldr	r2, [pc, #644]	@ (8004980 <lv_obj_get_scrollbar_area+0x82c>)
 80046fc:	fb82 1203 	smull	r1, r2, r2, r3
 8004700:	1192      	asrs	r2, r2, #6
 8004702:	17db      	asrs	r3, r3, #31
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	e002      	b.n	800470e <lv_obj_get_scrollbar_area+0x5ba>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <lv_obj_get_scrollbar_area+0x5ba>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	61fb      	str	r3, [r7, #28]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 8004710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004714:	1ad2      	subs	r2, r2, r3
 8004716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004718:	1ad2      	subs	r2, r2, r3
 800471a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471c:	1ad2      	subs	r2, r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	62fb      	str	r3, [r7, #44]	@ 0x2c
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        int32_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 8004724:	6a3a      	ldr	r2, [r7, #32]
 8004726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	61bb      	str	r3, [r7, #24]
        if(scroll_w <= 0) {
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	dc23      	bgt.n	800477a <lv_obj_get_scrollbar_area+0x626>
            if(rtl) {
 8004732:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <lv_obj_get_scrollbar_area+0x606>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004740:	441a      	add	r2, r3
 8004742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004744:	4413      	add	r3, r2
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	601a      	str	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	e198      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004760:	441a      	add	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	601a      	str	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800476c:	1ad2      	subs	r2, r2, r3
 800476e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	1e5a      	subs	r2, r3, #1
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	e188      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
            }
        }
        else {
            int32_t sb_x = (rem * sr) / scroll_w;
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800477e:	fb03 f202 	mul.w	r2, r3, r2
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	fb92 f3f3 	sdiv	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
            sb_x = rem - sb_x;
 800478a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

            if(rtl) {
 8004792:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80b8 	beq.w	800490c <lv_obj_get_scrollbar_area+0x7b8>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	441a      	add	r2, r3
 80047a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047a6:	441a      	add	r2, r3
 80047a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047aa:	441a      	add	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	601a      	str	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	609a      	str	r2, [r3, #8]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6959      	ldr	r1, [r3, #20]
 80047c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c8:	4419      	add	r1, r3
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	440b      	add	r3, r1
 80047ce:	429a      	cmp	r2, r3
 80047d0:	da49      	bge.n	8004866 <lv_obj_get_scrollbar_area+0x712>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047d8:	441a      	add	r2, r3
 80047da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047dc:	441a      	add	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	601a      	str	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	681c      	ldr	r4, [r3, #0]
 80047e6:	2000      	movs	r0, #0
 80047e8:	f000 fee6 	bl	80055b8 <lv_display_get_dpi>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2bef      	cmp	r3, #239	@ 0xef
 80047f8:	dd0f      	ble.n	800481a <lv_obj_get_scrollbar_area+0x6c6>
 80047fa:	2000      	movs	r0, #0
 80047fc:	f000 fedc 	bl	80055b8 <lv_display_get_dpi>
 8004800:	4602      	mov	r2, r0
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	3350      	adds	r3, #80	@ 0x50
 800480c:	4a5c      	ldr	r2, [pc, #368]	@ (8004980 <lv_obj_get_scrollbar_area+0x82c>)
 800480e:	fb82 1203 	smull	r1, r2, r2, r3
 8004812:	1192      	asrs	r2, r2, #6
 8004814:	17db      	asrs	r3, r3, #31
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	e000      	b.n	800481c <lv_obj_get_scrollbar_area+0x6c8>
 800481a:	2301      	movs	r3, #1
 800481c:	191a      	adds	r2, r3, r4
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	dd1f      	ble.n	8004866 <lv_obj_get_scrollbar_area+0x712>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	681c      	ldr	r4, [r3, #0]
 800482a:	2000      	movs	r0, #0
 800482c:	f000 fec4 	bl	80055b8 <lv_display_get_dpi>
 8004830:	4602      	mov	r2, r0
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2bef      	cmp	r3, #239	@ 0xef
 800483c:	dd0f      	ble.n	800485e <lv_obj_get_scrollbar_area+0x70a>
 800483e:	2000      	movs	r0, #0
 8004840:	f000 feba 	bl	80055b8 <lv_display_get_dpi>
 8004844:	4602      	mov	r2, r0
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	3350      	adds	r3, #80	@ 0x50
 8004850:	4a4b      	ldr	r2, [pc, #300]	@ (8004980 <lv_obj_get_scrollbar_area+0x82c>)
 8004852:	fb82 1203 	smull	r1, r2, r2, r3
 8004856:	1192      	asrs	r2, r2, #6
 8004858:	17db      	asrs	r3, r3, #31
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	e000      	b.n	8004860 <lv_obj_get_scrollbar_area+0x70c>
 800485e:	2301      	movs	r3, #1
 8004860:	191a      	adds	r2, r3, r4
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	609a      	str	r2, [r3, #8]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	69d9      	ldr	r1, [r3, #28]
 800486e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004870:	1acb      	subs	r3, r1, r3
 8004872:	429a      	cmp	r2, r3
 8004874:	f340 810a 	ble.w	8004a8c <lv_obj_get_scrollbar_area+0x938>
                    hor_area->x2 = obj->coords.x2 - right_space;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	1ad2      	subs	r2, r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	689c      	ldr	r4, [r3, #8]
 8004888:	2000      	movs	r0, #0
 800488a:	f000 fe95 	bl	80055b8 <lv_display_get_dpi>
 800488e:	4602      	mov	r2, r0
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	2bef      	cmp	r3, #239	@ 0xef
 800489a:	dd0f      	ble.n	80048bc <lv_obj_get_scrollbar_area+0x768>
 800489c:	2000      	movs	r0, #0
 800489e:	f000 fe8b 	bl	80055b8 <lv_display_get_dpi>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	3350      	adds	r3, #80	@ 0x50
 80048ae:	4a34      	ldr	r2, [pc, #208]	@ (8004980 <lv_obj_get_scrollbar_area+0x82c>)
 80048b0:	fb82 1203 	smull	r1, r2, r2, r3
 80048b4:	1192      	asrs	r2, r2, #6
 80048b6:	17db      	asrs	r3, r3, #31
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	e000      	b.n	80048be <lv_obj_get_scrollbar_area+0x76a>
 80048bc:	2301      	movs	r3, #1
 80048be:	1ae2      	subs	r2, r4, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	f280 80e1 	bge.w	8004a8c <lv_obj_get_scrollbar_area+0x938>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	689c      	ldr	r4, [r3, #8]
 80048ce:	2000      	movs	r0, #0
 80048d0:	f000 fe72 	bl	80055b8 <lv_display_get_dpi>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2bef      	cmp	r3, #239	@ 0xef
 80048e0:	dd0f      	ble.n	8004902 <lv_obj_get_scrollbar_area+0x7ae>
 80048e2:	2000      	movs	r0, #0
 80048e4:	f000 fe68 	bl	80055b8 <lv_display_get_dpi>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	3350      	adds	r3, #80	@ 0x50
 80048f4:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <lv_obj_get_scrollbar_area+0x82c>)
 80048f6:	fb82 1203 	smull	r1, r2, r2, r3
 80048fa:	1192      	asrs	r2, r2, #6
 80048fc:	17db      	asrs	r3, r3, #31
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	e000      	b.n	8004904 <lv_obj_get_scrollbar_area+0x7b0>
 8004902:	2301      	movs	r3, #1
 8004904:	1ae2      	subs	r2, r4, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e0bf      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	441a      	add	r2, r3
 8004914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004916:	441a      	add	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	601a      	str	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	609a      	str	r2, [r3, #8]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6959      	ldr	r1, [r3, #20]
 8004932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004934:	440b      	add	r3, r1
 8004936:	429a      	cmp	r2, r3
 8004938:	da4a      	bge.n	80049d0 <lv_obj_get_scrollbar_area+0x87c>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004940:	441a      	add	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	601a      	str	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	681c      	ldr	r4, [r3, #0]
 800494a:	2000      	movs	r0, #0
 800494c:	f000 fe34 	bl	80055b8 <lv_display_get_dpi>
 8004950:	4602      	mov	r2, r0
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	2bef      	cmp	r3, #239	@ 0xef
 800495c:	dd12      	ble.n	8004984 <lv_obj_get_scrollbar_area+0x830>
 800495e:	2000      	movs	r0, #0
 8004960:	f000 fe2a 	bl	80055b8 <lv_display_get_dpi>
 8004964:	4602      	mov	r2, r0
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	3350      	adds	r3, #80	@ 0x50
 8004970:	4a03      	ldr	r2, [pc, #12]	@ (8004980 <lv_obj_get_scrollbar_area+0x82c>)
 8004972:	fb82 1203 	smull	r1, r2, r2, r3
 8004976:	1192      	asrs	r2, r2, #6
 8004978:	17db      	asrs	r3, r3, #31
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	e003      	b.n	8004986 <lv_obj_get_scrollbar_area+0x832>
 800497e:	bf00      	nop
 8004980:	66666667 	.word	0x66666667
 8004984:	2301      	movs	r3, #1
 8004986:	191a      	adds	r2, r3, r4
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	429a      	cmp	r2, r3
 800498e:	dd1f      	ble.n	80049d0 <lv_obj_get_scrollbar_area+0x87c>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	681c      	ldr	r4, [r3, #0]
 8004994:	2000      	movs	r0, #0
 8004996:	f000 fe0f 	bl	80055b8 <lv_display_get_dpi>
 800499a:	4602      	mov	r2, r0
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2bef      	cmp	r3, #239	@ 0xef
 80049a6:	dd0f      	ble.n	80049c8 <lv_obj_get_scrollbar_area+0x874>
 80049a8:	2000      	movs	r0, #0
 80049aa:	f000 fe05 	bl	80055b8 <lv_display_get_dpi>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	3350      	adds	r3, #80	@ 0x50
 80049ba:	4a36      	ldr	r2, [pc, #216]	@ (8004a94 <lv_obj_get_scrollbar_area+0x940>)
 80049bc:	fb82 1203 	smull	r1, r2, r2, r3
 80049c0:	1192      	asrs	r2, r2, #6
 80049c2:	17db      	asrs	r3, r3, #31
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	e000      	b.n	80049ca <lv_obj_get_scrollbar_area+0x876>
 80049c8:	2301      	movs	r3, #1
 80049ca:	191a      	adds	r2, r3, r4
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049da:	1ac9      	subs	r1, r1, r3
 80049dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049de:	1acb      	subs	r3, r1, r3
 80049e0:	429a      	cmp	r2, r3
 80049e2:	dd53      	ble.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689c      	ldr	r4, [r3, #8]
 80049f8:	2000      	movs	r0, #0
 80049fa:	f000 fddd 	bl	80055b8 <lv_display_get_dpi>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	2bef      	cmp	r3, #239	@ 0xef
 8004a0a:	dd0f      	ble.n	8004a2c <lv_obj_get_scrollbar_area+0x8d8>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f000 fdd3 	bl	80055b8 <lv_display_get_dpi>
 8004a12:	4602      	mov	r2, r0
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	3350      	adds	r3, #80	@ 0x50
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <lv_obj_get_scrollbar_area+0x940>)
 8004a20:	fb82 1203 	smull	r1, r2, r2, r3
 8004a24:	1192      	asrs	r2, r2, #6
 8004a26:	17db      	asrs	r3, r3, #31
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	e000      	b.n	8004a2e <lv_obj_get_scrollbar_area+0x8da>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	1ae2      	subs	r2, r4, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	da29      	bge.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	689c      	ldr	r4, [r3, #8]
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f000 fdbb 	bl	80055b8 <lv_display_get_dpi>
 8004a42:	4602      	mov	r2, r0
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2bef      	cmp	r3, #239	@ 0xef
 8004a4e:	dd0f      	ble.n	8004a70 <lv_obj_get_scrollbar_area+0x91c>
 8004a50:	2000      	movs	r0, #0
 8004a52:	f000 fdb1 	bl	80055b8 <lv_display_get_dpi>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	3350      	adds	r3, #80	@ 0x50
 8004a62:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <lv_obj_get_scrollbar_area+0x940>)
 8004a64:	fb82 1203 	smull	r1, r2, r2, r3
 8004a68:	1192      	asrs	r2, r2, #6
 8004a6a:	17db      	asrs	r3, r3, #31
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	e000      	b.n	8004a72 <lv_obj_get_scrollbar_area+0x91e>
 8004a70:	2301      	movs	r3, #1
 8004a72:	1ae2      	subs	r2, r4, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e008      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8004a7a:	bf00      	nop
 8004a7c:	e006      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 8004a7e:	bf00      	nop
 8004a80:	e004      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
        if(indev == NULL)  return;
 8004a82:	bf00      	nop
 8004a84:	e002      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
    if(!hor_draw && !ver_draw) return;
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <lv_obj_get_scrollbar_area+0x938>
        return;
 8004a8a:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8004a8c:	377c      	adds	r7, #124	@ 0x7c
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd90      	pop	{r4, r7, pc}
 8004a92:	bf00      	nop
 8004a94:	66666667 	.word	0x66666667

08004a98 <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	@ 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004aa0:	f107 0208 	add.w	r2, r7, #8
 8004aa4:	f107 0318 	add.w	r3, r7, #24
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fb52 	bl	8004154 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004ab0:	f107 0318 	add.w	r3, r7, #24
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f015 fdd2 	bl	801a65e <lv_area_get_size>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d107      	bne.n	8004ad0 <lv_obj_scrollbar_invalidate+0x38>
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f015 fdca 	bl	801a65e <lv_area_get_size>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01c      	beq.n	8004b0a <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8004ad0:	f107 0318 	add.w	r3, r7, #24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f015 fdc2 	bl	801a65e <lv_area_get_size>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <lv_obj_scrollbar_invalidate+0x54>
 8004ae0:	f107 0318 	add.w	r3, r7, #24
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fe fb4e 	bl	8003188 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	4618      	mov	r0, r3
 8004af2:	f015 fdb4 	bl	801a65e <lv_area_get_size>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <lv_obj_scrollbar_invalidate+0x74>
 8004afc:	f107 0308 	add.w	r3, r7, #8
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fe fb40 	bl	8003188 <lv_obj_invalidate_area>
 8004b08:	e000      	b.n	8004b0c <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004b0a:	bf00      	nop
}
 8004b0c:	3728      	adds	r7, #40	@ 0x28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <lv_style_is_const>:
 * Check if a style is constant
 * @param style     pointer to a style
 * @return          true: the style is constant
 */
static inline bool lv_style_is_const(const lv_style_t * style)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
    if(style->prop_cnt == 255) return true;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7a1b      	ldrb	r3, [r3, #8]
 8004b1e:	2bff      	cmp	r3, #255	@ 0xff
 8004b20:	d101      	bne.n	8004b26 <lv_style_is_const+0x14>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <lv_style_is_const+0x16>
    return false;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	72fb      	strb	r3, [r7, #11]
    if(lv_style_is_const(style)) {
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ffe5 	bl	8004b12 <lv_style_is_const>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d022      	beq.n	8004b94 <lv_style_get_prop_inlined+0x60>
        lv_style_const_prop_t * props = (lv_style_const_prop_t *)style->values_and_props;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	617b      	str	r3, [r7, #20]
        uint32_t i;
        for(i = 0; props[i].prop_ptr; i++) {
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b58:	e014      	b.n	8004b84 <lv_style_get_prop_inlined+0x50>
            if(*props[i].prop_ptr == prop) {
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	7afa      	ldrb	r2, [r7, #11]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d108      	bne.n	8004b7e <lv_style_get_prop_inlined+0x4a>
                *value = props[i].value;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	441a      	add	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6852      	ldr	r2, [r2, #4]
 8004b78:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e031      	b.n	8004be2 <lv_style_get_prop_inlined+0xae>
        for(i = 0; props[i].prop_ptr; i++) {
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	3301      	adds	r3, #1
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e3      	bne.n	8004b5a <lv_style_get_prop_inlined+0x26>
 8004b92:	e025      	b.n	8004be0 <lv_style_get_prop_inlined+0xac>
            }
        }
    }
    else {
        lv_style_prop_t * props = (lv_style_prop_t *)style->values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	7a1b      	ldrb	r3, [r3, #8]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	61fb      	str	r3, [r7, #28]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	e015      	b.n	8004bd4 <lv_style_get_prop_inlined+0xa0>
            if(props[i] == prop) {
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	4413      	add	r3, r2
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7afa      	ldrb	r2, [r7, #11]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d10b      	bne.n	8004bce <lv_style_get_prop_inlined+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->values_and_props;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
                *value = values[i];
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e009      	b.n	8004be2 <lv_style_get_prop_inlined+0xae>
        for(i = 0; i < style->prop_cnt; i++) {
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	7a1b      	ldrb	r3, [r3, #8]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d3e3      	bcc.n	8004ba8 <lv_style_get_prop_inlined+0x74>
            }
        }
    }
    return LV_STYLE_RES_NOT_FOUND;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3728      	adds	r7, #40	@ 0x28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_lv_style_get_prop_group>:
 * It allows early skipping the style if the property is not exists in the style at all.
 * @param prop a style property
 * @return the group [0..30] 30 means all the custom properties with index > 120
 */
static inline uint32_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	71fb      	strb	r3, [r7, #7]
    uint32_t group = prop >> 2;
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	089b      	lsrs	r3, r3, #2
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	60fb      	str	r3, [r7, #12]
    if(group > 30) group = 31;    /*The MSB marks all the custom properties*/
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b1e      	cmp	r3, #30
 8004c00:	d901      	bls.n	8004c06 <_lv_style_get_prop_group+0x1c>
 8004c02:	231f      	movs	r3, #31
 8004c04:	60fb      	str	r3, [r7, #12]
    return group;
 8004c06:	68fb      	ldr	r3, [r7, #12]

}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <lv_obj_style_get_selector_state>:
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	b29b      	uxth	r3, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <lv_obj_style_get_selector_part>:
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
    _lv_ll_init(style_trans_ll_p, sizeof(trans_t));
 8004c4c:	2114      	movs	r1, #20
 8004c4e:	4802      	ldr	r0, [pc, #8]	@ (8004c58 <_lv_obj_style_init+0x10>)
 8004c50:	f017 f83b 	bl	801bcca <_lv_ll_init>
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	200000a4 	.word	0x200000a4

08004c5c <lv_style_prop_get_default_inlined>:
{
    style_refr = en;
}

static inline lv_style_value_t lv_style_prop_get_default_inlined(lv_style_prop_t prop)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b08f      	sub	sp, #60	@ 0x3c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	71fb      	strb	r3, [r7, #7]
    const lv_color_t black = LV_COLOR_MAKE(0x00, 0x00, 0x00);
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    const lv_color_t white = LV_COLOR_MAKE(0xff, 0xff, 0xff);
    switch(prop) {
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b6d      	cmp	r3, #109	@ 0x6d
 8004c7c:	f300 80ea 	bgt.w	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004c80:	2b59      	cmp	r3, #89	@ 0x59
 8004c82:	da0a      	bge.n	8004c9a <lv_style_prop_get_default_inlined+0x3e>
 8004c84:	2b58      	cmp	r3, #88	@ 0x58
 8004c86:	f300 80e5 	bgt.w	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004c8a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004c8c:	da36      	bge.n	8004cfc <lv_style_prop_get_default_inlined+0xa0>
 8004c8e:	2b22      	cmp	r3, #34	@ 0x22
 8004c90:	f300 80ae 	bgt.w	8004df0 <lv_style_prop_get_default_inlined+0x194>
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	da69      	bge.n	8004d6c <lv_style_prop_get_default_inlined+0x110>
 8004c98:	e0dc      	b.n	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004c9a:	3b59      	subs	r3, #89	@ 0x59
 8004c9c:	2b14      	cmp	r3, #20
 8004c9e:	f200 80d9 	bhi.w	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca8 <lv_style_prop_get_default_inlined+0x4c>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004e35 	.word	0x08004e35
 8004cac:	08004e47 	.word	0x08004e47
 8004cb0:	08004e55 	.word	0x08004e55
 8004cb4:	08004e55 	.word	0x08004e55
 8004cb8:	08004e55 	.word	0x08004e55
 8004cbc:	08004e55 	.word	0x08004e55
 8004cc0:	08004e35 	.word	0x08004e35
 8004cc4:	08004e35 	.word	0x08004e35
 8004cc8:	08004e55 	.word	0x08004e55
 8004ccc:	08004e55 	.word	0x08004e55
 8004cd0:	08004e55 	.word	0x08004e55
 8004cd4:	08004e55 	.word	0x08004e55
 8004cd8:	08004e55 	.word	0x08004e55
 8004cdc:	08004e55 	.word	0x08004e55
 8004ce0:	08004e55 	.word	0x08004e55
 8004ce4:	08004e55 	.word	0x08004e55
 8004ce8:	08004e55 	.word	0x08004e55
 8004cec:	08004e55 	.word	0x08004e55
 8004cf0:	08004e55 	.word	0x08004e55
 8004cf4:	08004dfb 	.word	0x08004dfb
 8004cf8:	08004dfb 	.word	0x08004dfb
 8004cfc:	3b3a      	subs	r3, #58	@ 0x3a
 8004cfe:	2201      	movs	r2, #1
 8004d00:	409a      	lsls	r2, r3
 8004d02:	4b59      	ldr	r3, [pc, #356]	@ (8004e68 <lv_style_prop_get_default_inlined+0x20c>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 808f 	bne.w	8004e34 <lv_style_prop_get_default_inlined+0x1d8>
 8004d16:	4b55      	ldr	r3, [pc, #340]	@ (8004e6c <lv_style_prop_get_default_inlined+0x210>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf14      	ite	ne
 8004d1e:	2301      	movne	r3, #1
 8004d20:	2300      	moveq	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d179      	bne.n	8004e1c <lv_style_prop_get_default_inlined+0x1c0>
 8004d28:	e094      	b.n	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004d2a:	3b23      	subs	r3, #35	@ 0x23
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	f248 0246 	movw	r2, #32838	@ 0x8046
 8004d36:	401a      	ands	r2, r3
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2201      	movne	r2, #1
 8004d3e:	2200      	moveq	r2, #0
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	2a00      	cmp	r2, #0
 8004d44:	d176      	bne.n	8004e34 <lv_style_prop_get_default_inlined+0x1d8>
 8004d46:	4a4a      	ldr	r2, [pc, #296]	@ (8004e70 <lv_style_prop_get_default_inlined+0x214>)
 8004d48:	401a      	ands	r2, r3
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	bf14      	ite	ne
 8004d4e:	2201      	movne	r2, #1
 8004d50:	2200      	moveq	r2, #0
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	d161      	bne.n	8004e1c <lv_style_prop_get_default_inlined+0x1c0>
 8004d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d16a      	bne.n	8004e40 <lv_style_prop_get_default_inlined+0x1e4>
 8004d6a:	e073      	b.n	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004d6c:	3b05      	subs	r3, #5
 8004d6e:	2b1d      	cmp	r3, #29
 8004d70:	d870      	bhi.n	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004d72:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <lv_style_prop_get_default_inlined+0x11c>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004e4d 	.word	0x08004e4d
 8004d7c:	08004e55 	.word	0x08004e55
 8004d80:	08004e4d 	.word	0x08004e4d
 8004d84:	08004e55 	.word	0x08004e55
 8004d88:	08004e55 	.word	0x08004e55
 8004d8c:	08004e55 	.word	0x08004e55
 8004d90:	08004e55 	.word	0x08004e55
 8004d94:	08004e55 	.word	0x08004e55
 8004d98:	08004e55 	.word	0x08004e55
 8004d9c:	08004e55 	.word	0x08004e55
 8004da0:	08004e55 	.word	0x08004e55
 8004da4:	08004e55 	.word	0x08004e55
 8004da8:	08004e55 	.word	0x08004e55
 8004dac:	08004e55 	.word	0x08004e55
 8004db0:	08004e55 	.word	0x08004e55
 8004db4:	08004e55 	.word	0x08004e55
 8004db8:	08004e55 	.word	0x08004e55
 8004dbc:	08004e55 	.word	0x08004e55
 8004dc0:	08004e55 	.word	0x08004e55
 8004dc4:	08004e55 	.word	0x08004e55
 8004dc8:	08004e55 	.word	0x08004e55
 8004dcc:	08004e55 	.word	0x08004e55
 8004dd0:	08004e55 	.word	0x08004e55
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004e55 	.word	0x08004e55
 8004ddc:	08004e55 	.word	0x08004e55
 8004de0:	08004e55 	.word	0x08004e55
 8004de4:	08004e55 	.word	0x08004e55
 8004de8:	08004e55 	.word	0x08004e55
 8004dec:	08004e3b 	.word	0x08004e3b
 8004df0:	2b39      	cmp	r3, #57	@ 0x39
 8004df2:	dc2f      	bgt.n	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
 8004df4:	2b23      	cmp	r3, #35	@ 0x23
 8004df6:	da98      	bge.n	8004d2a <lv_style_prop_get_default_inlined+0xce>
 8004df8:	e02c      	b.n	8004e54 <lv_style_prop_get_default_inlined+0x1f8>
        case LV_STYLE_TRANSFORM_SCALE_X:
        case LV_STYLE_TRANSFORM_SCALE_Y:
            return (lv_style_value_t) {
 8004dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e00:	e02a      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
                .num = LV_SCALE_NONE
            };
        case LV_STYLE_BG_COLOR:
            return (lv_style_value_t) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004e0a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	4611      	mov	r1, r2
 8004e12:	8019      	strh	r1, [r3, #0]
 8004e14:	3302      	adds	r3, #2
 8004e16:	0c12      	lsrs	r2, r2, #16
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e01d      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMAGE_RECOLOR:
            return (lv_style_value_t) {
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <lv_style_prop_get_default_inlined+0x218>)
 8004e22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	8019      	strh	r1, [r3, #0]
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	0c12      	lsrs	r2, r2, #16
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e011      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
        case LV_STYLE_BG_IMAGE_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            return (lv_style_value_t) {
 8004e34:	23ff      	movs	r3, #255	@ 0xff
 8004e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e38:	e00e      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
                .num = LV_OPA_COVER
            };
        case LV_STYLE_BG_GRAD_STOP:
            return (lv_style_value_t) {
 8004e3a:	23ff      	movs	r3, #255	@ 0xff
 8004e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3e:	e00b      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
                .num = 255
            };
        case LV_STYLE_BORDER_SIDE:
            return (lv_style_value_t) {
 8004e40:	230f      	movs	r3, #15
 8004e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e44:	e008      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
                .num = LV_BORDER_SIDE_FULL
            };
        case LV_STYLE_TEXT_FONT:
            return (lv_style_value_t) {
 8004e46:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <lv_style_prop_get_default_inlined+0x21c>)
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4a:	e005      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
                .ptr = LV_FONT_DEFAULT
            };
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            return (lv_style_value_t) {
 8004e4c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e52:	e001      	b.n	8004e58 <lv_style_prop_get_default_inlined+0x1fc>
                .num = LV_COORD_MAX
            };
        default:
            return (lv_style_value_t) {
 8004e54:	2300      	movs	r3, #0
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
                .ptr = 0
            };
    }
}
 8004e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	373c      	adds	r7, #60	@ 0x3c
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	02080411 	.word	0x02080411
 8004e6c:	41040808 	.word	0x41040808
 8004e70:	00404001 	.word	0x00404001
 8004e74:	0801e2fc 	.word	0x0801e2fc
 8004e78:	08021860 	.word	0x08021860

08004e7c <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
    LV_ASSERT_NULL(obj)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <lv_obj_get_style_prop+0x18>
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <lv_obj_get_style_prop+0x14>

    lv_style_selector_t selector = part | obj->state;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61fb      	str	r3, [r7, #28]
    lv_style_value_t value_act = { .ptr = NULL };
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
    lv_style_res_t found;

    found = get_selector_style_prop(obj, selector, prop, &value_act);
 8004ea4:	f107 0310 	add.w	r3, r7, #16
 8004ea8:	79fa      	ldrb	r2, [r7, #7]
 8004eaa:	69f9      	ldr	r1, [r7, #28]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f8f7 	bl	80050a0 <get_selector_style_prop>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	76fb      	strb	r3, [r7, #27]
    if(found == LV_STYLE_RES_FOUND) return value_act;
 8004eb6:	7efb      	ldrb	r3, [r7, #27]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d102      	bne.n	8004ec2 <lv_obj_get_style_prop+0x46>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e005      	b.n	8004ece <lv_obj_get_style_prop+0x52>

    return lv_style_prop_get_default_inlined(prop);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fec9 	bl	8004c5c <lv_style_prop_get_default_inlined>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	617b      	str	r3, [r7, #20]
}
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <get_prop_core>:
    return &obj->styles[0];
}

static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop,
                                    lv_style_value_t * v)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b090      	sub	sp, #64	@ 0x40
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	71fb      	strb	r3, [r7, #7]

    const uint32_t group = (uint32_t)1 << _lv_style_get_prop_group(prop);
 8004ee8:	79fb      	ldrb	r3, [r7, #7]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fe7d 	bl	8004bea <_lv_style_get_prop_group>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    const lv_part_t part = lv_obj_style_get_selector_part(selector);
 8004efa:	68b8      	ldr	r0, [r7, #8]
 8004efc:	f7ff fe96 	bl	8004c2c <lv_obj_style_get_selector_part>
 8004f00:	6338      	str	r0, [r7, #48]	@ 0x30
    const lv_state_t state = lv_obj_style_get_selector_state(selector);
 8004f02:	68b8      	ldr	r0, [r7, #8]
 8004f04:	f7ff fe86 	bl	8004c14 <lv_obj_style_get_selector_state>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const lv_state_t state_inv = ~state;
 8004f0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    const bool skip_trans = obj->skip_trans;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004f18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bf14      	ite	ne
 8004f22:	2301      	movne	r3, #1
 8004f24:	2300      	moveq	r3, #0
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    int32_t weight = -1;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    lv_style_res_t found;
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 8004f30:	2300      	movs	r3, #0
 8004f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f34:	e03d      	b.n	8004fb2 <get_prop_core+0xda>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
        if(obj_style->is_trans == false) break;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	79db      	ldrb	r3, [r3, #7]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d03a      	beq.n	8004fc6 <get_prop_core+0xee>
        if(skip_trans) continue;
 8004f50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d124      	bne.n	8004fa2 <get_prop_core+0xca>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fe5f 	bl	8004c2c <lv_obj_style_get_selector_part>
 8004f6e:	6238      	str	r0, [r7, #32]

        if(part_act != part) continue;
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d116      	bne.n	8004fa6 <get_prop_core+0xce>
        if((obj_style->style->has_group & group) == 0) continue;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <get_prop_core+0xd2>
        found = lv_style_get_prop_inlined(obj_style->style, prop, v);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	79f9      	ldrb	r1, [r7, #7]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff fdd0 	bl	8004b34 <lv_style_get_prop_inlined>
 8004f94:	4603      	mov	r3, r0
 8004f96:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) {
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d106      	bne.n	8004fac <get_prop_core+0xd4>
            return LV_STYLE_RES_FOUND;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e079      	b.n	8005096 <get_prop_core+0x1be>
        if(skip_trans) continue;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <get_prop_core+0xd4>
        if(part_act != part) continue;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <get_prop_core+0xd4>
        if((obj_style->style->has_group & group) == 0) continue;
 8004faa:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 8004fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fae:	3301      	adds	r3, #1
 8004fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb6:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d3b8      	bcc.n	8004f36 <get_prop_core+0x5e>
 8004fc4:	e058      	b.n	8005078 <get_prop_core+0x1a0>
        if(obj_style->is_trans == false) break;
 8004fc6:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 8004fc8:	e056      	b.n	8005078 <get_prop_core+0x1a0>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d041      	beq.n	8005064 <get_prop_core+0x18c>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff fe15 	bl	8004c2c <lv_obj_style_get_selector_part>
 8005002:	6178      	str	r0, [r7, #20]
        if(part_act != part) continue;
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	429a      	cmp	r2, r3
 800500a:	d12d      	bne.n	8005068 <get_prop_core+0x190>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fdf9 	bl	8004c14 <lv_obj_style_get_selector_state>
 8005022:	4603      	mov	r3, r0
 8005024:	827b      	strh	r3, [r7, #18]
        if((state_act & state_inv)) continue;
 8005026:	8a7a      	ldrh	r2, [r7, #18]
 8005028:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800502a:	4013      	ands	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11c      	bne.n	800506c <get_prop_core+0x194>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 8005032:	8a7b      	ldrh	r3, [r7, #18]
 8005034:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005036:	429a      	cmp	r2, r3
 8005038:	da1a      	bge.n	8005070 <get_prop_core+0x198>

        found = lv_style_get_prop_inlined(obj_style->style, prop, v);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	79f9      	ldrb	r1, [r7, #7]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fd76 	bl	8004b34 <lv_style_get_prop_inlined>
 8005048:	4603      	mov	r3, r0
 800504a:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) {
 800504c:	7ffb      	ldrb	r3, [r7, #31]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10f      	bne.n	8005072 <get_prop_core+0x19a>
            if(state_act == state) {
 8005052:	8a7a      	ldrh	r2, [r7, #18]
 8005054:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005056:	429a      	cmp	r2, r3
 8005058:	d101      	bne.n	800505e <get_prop_core+0x186>
                return LV_STYLE_RES_FOUND;
 800505a:	2301      	movs	r3, #1
 800505c:	e01b      	b.n	8005096 <get_prop_core+0x1be>
            }
            weight = state_act;
 800505e:	8a7b      	ldrh	r3, [r7, #18]
 8005060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005062:	e006      	b.n	8005072 <get_prop_core+0x19a>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 8005064:	bf00      	nop
 8005066:	e004      	b.n	8005072 <get_prop_core+0x19a>
        if(part_act != part) continue;
 8005068:	bf00      	nop
 800506a:	e002      	b.n	8005072 <get_prop_core+0x19a>
        if((state_act & state_inv)) continue;
 800506c:	bf00      	nop
 800506e:	e000      	b.n	8005072 <get_prop_core+0x19a>
        if(state_act <= weight) continue;
 8005070:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	3301      	adds	r3, #1
 8005076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	f3c3 1305 	ubfx	r3, r3, #4, #6
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	4293      	cmp	r3, r2
 8005088:	d39f      	bcc.n	8004fca <get_prop_core+0xf2>
        }
    }

    if(weight >= 0) return LV_STYLE_RES_FOUND;
 800508a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508c:	2b00      	cmp	r3, #0
 800508e:	db01      	blt.n	8005094 <get_prop_core+0x1bc>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <get_prop_core+0x1be>
    else return LV_STYLE_RES_NOT_FOUND;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3740      	adds	r7, #64	@ 0x40
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <get_selector_style_prop>:
    return false;
}

static lv_style_res_t get_selector_style_prop(const lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop,
                                              lv_style_value_t * value_act)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
    lv_style_res_t found;
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 80050b0:	68b8      	ldr	r0, [r7, #8]
 80050b2:	f7ff fdbb 	bl	8004c2c <lv_obj_style_get_selector_part>
 80050b6:	61f8      	str	r0, [r7, #28]
#if LV_OBJ_STYLE_CACHE
    const uint32_t prop_shifted = STYLE_PROP_SHIFTED(prop);
    if((part == LV_PART_MAIN ? obj->style_main_prop_is_set : obj->style_other_prop_is_set) & prop_shifted)
#endif
    {
        found = get_prop_core(obj, selector, prop, value_act);
 80050b8:	79fa      	ldrb	r2, [r7, #7]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff ff0a 	bl	8004ed8 <get_prop_core>
 80050c4:	4603      	mov	r3, r0
 80050c6:	74fb      	strb	r3, [r7, #19]
        if(found == LV_STYLE_RES_FOUND) return LV_STYLE_RES_FOUND;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d101      	bne.n	80050d2 <get_selector_style_prop+0x32>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e072      	b.n	80051b8 <get_selector_style_prop+0x118>
    }

    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    bool inheritable = false;
 80050d2:	2300      	movs	r3, #0
 80050d4:	76fb      	strb	r3, [r7, #27]
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS) {
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	2b8c      	cmp	r3, #140	@ 0x8c
 80050da:	d80a      	bhi.n	80050f2 <get_selector_style_prop+0x52>
        inheritable = _lv_style_builtin_prop_flag_lookup_table[prop] & LV_STYLE_PROP_FLAG_INHERITABLE;
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	4a38      	ldr	r2, [pc, #224]	@ (80051c0 <get_selector_style_prop+0x120>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e010      	b.n	8005114 <get_selector_style_prop+0x74>
    }
    else {
        if(_style_custom_prop_flag_lookup_table != NULL) {
 80050f2:	4b34      	ldr	r3, [pc, #208]	@ (80051c4 <get_selector_style_prop+0x124>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <get_selector_style_prop+0x74>
            inheritable = _style_custom_prop_flag_lookup_table[prop - _LV_STYLE_NUM_BUILT_IN_PROPS] &
 80050fa:	4b32      	ldr	r3, [pc, #200]	@ (80051c4 <get_selector_style_prop+0x124>)
 80050fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	3b8d      	subs	r3, #141	@ 0x8d
 8005102:	4413      	add	r3, r2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf14      	ite	ne
 800510e:	2301      	movne	r3, #1
 8005110:	2300      	moveq	r3, #0
 8005112:	76fb      	strb	r3, [r7, #27]
                          LV_STYLE_PROP_FLAG_INHERITABLE;
        }
    }

    if(inheritable) {
 8005114:	7efb      	ldrb	r3, [r7, #27]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d023      	beq.n	8005162 <get_selector_style_prop+0xc2>
        /*If not found, check the `MAIN` style first, if already on the MAIN part go to the parent*/
        if(part != LV_PART_MAIN) part = LV_PART_MAIN;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <get_selector_style_prop+0x86>
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	e019      	b.n	800515a <get_selector_style_prop+0xba>
        else obj = obj->parent;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	60fb      	str	r3, [r7, #12]

        while(obj) {
 800512c:	e015      	b.n	800515a <get_selector_style_prop+0xba>
#if LV_OBJ_STYLE_CACHE
            if(obj->style_main_prop_is_set & prop_shifted)
#endif
            {
                selector = part | obj->state;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005132:	461a      	mov	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4313      	orrs	r3, r2
 8005138:	60bb      	str	r3, [r7, #8]
                found = get_prop_core(obj, selector, prop, value_act);
 800513a:	79fa      	ldrb	r2, [r7, #7]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff fec9 	bl	8004ed8 <get_prop_core>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]
                if(found == LV_STYLE_RES_FOUND) return LV_STYLE_RES_FOUND;
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <get_selector_style_prop+0xb4>
 8005150:	2301      	movs	r3, #1
 8005152:	e031      	b.n	80051b8 <get_selector_style_prop+0x118>
            }
            /*Check the parent too.*/
            obj = obj->parent;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
        while(obj) {
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <get_selector_style_prop+0x8e>
 8005160:	e029      	b.n	80051b6 <get_selector_style_prop+0x116>
        }
    }
    else {
        /*Get the width and height from the class.
                * WIDTH and HEIGHT are not inherited so add them in the `else` to skip checking them for inherited properties */
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d126      	bne.n	80051b6 <get_selector_style_prop+0x116>
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d002      	beq.n	8005174 <get_selector_style_prop+0xd4>
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d120      	bne.n	80051b6 <get_selector_style_prop+0x116>
            const lv_obj_class_t * cls = obj->class_p;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	617b      	str	r3, [r7, #20]
            while(cls) {
 800517a:	e019      	b.n	80051b0 <get_selector_style_prop+0x110>
                if(prop == LV_STYLE_WIDTH) {
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d109      	bne.n	8005196 <get_selector_style_prop+0xf6>
                    if(cls->width_def != 0)  {
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00f      	beq.n	80051aa <get_selector_style_prop+0x10a>
                        value_act->num = cls->width_def;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	601a      	str	r2, [r3, #0]
                        return LV_STYLE_RES_FOUND;
 8005192:	2301      	movs	r3, #1
 8005194:	e010      	b.n	80051b8 <get_selector_style_prop+0x118>
                    }
                }
                else {
                    if(cls->height_def != 0) {
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <get_selector_style_prop+0x10a>
                        value_act->num = cls->height_def;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	601a      	str	r2, [r3, #0]
                        return LV_STYLE_RES_FOUND;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e006      	b.n	80051b8 <get_selector_style_prop+0x118>
                    }
                }
                cls = cls->base_class;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	617b      	str	r3, [r7, #20]
            while(cls) {
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e2      	bne.n	800517c <get_selector_style_prop+0xdc>
            }
        }
    }

    return LV_STYLE_RES_NOT_FOUND;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3720      	adds	r7, #32
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	0802193c 	.word	0x0802193c
 80051c4:	2000008c 	.word	0x2000008c

080051c8 <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 80051d8:	68b8      	ldr	r0, [r7, #8]
 80051da:	f000 f847 	bl	800526c <lv_obj_get_parent>
 80051de:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f6      	bne.n	80051d4 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 80051e6:	68bb      	ldr	r3, [r7, #8]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <lv_obj_get_display>:

lv_display_t * lv_obj_get_display(const lv_obj_t * obj)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <lv_obj_get_display+0x16>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e003      	b.n	800520e <lv_obj_get_display+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff ffde 	bl	80051c8 <lv_obj_get_screen>
 800520c:	6178      	str	r0, [r7, #20]

    lv_display_t * d;
    lv_ll_t * disp_head = disp_ll_p;
 800520e:	4b16      	ldr	r3, [pc, #88]	@ (8005268 <lv_obj_get_display+0x78>)
 8005210:	60bb      	str	r3, [r7, #8]
    _LV_LL_READ(disp_head, d) {
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f016 fe37 	bl	801be86 <_lv_ll_get_head>
 8005218:	6138      	str	r0, [r7, #16]
 800521a:	e01c      	b.n	8005256 <lv_obj_get_display+0x66>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e00e      	b.n	8005240 <lv_obj_get_display+0x50>
            if(d->screens[i] == scr) return d;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	429a      	cmp	r2, r3
 8005234:	d101      	bne.n	800523a <lv_obj_get_display+0x4a>
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	e011      	b.n	800525e <lv_obj_get_display+0x6e>
        for(i = 0; i < d->screen_cnt; i++) {
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3301      	adds	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d3ea      	bcc.n	8005222 <lv_obj_get_display+0x32>
    _LV_LL_READ(disp_head, d) {
 800524c:	6939      	ldr	r1, [r7, #16]
 800524e:	68b8      	ldr	r0, [r7, #8]
 8005250:	f016 fe3b 	bl	801beca <_lv_ll_get_next>
 8005254:	6138      	str	r0, [r7, #16]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1df      	bne.n	800521c <lv_obj_get_display+0x2c>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000090 	.word	0x20000090

0800526c <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <lv_obj_get_parent+0x12>
 800527a:	2300      	movs	r3, #0
 800527c:	e001      	b.n	8005282 <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t idx)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <lv_obj_get_child+0x16>
 80052a0:	2300      	movs	r3, #0
 80052a2:	e023      	b.n	80052ec <lv_obj_get_child+0x5e>

    uint32_t idu;
    if(idx < 0) {
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da0e      	bge.n	80052c8 <lv_obj_get_child+0x3a>
        idx = obj->spec_attr->child_cnt + idx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b0:	461a      	mov	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	603b      	str	r3, [r7, #0]
        if(idx < 0) return NULL;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	da01      	bge.n	80052c2 <lv_obj_get_child+0x34>
 80052be:	2300      	movs	r3, #0
 80052c0:	e014      	b.n	80052ec <lv_obj_get_child+0x5e>
        idu = (uint32_t) idx;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	e001      	b.n	80052cc <lv_obj_get_child+0x3e>
    }
    else {
        idu = idx;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	60fb      	str	r3, [r7, #12]
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d301      	bcc.n	80052de <lv_obj_get_child+0x50>
 80052da:	2300      	movs	r3, #0
 80052dc:	e006      	b.n	80052ec <lv_obj_get_child+0x5e>
    else return obj->spec_attr->children[idx];
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <lv_obj_get_child_count>:

    return lv_obj_get_child(parent, sibling_idx);
}

uint32_t lv_obj_get_child_count(const lv_obj_t * obj)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <lv_obj_get_child_count+0x14>
 8005308:	2300      	movs	r3, #0
 800530a:	e002      	b.n	8005312 <lv_obj_get_child_count+0x1a>
    return obj->spec_attr->child_cnt;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
}
 8005312:	4618      	mov	r0, r3
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <lv_area_copy>:
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <_lv_inv_area>:

    layer->_clip_area = clip_area_ori;
}

void _lv_inv_area(lv_display_t * disp, const lv_area_t * area_p)
{
 8005362:	b590      	push	{r4, r7, lr}
 8005364:	b08f      	sub	sp, #60	@ 0x3c
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_display_get_default();
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <_lv_inv_area+0x16>
 8005372:	f000 f8d1 	bl	8005518 <lv_display_get_default>
 8005376:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a6 	beq.w	80054cc <_lv_inv_area+0x16a>
    if(!lv_display_is_invalidation_enabled(disp)) return;
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f9f3 	bl	800576c <lv_display_is_invalidation_enabled>
 8005386:	4603      	mov	r3, r0
 8005388:	f083 0301 	eor.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 809e 	bne.w	80054d0 <_lv_inv_area+0x16e>

    LV_ASSERT_MSG(!disp->rendering_in_progress, "Invalidate area is not allowed during rendering.");
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <_lv_inv_area+0x46>
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <_lv_inv_area+0x42>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <_lv_inv_area+0x56>
        disp->inv_p = 0;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
        return;
 80053b6:	e092      	b.n	80054de <_lv_inv_area+0x17c>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
    scr_area.y1 = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	623b      	str	r3, [r7, #32]
    scr_area.x2 = lv_display_get_horizontal_resolution(disp) - 1;
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8b5 	bl	8005530 <lv_display_get_horizontal_resolution>
 80053c6:	4603      	mov	r3, r0
 80053c8:	3b01      	subs	r3, #1
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
    scr_area.y2 = lv_display_get_vertical_resolution(disp) - 1;
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f8d1 	bl	8005574 <lv_display_get_vertical_resolution>
 80053d2:	4603      	mov	r3, r0
 80053d4:	3b01      	subs	r3, #1
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80053d8:	f107 021c 	add.w	r2, r7, #28
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f015 f99e 	bl	801a724 <_lv_area_intersect>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(suc == false)  return; /*Out of the screen*/
 80053ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d16b      	bne.n	80054d4 <_lv_inv_area+0x172>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->render_mode == LV_DISPLAY_RENDER_MODE_FULL) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005402:	2b02      	cmp	r3, #2
 8005404:	d111      	bne.n	800542a <_lv_inv_area+0xc8>
        disp->inv_areas[0] = scr_area;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 800540c:	f107 031c 	add.w	r3, r7, #28
 8005410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        disp->inv_p = 1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
        lv_display_send_event(disp, LV_EVENT_REFR_REQUEST, NULL);
 800541e:	2200      	movs	r2, #0
 8005420:	2132      	movs	r1, #50	@ 0x32
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f961 	bl	80056ea <lv_display_send_event>
        return;
 8005428:	e059      	b.n	80054de <_lv_inv_area+0x17c>
    }

    lv_result_t res = lv_display_send_event(disp, LV_EVENT_INVALIDATE_AREA, &com_area);
 800542a:	f107 030c 	add.w	r3, r7, #12
 800542e:	461a      	mov	r2, r3
 8005430:	212f      	movs	r1, #47	@ 0x2f
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f959 	bl	80056ea <lv_display_send_event>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if(res != LV_RESULT_OK) return;
 800543e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005442:	2b01      	cmp	r3, #1
 8005444:	d148      	bne.n	80054d8 <_lv_inv_area+0x176>

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 8005446:	2300      	movs	r3, #0
 8005448:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800544a:	e011      	b.n	8005470 <_lv_inv_area+0x10e>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800544c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	3338      	adds	r3, #56	@ 0x38
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	1d19      	adds	r1, r3, #4
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	2200      	movs	r2, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f015 fa84 	bl	801a96c <_lv_area_is_in>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d138      	bne.n	80054dc <_lv_inv_area+0x17a>
    for(i = 0; i < disp->inv_p; i++) {
 800546a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800546c:	3301      	adds	r3, #1
 800546e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005470:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8005478:	429a      	cmp	r2, r3
 800547a:	d3e7      	bcc.n	800544c <_lv_inv_area+0xea>
    }

    /*Save the area*/
    lv_area_t * tmp_area_p = &com_area;
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
    if(disp->inv_p >= LV_INV_BUF_SIZE) { /*If no place for the area add the screen*/
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8005488:	2b1f      	cmp	r3, #31
 800548a:	d906      	bls.n	800549a <_lv_inv_area+0x138>
        disp->inv_p = 0;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
        tmp_area_p = &scr_area;
 8005494:	f107 031c 	add.w	r3, r7, #28
 8005498:	633b      	str	r3, [r7, #48]	@ 0x30
    }
    lv_area_copy(&disp->inv_areas[disp->inv_p], tmp_area_p);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	3338      	adds	r3, #56	@ 0x38
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ff36 	bl	800531e <lv_area_copy>
    disp->inv_p++;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c

    lv_display_send_event(disp, LV_EVENT_REFR_REQUEST, NULL);
 80054c0:	2200      	movs	r2, #0
 80054c2:	2132      	movs	r1, #50	@ 0x32
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f910 	bl	80056ea <lv_display_send_event>
 80054ca:	e008      	b.n	80054de <_lv_inv_area+0x17c>
    if(!disp) return;
 80054cc:	bf00      	nop
 80054ce:	e006      	b.n	80054de <_lv_inv_area+0x17c>
    if(!lv_display_is_invalidation_enabled(disp)) return;
 80054d0:	bf00      	nop
 80054d2:	e004      	b.n	80054de <_lv_inv_area+0x17c>
    if(suc == false)  return; /*Out of the screen*/
 80054d4:	bf00      	nop
 80054d6:	e002      	b.n	80054de <_lv_inv_area+0x17c>
    if(res != LV_RESULT_OK) return;
 80054d8:	bf00      	nop
 80054da:	e000      	b.n	80054de <_lv_inv_area+0x17c>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 80054dc:	bf00      	nop
}
 80054de:	373c      	adds	r7, #60	@ 0x3c
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd90      	pop	{r4, r7, pc}

080054e4 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_display_t * _lv_refr_get_disp_refreshing(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
    return disp_refr;
 80054e8:	4b03      	ldr	r3, [pc, #12]	@ (80054f8 <_lv_refr_get_disp_refreshing+0x14>)
 80054ea:	691b      	ldr	r3, [r3, #16]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	2000008c 	.word	0x2000008c

080054fc <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	2100      	movs	r1, #0
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f017 fe27 	bl	801d15e <lv_memset>
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <lv_display_get_default>:
{
    disp_def = disp;
}

lv_display_t * lv_display_get_default(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
    return disp_def;
 800551c:	4b03      	ldr	r3, [pc, #12]	@ (800552c <lv_display_get_default+0x14>)
 800551e:	695b      	ldr	r3, [r3, #20]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	2000008c 	.word	0x2000008c

08005530 <lv_display_get_horizontal_resolution>:

    disp->dpi = dpi;
}

int32_t lv_display_get_horizontal_resolution(const lv_display_t * disp)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_display_get_default();
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <lv_display_get_horizontal_resolution+0x14>
 800553e:	f7ff ffeb 	bl	8005518 <lv_display_get_default>
 8005542:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <lv_display_get_horizontal_resolution+0x1e>
        return 0;
 800554a:	2300      	movs	r3, #0
 800554c:	e00e      	b.n	800556c <lv_display_get_horizontal_resolution+0x3c>
    }
    else {
        switch(disp->rotation) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8005554:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d001      	beq.n	8005562 <lv_display_get_horizontal_resolution+0x32>
 800555e:	2b03      	cmp	r3, #3
 8005560:	d102      	bne.n	8005568 <lv_display_get_horizontal_resolution+0x38>
            case LV_DISPLAY_ROTATION_90:
            case LV_DISPLAY_ROTATION_270:
                return disp->ver_res;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	e001      	b.n	800556c <lv_display_get_horizontal_resolution+0x3c>
            default:
                return disp->hor_res;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
        }
    }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <lv_display_get_vertical_resolution>:

int32_t lv_display_get_vertical_resolution(const lv_display_t * disp)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_display_get_default();
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <lv_display_get_vertical_resolution+0x14>
 8005582:	f7ff ffc9 	bl	8005518 <lv_display_get_default>
 8005586:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <lv_display_get_vertical_resolution+0x1e>
        return 0;
 800558e:	2300      	movs	r3, #0
 8005590:	e00e      	b.n	80055b0 <lv_display_get_vertical_resolution+0x3c>
    }
    else {
        switch(disp->rotation) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8005598:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <lv_display_get_vertical_resolution+0x32>
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d102      	bne.n	80055ac <lv_display_get_vertical_resolution+0x38>
            case LV_DISPLAY_ROTATION_90:
            case LV_DISPLAY_ROTATION_270:
                return disp->hor_res;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	e001      	b.n	80055b0 <lv_display_get_vertical_resolution+0x3c>
            default:
                return disp->ver_res;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
        }
    }
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <lv_display_get_dpi>:
        }
    }
}

int32_t lv_display_get_dpi(const lv_display_t * disp)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_display_get_default();
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <lv_display_get_dpi+0x14>
 80055c6:	f7ff ffa7 	bl	8005518 <lv_display_get_default>
 80055ca:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <lv_display_get_dpi+0x1e>
 80055d2:	2382      	movs	r3, #130	@ 0x82
 80055d4:	e001      	b.n	80055da <lv_display_get_dpi+0x22>
    return disp->dpi;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <lv_display_get_color_format>:

    lv_display_send_event(disp, LV_EVENT_COLOR_FORMAT_CHANGED, NULL);
}

lv_color_format_t lv_display_get_color_format(lv_display_t * disp)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_display_get_default();
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <lv_display_get_color_format+0x14>
 80055f0:	f7ff ff92 	bl	8005518 <lv_display_get_default>
 80055f4:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_COLOR_FORMAT_UNKNOWN;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <lv_display_get_color_format+0x1e>
 80055fc:	2300      	movs	r3, #0
 80055fe:	e002      	b.n	8005606 <lv_display_get_color_format+0x24>

    return disp->color_format;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <lv_display_get_screen_active>:
/*---------------------
  * SCREENS
  *--------------------*/

lv_obj_t * lv_display_get_screen_active(lv_display_t * disp)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_display_get_default();
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <lv_display_get_screen_active+0x14>
 800561c:	f7ff ff7c 	bl	8005518 <lv_display_get_default>
 8005620:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <lv_display_get_screen_active+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	e002      	b.n	8005632 <lv_display_get_screen_active+0x24>
    }

    return disp->act_scr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <lv_display_get_screen_prev>:

lv_obj_t * lv_display_get_screen_prev(lv_display_t * disp)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_display_get_default();
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <lv_display_get_screen_prev+0x14>
 8005648:	f7ff ff66 	bl	8005518 <lv_display_get_default>
 800564c:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <lv_display_get_screen_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	e002      	b.n	800565e <lv_display_get_screen_prev+0x24>
    }

    return disp->prev_scr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <lv_display_get_layer_top>:

lv_obj_t * lv_display_get_layer_top(lv_display_t * disp)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_display_get_default();
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <lv_display_get_layer_top+0x14>
 8005674:	f7ff ff50 	bl	8005518 <lv_display_get_default>
 8005678:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <lv_display_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	e002      	b.n	800568a <lv_display_get_layer_top+0x24>
    }

    return disp->top_layer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <lv_display_get_layer_sys>:

lv_obj_t * lv_display_get_layer_sys(lv_display_t * disp)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_display_get_default();
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <lv_display_get_layer_sys+0x14>
 80056a0:	f7ff ff3a 	bl	8005518 <lv_display_get_default>
 80056a4:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <lv_display_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e002      	b.n	80056b6 <lv_display_get_layer_sys+0x24>
    }

    return disp->sys_layer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <lv_display_get_layer_bottom>:

lv_obj_t * lv_display_get_layer_bottom(lv_display_t * disp)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_display_get_default();
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <lv_display_get_layer_bottom+0x14>
 80056cc:	f7ff ff24 	bl	8005518 <lv_display_get_default>
 80056d0:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <lv_display_get_layer_bottom+0x1e>
        LV_LOG_WARN("lv_layer_bottom: no display registered to get its bottom layer");
        return NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	e002      	b.n	80056e2 <lv_display_get_layer_bottom+0x24>
    }

    return disp->bottom_layer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <lv_display_send_event>:

    return removed_count;
}

lv_result_t lv_display_send_event(lv_display_t * disp, lv_event_code_t code, void * param)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08c      	sub	sp, #48	@ 0x30
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	460b      	mov	r3, r1
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	817b      	strh	r3, [r7, #10]

    lv_event_t e;
    lv_memzero(&e, sizeof(e));
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	211c      	movs	r1, #28
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fefc 	bl	80054fc <lv_memzero>
    e.code = code;
 8005704:	897b      	ldrh	r3, [r7, #10]
 8005706:	833b      	strh	r3, [r7, #24]
    e.current_target = disp;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	613b      	str	r3, [r7, #16]
    e.original_target = disp;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	617b      	str	r3, [r7, #20]
    e.param = param;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	623b      	str	r3, [r7, #32]
    lv_result_t res;
    res = lv_event_send(&disp->event_list, &e, true);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800571a:	f107 0110 	add.w	r1, r7, #16
 800571e:	2201      	movs	r2, #1
 8005720:	4618      	mov	r0, r3
 8005722:	f015 febd 	bl	801b4a0 <lv_event_send>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(res != LV_RESULT_OK) return res;
 800572c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005730:	2b01      	cmp	r3, #1
 8005732:	d002      	beq.n	800573a <lv_display_send_event+0x50>
 8005734:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005738:	e014      	b.n	8005764 <lv_display_send_event+0x7a>

    res = lv_event_send(&disp->event_list, &e, false);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8005740:	f107 0110 	add.w	r1, r7, #16
 8005744:	2200      	movs	r2, #0
 8005746:	4618      	mov	r0, r3
 8005748:	f015 feaa 	bl	801b4a0 <lv_event_send>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(res != LV_RESULT_OK) return res;
 8005752:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005756:	2b01      	cmp	r3, #1
 8005758:	d002      	beq.n	8005760 <lv_display_send_event+0x76>
 800575a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800575e:	e001      	b.n	8005764 <lv_display_send_event+0x7a>

    return res;
 8005760:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005764:	4618      	mov	r0, r3
 8005766:	3730      	adds	r7, #48	@ 0x30
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <lv_display_is_invalidation_enabled>:

    disp->inv_en_cnt += en ? 1 : -1;
}

bool lv_display_is_invalidation_enabled(lv_display_t * disp)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_display_get_default();
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <lv_display_is_invalidation_enabled+0x14>
 800577a:	f7ff fecd 	bl	8005518 <lv_display_get_default>
 800577e:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <lv_display_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 8005786:	2300      	movs	r3, #0
 8005788:	e007      	b.n	800579a <lv_display_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfcc      	ite	gt
 8005794:	2301      	movgt	r3, #1
 8005796:	2300      	movle	r3, #0
 8005798:	b2db      	uxtb	r3, r3
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	3301      	adds	r3, #1
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	3301      	adds	r3, #1
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <get_layer_size_kb>:
 *  STATIC PROTOTYPES
 **********************/
static bool is_independent(lv_layer_t * layer, lv_draw_task_t * t_check);

static inline uint32_t get_layer_size_kb(uint32_t size_byte)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
    return size_byte < 1024 ? 1 : size_byte >> 10;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f0:	d302      	bcc.n	80057f8 <get_layer_size_kb+0x16>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0a9b      	lsrs	r3, r3, #10
 80057f6:	e000      	b.n	80057fa <get_layer_size_kb+0x18>
 80057f8:	2301      	movs	r3, #1
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 8005806:	b480      	push	{r7}
 8005808:	af00      	add	r7, sp, #0
#if LV_USE_OS
    lv_thread_sync_init(&_draw_info.sync);
#endif
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <lv_draw_create_unit>:
    }
    _draw_info.unit_head = NULL;
}

void * lv_draw_create_unit(size_t size)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
    lv_draw_unit_t * new_unit = lv_malloc_zeroed(size);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f018 fc55 	bl	801e0cc <lv_malloc_zeroed>
 8005822:	60f8      	str	r0, [r7, #12]

    new_unit->next = _draw_info.unit_head;
 8005824:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <lv_draw_create_unit+0x2c>)
 8005826:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]
    _draw_info.unit_head = new_unit;
 800582e:	4a04      	ldr	r2, [pc, #16]	@ (8005840 <lv_draw_create_unit+0x2c>)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    return new_unit;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	2000008c 	.word	0x2000008c

08005844 <lv_draw_dispatch_request>:
    _draw_info.dispatch_req = 0;
#endif
}

void lv_draw_dispatch_request(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
#if LV_USE_OS
    lv_thread_sync_signal(&_draw_info.sync);
#else
    _draw_info.dispatch_req = 1;
 8005848:	4b04      	ldr	r3, [pc, #16]	@ (800585c <lv_draw_dispatch_request+0x18>)
 800584a:	2201      	movs	r2, #1
 800584c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
#endif
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	2000008c 	.word	0x2000008c

08005860 <lv_draw_get_next_available_task>:

lv_draw_task_t * lv_draw_get_next_available_task(lv_layer_t * layer, lv_draw_task_t * t_prev, uint8_t draw_unit_id)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]
    LV_PROFILER_BEGIN;
    /*If the first task is screen sized, there cannot be independent areas*/
    if(layer->draw_task_head) {
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d02a      	beq.n	80058cc <lv_draw_get_next_available_task+0x6c>
        int32_t hor_res = lv_display_get_horizontal_resolution(_lv_refr_get_disp_refreshing());
 8005876:	f7ff fe35 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 800587a:	4603      	mov	r3, r0
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff fe57 	bl	8005530 <lv_display_get_horizontal_resolution>
 8005882:	61b8      	str	r0, [r7, #24]
        int32_t ver_res = lv_display_get_vertical_resolution(_lv_refr_get_disp_refreshing());
 8005884:	f7ff fe2e 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 8005888:	4603      	mov	r3, r0
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fe72 	bl	8005574 <lv_display_get_vertical_resolution>
 8005890:	6178      	str	r0, [r7, #20]
        lv_draw_task_t * t = layer->draw_task_head;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	613b      	str	r3, [r7, #16]
        if(t->state != LV_DRAW_TASK_STATE_QUEUED &&
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589c:	2b01      	cmp	r3, #1
 800589e:	d015      	beq.n	80058cc <lv_draw_get_next_available_task+0x6c>
           t->area.x1 <= 0 && t->area.x2 >= hor_res - 1 &&
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	689b      	ldr	r3, [r3, #8]
        if(t->state != LV_DRAW_TASK_STATE_QUEUED &&
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dc11      	bgt.n	80058cc <lv_draw_get_next_available_task+0x6c>
           t->area.x1 <= 0 && t->area.x2 >= hor_res - 1 &&
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	429a      	cmp	r2, r3
 80058b2:	db0b      	blt.n	80058cc <lv_draw_get_next_available_task+0x6c>
           t->area.y1 <= 0 && t->area.y2 >= ver_res - 1) {
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	68db      	ldr	r3, [r3, #12]
           t->area.x1 <= 0 && t->area.x2 >= hor_res - 1 &&
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	dc07      	bgt.n	80058cc <lv_draw_get_next_available_task+0x6c>
           t->area.y1 <= 0 && t->area.y2 >= ver_res - 1) {
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	429a      	cmp	r2, r3
 80058c6:	db01      	blt.n	80058cc <lv_draw_get_next_available_task+0x6c>
            LV_PROFILER_END;
            return NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e028      	b.n	800591e <lv_draw_get_next_available_task+0xbe>
        }
    }

    lv_draw_task_t * t = t_prev ? t_prev->next : layer->draw_task_head;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <lv_draw_get_next_available_task+0x78>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	e001      	b.n	80058dc <lv_draw_get_next_available_task+0x7c>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	61fb      	str	r3, [r7, #28]
    while(t) {
 80058de:	e01a      	b.n	8005916 <lv_draw_get_next_available_task+0xb6>
        /*Find a queued and independent task*/
        if(t->state == LV_DRAW_TASK_STATE_QUEUED &&
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d113      	bne.n	8005910 <lv_draw_get_next_available_task+0xb0>
           (t->preferred_draw_unit_id == LV_DRAW_UNIT_ID_ANY || t->preferred_draw_unit_id == draw_unit_id) &&
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
        if(t->state == LV_DRAW_TASK_STATE_QUEUED &&
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <lv_draw_get_next_available_task+0x9e>
           (t->preferred_draw_unit_id == LV_DRAW_UNIT_ID_ANY || t->preferred_draw_unit_id == draw_unit_id) &&
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058f8:	79fa      	ldrb	r2, [r7, #7]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d108      	bne.n	8005910 <lv_draw_get_next_available_task+0xb0>
           is_independent(layer, t)) {
 80058fe:	69f9      	ldr	r1, [r7, #28]
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f879 	bl	80059f8 <is_independent>
 8005906:	4603      	mov	r3, r0
           (t->preferred_draw_unit_id == LV_DRAW_UNIT_ID_ANY || t->preferred_draw_unit_id == draw_unit_id) &&
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <lv_draw_get_next_available_task+0xb0>
            LV_PROFILER_END;
            return t;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	e006      	b.n	800591e <lv_draw_get_next_available_task+0xbe>
        }
        t = t->next;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	61fb      	str	r3, [r7, #28]
    while(t) {
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e1      	bne.n	80058e0 <lv_draw_get_next_available_task+0x80>
    }

    LV_PROFILER_END;
    return NULL;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <lv_draw_layer_alloc_buf>:

    return new_layer;
}

void * lv_draw_layer_alloc_buf(lv_layer_t * layer)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
    /*If the buffer of the layer is already allocated return it*/
    if(layer->draw_buf != NULL) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <lv_draw_layer_alloc_buf+0x18>
        return layer->draw_buf->data;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	e043      	b.n	80059c8 <lv_draw_layer_alloc_buf+0xa0>
    }

    /*If the buffer of the layer is not allocated yet, allocate it now*/
    int32_t w = lv_area_get_width(&layer->buf_area);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff2c 	bl	80057a2 <lv_area_get_width>
 800594a:	6178      	str	r0, [r7, #20]
    int32_t h = lv_area_get_height(&layer->buf_area);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff36 	bl	80057c2 <lv_area_get_height>
 8005956:	6138      	str	r0, [r7, #16]
    uint32_t layer_size_byte = h * lv_draw_buf_width_to_stride(w, layer->color_format);
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7d1b      	ldrb	r3, [r3, #20]
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f000 f949 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 8005966:	4602      	mov	r2, r0
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	60fb      	str	r3, [r7, #12]

    layer->draw_buf = lv_draw_buf_create(w, h, layer->color_format, 0);
 8005970:	6978      	ldr	r0, [r7, #20]
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7d1a      	ldrb	r2, [r3, #20]
 8005978:	2300      	movs	r3, #0
 800597a:	f000 fa5f 	bl	8005e3c <lv_draw_buf_create>
 800597e:	4602      	mov	r2, r0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	601a      	str	r2, [r3, #0]

    if(layer->draw_buf == NULL) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <lv_draw_layer_alloc_buf+0x68>
        LV_LOG_WARN("Allocating layer buffer failed. Try later");
        return NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	e01b      	b.n	80059c8 <lv_draw_layer_alloc_buf+0xa0>
    }

    _draw_info.used_memory_for_layers_kb += get_layer_size_kb(layer_size_byte);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff26 	bl	80057e2 <get_layer_size_kb>
 8005996:	4602      	mov	r2, r0
 8005998:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <lv_draw_layer_alloc_buf+0xa8>)
 800599a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800599e:	4413      	add	r3, r2
 80059a0:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <lv_draw_layer_alloc_buf+0xa8>)
 80059a2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    LV_LOG_INFO("Layer memory used: %" LV_PRIu32 " kB\n", _draw_info.used_memory_for_layers_kb);

    if(lv_color_format_has_alpha(layer->color_format)) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7d1b      	ldrb	r3, [r3, #20]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f015 fcc0 	bl	801b330 <lv_color_format_has_alpha>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <lv_draw_layer_alloc_buf+0x9a>
        lv_draw_buf_clear(layer->draw_buf, NULL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 f953 	bl	8005c68 <lv_draw_buf_clear>
    }

    return layer->draw_buf->data;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	2000008c 	.word	0x2000008c

080059d4 <lv_draw_layer_go_to_xy>:

void * lv_draw_layer_go_to_xy(lv_layer_t * layer, int32_t x, int32_t y)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
    return lv_draw_buf_goto_xy(layer->draw_buf, x, y);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fb18 	bl	800601e <lv_draw_buf_goto_xy>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <is_independent>:
 * @param layer      the draw ctx to search in
 * @param t_check       check this task if it overlaps with the older ones
 * @return              true: `t_check` is not overlapping with older tasks so it's independent
 */
static bool is_independent(lv_layer_t * layer, lv_draw_task_t * t_check)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
    LV_PROFILER_BEGIN;
    lv_draw_task_t * t = layer->draw_task_head;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a06:	61fb      	str	r3, [r7, #28]

    /*If t_check is outside of the older tasks then it's independent*/
    while(t && t != t_check) {
 8005a08:	e016      	b.n	8005a38 <is_independent+0x40>
        if(t->state != LV_DRAW_TASK_STATE_READY) {
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d00f      	beq.n	8005a32 <is_independent+0x3a>
            lv_area_t a;
            if(_lv_area_intersect(&a, &t->_real_area, &t_check->_real_area)) {
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f103 0118 	add.w	r1, r3, #24
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f103 0218 	add.w	r2, r3, #24
 8005a1e:	f107 030c 	add.w	r3, r7, #12
 8005a22:	4618      	mov	r0, r3
 8005a24:	f014 fe7e 	bl	801a724 <_lv_area_intersect>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <is_independent+0x3a>
                LV_PROFILER_END;
                return false;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e00a      	b.n	8005a48 <is_independent+0x50>
            }
        }
        t = t->next;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	61fb      	str	r3, [r7, #28]
    while(t && t != t_check) {
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <is_independent+0x4e>
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d1e1      	bne.n	8005a0a <is_independent+0x12>
    }
    LV_PROFILER_END;

    return true;
 8005a46:	2301      	movs	r3, #1
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	3301      	adds	r3, #1
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	3301      	adds	r3, #1
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <lv_color_format_get_size>:
 * Get the pixel size of a color format in bytes
 * @param src_cf    a color format (`LV_COLOR_FORMAT_...`)
 * @return          the pixel size in bytes
 */
static inline uint8_t lv_color_format_get_size(lv_color_format_t cf)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
    return (lv_color_format_get_bpp(cf) + 7) >> 3;
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f015 fc07 	bl	801b2b0 <lv_color_format_get_bpp>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	3307      	adds	r3, #7
 8005aa6:	10db      	asrs	r3, r3, #3
 8005aa8:	b2db      	uxtb	r3, r3
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <lv_color_premultiply>:
{
    return lv_color_make(0x00, 0x00, 0x00);
}

static inline void lv_color_premultiply(lv_color32_t * c)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
    c->red = LV_OPA_MIX2(c->red, c->alpha);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	789b      	ldrb	r3, [r3, #2]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	fb02 f303 	mul.w	r3, r2, r3
 8005ac8:	121b      	asrs	r3, r3, #8
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	709a      	strb	r2, [r3, #2]
    c->green = LV_OPA_MIX2(c->green, c->alpha);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	78db      	ldrb	r3, [r3, #3]
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	121b      	asrs	r3, r3, #8
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	705a      	strb	r2, [r3, #1]
    c->blue = LV_OPA_MIX2(c->blue, c->alpha);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	121b      	asrs	r3, r3, #8
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	701a      	strb	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <lv_color16_premultiply>:

static inline void lv_color16_premultiply(lv_color16_t * c, lv_opa_t a)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
    c->red = LV_OPA_MIX2(c->red, a);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	121b      	asrs	r3, r3, #8
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	b2d9      	uxtb	r1, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	7853      	ldrb	r3, [r2, #1]
 8005b32:	f361 03c7 	bfi	r3, r1, #3, #5
 8005b36:	7053      	strb	r3, [r2, #1]
    c->green = LV_OPA_MIX2(c->green, a);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	121b      	asrs	r3, r3, #8
 8005b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b50:	b2d9      	uxtb	r1, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	8813      	ldrh	r3, [r2, #0]
 8005b56:	f361 134a 	bfi	r3, r1, #5, #6
 8005b5a:	8013      	strh	r3, [r2, #0]
    c->blue = LV_OPA_MIX2(c->blue, a);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	fb02 f303 	mul.w	r3, r2, r3
 8005b6e:	121b      	asrs	r3, r3, #8
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	b2d9      	uxtb	r1, r3
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	7813      	ldrb	r3, [r2, #0]
 8005b7a:	f361 0304 	bfi	r3, r1, #0, #5
 8005b7e:	7013      	strb	r3, [r2, #0]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	2100      	movs	r1, #0
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f017 fadf 	bl	801d15e <lv_memset>
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <_lv_draw_buf_init_handlers>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_draw_buf_init_handlers(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
    lv_memzero(&handlers, sizeof(lv_draw_buf_handlers_t));
 8005bac:	2114      	movs	r1, #20
 8005bae:	480c      	ldr	r0, [pc, #48]	@ (8005be0 <_lv_draw_buf_init_handlers+0x38>)
 8005bb0:	f7ff ffec 	bl	8005b8c <lv_memzero>
    handlers.buf_malloc_cb = buf_malloc;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <_lv_draw_buf_init_handlers+0x3c>)
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <_lv_draw_buf_init_handlers+0x40>)
 8005bb8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    handlers.buf_free_cb = buf_free;
 8005bbc:	4b09      	ldr	r3, [pc, #36]	@ (8005be4 <_lv_draw_buf_init_handlers+0x3c>)
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8005bec <_lv_draw_buf_init_handlers+0x44>)
 8005bc0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
    handlers.align_pointer_cb = buf_align;
 8005bc4:	4b07      	ldr	r3, [pc, #28]	@ (8005be4 <_lv_draw_buf_init_handlers+0x3c>)
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf0 <_lv_draw_buf_init_handlers+0x48>)
 8005bc8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    handlers.invalidate_cache_cb = NULL;
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <_lv_draw_buf_init_handlers+0x3c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    handlers.width_to_stride_cb = width_to_stride;
 8005bd4:	4b03      	ldr	r3, [pc, #12]	@ (8005be4 <_lv_draw_buf_init_handlers+0x3c>)
 8005bd6:	4a07      	ldr	r2, [pc, #28]	@ (8005bf4 <_lv_draw_buf_init_handlers+0x4c>)
 8005bd8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000160 	.word	0x20000160
 8005be4:	2000008c 	.word	0x2000008c
 8005be8:	08006451 	.word	0x08006451
 8005bec:	08006473 	.word	0x08006473
 8005bf0:	08006489 	.word	0x08006489
 8005bf4:	080064bb 	.word	0x080064bb

08005bf8 <lv_draw_buf_width_to_stride>:
{
    return &handlers;
}

uint32_t lv_draw_buf_width_to_stride(uint32_t w, lv_color_format_t color_format)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
    if(handlers.width_to_stride_cb) return handlers.width_to_stride_cb(w, color_format);
 8005c04:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <lv_draw_buf_width_to_stride+0x34>)
 8005c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <lv_draw_buf_width_to_stride+0x28>
 8005c0e:	4b07      	ldr	r3, [pc, #28]	@ (8005c2c <lv_draw_buf_width_to_stride+0x34>)
 8005c10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	4611      	mov	r1, r2
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	e000      	b.n	8005c22 <lv_draw_buf_width_to_stride+0x2a>
    else return 0;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	2000008c 	.word	0x2000008c

08005c30 <lv_draw_buf_align>:

void * lv_draw_buf_align(void * data, lv_color_format_t color_format)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
    if(handlers.align_pointer_cb) return handlers.align_pointer_cb(data, color_format);
 8005c3c:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <lv_draw_buf_align+0x34>)
 8005c3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <lv_draw_buf_align+0x28>
 8005c46:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <lv_draw_buf_align+0x34>)
 8005c48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
 8005c54:	4603      	mov	r3, r0
 8005c56:	e000      	b.n	8005c5a <lv_draw_buf_align+0x2a>
    else return NULL;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000008c 	.word	0x2000008c

08005c68 <lv_draw_buf_clear>:
        handlers.invalidate_cache_cb(draw_buf, area);
    }
}

void lv_draw_buf_clear(lv_draw_buf_t * draw_buf, const lv_area_t * a)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	@ 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(draw_buf);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <lv_draw_buf_clear+0x14>
 8005c78:	bf00      	nop
 8005c7a:	e7fd      	b.n	8005c78 <lv_draw_buf_clear+0x10>
    if(a && lv_area_get_width(a) < 0) return;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <lv_draw_buf_clear+0x26>
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f7ff fee4 	bl	8005a50 <lv_area_get_width>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db4d      	blt.n	8005d2a <lv_draw_buf_clear+0xc2>
    if(a && lv_area_get_height(a) < 0) return;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <lv_draw_buf_clear+0x38>
 8005c94:	6838      	ldr	r0, [r7, #0]
 8005c96:	f7ff feeb 	bl	8005a70 <lv_area_get_height>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	db46      	blt.n	8005d2e <lv_draw_buf_clear+0xc6>

    const lv_image_header_t * header = &draw_buf->header;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	61fb      	str	r3, [r7, #28]
    uint32_t stride = header->stride;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	891b      	ldrh	r3, [r3, #8]
 8005ca8:	61bb      	str	r3, [r7, #24]

    if(a == NULL) {
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10c      	bne.n	8005cca <lv_draw_buf_clear+0x62>
        lv_memzero(draw_buf->data, header->h * stride);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	88db      	ldrh	r3, [r3, #6]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f7ff ff62 	bl	8005b8c <lv_memzero>
 8005cc8:	e032      	b.n	8005d30 <lv_draw_buf_clear+0xc8>
    }
    else {
        uint8_t * bufc;
        uint32_t line_length;
        int32_t start_y, end_y;
        uint8_t px_size = lv_color_format_get_size(header->cf);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fede 	bl	8005a90 <lv_color_format_get_size>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]
        bufc = lv_draw_buf_goto_xy(draw_buf, a->x1, a->y1);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f99a 	bl	800601e <lv_draw_buf_goto_xy>
 8005cea:	6278      	str	r0, [r7, #36]	@ 0x24
        line_length = lv_area_get_width(a) * px_size;
 8005cec:	6838      	ldr	r0, [r7, #0]
 8005cee:	f7ff feaf 	bl	8005a50 <lv_area_get_width>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	613b      	str	r3, [r7, #16]
        start_y = a->y1;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	623b      	str	r3, [r7, #32]
        end_y = a->y2;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	60fb      	str	r3, [r7, #12]
        for(; start_y <= end_y; start_y++) {
 8005d08:	e00a      	b.n	8005d20 <lv_draw_buf_clear+0xb8>
            lv_memzero(bufc, line_length);
 8005d0a:	6939      	ldr	r1, [r7, #16]
 8005d0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d0e:	f7ff ff3d 	bl	8005b8c <lv_memzero>
            bufc += stride;
 8005d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
        for(; start_y <= end_y; start_y++) {
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	ddf0      	ble.n	8005d0a <lv_draw_buf_clear+0xa2>
 8005d28:	e002      	b.n	8005d30 <lv_draw_buf_clear+0xc8>
    if(a && lv_area_get_width(a) < 0) return;
 8005d2a:	bf00      	nop
 8005d2c:	e000      	b.n	8005d30 <lv_draw_buf_clear+0xc8>
    if(a && lv_area_get_height(a) < 0) return;
 8005d2e:	bf00      	nop
        }
    }
}
 8005d30:	3728      	adds	r7, #40	@ 0x28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <lv_draw_buf_copy>:

void lv_draw_buf_copy(lv_draw_buf_t * dest, const lv_area_t * dest_area,
                      const lv_draw_buf_t * src, const lv_area_t * src_area)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b08c      	sub	sp, #48	@ 0x30
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	603b      	str	r3, [r7, #0]
    uint8_t * dest_bufc;
    uint8_t * src_bufc;
    int32_t line_width;

    if(dest_area == NULL) line_width = dest->header.w;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <lv_draw_buf_copy+0x1c>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	889b      	ldrh	r3, [r3, #4]
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d50:	e003      	b.n	8005d5a <lv_draw_buf_copy+0x24>
    else line_width = lv_area_get_width(dest_area);
 8005d52:	68b8      	ldr	r0, [r7, #8]
 8005d54:	f7ff fe7c 	bl	8005a50 <lv_area_get_width>
 8005d58:	6278      	str	r0, [r7, #36]	@ 0x24

    /*Check source and dest area have same width*/
    if((src_area == NULL && line_width != src->header.w) || \
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <lv_draw_buf_copy+0x36>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	889b      	ldrh	r3, [r3, #4]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d109      	bne.n	8005d80 <lv_draw_buf_copy+0x4a>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d008      	beq.n	8005d84 <lv_draw_buf_copy+0x4e>
       (src_area != NULL && line_width != lv_area_get_width(src_area))) {
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f7ff fe6c 	bl	8005a50 <lv_area_get_width>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d001      	beq.n	8005d84 <lv_draw_buf_copy+0x4e>
        LV_ASSERT_MSG(0, "Source and destination areas have different width");
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <lv_draw_buf_copy+0x4a>
        return;
    }

    if(src_area) src_bufc = lv_draw_buf_goto_xy(src, src_area->x1, src_area->y1);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <lv_draw_buf_copy+0x6a>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	461a      	mov	r2, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f941 	bl	800601e <lv_draw_buf_goto_xy>
 8005d9c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005d9e:	e002      	b.n	8005da6 <lv_draw_buf_copy+0x70>
    else src_bufc = src->data;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if(dest_area) dest_bufc = lv_draw_buf_goto_xy(dest, dest_area->x1, dest_area->y1);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <lv_draw_buf_copy+0x8c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f930 	bl	800601e <lv_draw_buf_goto_xy>
 8005dbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005dc0:	e002      	b.n	8005dc8 <lv_draw_buf_copy+0x92>
    else dest_bufc = dest->data;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int32_t start_y, end_y;
    if(dest_area) {
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d006      	beq.n	8005ddc <lv_draw_buf_copy+0xa6>
        start_y = dest_area->y1;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	623b      	str	r3, [r7, #32]
        end_y = dest_area->y2;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	e005      	b.n	8005de8 <lv_draw_buf_copy+0xb2>
    }
    else {
        start_y = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	623b      	str	r3, [r7, #32]
        end_y = dest->header.h - 1;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	88db      	ldrh	r3, [r3, #6]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
    }

    uint32_t dest_stride = dest->header.stride;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	891b      	ldrh	r3, [r3, #8]
 8005dec:	61bb      	str	r3, [r7, #24]
    uint32_t src_stride = src->header.stride;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	891b      	ldrh	r3, [r3, #8]
 8005df2:	617b      	str	r3, [r7, #20]
    line_width *= lv_color_format_get_size(dest->header.cf); /*Pixel to bytes*/
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fe49 	bl	8005a90 <lv_color_format_get_size>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	461a      	mov	r2, r3
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	fb02 f303 	mul.w	r3, r2, r3
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24

    for(; start_y <= end_y; start_y++) {
 8005e0a:	e010      	b.n	8005e2e <lv_draw_buf_copy+0xf8>
        lv_memcpy(dest_bufc, src_bufc, line_width);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	461a      	mov	r2, r3
 8005e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005e14:	f016 ff86 	bl	801cd24 <lv_memcpy>
        dest_bufc += dest_stride;
 8005e18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        src_bufc += src_stride;
 8005e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; start_y <= end_y; start_y++) {
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	ddea      	ble.n	8005e0c <lv_draw_buf_copy+0xd6>
    }
}
 8005e36:	3730      	adds	r7, #48	@ 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <lv_draw_buf_create>:
    }
    return LV_RESULT_OK;
}

lv_draw_buf_t * lv_draw_buf_create(uint32_t w, uint32_t h, lv_color_format_t cf, uint32_t stride)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
    lv_draw_buf_t * draw_buf = lv_malloc_zeroed(sizeof(lv_draw_buf_t));
 8005e4c:	2018      	movs	r0, #24
 8005e4e:	f018 f93d 	bl	801e0cc <lv_malloc_zeroed>
 8005e52:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(draw_buf);
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <lv_draw_buf_create+0x22>
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <lv_draw_buf_create+0x1e>
    if(draw_buf == NULL) return NULL;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <lv_draw_buf_create+0x2c>
 8005e64:	2300      	movs	r3, #0
 8005e66:	e041      	b.n	8005eec <lv_draw_buf_create+0xb0>
    if(stride == 0) stride = lv_draw_buf_width_to_stride(w, cf);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <lv_draw_buf_create+0x3e>
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	4619      	mov	r1, r3
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fec0 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 8005e78:	6038      	str	r0, [r7, #0]

    uint32_t size = _calculate_draw_buf_size(w, h, cf, stride);
 8005e7a:	79fa      	ldrb	r2, [r7, #7]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fb63 	bl	800654c <_calculate_draw_buf_size>
 8005e86:	61b8      	str	r0, [r7, #24]

    void * buf = draw_buf_malloc(size, cf);
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	69b8      	ldr	r0, [r7, #24]
 8005e8e:	f000 fb2d 	bl	80064ec <draw_buf_malloc>
 8005e92:	6178      	str	r0, [r7, #20]
    /*Do not assert here as LVGL or the app might just want to try creating a draw_buf*/
    if(buf == NULL) {
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <lv_draw_buf_create+0x68>
        LV_LOG_WARN("No memory: %"LV_PRIu32"x%"LV_PRIu32", cf: %d, stride: %"LV_PRIu32", %"LV_PRIu32"Byte, ",
                    w, h, cf, stride, size);
        lv_free(draw_buf);
 8005e9a:	69f8      	ldr	r0, [r7, #28]
 8005e9c:	f018 f934 	bl	801e108 <lv_free>
        return NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e023      	b.n	8005eec <lv_draw_buf_create+0xb0>
    }

    draw_buf->header.w = w;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	809a      	strh	r2, [r3, #4]
    draw_buf->header.h = h;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	80da      	strh	r2, [r3, #6]
    draw_buf->header.cf = cf;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	79fa      	ldrb	r2, [r7, #7]
 8005eb8:	705a      	strb	r2, [r3, #1]
    draw_buf->header.flags = LV_IMAGE_FLAGS_MODIFIABLE | LV_IMAGE_FLAGS_ALLOCATED;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	2230      	movs	r2, #48	@ 0x30
 8005ebe:	805a      	strh	r2, [r3, #2]
    draw_buf->header.stride = stride;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	811a      	strh	r2, [r3, #8]
    draw_buf->header.magic = LV_IMAGE_HEADER_MAGIC;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2219      	movs	r2, #25
 8005ecc:	701a      	strb	r2, [r3, #0]
    draw_buf->data = lv_draw_buf_align(buf, cf);
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6978      	ldr	r0, [r7, #20]
 8005ed4:	f7ff feac 	bl	8005c30 <lv_draw_buf_align>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	611a      	str	r2, [r3, #16]
    draw_buf->unaligned_data = buf;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	615a      	str	r2, [r3, #20]
    draw_buf->data_size = size;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	60da      	str	r2, [r3, #12]
    return draw_buf;
 8005eea:	69fb      	ldr	r3, [r7, #28]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <lv_draw_buf_dup>:

lv_draw_buf_t * lv_draw_buf_dup(const lv_draw_buf_t * draw_buf)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
    const lv_image_header_t * header = &draw_buf->header;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	617b      	str	r3, [r7, #20]
    lv_draw_buf_t * new_buf = lv_draw_buf_create(header->w, header->h, header->cf, header->stride);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	889b      	ldrh	r3, [r3, #4]
 8005f04:	4618      	mov	r0, r3
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	88db      	ldrh	r3, [r3, #6]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	785a      	ldrb	r2, [r3, #1]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	891b      	ldrh	r3, [r3, #8]
 8005f14:	f7ff ff92 	bl	8005e3c <lv_draw_buf_create>
 8005f18:	6138      	str	r0, [r7, #16]
    if(new_buf == NULL) return NULL;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <lv_draw_buf_dup+0x30>
 8005f20:	2300      	movs	r3, #0
 8005f22:	e01b      	b.n	8005f5c <lv_draw_buf_dup+0x68>

    new_buf->header.flags = draw_buf->header.flags;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	885a      	ldrh	r2, [r3, #2]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	805a      	strh	r2, [r3, #2]
    new_buf->header.flags |= LV_IMAGE_FLAGS_MODIFIABLE | LV_IMAGE_FLAGS_ALLOCATED;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	885b      	ldrh	r3, [r3, #2]
 8005f30:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	805a      	strh	r2, [r3, #2]

    /*Choose the smaller size to copy*/
    uint32_t size = LV_MIN(draw_buf->data_size, new_buf->data_size);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	4293      	cmp	r3, r2
 8005f44:	bf28      	it	cs
 8005f46:	4613      	movcs	r3, r2
 8005f48:	60fb      	str	r3, [r7, #12]

    /*Copy image data*/
    lv_memcpy(new_buf->data, draw_buf->data, size);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6918      	ldr	r0, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4619      	mov	r1, r3
 8005f56:	f016 fee5 	bl	801cd24 <lv_memcpy>
    return new_buf;
 8005f5a:	693b      	ldr	r3, [r7, #16]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <lv_draw_buf_reshape>:

lv_draw_buf_t * lv_draw_buf_reshape(lv_draw_buf_t * draw_buf, lv_color_format_t cf, uint32_t w, uint32_t h,
                                    uint32_t stride)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	460b      	mov	r3, r1
 8005f72:	72fb      	strb	r3, [r7, #11]
    if(draw_buf == NULL) return NULL;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <lv_draw_buf_reshape+0x1a>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e02c      	b.n	8005fd8 <lv_draw_buf_reshape+0x74>

    /*If color format is unknown, keep using the original color format.*/
    if(cf == LV_COLOR_FORMAT_UNKNOWN) cf = draw_buf->header.cf;
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <lv_draw_buf_reshape+0x26>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	72fb      	strb	r3, [r7, #11]
    if(stride == 0) stride = lv_draw_buf_width_to_stride(w, cf);
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d105      	bne.n	8005f9c <lv_draw_buf_reshape+0x38>
 8005f90:	7afb      	ldrb	r3, [r7, #11]
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff fe2f 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 8005f9a:	6238      	str	r0, [r7, #32]

    uint32_t size = _calculate_draw_buf_size(w, h, cf, stride);
 8005f9c:	7afa      	ldrb	r2, [r7, #11]
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fad2 	bl	800654c <_calculate_draw_buf_size>
 8005fa8:	6178      	str	r0, [r7, #20]

    if(size > draw_buf->data_size) {
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d901      	bls.n	8005fb8 <lv_draw_buf_reshape+0x54>
        LV_LOG_TRACE("Draw buf too small for new shape");
        return NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e00f      	b.n	8005fd8 <lv_draw_buf_reshape+0x74>
    }

    draw_buf->header.cf = cf;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	7afa      	ldrb	r2, [r7, #11]
 8005fbc:	705a      	strb	r2, [r3, #1]
    draw_buf->header.w = w;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	809a      	strh	r2, [r3, #4]
    draw_buf->header.h = h;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	80da      	strh	r2, [r3, #6]
    draw_buf->header.stride = stride;
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	811a      	strh	r2, [r3, #8]

    return draw_buf;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <lv_draw_buf_destroy>:

void lv_draw_buf_destroy(lv_draw_buf_t * buf)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(buf);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <lv_draw_buf_destroy+0x12>
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <lv_draw_buf_destroy+0xe>
    if(buf == NULL) return;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00e      	beq.n	8006016 <lv_draw_buf_destroy+0x36>

    if(buf->header.flags & LV_IMAGE_FLAGS_ALLOCATED) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	885b      	ldrh	r3, [r3, #2]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	d009      	beq.n	8006018 <lv_draw_buf_destroy+0x38>
        draw_buf_free(buf->unaligned_data);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fa8b 	bl	8006524 <draw_buf_free>
        lv_free(buf);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f018 f87a 	bl	801e108 <lv_free>
 8006014:	e000      	b.n	8006018 <lv_draw_buf_destroy+0x38>
    if(buf == NULL) return;
 8006016:	bf00      	nop
    }
    else {
        LV_LOG_ERROR("draw buffer is not allocated, ignored");
    }
}
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <lv_draw_buf_goto_xy>:

void * lv_draw_buf_goto_xy(const lv_draw_buf_t * buf, uint32_t x, uint32_t y)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(buf);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <lv_draw_buf_goto_xy+0x16>
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <lv_draw_buf_goto_xy+0x12>
    if(buf == NULL) return NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <lv_draw_buf_goto_xy+0x20>
 800603a:	2300      	movs	r3, #0
 800603c:	e01a      	b.n	8006074 <lv_draw_buf_goto_xy+0x56>

    uint8_t * data = buf->data + buf->header.stride * y;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	891b      	ldrh	r3, [r3, #8]
 8006046:	4619      	mov	r1, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	4413      	add	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

    if(x == 0)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <lv_draw_buf_goto_xy+0x3e>
        return data;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	e00b      	b.n	8006074 <lv_draw_buf_goto_xy+0x56>

    return data + x * lv_color_format_get_size(buf->header.cf);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fd15 	bl	8005a90 <lv_color_format_get_size>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4413      	add	r3, r2
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <lv_draw_buf_adjust_stride>:

lv_result_t lv_draw_buf_adjust_stride(lv_draw_buf_t * src, uint32_t stride)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b090      	sub	sp, #64	@ 0x40
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(src);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <lv_draw_buf_adjust_stride+0x14>
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <lv_draw_buf_adjust_stride+0x10>
    LV_ASSERT_NULL(src->data);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <lv_draw_buf_adjust_stride+0x20>
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <lv_draw_buf_adjust_stride+0x1c>
    if(src == NULL) return LV_RESULT_INVALID;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <lv_draw_buf_adjust_stride+0x2a>
 80060a2:	2300      	movs	r3, #0
 80060a4:	e0be      	b.n	8006224 <lv_draw_buf_adjust_stride+0x1a8>
    if(src->data == NULL) return LV_RESULT_INVALID;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <lv_draw_buf_adjust_stride+0x36>
 80060ae:	2300      	movs	r3, #0
 80060b0:	e0b8      	b.n	8006224 <lv_draw_buf_adjust_stride+0x1a8>

    const lv_image_header_t * header = &src->header;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t w = header->w;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	889b      	ldrh	r3, [r3, #4]
 80060ba:	623b      	str	r3, [r7, #32]
    uint32_t h = header->h;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	88db      	ldrh	r3, [r3, #6]
 80060c0:	61fb      	str	r3, [r7, #28]

    /*Use global stride*/
    if(stride == 0) stride = lv_draw_buf_width_to_stride(w, header->cf);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <lv_draw_buf_adjust_stride+0x5a>
 80060c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	4619      	mov	r1, r3
 80060ce:	6a38      	ldr	r0, [r7, #32]
 80060d0:	f7ff fd92 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 80060d4:	6038      	str	r0, [r7, #0]

    /*Check if stride already match*/
    if(header->stride == stride) return LV_RESULT_OK;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	891b      	ldrh	r3, [r3, #8]
 80060da:	461a      	mov	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <lv_draw_buf_adjust_stride+0x6a>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e09e      	b.n	8006224 <lv_draw_buf_adjust_stride+0x1a8>

    /*Calculate the minimal stride allowed from bpp*/
    uint32_t bpp = lv_color_format_get_bpp(header->cf);
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f015 f8e0 	bl	801b2b0 <lv_color_format_get_bpp>
 80060f0:	4603      	mov	r3, r0
 80060f2:	61bb      	str	r3, [r7, #24]
    uint32_t min_stride = (w * bpp + 7) >> 3;
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
 80060fc:	3307      	adds	r3, #7
 80060fe:	08db      	lsrs	r3, r3, #3
 8006100:	617b      	str	r3, [r7, #20]
    if(stride < min_stride) {
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	429a      	cmp	r2, r3
 8006108:	d201      	bcs.n	800610e <lv_draw_buf_adjust_stride+0x92>
        LV_LOG_WARN("New stride is too small. min: %" LV_PRId32, min_stride);
        return LV_RESULT_INVALID;
 800610a:	2300      	movs	r3, #0
 800610c:	e08a      	b.n	8006224 <lv_draw_buf_adjust_stride+0x1a8>
    }

    /*Check if buffer has enough space. */
    uint32_t new_size = _calculate_draw_buf_size(w, h, header->cf, stride);
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	785a      	ldrb	r2, [r3, #1]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	6a38      	ldr	r0, [r7, #32]
 8006118:	f000 fa18 	bl	800654c <_calculate_draw_buf_size>
 800611c:	6138      	str	r0, [r7, #16]
    if(new_size > src->data_size) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	429a      	cmp	r2, r3
 8006126:	d901      	bls.n	800612c <lv_draw_buf_adjust_stride+0xb0>
        return LV_RESULT_INVALID;
 8006128:	2300      	movs	r3, #0
 800612a:	e07b      	b.n	8006224 <lv_draw_buf_adjust_stride+0x1a8>
    }

    uint32_t offset = LV_COLOR_INDEXED_PALETTE_SIZE(header->cf) * 4;
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b07      	cmp	r3, #7
 8006132:	d014      	beq.n	800615e <lv_draw_buf_adjust_stride+0xe2>
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d00e      	beq.n	800615a <lv_draw_buf_adjust_stride+0xde>
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b09      	cmp	r3, #9
 8006142:	d008      	beq.n	8006156 <lv_draw_buf_adjust_stride+0xda>
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b0a      	cmp	r3, #10
 800614a:	d102      	bne.n	8006152 <lv_draw_buf_adjust_stride+0xd6>
 800614c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006150:	e006      	b.n	8006160 <lv_draw_buf_adjust_stride+0xe4>
 8006152:	2300      	movs	r3, #0
 8006154:	e004      	b.n	8006160 <lv_draw_buf_adjust_stride+0xe4>
 8006156:	2340      	movs	r3, #64	@ 0x40
 8006158:	e002      	b.n	8006160 <lv_draw_buf_adjust_stride+0xe4>
 800615a:	2310      	movs	r3, #16
 800615c:	e000      	b.n	8006160 <lv_draw_buf_adjust_stride+0xe4>
 800615e:	2308      	movs	r3, #8
 8006160:	60fb      	str	r3, [r7, #12]

    if(stride > header->stride) {
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	891b      	ldrh	r3, [r3, #8]
 8006166:	461a      	mov	r2, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	4293      	cmp	r3, r2
 800616c:	d932      	bls.n	80061d4 <lv_draw_buf_adjust_stride+0x158>
        /*Copy from the last line to the first*/
        uint8_t * src_data = src->data + offset + header->stride * (h - 1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	891b      	ldrh	r3, [r3, #8]
 8006176:	4619      	mov	r1, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3b01      	subs	r3, #1
 800617c:	fb03 f101 	mul.w	r1, r3, r1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	440b      	add	r3, r1
 8006184:	4413      	add	r3, r2
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t * dst_data = src->data + offset + stride * (h - 1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	3b01      	subs	r3, #1
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	fb03 f101 	mul.w	r1, r3, r1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	440b      	add	r3, r1
 800619a:	4413      	add	r3, r2
 800619c:	63bb      	str	r3, [r7, #56]	@ 0x38
        for(uint32_t y = 0; y < h; y++) {
 800619e:	2300      	movs	r3, #0
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a2:	e012      	b.n	80061ca <lv_draw_buf_adjust_stride+0x14e>
            lv_memmove(dst_data, src_data, min_stride);
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061aa:	f017 f859 	bl	801d260 <lv_memmove>
            src_data -= header->stride;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	891b      	ldrh	r3, [r3, #8]
 80061b2:	425b      	negs	r3, r3
 80061b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061b6:	4413      	add	r3, r2
 80061b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dst_data -= stride;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	425b      	negs	r3, r3
 80061be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061c0:	4413      	add	r3, r2
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        for(uint32_t y = 0; y < h; y++) {
 80061c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c6:	3301      	adds	r3, #1
 80061c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d3e8      	bcc.n	80061a4 <lv_draw_buf_adjust_stride+0x128>
 80061d2:	e022      	b.n	800621a <lv_draw_buf_adjust_stride+0x19e>
        }
    }
    else {
        /*Copy from the first line to the last*/
        uint8_t * src_data = src->data + offset;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t * dst_data = src->data + offset;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for(uint32_t y = 0; y < h; y++) {
 80061e8:	2300      	movs	r3, #0
 80061ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ec:	e011      	b.n	8006212 <lv_draw_buf_adjust_stride+0x196>
            lv_memmove(dst_data, src_data, min_stride);
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061f4:	f017 f834 	bl	801d260 <lv_memmove>
            src_data += header->stride;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	891b      	ldrh	r3, [r3, #8]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	4413      	add	r3, r2
 8006202:	633b      	str	r3, [r7, #48]	@ 0x30
            dst_data += stride;
 8006204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	4413      	add	r3, r2
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for(uint32_t y = 0; y < h; y++) {
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	3301      	adds	r3, #1
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	429a      	cmp	r2, r3
 8006218:	d3e9      	bcc.n	80061ee <lv_draw_buf_adjust_stride+0x172>
        }
    }

    src->header.stride = stride;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	811a      	strh	r2, [r3, #8]

    return LV_RESULT_OK;
 8006222:	2301      	movs	r3, #1
}
 8006224:	4618      	mov	r0, r3
 8006226:	3740      	adds	r7, #64	@ 0x40
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <lv_draw_buf_premultiply>:

lv_result_t lv_draw_buf_premultiply(lv_draw_buf_t * draw_buf)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b09e      	sub	sp, #120	@ 0x78
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(draw_buf);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <lv_draw_buf_premultiply+0x12>
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <lv_draw_buf_premultiply+0xe>
    if(draw_buf == NULL) return LV_RESULT_INVALID;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <lv_draw_buf_premultiply+0x1c>
 8006244:	2300      	movs	r3, #0
 8006246:	e0ff      	b.n	8006448 <lv_draw_buf_premultiply+0x21c>

    if(draw_buf->header.flags & LV_IMAGE_FLAGS_PREMULTIPLIED) return LV_RESULT_INVALID;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	885b      	ldrh	r3, [r3, #2]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <lv_draw_buf_premultiply+0x2c>
 8006254:	2300      	movs	r3, #0
 8006256:	e0f7      	b.n	8006448 <lv_draw_buf_premultiply+0x21c>
    if((draw_buf->header.flags & LV_IMAGE_FLAGS_MODIFIABLE) == 0) {
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	885b      	ldrh	r3, [r3, #2]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <lv_draw_buf_premultiply+0x3c>
        LV_LOG_WARN("draw buf is not modifiable: 0x%04x", draw_buf->header.flags);
        return LV_RESULT_INVALID;
 8006264:	2300      	movs	r3, #0
 8006266:	e0ef      	b.n	8006448 <lv_draw_buf_premultiply+0x21c>
    }

    /*Premultiply color with alpha, do case by case by judging color format*/
    lv_color_format_t cf = draw_buf->header.cf;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 8006270:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006274:	2b06      	cmp	r3, #6
 8006276:	d933      	bls.n	80062e0 <lv_draw_buf_premultiply+0xb4>
 8006278:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800627c:	2b0a      	cmp	r3, #10
 800627e:	d82f      	bhi.n	80062e0 <lv_draw_buf_premultiply+0xb4>
        int size = LV_COLOR_INDEXED_PALETTE_SIZE(cf);
 8006280:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006284:	2b07      	cmp	r3, #7
 8006286:	d014      	beq.n	80062b2 <lv_draw_buf_premultiply+0x86>
 8006288:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800628c:	2b08      	cmp	r3, #8
 800628e:	d00e      	beq.n	80062ae <lv_draw_buf_premultiply+0x82>
 8006290:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006294:	2b09      	cmp	r3, #9
 8006296:	d008      	beq.n	80062aa <lv_draw_buf_premultiply+0x7e>
 8006298:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800629c:	2b0a      	cmp	r3, #10
 800629e:	d102      	bne.n	80062a6 <lv_draw_buf_premultiply+0x7a>
 80062a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062a4:	e006      	b.n	80062b4 <lv_draw_buf_premultiply+0x88>
 80062a6:	2300      	movs	r3, #0
 80062a8:	e004      	b.n	80062b4 <lv_draw_buf_premultiply+0x88>
 80062aa:	2310      	movs	r3, #16
 80062ac:	e002      	b.n	80062b4 <lv_draw_buf_premultiply+0x88>
 80062ae:	2304      	movs	r3, #4
 80062b0:	e000      	b.n	80062b4 <lv_draw_buf_premultiply+0x88>
 80062b2:	2302      	movs	r3, #2
 80062b4:	63bb      	str	r3, [r7, #56]	@ 0x38
        lv_color32_t * palette = (lv_color32_t *)draw_buf->data;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
        for(int i = 0; i < size; i++) {
 80062bc:	2300      	movs	r3, #0
 80062be:	677b      	str	r3, [r7, #116]	@ 0x74
 80062c0:	e009      	b.n	80062d6 <lv_draw_buf_premultiply+0xaa>
            lv_color_premultiply(&palette[i]);
 80062c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062c8:	4413      	add	r3, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fbf1 	bl	8005ab2 <lv_color_premultiply>
        for(int i = 0; i < size; i++) {
 80062d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062d2:	3301      	adds	r3, #1
 80062d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80062d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80062d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062da:	429a      	cmp	r2, r3
 80062dc:	dbf1      	blt.n	80062c2 <lv_draw_buf_premultiply+0x96>
    if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 80062de:	e0ab      	b.n	8006438 <lv_draw_buf_premultiply+0x20c>
        }
    }
    else if(cf == LV_COLOR_FORMAT_ARGB8888) {
 80062e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d12c      	bne.n	8006342 <lv_draw_buf_premultiply+0x116>
        uint32_t h = draw_buf->header.h;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	88db      	ldrh	r3, [r3, #6]
 80062ec:	613b      	str	r3, [r7, #16]
        uint32_t w = draw_buf->header.w;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	889b      	ldrh	r3, [r3, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
        uint32_t stride = draw_buf->header.stride;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	891b      	ldrh	r3, [r3, #8]
 80062f8:	60bb      	str	r3, [r7, #8]
        uint8_t * line = (uint8_t *)draw_buf->data;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	673b      	str	r3, [r7, #112]	@ 0x70
        for(uint32_t y = 0; y < h; y++) {
 8006300:	2300      	movs	r3, #0
 8006302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006304:	e018      	b.n	8006338 <lv_draw_buf_premultiply+0x10c>
            lv_color32_t * pixel = (lv_color32_t *)line;
 8006306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006308:	66bb      	str	r3, [r7, #104]	@ 0x68
            for(uint32_t x = 0; x < w; x++) {
 800630a:	2300      	movs	r3, #0
 800630c:	667b      	str	r3, [r7, #100]	@ 0x64
 800630e:	e008      	b.n	8006322 <lv_draw_buf_premultiply+0xf6>
                lv_color_premultiply(pixel);
 8006310:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8006312:	f7ff fbce 	bl	8005ab2 <lv_color_premultiply>
                pixel++;
 8006316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006318:	3304      	adds	r3, #4
 800631a:	66bb      	str	r3, [r7, #104]	@ 0x68
            for(uint32_t x = 0; x < w; x++) {
 800631c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800631e:	3301      	adds	r3, #1
 8006320:	667b      	str	r3, [r7, #100]	@ 0x64
 8006322:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	429a      	cmp	r2, r3
 8006328:	d3f2      	bcc.n	8006310 <lv_draw_buf_premultiply+0xe4>
            }
            line += stride;
 800632a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4413      	add	r3, r2
 8006330:	673b      	str	r3, [r7, #112]	@ 0x70
        for(uint32_t y = 0; y < h; y++) {
 8006332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006334:	3301      	adds	r3, #1
 8006336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006338:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	429a      	cmp	r2, r3
 800633e:	d3e2      	bcc.n	8006306 <lv_draw_buf_premultiply+0xda>
 8006340:	e07a      	b.n	8006438 <lv_draw_buf_premultiply+0x20c>
        }
    }
    else if(cf == LV_COLOR_FORMAT_RGB565A8) {
 8006342:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006346:	2b14      	cmp	r3, #20
 8006348:	d13f      	bne.n	80063ca <lv_draw_buf_premultiply+0x19e>
        uint32_t h = draw_buf->header.h;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	88db      	ldrh	r3, [r3, #6]
 800634e:	623b      	str	r3, [r7, #32]
        uint32_t w = draw_buf->header.w;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	889b      	ldrh	r3, [r3, #4]
 8006354:	61fb      	str	r3, [r7, #28]
        uint32_t stride = draw_buf->header.stride;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	891b      	ldrh	r3, [r3, #8]
 800635a:	61bb      	str	r3, [r7, #24]
        uint32_t alpha_stride = stride / 2;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	617b      	str	r3, [r7, #20]
        uint8_t * line = (uint8_t *)draw_buf->data;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	663b      	str	r3, [r7, #96]	@ 0x60
        lv_opa_t * alpha = (lv_opa_t *)(line + stride * h);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	6a3a      	ldr	r2, [r7, #32]
 800636c:	fb02 f303 	mul.w	r3, r2, r3
 8006370:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006372:	4413      	add	r3, r2
 8006374:	65fb      	str	r3, [r7, #92]	@ 0x5c
        for(uint32_t y = 0; y < h; y++) {
 8006376:	2300      	movs	r3, #0
 8006378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800637a:	e021      	b.n	80063c0 <lv_draw_buf_premultiply+0x194>
            lv_color16_t * pixel = (lv_color16_t *)line;
 800637c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800637e:	657b      	str	r3, [r7, #84]	@ 0x54
            for(uint32_t x = 0; x < w; x++) {
 8006380:	2300      	movs	r3, #0
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50
 8006384:	e00d      	b.n	80063a2 <lv_draw_buf_premultiply+0x176>
                lv_color16_premultiply(pixel, alpha[x]);
 8006386:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800638a:	4413      	add	r3, r2
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	4619      	mov	r1, r3
 8006390:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8006392:	f7ff fbb9 	bl	8005b08 <lv_color16_premultiply>
                pixel++;
 8006396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006398:	3302      	adds	r3, #2
 800639a:	657b      	str	r3, [r7, #84]	@ 0x54
            for(uint32_t x = 0; x < w; x++) {
 800639c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800639e:	3301      	adds	r3, #1
 80063a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d3ed      	bcc.n	8006386 <lv_draw_buf_premultiply+0x15a>
            }
            line += stride;
 80063aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	4413      	add	r3, r2
 80063b0:	663b      	str	r3, [r7, #96]	@ 0x60
            alpha += alpha_stride;
 80063b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	4413      	add	r3, r2
 80063b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        for(uint32_t y = 0; y < h; y++) {
 80063ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063bc:	3301      	adds	r3, #1
 80063be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d3d9      	bcc.n	800637c <lv_draw_buf_premultiply+0x150>
 80063c8:	e036      	b.n	8006438 <lv_draw_buf_premultiply+0x20c>
        }
    }
    else if(cf == LV_COLOR_FORMAT_ARGB8565) {
 80063ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80063ce:	2b13      	cmp	r3, #19
 80063d0:	d132      	bne.n	8006438 <lv_draw_buf_premultiply+0x20c>
        uint32_t h = draw_buf->header.h;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	88db      	ldrh	r3, [r3, #6]
 80063d6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t w = draw_buf->header.w;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	889b      	ldrh	r3, [r3, #4]
 80063dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t stride = draw_buf->header.stride;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	891b      	ldrh	r3, [r3, #8]
 80063e2:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint8_t * line = (uint8_t *)draw_buf->data;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(uint32_t y = 0; y < h; y++) {
 80063ea:	2300      	movs	r3, #0
 80063ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063ee:	e01f      	b.n	8006430 <lv_draw_buf_premultiply+0x204>
            uint8_t * pixel = line;
 80063f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f2:	647b      	str	r3, [r7, #68]	@ 0x44
            for(uint32_t x = 0; x < w; x++) {
 80063f4:	2300      	movs	r3, #0
 80063f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f8:	e00f      	b.n	800641a <lv_draw_buf_premultiply+0x1ee>
                uint8_t alpha = pixel[2];
 80063fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fc:	789b      	ldrb	r3, [r3, #2]
 80063fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                lv_color16_premultiply((lv_color16_t *)pixel, alpha);
 8006402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006406:	4619      	mov	r1, r3
 8006408:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800640a:	f7ff fb7d 	bl	8005b08 <lv_color16_premultiply>
                pixel += 3;
 800640e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006410:	3303      	adds	r3, #3
 8006412:	647b      	str	r3, [r7, #68]	@ 0x44
            for(uint32_t x = 0; x < w; x++) {
 8006414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006416:	3301      	adds	r3, #1
 8006418:	643b      	str	r3, [r7, #64]	@ 0x40
 800641a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641e:	429a      	cmp	r2, r3
 8006420:	d3eb      	bcc.n	80063fa <lv_draw_buf_premultiply+0x1ce>
            }
            line += stride;
 8006422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	4413      	add	r3, r2
 8006428:	64fb      	str	r3, [r7, #76]	@ 0x4c
        for(uint32_t y = 0; y < h; y++) {
 800642a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800642c:	3301      	adds	r3, #1
 800642e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	429a      	cmp	r2, r3
 8006436:	d3db      	bcc.n	80063f0 <lv_draw_buf_premultiply+0x1c4>
    }
    else {
        LV_LOG_WARN("draw buf has no alpha, cf: %d", cf);
    }

    draw_buf->header.flags |= LV_IMAGE_FLAGS_PREMULTIPLIED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	885b      	ldrh	r3, [r3, #2]
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	805a      	strh	r2, [r3, #2]

    return LV_RESULT_OK;
 8006446:	2301      	movs	r3, #1
}
 8006448:	4618      	mov	r0, r3
 800644a:	3778      	adds	r7, #120	@ 0x78
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <buf_malloc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void * buf_malloc(size_t size_bytes, lv_color_format_t color_format)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
    LV_UNUSED(color_format);

    /*Allocate larger memory to be sure it can be aligned as needed*/
    size_bytes += LV_DRAW_BUF_ALIGN - 1;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3303      	adds	r3, #3
 8006460:	607b      	str	r3, [r7, #4]
    return lv_malloc(size_bytes);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f017 fe18 	bl	801e098 <lv_malloc>
 8006468:	4603      	mov	r3, r0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <buf_free>:

static void buf_free(void * buf)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
    lv_free(buf);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f017 fe44 	bl	801e108 <lv_free>
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <buf_align>:

static void * buf_align(void * buf, lv_color_format_t color_format)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
    LV_UNUSED(color_format);

    uint8_t * buf_u8 = buf;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60fb      	str	r3, [r7, #12]
    if(buf_u8) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d006      	beq.n	80064ac <buf_align+0x24>
        buf_u8 += LV_DRAW_BUF_ALIGN - 1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3303      	adds	r3, #3
 80064a2:	60fb      	str	r3, [r7, #12]
        buf_u8 = (uint8_t *)((lv_uintptr_t) buf_u8 & ~(LV_DRAW_BUF_ALIGN - 1));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	60fb      	str	r3, [r7, #12]
    }
    return buf_u8;
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <width_to_stride>:

static uint32_t width_to_stride(uint32_t w, lv_color_format_t color_format)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
    uint32_t width_byte;
    width_byte = w * lv_color_format_get_bpp(color_format);
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f014 fef1 	bl	801b2b0 <lv_color_format_get_bpp>
 80064ce:	4603      	mov	r3, r0
 80064d0:	461a      	mov	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	60fb      	str	r3, [r7, #12]
    width_byte = (width_byte + 7) >> 3; /*Round up*/
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3307      	adds	r3, #7
 80064de:	08db      	lsrs	r3, r3, #3
 80064e0:	60fb      	str	r3, [r7, #12]
    return (width_byte + LV_DRAW_BUF_STRIDE_ALIGN - 1) & ~(LV_DRAW_BUF_STRIDE_ALIGN - 1);
 80064e2:	68fb      	ldr	r3, [r7, #12]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <draw_buf_malloc>:

static void * draw_buf_malloc(size_t size_bytes, lv_color_format_t color_format)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
    if(handlers.buf_malloc_cb) return handlers.buf_malloc_cb(size_bytes, color_format);
 80064f8:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <draw_buf_malloc+0x34>)
 80064fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <draw_buf_malloc+0x28>
 8006502:	4b07      	ldr	r3, [pc, #28]	@ (8006520 <draw_buf_malloc+0x34>)
 8006504:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	4611      	mov	r1, r2
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
 8006510:	4603      	mov	r3, r0
 8006512:	e000      	b.n	8006516 <draw_buf_malloc+0x2a>
    else return NULL;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	2000008c 	.word	0x2000008c

08006524 <draw_buf_free>:

static void draw_buf_free(void * buf)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
    if(handlers.buf_free_cb) handlers.buf_free_cb(buf);
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <draw_buf_free+0x24>)
 800652e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <draw_buf_free+0x1c>
 8006536:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <draw_buf_free+0x24>)
 8006538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000008c 	.word	0x2000008c

0800654c <_calculate_draw_buf_size>:

/**
 * For given width, height, color format, and stride, calculate the size needed for a new draw buffer.
 */
static uint32_t _calculate_draw_buf_size(uint32_t w, uint32_t h, lv_color_format_t cf, uint32_t stride)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
    uint32_t size;

    if(stride == 0) stride = lv_draw_buf_width_to_stride(w, cf);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <_calculate_draw_buf_size+0x22>
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	4619      	mov	r1, r3
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff fb46 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 800656c:	6038      	str	r0, [r7, #0]

    size = stride * h;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	617b      	str	r3, [r7, #20]
    if(cf == LV_COLOR_FORMAT_RGB565A8) {
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	2b14      	cmp	r3, #20
 800657c:	d108      	bne.n	8006590 <_calculate_draw_buf_size+0x44>
        size += (stride / 2) * h; /*A8 mask*/
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4413      	add	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	e01e      	b.n	80065ce <_calculate_draw_buf_size+0x82>
    }
    else if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	2b06      	cmp	r3, #6
 8006594:	d91b      	bls.n	80065ce <_calculate_draw_buf_size+0x82>
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	2b0a      	cmp	r3, #10
 800659a:	d818      	bhi.n	80065ce <_calculate_draw_buf_size+0x82>
        /*@todo we have to include palette right before image data*/
        size += LV_COLOR_INDEXED_PALETTE_SIZE(cf) * 4;
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	2b07      	cmp	r3, #7
 80065a0:	d011      	beq.n	80065c6 <_calculate_draw_buf_size+0x7a>
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d00c      	beq.n	80065c2 <_calculate_draw_buf_size+0x76>
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	2b09      	cmp	r3, #9
 80065ac:	d007      	beq.n	80065be <_calculate_draw_buf_size+0x72>
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	2b0a      	cmp	r3, #10
 80065b2:	d102      	bne.n	80065ba <_calculate_draw_buf_size+0x6e>
 80065b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065b8:	e006      	b.n	80065c8 <_calculate_draw_buf_size+0x7c>
 80065ba:	2300      	movs	r3, #0
 80065bc:	e004      	b.n	80065c8 <_calculate_draw_buf_size+0x7c>
 80065be:	2340      	movs	r3, #64	@ 0x40
 80065c0:	e002      	b.n	80065c8 <_calculate_draw_buf_size+0x7c>
 80065c2:	2310      	movs	r3, #16
 80065c4:	e000      	b.n	80065c8 <_calculate_draw_buf_size+0x7c>
 80065c6:	2308      	movs	r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
    }

    return size;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <lv_area_copy>:
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <lv_area_get_width>:
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	3301      	adds	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <lv_area_get_height>:
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	3301      	adds	r3, #1
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <lv_image_src_get_type>:
    lv_draw_finalize_task_creation(layer, t);
    LV_PROFILER_END;
}

lv_image_src_t lv_image_src_get_type(const void * src)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
    if(src == NULL) return LV_IMAGE_SRC_UNKNOWN;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <lv_image_src_get_type+0x12>
 800665c:	2303      	movs	r3, #3
 800665e:	e014      	b.n	800668a <lv_image_src_get_type+0x3c>
    const uint8_t * u8_p = src;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b1f      	cmp	r3, #31
 800666a:	d906      	bls.n	800667a <lv_image_src_get_type+0x2c>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b25b      	sxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	db01      	blt.n	800667a <lv_image_src_get_type+0x2c>
        return LV_IMAGE_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8006676:	2301      	movs	r3, #1
 8006678:	e007      	b.n	800668a <lv_image_src_get_type+0x3c>
    }
    else if(u8_p[0] >= 0x80) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b25b      	sxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	da01      	bge.n	8006688 <lv_image_src_get_type+0x3a>
        return LV_IMAGE_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8006684:	2302      	movs	r3, #2
 8006686:	e000      	b.n	800668a <lv_image_src_get_type+0x3c>
    }
    else {
        return LV_IMAGE_SRC_VARIABLE; /*`lv_image_dsc_t` is draw to the first byte < 0x20*/
 8006688:	2300      	movs	r3, #0
    }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <_lv_draw_image_normal_helper>:

void _lv_draw_image_normal_helper(lv_draw_unit_t * draw_unit, const lv_draw_image_dsc_t * draw_dsc,
                                  const lv_area_t * coords, lv_draw_image_core_cb draw_core_cb)
{
 8006696:	b590      	push	{r4, r7, lr}
 8006698:	b0a3      	sub	sp, #140	@ 0x8c
 800669a:	af04      	add	r7, sp, #16
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	603b      	str	r3, [r7, #0]
    if(draw_core_cb == NULL) {
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d075      	beq.n	8006796 <_lv_draw_image_normal_helper+0x100>
        LV_LOG_WARN("draw_core_cb is NULL");
        return;
    }

    lv_area_t draw_area;
    lv_area_copy(&draw_area, coords);
 80066aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff ff91 	bl	80065d8 <lv_area_copy>
    if(draw_dsc->rotation || draw_dsc->scale_x != LV_SCALE_NONE || draw_dsc->scale_y != LV_SCALE_NONE) {
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <_lv_draw_image_normal_helper+0x3c>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c6:	d104      	bne.n	80066d2 <_lv_draw_image_normal_helper+0x3c>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d0:	d02f      	beq.n	8006732 <_lv_draw_image_normal_helper+0x9c>
        int32_t w = lv_area_get_width(coords);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff ff9b 	bl	800660e <lv_area_get_width>
 80066d8:	6778      	str	r0, [r7, #116]	@ 0x74
        int32_t h = lv_area_get_height(coords);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff ffa7 	bl	800662e <lv_area_get_height>
 80066e0:	6738      	str	r0, [r7, #112]	@ 0x70

        _lv_image_buf_get_transformed_area(&draw_area, w, h, draw_dsc->rotation, draw_dsc->scale_x, draw_dsc->scale_y,
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80066f0:	b292      	uxth	r2, r2
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	3140      	adds	r1, #64	@ 0x40
 80066f6:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 80066fa:	9102      	str	r1, [sp, #8]
 80066fc:	9201      	str	r2, [sp, #4]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	4623      	mov	r3, r4
 8006702:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006704:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006706:	f000 f8e5 	bl	80068d4 <_lv_image_buf_get_transformed_area>
                                           &draw_dsc->pivot);

        draw_area.x1 += coords->x1;
 800670a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4413      	add	r3, r2
 8006712:	65fb      	str	r3, [r7, #92]	@ 0x5c
        draw_area.y1 += coords->y1;
 8006714:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4413      	add	r3, r2
 800671c:	663b      	str	r3, [r7, #96]	@ 0x60
        draw_area.x2 += coords->x1;
 800671e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4413      	add	r3, r2
 8006726:	667b      	str	r3, [r7, #100]	@ 0x64
        draw_area.y2 += coords->y1;
 8006728:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	4413      	add	r3, r2
 8006730:	66bb      	str	r3, [r7, #104]	@ 0x68
    }

    lv_area_t clipped_img_area;
    if(!_lv_area_intersect(&clipped_img_area, &draw_area, draw_unit->clip_area)) {
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800673a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800673e:	4618      	mov	r0, r3
 8006740:	f013 fff0 	bl	801a724 <_lv_area_intersect>
 8006744:	4603      	mov	r3, r0
 8006746:	f083 0301 	eor.w	r3, r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d124      	bne.n	800679a <_lv_draw_image_normal_helper+0x104>
        return;
    }

    lv_image_decoder_dsc_t decoder_dsc;
    lv_result_t res = lv_image_decoder_open(&decoder_dsc, draw_dsc->src, NULL);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	69d9      	ldr	r1, [r3, #28]
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	2200      	movs	r2, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f001 f8e4 	bl	8007928 <lv_image_decoder_open>
 8006760:	4603      	mov	r3, r0
 8006762:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if(res != LV_RESULT_OK) {
 8006766:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800676a:	2b01      	cmp	r3, #1
 800676c:	d117      	bne.n	800679e <_lv_draw_image_normal_helper+0x108>
        LV_LOG_ERROR("Failed to open image");
        return;
    }

    img_decode_and_draw(draw_unit, draw_dsc, &decoder_dsc, NULL, coords, &clipped_img_area, draw_core_cb);
 800676e:	f107 0210 	add.w	r2, r7, #16
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	9302      	str	r3, [sp, #8]
 8006776:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2300      	movs	r3, #0
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f94d 	bl	8006a24 <img_decode_and_draw>

    lv_image_decoder_close(&decoder_dsc);
 800678a:	f107 0310 	add.w	r3, r7, #16
 800678e:	4618      	mov	r0, r3
 8006790:	f001 f92a 	bl	80079e8 <lv_image_decoder_close>
 8006794:	e004      	b.n	80067a0 <_lv_draw_image_normal_helper+0x10a>
        return;
 8006796:	bf00      	nop
 8006798:	e002      	b.n	80067a0 <_lv_draw_image_normal_helper+0x10a>
        return;
 800679a:	bf00      	nop
 800679c:	e000      	b.n	80067a0 <_lv_draw_image_normal_helper+0x10a>
        return;
 800679e:	bf00      	nop
}
 80067a0:	377c      	adds	r7, #124	@ 0x7c
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd90      	pop	{r4, r7, pc}
	...

080067a8 <_lv_draw_image_tiled_helper>:

void _lv_draw_image_tiled_helper(lv_draw_unit_t * draw_unit, const lv_draw_image_dsc_t * draw_dsc,
                                 const lv_area_t * coords, lv_draw_image_core_cb draw_core_cb)
{
 80067a8:	b590      	push	{r4, r7, lr}
 80067aa:	b0a9      	sub	sp, #164	@ 0xa4
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
    if(draw_core_cb == NULL) {
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8082 	beq.w	80068c2 <_lv_draw_image_tiled_helper+0x11a>
        LV_LOG_WARN("draw_core_cb is NULL");
        return;
    }

    lv_image_decoder_dsc_t decoder_dsc;
    lv_result_t res = lv_image_decoder_open(&decoder_dsc, draw_dsc->src, NULL);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	69d9      	ldr	r1, [r3, #28]
 80067c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80067c6:	2200      	movs	r2, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 f8ad 	bl	8007928 <lv_image_decoder_open>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    if(res != LV_RESULT_OK) {
 80067d4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d174      	bne.n	80068c6 <_lv_draw_image_tiled_helper+0x11e>
        LV_LOG_ERROR("Failed to open image");
        return;
    }

    int32_t img_w = draw_dsc->header.w;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80067e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    int32_t img_h = draw_dsc->header.h;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    lv_area_t tile_area = *coords;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80067f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lv_area_set_width(&tile_area, img_w);
 80067f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8006800:	4618      	mov	r0, r3
 8006802:	f013 ff08 	bl	801a616 <lv_area_set_width>
    lv_area_set_height(&tile_area, img_h);
 8006806:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800680a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800680e:	4618      	mov	r0, r3
 8006810:	f013 ff13 	bl	801a63a <lv_area_set_height>

    int32_t tile_x_start = tile_area.x1;
 8006814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006816:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    lv_area_t relative_decoded_area = {
 800681a:	4b2d      	ldr	r3, [pc, #180]	@ (80068d0 <_lv_draw_image_tiled_helper+0x128>)
 800681c:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8006820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .y1 = LV_COORD_MIN,
        .x2 = LV_COORD_MIN,
        .y2 = LV_COORD_MIN,
    };

    while(tile_area.y1 <= draw_unit->clip_area->y2) {
 8006826:	e040      	b.n	80068aa <_lv_draw_image_tiled_helper+0x102>
        while(tile_area.x1 <= draw_unit->clip_area->x2) {

            lv_area_t clipped_img_area;
            if(_lv_area_intersect(&clipped_img_area, &tile_area, draw_unit->clip_area)) {
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8006830:	f107 0314 	add.w	r3, r7, #20
 8006834:	4618      	mov	r0, r3
 8006836:	f013 ff75 	bl	801a724 <_lv_area_intersect>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <_lv_draw_image_tiled_helper+0xba>
                img_decode_and_draw(draw_unit, draw_dsc, &decoder_dsc, &relative_decoded_area, &tile_area, &clipped_img_area,
 8006840:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8006844:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	9302      	str	r3, [sp, #8]
 800684c:	f107 0314 	add.w	r3, r7, #20
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	460b      	mov	r3, r1
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f8e1 	bl	8006a24 <img_decode_and_draw>
                                    draw_core_cb);
            }

            tile_area.x1 += img_w;
 8006862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006868:	4413      	add	r3, r2
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
            tile_area.x2 += img_w;
 800686c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800686e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006872:	4413      	add	r3, r2
 8006874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while(tile_area.x1 <= draw_unit->clip_area->x2) {
 8006876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	ddd2      	ble.n	8006828 <_lv_draw_image_tiled_helper+0x80>
        }

        tile_area.y1 += img_h;
 8006882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006884:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006888:	4413      	add	r3, r2
 800688a:	63bb      	str	r3, [r7, #56]	@ 0x38
        tile_area.y2 += img_h;
 800688c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800688e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006892:	4413      	add	r3, r2
 8006894:	643b      	str	r3, [r7, #64]	@ 0x40
        tile_area.x1 = tile_x_start;
 8006896:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800689a:	637b      	str	r3, [r7, #52]	@ 0x34
        tile_area.x2 = tile_x_start + img_w - 1;
 800689c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068a4:	4413      	add	r3, r2
 80068a6:	3b01      	subs	r3, #1
 80068a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(tile_area.y1 <= draw_unit->clip_area->y2) {
 80068aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	dddf      	ble.n	8006876 <_lv_draw_image_tiled_helper+0xce>
    }

    lv_image_decoder_close(&decoder_dsc);
 80068b6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f894 	bl	80079e8 <lv_image_decoder_close>
 80068c0:	e002      	b.n	80068c8 <_lv_draw_image_tiled_helper+0x120>
        return;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <_lv_draw_image_tiled_helper+0x120>
        return;
 80068c6:	bf00      	nop
}
 80068c8:	3794      	adds	r7, #148	@ 0x94
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd90      	pop	{r4, r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0801e2c0 	.word	0x0801e2c0

080068d4 <_lv_image_buf_get_transformed_area>:

void _lv_image_buf_get_transformed_area(lv_area_t * res, int32_t w, int32_t h, int32_t angle,
                                        uint16_t scale_x, uint16_t scale_y, const lv_point_t * pivot)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	@ 0x38
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
    if(angle == 0 && scale_x == LV_SCALE_NONE && scale_y == LV_SCALE_NONE) {
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d116      	bne.n	8006916 <_lv_image_buf_get_transformed_area+0x42>
 80068e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80068ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ee:	d112      	bne.n	8006916 <_lv_image_buf_get_transformed_area+0x42>
 80068f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068f6:	d10e      	bne.n	8006916 <_lv_image_buf_get_transformed_area+0x42>
        res->x1 = 0;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
        res->y1 = 0;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	605a      	str	r2, [r3, #4]
        res->x2 = w - 1;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	1e5a      	subs	r2, r3, #1
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	609a      	str	r2, [r3, #8]
        res->y2 = h - 1;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	1e5a      	subs	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	60da      	str	r2, [r3, #12]
 8006914:	e083      	b.n	8006a1e <_lv_image_buf_get_transformed_area+0x14a>
        return;
    }

    lv_point_t p[4] = {
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	2300      	movs	r3, #0
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, scale_x, scale_y, pivot, true);
 8006936:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8006938:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800693a:	f107 0010 	add.w	r0, r7, #16
 800693e:	2301      	movs	r3, #1
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	460b      	mov	r3, r1
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	f014 fb0b 	bl	801af64 <lv_point_transform>
    lv_point_transform(&p[1], angle, scale_x, scale_y, pivot, true);
 800694e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8006950:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8006952:	f107 0310 	add.w	r3, r7, #16
 8006956:	f103 0008 	add.w	r0, r3, #8
 800695a:	2301      	movs	r3, #1
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	460b      	mov	r3, r1
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	f014 fafd 	bl	801af64 <lv_point_transform>
    lv_point_transform(&p[2], angle, scale_x, scale_y, pivot, true);
 800696a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800696c:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800696e:	f107 0310 	add.w	r3, r7, #16
 8006972:	f103 0010 	add.w	r0, r3, #16
 8006976:	2301      	movs	r3, #1
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	460b      	mov	r3, r1
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	f014 faef 	bl	801af64 <lv_point_transform>
    lv_point_transform(&p[3], angle, scale_x, scale_y, pivot, true);
 8006986:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8006988:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800698a:	f107 0310 	add.w	r3, r7, #16
 800698e:	f103 0018 	add.w	r0, r3, #24
 8006992:	2301      	movs	r3, #1
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	460b      	mov	r3, r1
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	f014 fae1 	bl	801af64 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 80069a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	bfa8      	it	ge
 80069aa:	461a      	movge	r2, r3
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bfa8      	it	ge
 80069b4:	460b      	movge	r3, r1
 80069b6:	429a      	cmp	r2, r3
 80069b8:	bfa8      	it	ge
 80069ba:	461a      	movge	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) - 1;
 80069c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	bfb8      	it	lt
 80069c8:	461a      	movlt	r2, r3
 80069ca:	69b9      	ldr	r1, [r7, #24]
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	428b      	cmp	r3, r1
 80069d0:	bfb8      	it	lt
 80069d2:	460b      	movlt	r3, r1
 80069d4:	4293      	cmp	r3, r2
 80069d6:	bfb8      	it	lt
 80069d8:	4613      	movlt	r3, r2
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	609a      	str	r2, [r3, #8]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 80069e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	429a      	cmp	r2, r3
 80069e6:	bfa8      	it	ge
 80069e8:	461a      	movge	r2, r3
 80069ea:	69f9      	ldr	r1, [r7, #28]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	428b      	cmp	r3, r1
 80069f0:	bfa8      	it	ge
 80069f2:	460b      	movge	r3, r1
 80069f4:	429a      	cmp	r2, r3
 80069f6:	bfa8      	it	ge
 80069f8:	461a      	movge	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) - 1;
 80069fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	429a      	cmp	r2, r3
 8006a04:	bfb8      	it	lt
 8006a06:	461a      	movlt	r2, r3
 8006a08:	69f9      	ldr	r1, [r7, #28]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	bfb8      	it	lt
 8006a10:	460b      	movlt	r3, r1
 8006a12:	4293      	cmp	r3, r2
 8006a14:	bfb8      	it	lt
 8006a16:	4613      	movlt	r3, r2
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	60da      	str	r2, [r3, #12]
}
 8006a1e:	3730      	adds	r7, #48	@ 0x30
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <img_decode_and_draw>:

static void img_decode_and_draw(lv_draw_unit_t * draw_unit, const lv_draw_image_dsc_t * draw_dsc,
                                lv_image_decoder_dsc_t * decoder_dsc, lv_area_t * relative_decoded_area,
                                const lv_area_t * img_area, const lv_area_t * clipped_img_area,
                                lv_draw_image_core_cb draw_core_cb)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b09b      	sub	sp, #108	@ 0x6c
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
    lv_draw_image_sup_t sup;
    sup.alpha_color = draw_dsc->recolor;
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006a38:	3248      	adds	r2, #72	@ 0x48
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	8019      	strh	r1, [r3, #0]
 8006a40:	3302      	adds	r3, #2
 8006a42:	0c12      	lsrs	r2, r2, #16
 8006a44:	701a      	strb	r2, [r3, #0]
    sup.palette = decoder_dsc->palette;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	657b      	str	r3, [r7, #84]	@ 0x54
    sup.palette_size = decoder_dsc->palette_size;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8006a5a:	f362 0308 	bfi	r3, r2, #0, #9
 8006a5e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    /*The whole image is available, just draw it*/
    if(decoder_dsc->decoded && (relative_decoded_area == NULL || relative_decoded_area->x1 == LV_COORD_MIN)) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d014      	beq.n	8006a94 <img_decode_and_draw+0x70>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <img_decode_and_draw+0x56>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a3a      	ldr	r2, [pc, #232]	@ (8006b60 <img_decode_and_draw+0x13c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10c      	bne.n	8006a94 <img_decode_and_draw+0x70>
        draw_core_cb(draw_unit, draw_dsc, decoder_dsc, &sup, img_area, clipped_img_area);
 8006a7a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8006a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	6fbc      	ldr	r4, [r7, #120]	@ 0x78
 8006a88:	4613      	mov	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	47a0      	blx	r4
 8006a92:	e061      	b.n	8006b58 <img_decode_and_draw+0x134>
    }
    /*Draw in smaller pieces*/
    else {
        lv_area_t relative_full_area_to_decode = *clipped_img_area;
 8006a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a96:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8006a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        lv_area_move(&relative_full_area_to_decode, -img_area->x1, -img_area->y1);
 8006aa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4259      	negs	r1, r3
 8006aa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	425a      	negs	r2, r3
 8006aac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f013 fe13 	bl	801a6dc <lv_area_move>
        lv_area_t tmp;
        if(relative_decoded_area == NULL) relative_decoded_area = &tmp;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <img_decode_and_draw+0x9e>
 8006abc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006ac0:	603b      	str	r3, [r7, #0]
        relative_decoded_area->x1 = LV_COORD_MIN;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	4a26      	ldr	r2, [pc, #152]	@ (8006b60 <img_decode_and_draw+0x13c>)
 8006ac6:	601a      	str	r2, [r3, #0]
        relative_decoded_area->y1 = LV_COORD_MIN;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	4a25      	ldr	r2, [pc, #148]	@ (8006b60 <img_decode_and_draw+0x13c>)
 8006acc:	605a      	str	r2, [r3, #4]
        relative_decoded_area->x2 = LV_COORD_MIN;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	@ (8006b60 <img_decode_and_draw+0x13c>)
 8006ad2:	609a      	str	r2, [r3, #8]
        relative_decoded_area->y2 = LV_COORD_MIN;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	4a22      	ldr	r2, [pc, #136]	@ (8006b60 <img_decode_and_draw+0x13c>)
 8006ad8:	60da      	str	r2, [r3, #12]
        lv_result_t res = LV_RESULT_OK;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        while(res == LV_RESULT_OK) {
 8006ae0:	e035      	b.n	8006b4e <img_decode_and_draw+0x12a>
            res = lv_image_decoder_get_area(decoder_dsc, &relative_full_area_to_decode, relative_decoded_area);
 8006ae2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 ff5f 	bl	80079ae <lv_image_decoder_get_area>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

            lv_area_t absolute_decoded_area = *relative_decoded_area;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f107 0420 	add.w	r4, r7, #32
 8006afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            lv_area_move(&absolute_decoded_area, img_area->x1, img_area->y1);
 8006b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b04:	6819      	ldr	r1, [r3, #0]
 8006b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	f107 0320 	add.w	r3, r7, #32
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f013 fde4 	bl	801a6dc <lv_area_move>
            if(res == LV_RESULT_OK) {
 8006b14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d118      	bne.n	8006b4e <img_decode_and_draw+0x12a>
                /*Limit draw area to the current decoded area and draw the image*/
                lv_area_t clipped_img_area_sub;
                if(_lv_area_intersect(&clipped_img_area_sub, clipped_img_area, &absolute_decoded_area)) {
 8006b1c:	f107 0220 	add.w	r2, r7, #32
 8006b20:	f107 0310 	add.w	r3, r7, #16
 8006b24:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006b26:	4618      	mov	r0, r3
 8006b28:	f013 fdfc 	bl	801a724 <_lv_area_intersect>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <img_decode_and_draw+0x12a>
                    draw_core_cb(draw_unit, draw_dsc, decoder_dsc, &sup,
 8006b32:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8006b36:	f107 0310 	add.w	r3, r7, #16
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	f107 0320 	add.w	r3, r7, #32
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	6fbc      	ldr	r4, [r7, #120]	@ 0x78
 8006b44:	4613      	mov	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	47a0      	blx	r4
        while(res == LV_RESULT_OK) {
 8006b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d0c5      	beq.n	8006ae2 <img_decode_and_draw+0xbe>
                                 &absolute_decoded_area, &clipped_img_area_sub);
                }
            }
        }
    }
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	3764      	adds	r7, #100	@ 0x64
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd90      	pop	{r4, r7, pc}
 8006b60:	e0000001 	.word	0xe0000001

08006b64 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	3301      	adds	r3, #1
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <lv_point_set>:

    return point;
}

static inline void lv_point_set(lv_point_t * p, int32_t x, int32_t y)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
    p->x = x;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	601a      	str	r2, [r3, #0]
    p->y = y;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	605a      	str	r2, [r3, #4]
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f016 fad1 	bl	801d15e <lv_memset>
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font      pointer to a font
 * @return the height of a font
 */
static inline int32_t lv_font_get_line_height(const lv_font_t * font)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
    return font->line_height;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <_lv_text_is_marker>:
 *
 * @param letter a letter
 * @return true if so
 */
static inline bool _lv_text_is_marker(uint32_t letter)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
    if(letter < 0x20) return true;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b1f      	cmp	r3, #31
 8006be8:	d801      	bhi.n	8006bee <_lv_text_is_marker+0x12>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e052      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    /*U+061C ARABIC LETTER MARK, see https://www.compart.com/en/unicode/block/U+0600*/
    if(letter == 0x061C) return true;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f240 621c 	movw	r2, #1564	@ 0x61c
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d101      	bne.n	8006bfc <_lv_text_is_marker+0x20>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e04b      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    /*U+115F HANGUL CHOSEONG FILLER, See https://www.compart.com/en/unicode/block/U+1100*/
    if(letter == 0x115F) return true;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f241 125f 	movw	r2, #4447	@ 0x115f
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d101      	bne.n	8006c0a <_lv_text_is_marker+0x2e>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e044      	b.n	8006c94 <_lv_text_is_marker+0xb8>
    /*U+1160 HANGUL JUNGSEONG FILLER*/
    if(letter == 0x1160) return true;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f5b3 5f8b 	cmp.w	r3, #4448	@ 0x1160
 8006c10:	d101      	bne.n	8006c16 <_lv_text_is_marker+0x3a>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e03e      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    /*See https://www.compart.com/en/unicode/block/U+1800*/
    if(letter >= 0x180B && letter <= 0x180E) return true;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f641 020a 	movw	r2, #6154	@ 0x180a
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d906      	bls.n	8006c2e <_lv_text_is_marker+0x52>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f641 020e 	movw	r2, #6158	@ 0x180e
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d801      	bhi.n	8006c2e <_lv_text_is_marker+0x52>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e032      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    /*See https://www.compart.com/en/unicode/block/U+2000*/
    if(letter >= 0x200B && letter <= 0x200F) return true;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f242 020a 	movw	r2, #8202	@ 0x200a
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d906      	bls.n	8006c46 <_lv_text_is_marker+0x6a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f242 020f 	movw	r2, #8207	@ 0x200f
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d801      	bhi.n	8006c46 <_lv_text_is_marker+0x6a>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e026      	b.n	8006c94 <_lv_text_is_marker+0xb8>
    if(letter >= 0x2028 && letter <= 0x202F) return true;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f242 0227 	movw	r2, #8231	@ 0x2027
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d906      	bls.n	8006c5e <_lv_text_is_marker+0x82>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f242 022f 	movw	r2, #8239	@ 0x202f
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d801      	bhi.n	8006c5e <_lv_text_is_marker+0x82>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e01a      	b.n	8006c94 <_lv_text_is_marker+0xb8>
    if(letter >= 0x205F && letter <= 0x206F) return true;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f242 025e 	movw	r2, #8286	@ 0x205e
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d906      	bls.n	8006c76 <_lv_text_is_marker+0x9a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f242 026f 	movw	r2, #8303	@ 0x206f
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d801      	bhi.n	8006c76 <_lv_text_is_marker+0x9a>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e00e      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    /*U+FEFF ZERO WIDTH NO-BREAK SPACE, see https://www.compart.com/en/unicode/block/U+FE70*/
    if(letter == 0xFEFF) return true;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d101      	bne.n	8006c84 <_lv_text_is_marker+0xa8>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e007      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    if(letter == 0xF8FF) return true; /*LV_SYMBOL_DUMMY*/
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f64f 02ff 	movw	r2, #63743	@ 0xf8ff
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d101      	bne.n	8006c92 <_lv_text_is_marker+0xb6>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <_lv_text_is_marker+0xb8>

    return false;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d102      	bne.n	8006cba <lv_bidi_calculate_align+0x1a>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	701a      	strb	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <lv_draw_glyph_dsc_init>:
{
    return task->type == LV_DRAW_TASK_TYPE_LABEL ? (lv_draw_label_dsc_t *)task->draw_dsc : NULL;
}

void lv_draw_glyph_dsc_init(lv_draw_glyph_dsc_t * dsc)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
    lv_memzero(dsc, sizeof(lv_draw_glyph_dsc_t));
 8006cce:	211c      	movs	r1, #28
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff69 	bl	8006ba8 <lv_memzero>
}
 8006cd6:	bf00      	nop
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <lv_draw_label_iterate_characters>:
}

void lv_draw_label_iterate_characters(lv_draw_unit_t * draw_unit, const lv_draw_label_dsc_t * dsc,
                                      const lv_area_t * coords,
                                      lv_draw_glyph_cb_t cb)
{
 8006ce0:	b5b0      	push	{r4, r5, r7, lr}
 8006ce2:	b0c6      	sub	sp, #280	@ 0x118
 8006ce4:	af04      	add	r7, sp, #16
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cec:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8006cf0:	6001      	str	r1, [r0, #0]
 8006cf2:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8006cf6:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8006cfa:	600a      	str	r2, [r1, #0]
 8006cfc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8006d00:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8006d04:	6013      	str	r3, [r2, #0]
    const lv_font_t * font = dsc->font;
 8006d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int32_t w;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_unit->clip_area);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d22:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	f013 fcfc 	bl	801a724 <_lv_area_intersect>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if(!clip_ok) return;
 8006d32:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8006d36:	f083 0301 	eor.w	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f040 84ab 	bne.w	8007698 <lv_draw_label_iterate_characters+0x9b8>

    lv_text_align_t align = dsc->align;
 8006d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d46:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006d50:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    lv_base_dir_t base_dir = dsc->bidi_dir;
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006d62:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa

    lv_bidi_calculate_align(&align, &base_dir, dsc->text);
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69da      	ldr	r2, [r3, #28]
 8006d72:	f107 01aa 	add.w	r1, r7, #170	@ 0xaa
 8006d76:	f107 03ab 	add.w	r3, r7, #171	@ 0xab
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff ff90 	bl	8006ca0 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8006d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <lv_draw_label_iterate_characters+0xca>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8006d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	f7ff fee0 	bl	8006b64 <lv_area_get_width>
 8006da4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
 8006da8:	e02c      	b.n	8006e04 <lv_draw_label_iterate_characters+0x124>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_text_get_size(&p, dsc->text, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8006daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69d9      	ldr	r1, [r3, #28]
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6a1c      	ldr	r4, [r3, #32]
 8006dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                         dsc->flag);
 8006dda:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8006dde:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	f892 204b 	ldrb.w	r2, [r2, #75]	@ 0x4b
        lv_text_get_size(&p, dsc->text, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8006de8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8006dec:	9202      	str	r2, [sp, #8]
 8006dee:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8006df2:	9201      	str	r2, [sp, #4]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	462b      	mov	r3, r5
 8006df8:	4622      	mov	r2, r4
 8006dfa:	f015 f9ed 	bl	801c1d8 <lv_text_get_size>
        w = p.x;
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8006e04:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8006e08:	f7ff fedc 	bl	8006bc4 <lv_font_get_line_height>
 8006e0c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e20:	4413      	add	r3, r2
 8006e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    lv_point_t pos;
    lv_point_set(&pos, coords->x1, coords->y1);
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6819      	ldr	r1, [r3, #0]
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff fe9b 	bl	8006b84 <lv_point_set>

    int32_t x_ofs = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    int32_t y_ofs = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    x_ofs = dsc->ofs_x;
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    y_ofs = dsc->ofs_y;
 8006e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    pos.y += y_ofs;
 8006e7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8006e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e82:	4413      	add	r3, r2
 8006e84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    uint32_t line_start     = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int32_t last_line_start = -1;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

    /*Check the hint to use the cached info*/
    if(dsc->hint && y_ofs == 0 && coords->y1 < 0) {
 8006e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d036      	beq.n	8006f14 <lv_draw_label_iterate_characters+0x234>
 8006ea6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d132      	bne.n	8006f14 <lv_draw_label_iterate_characters+0x234>
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da2a      	bge.n	8006f14 <lv_draw_label_iterate_characters+0x234>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(dsc->hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8006ede:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	429a      	cmp	r2, r3
 8006eee:	dd08      	ble.n	8006f02 <lv_draw_label_iterate_characters+0x222>
            dsc->hint->line_start = -1;
 8006ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efc:	f04f 32ff 	mov.w	r2, #4294967295
 8006f00:	601a      	str	r2, [r3, #0]
        }
        last_line_start = dsc->hint->line_start;
 8006f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f06:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    }

    /*Use the hint if it's valid*/
    if(dsc->hint && last_line_start >= 0) {
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d013      	beq.n	8006f4c <lv_draw_label_iterate_characters+0x26c>
 8006f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db0f      	blt.n	8006f4c <lv_draw_label_iterate_characters+0x26c>
        line_start = last_line_start;
 8006f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f30:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        pos.y += dsc->hint->y;
 8006f34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	4413      	add	r3, r2
 8006f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    }

    uint32_t line_end = line_start + _lv_text_get_next_line(&dsc->text[line_start], font, dsc->letter_space, w, NULL,
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f5c:	18d0      	adds	r0, r2, r3
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                                                            dsc->flag);
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
    uint32_t line_end = line_start + _lv_text_get_next_line(&dsc->text[line_start], font, dsc->letter_space, w, NULL,
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f82:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8006f86:	f015 fa91 	bl	801c4ac <_lv_text_get_next_line>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006f90:	4413      	add	r3, r2
 8006f92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_unit->clip_area->y1) {
 8006f96:	e078      	b.n	800708a <lv_draw_label_iterate_characters+0x3aa>
        /*Go to next line*/
        line_start = line_end;
 8006f98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        line_end += _lv_text_get_next_line(&dsc->text[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fb0:	18d0      	adds	r0, r2, r3
 8006fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8006fda:	f015 fa67 	bl	801c4ac <_lv_text_get_next_line>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        pos.y += line_height;
 8006fea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8006fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        /*Save at the threshold coordinate*/
        if(dsc->hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && dsc->hint->line_start < 0) {
 8006ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007004:	2b00      	cmp	r3, #0
 8007006:	d033      	beq.n	8007070 <lv_draw_label_iterate_characters+0x390>
 8007008:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800700c:	f513 6f80 	cmn.w	r3, #1024	@ 0x400
 8007010:	db2e      	blt.n	8007070 <lv_draw_label_iterate_characters+0x390>
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	da25      	bge.n	8007070 <lv_draw_label_iterate_characters+0x390>
            dsc->hint->line_start = line_start;
 8007024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007028:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007030:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8007034:	601a      	str	r2, [r3, #0]
            dsc->hint->y          = pos.y - coords->y1;
 8007036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007052:	1a8a      	subs	r2, r1, r2
 8007054:	605a      	str	r2, [r3, #4]
            dsc->hint->coord_y    = coords->y1;
 8007056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007062:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8007066:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	6852      	ldr	r2, [r2, #4]
 800706e:	609a      	str	r2, [r3, #8]
        }

        if(dsc->text[line_start] == '\0') return;
 8007070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007074:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007080:	4413      	add	r3, r2
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8309 	beq.w	800769c <lv_draw_label_iterate_characters+0x9bc>
    while(pos.y + line_height_font < draw_unit->clip_area->y1) {
 800708a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800708e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007092:	441a      	add	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	f6ff af7c 	blt.w	8006f98 <lv_draw_label_iterate_characters+0x2b8>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 80070a0:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d12e      	bne.n	8007106 <lv_draw_label_iterate_characters+0x426>
        line_width = lv_text_get_width(&dsc->text[line_start], line_end - line_start, font, dsc->letter_space);
 80070a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070b8:	18d0      	adds	r0, r2, r3
 80070ba:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80070be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80070c2:	1ad1      	subs	r1, r2, r3
 80070c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80070d4:	f015 fab8 	bl	801c648 <lv_text_get_width>
 80070d8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80070dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f7ff fd3d 	bl	8006b64 <lv_area_get_width>
 80070ea:	4602      	mov	r2, r0
 80070ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	0fda      	lsrs	r2, r3, #31
 80070f4:	4413      	add	r3, r2
 80070f6:	105b      	asrs	r3, r3, #1
 80070f8:	461a      	mov	r2, r3
 80070fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070fe:	4413      	add	r3, r2
 8007100:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007104:	e02d      	b.n	8007162 <lv_draw_label_iterate_characters+0x482>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8007106:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800710a:	2b03      	cmp	r3, #3
 800710c:	d129      	bne.n	8007162 <lv_draw_label_iterate_characters+0x482>
        line_width = lv_text_get_width(&dsc->text[line_start], line_end - line_start, font, dsc->letter_space);
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800711e:	18d0      	adds	r0, r2, r3
 8007120:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8007124:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007128:	1ad1      	subs	r1, r2, r3
 800712a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007136:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800713a:	f015 fa85 	bl	801c648 <lv_text_get_width>
 800713e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	f7ff fd0a 	bl	8006b64 <lv_area_get_width>
 8007150:	4602      	mov	r2, r0
 8007152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800715c:	4413      	add	r3, r2
 800715e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    }

    uint32_t sel_start = dsc->sel_start;
 8007162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007166:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint32_t sel_end = dsc->sel_end;
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    if(sel_start > sel_end) {
 8007182:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8007186:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800718a:	429a      	cmp	r2, r3
 800718c:	d90b      	bls.n	80071a6 <lv_draw_label_iterate_characters+0x4c6>
        uint32_t tmp = sel_start;
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        sel_start = sel_end;
 8007196:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800719a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        sel_end = tmp;
 800719e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80071a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }

    lv_area_t bg_coords;
    lv_draw_glyph_dsc_t draw_letter_dsc;
    lv_draw_glyph_dsc_init(&draw_letter_dsc);
 80071a6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fd8b 	bl	8006cc6 <lv_draw_glyph_dsc_init>
    draw_letter_dsc.opa = dsc->opa;
 80071b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80071be:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    draw_letter_dsc.bg_coords = &bg_coords;
 80071c2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80071c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    draw_letter_dsc.color = dsc->color;
 80071ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80071d8:	322c      	adds	r2, #44	@ 0x2c
 80071da:	6812      	ldr	r2, [r2, #0]
 80071dc:	4611      	mov	r1, r2
 80071de:	8019      	strh	r1, [r3, #0]
 80071e0:	3302      	adds	r3, #2
 80071e2:	0c12      	lsrs	r2, r2, #16
 80071e4:	701a      	strb	r2, [r3, #0]

    lv_draw_fill_dsc_t fill_dsc;
    lv_draw_fill_dsc_init(&fill_dsc);
 80071e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fb40 	bl	8007870 <lv_draw_fill_dsc_init>
    fill_dsc.opa = dsc->opa;
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80071fe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    int32_t underline_width = font->underline_thickness ? font->underline_thickness : 1;
 8007202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007206:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <lv_draw_label_iterate_characters+0x538>
 800720e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007212:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8007216:	e000      	b.n	800721a <lv_draw_label_iterate_characters+0x53a>
 8007218:	2301      	movs	r3, #1
 800721a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    int32_t line_start_x;
    uint32_t i;
    int32_t letter_w;

    /*Write out all lines*/
    while(dsc->text[line_start] != '\0') {
 800721e:	e222      	b.n	8007666 <lv_draw_label_iterate_characters+0x986>
        pos.x += x_ofs;
 8007220:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007228:	4413      	add	r3, r2
 800722a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        line_start_x = pos.x;
 800722e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007232:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

        /*Write all letter of a line*/
        i = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	643b      	str	r3, [r7, #64]	@ 0x40
#if LV_USE_BIDI
        char * bidi_txt = lv_malloc(line_end - line_start + 1);
        LV_ASSERT_MALLOC(bidi_txt);
        _lv_bidi_process_paragraph(dsc->text + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = dsc->text + line_start;
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800724a:	4413      	add	r3, r2
 800724c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
#endif

        while(i < line_end - line_start) {
 8007250:	e160      	b.n	8007514 <lv_draw_label_iterate_characters+0x834>
            uint32_t logical_char_pos = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007260:	4293      	cmp	r3, r2
 8007262:	d015      	beq.n	8007290 <lv_draw_label_iterate_characters+0x5b0>
 8007264:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800726c:	4293      	cmp	r3, r2
 800726e:	d00f      	beq.n	8007290 <lv_draw_label_iterate_characters+0x5b0>
#if LV_USE_BIDI
                logical_char_pos = _lv_text_encoded_get_char_id(dsc->text, line_start);
                uint32_t t = _lv_text_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_text_encoded_get_char_id(dsc->text, line_start + i);
 8007270:	4b8d      	ldr	r3, [pc, #564]	@ (80074a8 <lv_draw_label_iterate_characters+0x7c8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8007278:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	69d0      	ldr	r0, [r2, #28]
 8007280:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007282:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8007286:	440a      	add	r2, r1
 8007288:	4611      	mov	r1, r2
 800728a:	4798      	blx	r3
 800728c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_text_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8007290:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007294:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007298:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800729c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80072a0:	f015 fa1e 	bl	801c6e0 <_lv_text_encoded_letter_next_2>

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80072a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a8:	4619      	mov	r1, r3
 80072aa:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80072ae:	f00e faeb 	bl	8015888 <lv_font_get_glyph_width>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

            /*Always set the bg_coordinates for placeholder drawing*/
            bg_coords.x1 = pos.x;
 80072b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            bg_coords.y1 = pos.y;
 80072c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            bg_coords.x2 = pos.x + letter_w - 1;
 80072c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80072cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072d0:	4413      	add	r3, r2
 80072d2:	3b01      	subs	r3, #1
 80072d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            bg_coords.y2 = pos.y + line_height - 1;
 80072d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80072dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072e0:	4413      	add	r3, r2
 80072e2:	3b01      	subs	r3, #1
 80072e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

            if(i >= line_end - line_start) {
 80072e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80072ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f4:	429a      	cmp	r2, r3
 80072f6:	f200 8098 	bhi.w	800742a <lv_draw_label_iterate_characters+0x74a>
                if(dsc->decor & LV_TEXT_DECOR_UNDERLINE) {
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007308:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d038      	beq.n	8007388 <lv_draw_label_iterate_characters+0x6a8>
                    lv_area_t fill_area;
                    fill_area.x1 = line_start_x;
 8007316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800731a:	623b      	str	r3, [r7, #32]
                    fill_area.x2 = pos.x + letter_w - 1;
 800731c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007320:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007324:	4413      	add	r3, r2
 8007326:	3b01      	subs	r3, #1
 8007328:	62bb      	str	r3, [r7, #40]	@ 0x28
                    fill_area.y1 = pos.y + font->line_height - font->base_line - font->underline_position;
 800732a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800732e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	441a      	add	r2, r3
 8007336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8007342:	f992 2015 	ldrsb.w	r2, [r2, #21]
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
                    fill_area.y2 = fill_area.y1 + underline_width - 1;
 800734a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007350:	4413      	add	r3, r2
 8007352:	3b01      	subs	r3, #1
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    fill_dsc.color = dsc->color;
 8007356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 8007364:	322c      	adds	r2, #44	@ 0x2c
 8007366:	8811      	ldrh	r1, [r2, #0]
 8007368:	7892      	ldrb	r2, [r2, #2]
 800736a:	8019      	strh	r1, [r3, #0]
 800736c:	709a      	strb	r2, [r3, #2]
                    cb(draw_unit, NULL, &fill_dsc, &fill_area);
 800736e:	f107 0120 	add.w	r1, r7, #32
 8007372:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8007376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737e:	681c      	ldr	r4, [r3, #0]
 8007380:	460b      	mov	r3, r1
 8007382:	2100      	movs	r1, #0
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	47a0      	blx	r4
                }
                if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8007388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007396:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d042      	beq.n	800742a <lv_draw_label_iterate_characters+0x74a>
                    lv_area_t fill_area;
                    fill_area.x1 = line_start_x;
 80073a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073a8:	613b      	str	r3, [r7, #16]
                    fill_area.x2 = pos.x + letter_w - 1;
 80073aa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80073ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073b2:	4413      	add	r3, r2
 80073b4:	3b01      	subs	r3, #1
 80073b6:	61bb      	str	r3, [r7, #24]
                    fill_area.y1 = pos.y + (font->line_height - font->base_line) * 2 / 3 + font->underline_thickness / 2;
 80073b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80073bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073c0:	68d9      	ldr	r1, [r3, #12]
 80073c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	1acb      	subs	r3, r1, r3
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4937      	ldr	r1, [pc, #220]	@ (80074ac <lv_draw_label_iterate_characters+0x7cc>)
 80073ce:	fb81 0103 	smull	r0, r1, r1, r3
 80073d2:	17db      	asrs	r3, r3, #31
 80073d4:	1acb      	subs	r3, r1, r3
 80073d6:	441a      	add	r2, r3
 80073d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80073dc:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80073e0:	0fd9      	lsrs	r1, r3, #31
 80073e2:	440b      	add	r3, r1
 80073e4:	105b      	asrs	r3, r3, #1
 80073e6:	b25b      	sxtb	r3, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]
                    fill_area.y2 = fill_area.y1 + underline_width - 1;
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073f2:	4413      	add	r3, r2
 80073f4:	3b01      	subs	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]

                    fill_dsc.color = dsc->color;
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 8007406:	322c      	adds	r2, #44	@ 0x2c
 8007408:	8811      	ldrh	r1, [r2, #0]
 800740a:	7892      	ldrb	r2, [r2, #2]
 800740c:	8019      	strh	r1, [r3, #0]
 800740e:	709a      	strb	r2, [r3, #2]
                    cb(draw_unit, NULL, &fill_dsc, &fill_area);
 8007410:	f107 0110 	add.w	r1, r7, #16
 8007414:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681c      	ldr	r4, [r3, #0]
 8007422:	460b      	mov	r3, r1
 8007424:	2100      	movs	r1, #0
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	47a0      	blx	r4
                }
            }

            if(sel_start != 0xFFFF && sel_end != 0xFFFF && logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007432:	4293      	cmp	r3, r2
 8007434:	d03c      	beq.n	80074b0 <lv_draw_label_iterate_characters+0x7d0>
 8007436:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800743a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800743e:	4293      	cmp	r3, r2
 8007440:	d036      	beq.n	80074b0 <lv_draw_label_iterate_characters+0x7d0>
 8007442:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8007446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744a:	429a      	cmp	r2, r3
 800744c:	d330      	bcc.n	80074b0 <lv_draw_label_iterate_characters+0x7d0>
 800744e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8007452:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007456:	429a      	cmp	r2, r3
 8007458:	d22a      	bcs.n	80074b0 <lv_draw_label_iterate_characters+0x7d0>
                draw_letter_dsc.color = dsc->sel_color;
 800745a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8007468:	322f      	adds	r2, #47	@ 0x2f
 800746a:	8811      	ldrh	r1, [r2, #0]
 800746c:	7892      	ldrb	r2, [r2, #2]
 800746e:	8019      	strh	r1, [r3, #0]
 8007470:	709a      	strb	r2, [r3, #2]
                fill_dsc.color = dsc->sel_bg_color;
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 8007480:	3232      	adds	r2, #50	@ 0x32
 8007482:	8811      	ldrh	r1, [r2, #0]
 8007484:	7892      	ldrb	r2, [r2, #2]
 8007486:	8019      	strh	r1, [r3, #0]
 8007488:	709a      	strb	r2, [r3, #2]
                cb(draw_unit, NULL, &fill_dsc, &bg_coords);
 800748a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800748e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8007492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749a:	681c      	ldr	r4, [r3, #0]
 800749c:	460b      	mov	r3, r1
 800749e:	2100      	movs	r1, #0
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	47a0      	blx	r4
 80074a4:	e012      	b.n	80074cc <lv_draw_label_iterate_characters+0x7ec>
 80074a6:	bf00      	nop
 80074a8:	20000010 	.word	0x20000010
 80074ac:	55555556 	.word	0x55555556
            }
            else {
                draw_letter_dsc.color = dsc->color;
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80074be:	322c      	adds	r2, #44	@ 0x2c
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	4611      	mov	r1, r2
 80074c4:	8019      	strh	r1, [r3, #0]
 80074c6:	3302      	adds	r3, #2
 80074c8:	0c12      	lsrs	r2, r2, #16
 80074ca:	701a      	strb	r2, [r3, #0]
            }

            draw_letter(draw_unit, &draw_letter_dsc, &pos, font, letter, cb);
 80074cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ce:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80074d2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80074d6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80074da:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074e8:	4602      	mov	r2, r0
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 f8dc 	bl	80076a8 <draw_letter>

            if(letter_w > 0) {
 80074f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dd0d      	ble.n	8007514 <lv_draw_label_iterate_characters+0x834>
                pos.x += letter_w + dsc->letter_space;
 80074f8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007508:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800750c:	440b      	add	r3, r1
 800750e:	4413      	add	r3, r2
 8007510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        while(i < line_end - line_start) {
 8007514:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8007518:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800751c:	1ad2      	subs	r2, r2, r3
 800751e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007520:	429a      	cmp	r2, r3
 8007522:	f63f ae96 	bhi.w	8007252 <lv_draw_label_iterate_characters+0x572>
#if LV_USE_BIDI
        lv_free(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 8007526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800752a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        line_end += _lv_text_get_next_line(&dsc->text[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800753e:	18d0      	adds	r0, r2, r3
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	2300      	movs	r3, #0
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8007568:	f014 ffa0 	bl	801c4ac <_lv_text_get_next_line>
 800756c:	4602      	mov	r2, r0
 800756e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007572:	4413      	add	r3, r2
 8007574:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

        pos.x = coords->x1;
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 8007588:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800758c:	2b02      	cmp	r3, #2
 800758e:	d12e      	bne.n	80075ee <lv_draw_label_iterate_characters+0x90e>
            line_width =
                lv_text_get_width(&dsc->text[line_start], line_end - line_start, font, dsc->letter_space);
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80075a0:	18d0      	adds	r0, r2, r3
 80075a2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80075a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80075aa:	1ad1      	subs	r1, r2, r3
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80075bc:	f015 f844 	bl	801c648 <lv_text_get_width>
 80075c0:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80075c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	f7ff fac9 	bl	8006b64 <lv_area_get_width>
 80075d2:	4602      	mov	r2, r0
 80075d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	0fda      	lsrs	r2, r3, #31
 80075dc:	4413      	add	r3, r2
 80075de:	105b      	asrs	r3, r3, #1
 80075e0:	461a      	mov	r2, r3
 80075e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075e6:	4413      	add	r3, r2
 80075e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ec:	e02d      	b.n	800764a <lv_draw_label_iterate_characters+0x96a>
        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 80075ee:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d129      	bne.n	800764a <lv_draw_label_iterate_characters+0x96a>
            line_width =
                lv_text_get_width(&dsc->text[line_start], line_end - line_start, font, dsc->letter_space);
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69da      	ldr	r2, [r3, #28]
 8007602:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007606:	18d0      	adds	r0, r2, r3
 8007608:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800760c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007610:	1ad1      	subs	r1, r2, r3
 8007612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007616:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8007622:	f015 f811 	bl	801c648 <lv_text_get_width>
 8007626:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 800762a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	f7ff fa96 	bl	8006b64 <lv_area_get_width>
 8007638:	4602      	mov	r2, r0
 800763a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007644:	4413      	add	r3, r2
 8007646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        }

        /*Go the next line position*/
        pos.y += line_height;
 800764a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800764e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007652:	4413      	add	r3, r2
 8007654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        if(pos.y > draw_unit->clip_area->y2) break;
 8007658:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	dc0d      	bgt.n	8007682 <lv_draw_label_iterate_characters+0x9a2>
    while(dsc->text[line_start] != '\0') {
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69da      	ldr	r2, [r3, #28]
 8007672:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007676:	4413      	add	r3, r2
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	f47f add0 	bne.w	8007220 <lv_draw_label_iterate_characters+0x540>
 8007680:	e000      	b.n	8007684 <lv_draw_label_iterate_characters+0x9a4>
        if(pos.y > draw_unit->clip_area->y2) break;
 8007682:	bf00      	nop
    }

    if(draw_letter_dsc._draw_buf) lv_draw_buf_destroy(draw_letter_dsc._draw_buf);
 8007684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <lv_draw_label_iterate_characters+0x9be>
 800768c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fca5 	bl	8005fe0 <lv_draw_buf_destroy>
 8007696:	e002      	b.n	800769e <lv_draw_label_iterate_characters+0x9be>
    if(!clip_ok) return;
 8007698:	bf00      	nop
 800769a:	e000      	b.n	800769e <lv_draw_label_iterate_characters+0x9be>
        if(dsc->text[line_start] == '\0') return;
 800769c:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 800769e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bdb0      	pop	{r4, r5, r7, pc}
 80076a6:	bf00      	nop

080076a8 <draw_letter>:
 *   STATIC FUNCTIONS
 **********************/

static void draw_letter(lv_draw_unit_t * draw_unit, lv_draw_glyph_dsc_t * dsc,  const lv_point_t * pos,
                        const lv_font_t * font, uint32_t letter, lv_draw_glyph_cb_t cb)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b095      	sub	sp, #84	@ 0x54
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;

    if(_lv_text_is_marker(letter)) /*Markers are valid letters but should not be rendered.*/
 80076b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80076b8:	f7ff fa90 	bl	8006bdc <_lv_text_is_marker>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f040 80c0 	bne.w	8007844 <draw_letter+0x19c>
        return;

    LV_PROFILER_BEGIN;
    bool g_ret = lv_font_get_glyph_dsc(font, &g, letter, '\0');
 80076c4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80076c8:	2300      	movs	r3, #0
 80076ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076cc:	6838      	ldr	r0, [r7, #0]
 80076ce:	f00e f855 	bl	801577c <lv_font_get_glyph_dsc>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        /*Add warning if the dsc is not found*/
        LV_LOG_WARN("lv_draw_letter: glyph dsc. not found for U+%" LV_PRIX32, letter);
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) {
 80076d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80b4 	beq.w	8007848 <draw_letter+0x1a0>
 80076e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 80b0 	beq.w	8007848 <draw_letter+0x1a0>
        LV_PROFILER_END;
        return;
    }

    lv_area_t letter_coords;
    letter_coords.x1 = pos->x + g.ofs_x;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80076f0:	4413      	add	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]
    letter_coords.x2 = letter_coords.x1 + g.box_w - 1;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80076f8:	4413      	add	r3, r2
 80076fa:	3b01      	subs	r3, #1
 80076fc:	61fb      	str	r3, [r7, #28]
    letter_coords.y1 = pos->y + (font->line_height - font->base_line) - g.box_h - g.ofs_y;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	68d9      	ldr	r1, [r3, #12]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	1acb      	subs	r3, r1, r3
 800770c:	4413      	add	r3, r2
 800770e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
    letter_coords.y2 = letter_coords.y1 + g.box_h - 1;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800771e:	4413      	add	r3, r2
 8007720:	3b01      	subs	r3, #1
 8007722:	623b      	str	r3, [r7, #32]

    /*If the letter is completely out of mask don't draw it*/
    if(_lv_area_is_out(&letter_coords, draw_unit->clip_area, 0) &&
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6899      	ldr	r1, [r3, #8]
 8007728:	f107 0314 	add.w	r3, r7, #20
 800772c:	2200      	movs	r2, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f013 f9b0 	bl	801aa94 <_lv_area_is_out>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <draw_letter+0xa8>
       _lv_area_is_out(dsc->bg_coords, draw_unit->clip_area, 0)) {
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	68d8      	ldr	r0, [r3, #12]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	4619      	mov	r1, r3
 8007746:	f013 f9a5 	bl	801aa94 <_lv_area_is_out>
 800774a:	4603      	mov	r3, r0
    if(_lv_area_is_out(&letter_coords, draw_unit->clip_area, 0) &&
 800774c:	2b00      	cmp	r3, #0
 800774e:	d17d      	bne.n	800784c <draw_letter+0x1a4>
        LV_PROFILER_END;
        return;
    }

    if(g.resolved_font) {
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d056      	beq.n	8007804 <draw_letter+0x15c>
        lv_draw_buf_t * draw_buf = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	647b      	str	r3, [r7, #68]	@ 0x44
        if(LV_FONT_GLYPH_FORMAT_NONE < g.format && g.format < LV_FONT_GLYPH_FORMAT_IMAGE) {
 800775a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03b      	beq.n	80077da <draw_letter+0x132>
 8007762:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007766:	2b08      	cmp	r3, #8
 8007768:	d837      	bhi.n	80077da <draw_letter+0x132>
            /*Only check draw buf for bitmap glyph*/
            draw_buf = lv_draw_buf_reshape(dsc->_draw_buf, 0, g.box_w, g.box_h, LV_STRIDE_AUTO);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6998      	ldr	r0, [r3, #24]
 800776e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007770:	461a      	mov	r2, r3
 8007772:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007774:	4619      	mov	r1, r3
 8007776:	2300      	movs	r3, #0
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	460b      	mov	r3, r1
 800777c:	2100      	movs	r1, #0
 800777e:	f7fe fbf1 	bl	8005f64 <lv_draw_buf_reshape>
 8007782:	6478      	str	r0, [r7, #68]	@ 0x44
            if(draw_buf == NULL) {
 8007784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007786:	2b00      	cmp	r3, #0
 8007788:	d127      	bne.n	80077da <draw_letter+0x132>
                if(dsc->_draw_buf) lv_draw_buf_destroy(dsc->_draw_buf);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <draw_letter+0xf4>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fc22 	bl	8005fe0 <lv_draw_buf_destroy>

                uint32_t h = g.box_h;
 800779c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800779e:	643b      	str	r3, [r7, #64]	@ 0x40
                if(h * g.box_w < 64) h *= 2; /*Alloc a slightly larger buffer*/
 80077a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077a2:	461a      	mov	r2, r3
 80077a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80077ac:	d802      	bhi.n	80077b4 <draw_letter+0x10c>
 80077ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	643b      	str	r3, [r7, #64]	@ 0x40
                draw_buf = lv_draw_buf_create(g.box_w, h, LV_COLOR_FORMAT_A8, LV_STRIDE_AUTO);
 80077b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077b6:	4618      	mov	r0, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	220e      	movs	r2, #14
 80077bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077be:	f7fe fb3d 	bl	8005e3c <lv_draw_buf_create>
 80077c2:	6478      	str	r0, [r7, #68]	@ 0x44
                LV_ASSERT_MALLOC(draw_buf);
 80077c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <draw_letter+0x126>
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <draw_letter+0x122>
                draw_buf->header.h = g.box_h;
 80077ce:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80077d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d2:	80da      	strh	r2, [r3, #6]
                dsc->_draw_buf = draw_buf;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077d8:	619a      	str	r2, [r3, #24]
            }
        }

        dsc->glyph_data = (void *)lv_font_get_glyph_bitmap(&g, letter, draw_buf);
 80077da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077e2:	4618      	mov	r0, r3
 80077e4:	f00d ffb1 	bl	801574a <lv_font_get_glyph_bitmap>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	601a      	str	r2, [r3, #0]
        dsc->format = dsc->glyph_data ? g.format : LV_FONT_GLYPH_FORMAT_NONE;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <draw_letter+0x154>
 80077f6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80077fa:	e000      	b.n	80077fe <draw_letter+0x156>
 80077fc:	2200      	movs	r2, #0
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	711a      	strb	r2, [r3, #4]
 8007802:	e002      	b.n	800780a <draw_letter+0x162>
    }
    else {
        dsc->format = LV_FONT_GLYPH_FORMAT_NONE;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	711a      	strb	r2, [r3, #4]
    }

    dsc->letter_coords = &letter_coords;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f107 0214 	add.w	r2, r7, #20
 8007810:	609a      	str	r2, [r3, #8]
    dsc->g = &g;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007818:	611a      	str	r2, [r3, #16]
    cb(draw_unit, dsc, NULL, NULL);
 800781a:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800781c:	2300      	movs	r3, #0
 800781e:	2200      	movs	r2, #0
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	47a0      	blx	r4

    if(g.resolved_font && font->release_glyph) {
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d010      	beq.n	800784e <draw_letter+0x1a6>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00c      	beq.n	800784e <draw_letter+0x1a6>
        font->release_glyph(font, &g);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800783c:	4611      	mov	r1, r2
 800783e:	6838      	ldr	r0, [r7, #0]
 8007840:	4798      	blx	r3
 8007842:	e004      	b.n	800784e <draw_letter+0x1a6>
        return;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <draw_letter+0x1a6>
        return;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <draw_letter+0x1a6>
        return;
 800784c:	bf00      	nop
    }
    LV_PROFILER_END;
}
 800784e:	374c      	adds	r7, #76	@ 0x4c
 8007850:	46bd      	mov	sp, r7
 8007852:	bd90      	pop	{r4, r7, pc}

08007854 <lv_memzero>:
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f015 fc7b 	bl	801d15e <lv_memset>
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <lv_draw_fill_dsc_init>:
    dsc->shadow_opa = LV_OPA_COVER;
    dsc->border_side = LV_BORDER_SIDE_FULL;
}

void lv_draw_fill_dsc_init(lv_draw_fill_dsc_t * dsc)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
    lv_memzero(dsc, sizeof(*dsc));
 8007878:	2130      	movs	r1, #48	@ 0x30
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ffea 	bl	8007854 <lv_memzero>
    dsc->opa = LV_OPA_COVER;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	22ff      	movs	r2, #255	@ 0xff
 8007884:	f883 2020 	strb.w	r2, [r3, #32]
    dsc->base.dsc_size = sizeof(lv_draw_fill_dsc_t);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2230      	movs	r2, #48	@ 0x30
 800788c:	615a      	str	r2, [r3, #20]
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <lv_draw_border_dsc_init>:
{
    return task->type == LV_DRAW_TASK_TYPE_FILL ? (lv_draw_fill_dsc_t *)task->draw_dsc : NULL;
}

void lv_draw_border_dsc_init(lv_draw_border_dsc_t * dsc)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
    lv_memzero(dsc, sizeof(*dsc));
 800789e:	212c      	movs	r1, #44	@ 0x2c
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ffd7 	bl	8007854 <lv_memzero>
    dsc->opa = LV_OPA_COVER;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	22ff      	movs	r2, #255	@ 0xff
 80078aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    dsc->side = LV_BORDER_SIDE_FULL;
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 80078b4:	210f      	movs	r1, #15
 80078b6:	f361 0304 	bfi	r3, r1, #0, #5
 80078ba:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
    dsc->base.dsc_size = sizeof(lv_draw_border_dsc_t);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	222c      	movs	r2, #44	@ 0x2c
 80078c2:	615a      	str	r2, [r3, #20]
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <lv_memzero>:
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	2100      	movs	r1, #0
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f015 fc3f 	bl	801d15e <lv_memset>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <lv_draw_buf_has_flag>:
 * @return LV_RESULT_OK: premultiply success
 */
lv_result_t lv_draw_buf_premultiply(lv_draw_buf_t * draw_buf);

static inline bool lv_draw_buf_has_flag(lv_draw_buf_t * draw_buf, lv_image_flags_t flag)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	807b      	strh	r3, [r7, #2]
    return draw_buf->header.flags & flag;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	885a      	ldrh	r2, [r3, #2]
 80078f8:	887b      	ldrh	r3, [r7, #2]
 80078fa:	4013      	ands	r3, r2
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bf14      	ite	ne
 8007902:	2301      	movne	r3, #1
 8007904:	2300      	moveq	r3, #0
 8007906:	b2db      	uxtb	r3, r3
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <_lv_image_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_image_decoder_init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
    _lv_ll_init(img_decoder_ll_p, sizeof(lv_image_decoder_t));
 8007918:	2118      	movs	r1, #24
 800791a:	4802      	ldr	r0, [pc, #8]	@ (8007924 <_lv_image_decoder_init+0x10>)
 800791c:	f014 f9d5 	bl	801bcca <_lv_ll_init>
        .compare_cb = (lv_cache_compare_cb_t)image_decoder_header_cache_compare_cb,
        .create_cb = NULL,
        .free_cb = (lv_cache_free_cb_t)image_decoder_header_cache_free_cb
    });
#endif
}
 8007920:	bf00      	nop
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000174 	.word	0x20000174

08007928 <lv_image_decoder_open>:

    return LV_RESULT_OK;
}

lv_result_t lv_image_decoder_open(lv_image_decoder_dsc_t * dsc, const void * src, const lv_image_decoder_args_t * args)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
    lv_memzero(dsc, sizeof(lv_image_decoder_dsc_t));
 8007934:	213c      	movs	r1, #60	@ 0x3c
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f7ff ffc8 	bl	80078cc <lv_memzero>

    if(src == NULL) return LV_RESULT_INVALID;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <lv_image_decoder_open+0x1e>
 8007942:	2300      	movs	r3, #0
 8007944:	e02f      	b.n	80079a6 <lv_image_decoder_open+0x7e>
    dsc->src = src;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	609a      	str	r2, [r3, #8]
    dsc->src_type = lv_image_src_get_type(src);
 800794c:	68b8      	ldr	r0, [r7, #8]
 800794e:	f7fe fe7e 	bl	800664e <lv_image_src_get_type>
 8007952:	4603      	mov	r3, r0
 8007954:	461a      	mov	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	731a      	strb	r2, [r3, #12]
        if(try_cache(dsc) == LV_RESULT_OK) return LV_RESULT_OK;
    }
#endif

    /*Find the decoder that can open the image source, and get the header info in the same time.*/
    dsc->decoder = image_decoder_get_info(src, &dsc->header);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3310      	adds	r3, #16
 800795e:	4619      	mov	r1, r3
 8007960:	68b8      	ldr	r0, [r7, #8]
 8007962:	f000 f93f 	bl	8007be4 <image_decoder_get_info>
 8007966:	4602      	mov	r2, r0
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]
    if(dsc->decoder == NULL) return LV_RESULT_INVALID;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <lv_image_decoder_open+0x50>
 8007974:	2300      	movs	r3, #0
 8007976:	e016      	b.n	80079a6 <lv_image_decoder_open+0x7e>

    /*Make a copy of args*/
    dsc->args = args ? *args : (lv_image_decoder_args_t) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <lv_image_decoder_open+0x62>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	3304      	adds	r3, #4
 8007984:	6810      	ldr	r0, [r2, #0]
 8007986:	6018      	str	r0, [r3, #0]
 8007988:	e002      	b.n	8007990 <lv_image_decoder_open+0x68>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	605a      	str	r2, [r3, #4]
    /*
     * We assume that if a decoder can get the info, it can open the image.
     * If decoder open failed, free the source and return error.
     * If decoder open succeed, add the image to cache if enabled.
     * */
    lv_result_t res = dsc->decoder->open_cb(dsc->decoder, dsc);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	75fb      	strb	r3, [r7, #23]

    return res;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <lv_image_decoder_get_area>:

lv_result_t lv_image_decoder_get_area(lv_image_decoder_dsc_t * dsc, const lv_area_t * full_area,
                                      lv_area_t * decoded_area)
{
 80079ae:	b590      	push	{r4, r7, lr}
 80079b0:	b087      	sub	sp, #28
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
    lv_result_t res = LV_RESULT_INVALID;
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->get_area_cb) res = dsc->decoder->get_area_cb(dsc->decoder, dsc, full_area, decoded_area);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <lv_image_decoder_get_area+0x30>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689c      	ldr	r4, [r3, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	47a0      	blx	r4
 80079da:	4603      	mov	r3, r0
 80079dc:	75fb      	strb	r3, [r7, #23]

    return res;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	371c      	adds	r7, #28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd90      	pop	{r4, r7, pc}

080079e8 <lv_image_decoder_close>:

void lv_image_decoder_close(lv_image_decoder_dsc_t * dsc)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00c      	beq.n	8007a12 <lv_image_decoder_close+0x2a>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d007      	beq.n	8007a12 <lv_image_decoder_close+0x2a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4798      	blx	r3
    }
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <lv_image_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_image_decoder_t * lv_image_decoder_create(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
    lv_image_decoder_t * decoder;
    decoder = _lv_ll_ins_head(img_decoder_ll_p);
 8007a22:	480b      	ldr	r0, [pc, #44]	@ (8007a50 <lv_image_decoder_create+0x34>)
 8007a24:	f014 f96a 	bl	801bcfc <_lv_ll_ins_head>
 8007a28:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <lv_image_decoder_create+0x18>
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <lv_image_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <lv_image_decoder_create+0x22>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e004      	b.n	8007a48 <lv_image_decoder_create+0x2c>

    lv_memzero(decoder, sizeof(lv_image_decoder_t));
 8007a3e:	2118      	movs	r1, #24
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ff43 	bl	80078cc <lv_memzero>

    return decoder;
 8007a46:	687b      	ldr	r3, [r7, #4]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000174 	.word	0x20000174

08007a54 <lv_image_decoder_set_info_cb>:
    else
        return _lv_ll_get_next(img_decoder_ll_p, decoder);
}

void lv_image_decoder_set_info_cb(lv_image_decoder_t * decoder, lv_image_decoder_info_f_t info_cb)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <lv_image_decoder_set_open_cb>:

void lv_image_decoder_set_open_cb(lv_image_decoder_t * decoder, lv_image_decoder_open_f_t open_cb)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <lv_image_decoder_set_get_area_cb>:

void lv_image_decoder_set_get_area_cb(lv_image_decoder_t * decoder, lv_image_decoder_get_area_cb_t get_area_cb)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
    decoder->get_area_cb = get_area_cb;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	609a      	str	r2, [r3, #8]
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <lv_image_decoder_set_close_cb>:

void lv_image_decoder_set_close_cb(lv_image_decoder_t * decoder, lv_image_decoder_close_f_t close_cb)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	60da      	str	r2, [r3, #12]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <lv_image_decoder_set_cache_free_cb>:

void lv_image_decoder_set_cache_free_cb(lv_image_decoder_t * decoder, lv_cache_free_cb_t cache_free_cb)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
    decoder->cache_free_cb = cache_free_cb;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	611a      	str	r2, [r3, #16]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <lv_image_decoder_post_process>:
    return cache_entry;
}
#endif

lv_draw_buf_t * lv_image_decoder_post_process(lv_image_decoder_dsc_t * dsc, lv_draw_buf_t * decoded)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
    if(decoded == NULL) return NULL; /*No need to adjust*/
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <lv_image_decoder_post_process+0x14>
 8007af0:	2300      	movs	r3, #0
 8007af2:	e072      	b.n	8007bda <lv_image_decoder_post_process+0xfa>

    lv_image_decoder_args_t * args = &dsc->args;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	617b      	str	r3, [r7, #20]
    if(args->stride_align && decoded->header.cf != LV_COLOR_FORMAT_RGB565A8) {
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d035      	beq.n	8007b6e <lv_image_decoder_post_process+0x8e>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2b14      	cmp	r3, #20
 8007b08:	d031      	beq.n	8007b6e <lv_image_decoder_post_process+0x8e>
        uint32_t stride_expect = lv_draw_buf_width_to_stride(decoded->header.w, decoded->header.cf);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	889b      	ldrh	r3, [r3, #4]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7fe f86e 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 8007b1c:	6138      	str	r0, [r7, #16]
        if(decoded->header.stride != stride_expect) {
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	891b      	ldrh	r3, [r3, #8]
 8007b22:	461a      	mov	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d021      	beq.n	8007b6e <lv_image_decoder_post_process+0x8e>
            LV_LOG_TRACE("Stride mismatch");
            lv_result_t res = lv_draw_buf_adjust_stride(decoded, stride_expect);
 8007b2a:	6939      	ldr	r1, [r7, #16]
 8007b2c:	6838      	ldr	r0, [r7, #0]
 8007b2e:	f7fe faa5 	bl	800607c <lv_draw_buf_adjust_stride>
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
            if(res != LV_RESULT_OK) {
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d018      	beq.n	8007b6e <lv_image_decoder_post_process+0x8e>
                lv_draw_buf_t * aligned = lv_draw_buf_create(decoded->header.w, decoded->header.h, decoded->header.cf, stride_expect);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	889b      	ldrh	r3, [r3, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	4619      	mov	r1, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	785a      	ldrb	r2, [r3, #1]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f7fe f975 	bl	8005e3c <lv_draw_buf_create>
 8007b52:	60b8      	str	r0, [r7, #8]
                if(aligned == NULL) {
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <lv_image_decoder_post_process+0x7e>
                    LV_LOG_ERROR("No memory for Stride adjust.");
                    return NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e03d      	b.n	8007bda <lv_image_decoder_post_process+0xfa>
                }

                lv_draw_buf_copy(aligned, NULL, decoded, NULL);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	2100      	movs	r1, #0
 8007b64:	68b8      	ldr	r0, [r7, #8]
 8007b66:	f7fe f8e6 	bl	8005d36 <lv_draw_buf_copy>
                decoded = aligned;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /*Premultiply alpha channel*/
    if(args->premultiply
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d030      	beq.n	8007bd8 <lv_image_decoder_post_process+0xf8>
       && !LV_COLOR_FORMAT_IS_ALPHA_ONLY(decoded->header.cf)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	2b0a      	cmp	r3, #10
 8007b7c:	d903      	bls.n	8007b86 <lv_image_decoder_post_process+0xa6>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	2b0e      	cmp	r3, #14
 8007b84:	d928      	bls.n	8007bd8 <lv_image_decoder_post_process+0xf8>
       && lv_color_format_has_alpha(decoded->header.cf)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f013 fbd0 	bl	801b330 <lv_color_format_has_alpha>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d020      	beq.n	8007bd8 <lv_image_decoder_post_process+0xf8>
       && !lv_draw_buf_has_flag(decoded, LV_IMAGE_FLAGS_PREMULTIPLIED) /*Hasn't done yet*/
 8007b96:	2101      	movs	r1, #1
 8007b98:	6838      	ldr	r0, [r7, #0]
 8007b9a:	f7ff fea5 	bl	80078e8 <lv_draw_buf_has_flag>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f083 0301 	eor.w	r3, r3, #1
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d016      	beq.n	8007bd8 <lv_image_decoder_post_process+0xf8>
      ) {
        LV_LOG_TRACE("Alpha premultiply.");
        if(lv_draw_buf_has_flag(decoded, LV_IMAGE_FLAGS_MODIFIABLE)) {
 8007baa:	2120      	movs	r1, #32
 8007bac:	6838      	ldr	r0, [r7, #0]
 8007bae:	f7ff fe9b 	bl	80078e8 <lv_draw_buf_has_flag>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <lv_image_decoder_post_process+0xe0>
            /*Do it directly*/
            lv_draw_buf_premultiply(decoded);
 8007bb8:	6838      	ldr	r0, [r7, #0]
 8007bba:	f7fe fb37 	bl	800622c <lv_draw_buf_premultiply>
 8007bbe:	e00b      	b.n	8007bd8 <lv_image_decoder_post_process+0xf8>
        }
        else {
            decoded = lv_draw_buf_dup(decoded);
 8007bc0:	6838      	ldr	r0, [r7, #0]
 8007bc2:	f7fe f997 	bl	8005ef4 <lv_draw_buf_dup>
 8007bc6:	6038      	str	r0, [r7, #0]
            if(decoded == NULL) {
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <lv_image_decoder_post_process+0xf2>
                LV_LOG_ERROR("No memory for premulitplying.");
                return NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e003      	b.n	8007bda <lv_image_decoder_post_process+0xfa>
            }

            lv_draw_buf_premultiply(decoded);
 8007bd2:	6838      	ldr	r0, [r7, #0]
 8007bd4:	f7fe fb2a 	bl	800622c <lv_draw_buf_premultiply>
        }
    }

    return decoded;
 8007bd8:	683b      	ldr	r3, [r7, #0]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <image_decoder_get_info>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_image_decoder_t * image_decoder_get_info(const void * src, lv_image_header_t * header)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
    lv_memzero(header, sizeof(lv_image_header_t));
 8007bee:	210c      	movs	r1, #12
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f7ff fe6b 	bl	80078cc <lv_memzero>

    if(src == NULL) return NULL;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <image_decoder_get_info+0x1c>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e03e      	b.n	8007c7e <image_decoder_get_info+0x9a>

    lv_image_src_t src_type = lv_image_src_get_type(src);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7fe fd24 	bl	800664e <lv_image_src_get_type>
 8007c06:	4603      	mov	r3, r0
 8007c08:	74fb      	strb	r3, [r7, #19]
    if(src_type == LV_IMAGE_SRC_VARIABLE) {
 8007c0a:	7cfb      	ldrb	r3, [r7, #19]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <image_decoder_get_info+0x3c>
        const lv_image_dsc_t * img_dsc = src;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60fb      	str	r3, [r7, #12]
        if(img_dsc->data == NULL) return NULL;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <image_decoder_get_info+0x3c>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e02e      	b.n	8007c7e <image_decoder_get_info+0x9a>
            return decoder;
        }
    }
#endif

    _LV_LL_READ(img_decoder_ll_p, decoder) {
 8007c20:	4819      	ldr	r0, [pc, #100]	@ (8007c88 <image_decoder_get_info+0xa4>)
 8007c22:	f014 f930 	bl	801be86 <_lv_ll_get_head>
 8007c26:	6178      	str	r0, [r7, #20]
 8007c28:	e023      	b.n	8007c72 <image_decoder_get_info+0x8e>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb && decoder->open_cb) {
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01a      	beq.n	8007c68 <image_decoder_get_info+0x84>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d016      	beq.n	8007c68 <image_decoder_get_info+0x84>
            lv_result_t res = decoder->info_cb(decoder, src, header);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	6978      	ldr	r0, [r7, #20]
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	72fb      	strb	r3, [r7, #11]
            if(res == LV_RESULT_OK) {
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10b      	bne.n	8007c68 <image_decoder_get_info+0x84>
                if(header->stride == 0) {
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	891b      	ldrh	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d110      	bne.n	8007c7a <image_decoder_get_info+0x96>
                    LV_LOG_INFO("Image decoder didn't set stride. Calculate it from width.");
                    header->stride = img_width_to_stride(header);
 8007c58:	6838      	ldr	r0, [r7, #0]
 8007c5a:	f000 f817 	bl	8007c8c <img_width_to_stride>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	811a      	strh	r2, [r3, #8]
                }
                break;
 8007c66:	e008      	b.n	8007c7a <image_decoder_get_info+0x96>
    _LV_LL_READ(img_decoder_ll_p, decoder) {
 8007c68:	6979      	ldr	r1, [r7, #20]
 8007c6a:	4807      	ldr	r0, [pc, #28]	@ (8007c88 <image_decoder_get_info+0xa4>)
 8007c6c:	f014 f92d 	bl	801beca <_lv_ll_get_next>
 8007c70:	6178      	str	r0, [r7, #20]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1d8      	bne.n	8007c2a <image_decoder_get_info+0x46>
 8007c78:	e000      	b.n	8007c7c <image_decoder_get_info+0x98>
                break;
 8007c7a:	bf00      	nop

        lv_cache_release(img_header_cache_p, entry, NULL);
    }
#endif

    return decoder;
 8007c7c:	697b      	ldr	r3, [r7, #20]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000174 	.word	0x20000174

08007c8c <img_width_to_stride>:

static uint32_t img_width_to_stride(lv_image_header_t * header)
{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
    if(header->cf == LV_COLOR_FORMAT_RGB565A8) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	785b      	ldrb	r3, [r3, #1]
 8007c98:	2b14      	cmp	r3, #20
 8007c9a:	d103      	bne.n	8007ca4 <img_width_to_stride+0x18>
        return header->w * 2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	889b      	ldrh	r3, [r3, #4]
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	e00c      	b.n	8007cbe <img_width_to_stride+0x32>
    }
    else {
        return ((uint32_t)header->w * lv_color_format_get_bpp(header->cf) + 7) >> 3;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	889b      	ldrh	r3, [r3, #4]
 8007ca8:	461c      	mov	r4, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f013 fafe 	bl	801b2b0 <lv_color_format_get_bpp>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	fb04 f303 	mul.w	r3, r4, r3
 8007cba:	3307      	adds	r3, #7
 8007cbc:	08db      	lsrs	r3, r3, #3
    }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd90      	pop	{r4, r7, pc}

08007cc6 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	3301      	adds	r3, #1
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	3301      	adds	r3, #1
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <lv_color_format_get_size>:
 * Get the pixel size of a color format in bytes
 * @param src_cf    a color format (`LV_COLOR_FORMAT_...`)
 * @return          the pixel size in bytes
 */
static inline uint8_t lv_color_format_get_size(lv_color_format_t cf)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
    return (lv_color_format_get_bpp(cf) + 7) >> 3;
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f013 facc 	bl	801b2b0 <lv_color_format_get_bpp>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	3307      	adds	r3, #7
 8007d1c:	10db      	asrs	r3, r3, #3
 8007d1e:	b2db      	uxtb	r3, r3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_unit_t * draw_unit, const lv_draw_sw_blend_dsc_t * blend_dsc)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b09a      	sub	sp, #104	@ 0x68
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(blend_dsc->opa <= LV_OPA_MIN) return;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	7d1b      	ldrb	r3, [r3, #20]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	f240 8192 	bls.w	8008060 <lv_draw_sw_blend+0x338>
    if(blend_dsc->mask_buf && blend_dsc->mask_res == LV_DRAW_SW_MASK_RES_TRANSP) return;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <lv_draw_sw_blend+0x26>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	7f1b      	ldrb	r3, [r3, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 818b 	beq.w	8008064 <lv_draw_sw_blend+0x33c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, blend_dsc->blend_area, draw_unit->clip_area)) return;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6819      	ldr	r1, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f012 fce2 	bl	801a724 <_lv_area_intersect>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f083 0301 	eor.w	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 817d 	bne.w	8008068 <lv_draw_sw_blend+0x340>

    LV_PROFILER_BEGIN;
    lv_layer_t * layer = draw_unit->target_layer;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	667b      	str	r3, [r7, #100]	@ 0x64
    uint32_t layer_stride_byte = lv_draw_buf_width_to_stride(lv_area_get_width(&layer->buf_area), layer->color_format);
 8007d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff ffa4 	bl	8007cc6 <lv_area_get_width>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461a      	mov	r2, r3
 8007d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d84:	7d1b      	ldrb	r3, [r3, #20]
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fd ff35 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 8007d8e:	6638      	str	r0, [r7, #96]	@ 0x60

    if(blend_dsc->src_buf == NULL) {
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 8089 	bne.w	8007eac <lv_draw_sw_blend+0x184>
        _lv_draw_sw_blend_fill_dsc_t fill_dsc;
        fill_dsc.dest_w = lv_area_get_width(&blend_area);
 8007d9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff ff91 	bl	8007cc6 <lv_area_get_width>
 8007da4:	4603      	mov	r3, r0
 8007da6:	633b      	str	r3, [r7, #48]	@ 0x30
        fill_dsc.dest_h = lv_area_get_height(&blend_area);
 8007da8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff9a 	bl	8007ce6 <lv_area_get_height>
 8007db2:	4603      	mov	r3, r0
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
        fill_dsc.dest_stride = layer_stride_byte;
 8007db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007db8:	63bb      	str	r3, [r7, #56]	@ 0x38
        fill_dsc.opa = blend_dsc->opa;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	7d1b      	ldrb	r3, [r3, #20]
 8007dbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        fill_dsc.color = blend_dsc->color;
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007dc8:	3215      	adds	r2, #21
 8007dca:	8811      	ldrh	r1, [r2, #0]
 8007dcc:	7892      	ldrb	r2, [r2, #2]
 8007dce:	8019      	strh	r1, [r3, #0]
 8007dd0:	709a      	strb	r2, [r3, #2]

        if(blend_dsc->mask_buf == NULL) fill_dsc.mask_buf = NULL;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <lv_draw_sw_blend+0xb8>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dde:	e009      	b.n	8007df4 <lv_draw_sw_blend+0xcc>
        else if(blend_dsc->mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) fill_dsc.mask_buf = NULL;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	7f1b      	ldrb	r3, [r3, #28]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d102      	bne.n	8007dee <lv_draw_sw_blend+0xc6>
 8007de8:	2300      	movs	r3, #0
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dec:	e002      	b.n	8007df4 <lv_draw_sw_blend+0xcc>
        else fill_dsc.mask_buf = blend_dsc->mask_buf;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        fill_dsc.dest_buf = lv_draw_layer_go_to_xy(layer, blend_area.x1 - layer->buf_area.x1,
 8007df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	1ad1      	subs	r1, r2, r3
                                                   blend_area.y1 - layer->buf_area.y1);
 8007dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e00:	689b      	ldr	r3, [r3, #8]
        fill_dsc.dest_buf = lv_draw_layer_go_to_xy(layer, blend_area.x1 - layer->buf_area.x1,
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007e08:	f7fd fde4 	bl	80059d4 <lv_draw_layer_go_to_xy>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if(fill_dsc.mask_buf) {
 8007e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01e      	beq.n	8007e54 <lv_draw_sw_blend+0x12c>
            fill_dsc.mask_stride = blend_dsc->mask_stride == 0  ? lv_area_get_width(blend_dsc->mask_area) : blend_dsc->mask_stride;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d106      	bne.n	8007e2c <lv_draw_sw_blend+0x104>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff ff4f 	bl	8007cc6 <lv_area_get_width>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	e001      	b.n	8007e30 <lv_draw_sw_blend+0x108>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	643b      	str	r3, [r7, #64]	@ 0x40
            fill_dsc.mask_buf += fill_dsc.mask_stride * (blend_area.y1 - blend_dsc->mask_area->y1) +
 8007e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6a09      	ldr	r1, [r1, #32]
 8007e3c:	6849      	ldr	r1, [r1, #4]
 8007e3e:	1a41      	subs	r1, r0, r1
 8007e40:	fb02 f101 	mul.w	r1, r2, r1
                                 (blend_area.x1 - blend_dsc->mask_area->x1);
 8007e44:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	6a12      	ldr	r2, [r2, #32]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	1a82      	subs	r2, r0, r2
            fill_dsc.mask_buf += fill_dsc.mask_stride * (blend_area.y1 - blend_dsc->mask_area->y1) +
 8007e4e:	440a      	add	r2, r1
 8007e50:	4413      	add	r3, r2
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        switch(layer->color_format) {
 8007e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
 8007e58:	3b0f      	subs	r3, #15
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	f200 8106 	bhi.w	800806c <lv_draw_sw_blend+0x344>
 8007e60:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <lv_draw_sw_blend+0x140>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e91 	.word	0x08007e91
 8007e6c:	08007e85 	.word	0x08007e85
 8007e70:	08007e9f 	.word	0x08007e9f
 8007e74:	08007e79 	.word	0x08007e79
            case LV_COLOR_FORMAT_RGB565:
                lv_draw_sw_blend_color_to_rgb565(&fill_dsc);
 8007e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fb2d 	bl	80094dc <lv_draw_sw_blend_color_to_rgb565>
                break;
 8007e82:	e0fa      	b.n	800807a <lv_draw_sw_blend+0x352>
            case LV_COLOR_FORMAT_ARGB8888:
                lv_draw_sw_blend_color_to_argb8888(&fill_dsc);
 8007e84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 f96d 	bl	8008168 <lv_draw_sw_blend_color_to_argb8888>
                break;
 8007e8e:	e0f4      	b.n	800807a <lv_draw_sw_blend+0x352>
            case LV_COLOR_FORMAT_RGB888:
                lv_draw_sw_blend_color_to_rgb888(&fill_dsc, 3);
 8007e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e94:	2103      	movs	r1, #3
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 fe2a 	bl	800aaf0 <lv_draw_sw_blend_color_to_rgb888>
                break;
 8007e9c:	e0ed      	b.n	800807a <lv_draw_sw_blend+0x352>
            case LV_COLOR_FORMAT_XRGB8888:
                lv_draw_sw_blend_color_to_rgb888(&fill_dsc, 4);
 8007e9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ea2:	2104      	movs	r1, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f002 fe23 	bl	800aaf0 <lv_draw_sw_blend_color_to_rgb888>
                break;
 8007eaa:	e0e6      	b.n	800807a <lv_draw_sw_blend+0x352>
            default:
                break;
        }
    }
    else {
        if(!_lv_area_intersect(&blend_area, &blend_area, blend_dsc->src_area)) {
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	691a      	ldr	r2, [r3, #16]
 8007eb0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8007eb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f012 fc33 	bl	801a724 <_lv_area_intersect>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f083 0301 	eor.w	r3, r3, #1
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 80d2 	bne.w	8008070 <lv_draw_sw_blend+0x348>
            LV_PROFILER_END;
            return;
        }

        if(blend_dsc->mask_area && !_lv_area_intersect(&blend_area, &blend_area, blend_dsc->mask_area)) {
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00f      	beq.n	8007ef4 <lv_draw_sw_blend+0x1cc>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6a1a      	ldr	r2, [r3, #32]
 8007ed8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8007edc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f012 fc1f 	bl	801a724 <_lv_area_intersect>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f083 0301 	eor.w	r3, r3, #1
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 80c0 	bne.w	8008074 <lv_draw_sw_blend+0x34c>
            LV_PROFILER_END;
            return;
        }

        _lv_draw_sw_blend_image_dsc_t image_dsc;
        image_dsc.dest_w = lv_area_get_width(&blend_area);
 8007ef4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fee4 	bl	8007cc6 <lv_area_get_width>
 8007efe:	4603      	mov	r3, r0
 8007f00:	60fb      	str	r3, [r7, #12]
        image_dsc.dest_h = lv_area_get_height(&blend_area);
 8007f02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff feed 	bl	8007ce6 <lv_area_get_height>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	613b      	str	r3, [r7, #16]
        image_dsc.dest_stride = layer_stride_byte;
 8007f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f12:	617b      	str	r3, [r7, #20]

        image_dsc.opa = blend_dsc->opa;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        image_dsc.blend_mode = blend_dsc->blend_mode;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        image_dsc.src_stride = blend_dsc->src_stride;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        image_dsc.src_color_format = blend_dsc->src_color_format;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	7b1b      	ldrb	r3, [r3, #12]
 8007f30:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

        const uint8_t * src_buf = blend_dsc->src_buf;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
        uint32_t src_px_size = lv_color_format_get_size(blend_dsc->src_color_format);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	7b1b      	ldrb	r3, [r3, #12]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fee1 	bl	8007d06 <lv_color_format_get_size>
 8007f44:	4603      	mov	r3, r0
 8007f46:	65bb      	str	r3, [r7, #88]	@ 0x58
        src_buf += image_dsc.src_stride * (blend_area.y1 - blend_dsc->src_area->y1);
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	6912      	ldr	r2, [r2, #16]
 8007f50:	6852      	ldr	r2, [r2, #4]
 8007f52:	1a8a      	subs	r2, r1, r2
 8007f54:	fb02 f303 	mul.w	r3, r2, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f5c:	4413      	add	r3, r2
 8007f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        src_buf += (blend_area.x1 - blend_dsc->src_area->x1) * src_px_size;
 8007f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f6e:	fb02 f303 	mul.w	r3, r2, r3
 8007f72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f74:	4413      	add	r3, r2
 8007f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
        image_dsc.src_buf = src_buf;
 8007f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f7a:	623b      	str	r3, [r7, #32]

        if(blend_dsc->mask_buf == NULL) image_dsc.mask_buf = NULL;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <lv_draw_sw_blend+0x262>
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e009      	b.n	8007f9e <lv_draw_sw_blend+0x276>
        else if(blend_dsc->mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) image_dsc.mask_buf = NULL;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	7f1b      	ldrb	r3, [r3, #28]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d102      	bne.n	8007f98 <lv_draw_sw_blend+0x270>
 8007f92:	2300      	movs	r3, #0
 8007f94:	61bb      	str	r3, [r7, #24]
 8007f96:	e002      	b.n	8007f9e <lv_draw_sw_blend+0x276>
        else image_dsc.mask_buf = blend_dsc->mask_buf;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	61bb      	str	r3, [r7, #24]

        if(image_dsc.mask_buf) {
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d021      	beq.n	8007fe8 <lv_draw_sw_blend+0x2c0>
            image_dsc.mask_buf = blend_dsc->mask_buf;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	61bb      	str	r3, [r7, #24]
            image_dsc.mask_stride = blend_dsc->mask_stride ? blend_dsc->mask_stride : lv_area_get_width(blend_dsc->mask_area);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <lv_draw_sw_blend+0x290>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	e005      	b.n	8007fc4 <lv_draw_sw_blend+0x29c>
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fe82 	bl	8007cc6 <lv_area_get_width>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	61fb      	str	r3, [r7, #28]
            image_dsc.mask_buf += image_dsc.mask_stride * (blend_area.y1 - blend_dsc->mask_area->y1) +
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6a09      	ldr	r1, [r1, #32]
 8007fd0:	6849      	ldr	r1, [r1, #4]
 8007fd2:	1a41      	subs	r1, r0, r1
 8007fd4:	fb02 f101 	mul.w	r1, r2, r1
                                  (blend_area.x1 - blend_dsc->mask_area->x1);
 8007fd8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	6a12      	ldr	r2, [r2, #32]
 8007fde:	6812      	ldr	r2, [r2, #0]
 8007fe0:	1a82      	subs	r2, r0, r2
            image_dsc.mask_buf += image_dsc.mask_stride * (blend_area.y1 - blend_dsc->mask_area->y1) +
 8007fe2:	440a      	add	r2, r1
 8007fe4:	4413      	add	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
        }

        image_dsc.dest_buf = lv_draw_layer_go_to_xy(layer, blend_area.x1 - layer->buf_area.x1,
 8007fe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	1ad1      	subs	r1, r2, r3
                                                    blend_area.y1 - layer->buf_area.y1);
 8007ff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff4:	689b      	ldr	r3, [r3, #8]
        image_dsc.dest_buf = lv_draw_layer_go_to_xy(layer, blend_area.x1 - layer->buf_area.x1,
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007ffc:	f7fd fcea 	bl	80059d4 <lv_draw_layer_go_to_xy>
 8008000:	4603      	mov	r3, r0
 8008002:	60bb      	str	r3, [r7, #8]

        switch(layer->color_format) {
 8008004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008006:	7d1b      	ldrb	r3, [r3, #20]
 8008008:	3b0f      	subs	r3, #15
 800800a:	2b05      	cmp	r3, #5
 800800c:	d834      	bhi.n	8008078 <lv_draw_sw_blend+0x350>
 800800e:	a201      	add	r2, pc, #4	@ (adr r2, 8008014 <lv_draw_sw_blend+0x2ec>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008045 	.word	0x08008045
 8008018:	08008039 	.word	0x08008039
 800801c:	08008053 	.word	0x08008053
 8008020:	0800802d 	.word	0x0800802d
 8008024:	08008079 	.word	0x08008079
 8008028:	0800802d 	.word	0x0800802d
            case LV_COLOR_FORMAT_RGB565:
            case LV_COLOR_FORMAT_RGB565A8:
                lv_draw_sw_blend_image_to_rgb565(&image_dsc);
 800802c:	f107 0308 	add.w	r3, r7, #8
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fc8b 	bl	800994c <lv_draw_sw_blend_image_to_rgb565>
                break;
 8008036:	e020      	b.n	800807a <lv_draw_sw_blend+0x352>
            case LV_COLOR_FORMAT_ARGB8888:
                lv_draw_sw_blend_image_to_argb8888(&image_dsc);
 8008038:	f107 0308 	add.w	r3, r7, #8
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fa4d 	bl	80084dc <lv_draw_sw_blend_image_to_argb8888>
                break;
 8008042:	e01a      	b.n	800807a <lv_draw_sw_blend+0x352>
            case LV_COLOR_FORMAT_RGB888:
                lv_draw_sw_blend_image_to_rgb888(&image_dsc, 3);
 8008044:	f107 0308 	add.w	r3, r7, #8
 8008048:	2103      	movs	r1, #3
 800804a:	4618      	mov	r0, r3
 800804c:	f002 ff24 	bl	800ae98 <lv_draw_sw_blend_image_to_rgb888>
                break;
 8008050:	e013      	b.n	800807a <lv_draw_sw_blend+0x352>
            case LV_COLOR_FORMAT_XRGB8888:
                lv_draw_sw_blend_image_to_rgb888(&image_dsc, 4);
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	2104      	movs	r1, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f002 ff1d 	bl	800ae98 <lv_draw_sw_blend_image_to_rgb888>
                break;
 800805e:	e00c      	b.n	800807a <lv_draw_sw_blend+0x352>
    if(blend_dsc->opa <= LV_OPA_MIN) return;
 8008060:	bf00      	nop
 8008062:	e00a      	b.n	800807a <lv_draw_sw_blend+0x352>
    if(blend_dsc->mask_buf && blend_dsc->mask_res == LV_DRAW_SW_MASK_RES_TRANSP) return;
 8008064:	bf00      	nop
 8008066:	e008      	b.n	800807a <lv_draw_sw_blend+0x352>
    if(!_lv_area_intersect(&blend_area, blend_dsc->blend_area, draw_unit->clip_area)) return;
 8008068:	bf00      	nop
 800806a:	e006      	b.n	800807a <lv_draw_sw_blend+0x352>
                break;
 800806c:	bf00      	nop
 800806e:	e004      	b.n	800807a <lv_draw_sw_blend+0x352>
            return;
 8008070:	bf00      	nop
 8008072:	e002      	b.n	800807a <lv_draw_sw_blend+0x352>
            return;
 8008074:	bf00      	nop
 8008076:	e000      	b.n	800807a <lv_draw_sw_blend+0x352>
            default:
                break;
 8008078:	bf00      	nop
        }
    }
    LV_PROFILER_END;
}
 800807a:	3768      	adds	r7, #104	@ 0x68
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <lv_color32_eq>:
 * @param c1    the first color
 * @param c2    the second color
 * @return      true: equal
 */
static inline bool lv_color32_eq(lv_color32_t c1, lv_color32_t c2)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
    return *((uint32_t *)&c1) == *((uint32_t *)&c2);
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	463b      	mov	r3, r7
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	bf0c      	ite	eq
 8008096:	2301      	moveq	r3, #1
 8008098:	2300      	movne	r3, #0
 800809a:	b2db      	uxtb	r3, r3
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <lv_color_mix32>:
 * @return
 * @note Use bg.alpha in the return value
 * @note Use fg.alpha as mix ratio
 */
static inline lv_color32_t lv_color_mix32(lv_color32_t fg, lv_color32_t bg)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
    if(fg.alpha >= LV_OPA_MAX) {
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2bfc      	cmp	r3, #252	@ 0xfc
 80080b6:	d904      	bls.n	80080c2 <lv_color_mix32+0x1a>
        fg.alpha = bg.alpha;
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	71fb      	strb	r3, [r7, #7]
        return fg;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e031      	b.n	8008126 <lv_color_mix32+0x7e>
    }
    if(fg.alpha <= LV_OPA_MIN) {
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d802      	bhi.n	80080ce <lv_color_mix32+0x26>
        return bg;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e02b      	b.n	8008126 <lv_color_mix32+0x7e>
    }
    bg.red = (uint32_t)((uint32_t)fg.red * fg.alpha + (uint32_t)bg.red * (255 - fg.alpha)) >> 8;
 80080ce:	79bb      	ldrb	r3, [r7, #6]
 80080d0:	79fa      	ldrb	r2, [r7, #7]
 80080d2:	fb03 f202 	mul.w	r2, r3, r2
 80080d6:	78bb      	ldrb	r3, [r7, #2]
 80080d8:	79f9      	ldrb	r1, [r7, #7]
 80080da:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	0a1b      	lsrs	r3, r3, #8
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	70bb      	strb	r3, [r7, #2]
    bg.green = (uint32_t)((uint32_t)fg.green * fg.alpha + (uint32_t)bg.green * (255 - fg.alpha)) >> 8;
 80080ea:	797b      	ldrb	r3, [r7, #5]
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	fb03 f202 	mul.w	r2, r3, r2
 80080f2:	787b      	ldrb	r3, [r7, #1]
 80080f4:	79f9      	ldrb	r1, [r7, #7]
 80080f6:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80080fa:	fb01 f303 	mul.w	r3, r1, r3
 80080fe:	4413      	add	r3, r2
 8008100:	0a1b      	lsrs	r3, r3, #8
 8008102:	b2db      	uxtb	r3, r3
 8008104:	707b      	strb	r3, [r7, #1]
    bg.blue = (uint32_t)((uint32_t)fg.blue * fg.alpha + (uint32_t)bg.blue * (255 - fg.alpha)) >> 8;
 8008106:	793b      	ldrb	r3, [r7, #4]
 8008108:	79fa      	ldrb	r2, [r7, #7]
 800810a:	fb03 f202 	mul.w	r2, r3, r2
 800810e:	783b      	ldrb	r3, [r7, #0]
 8008110:	79f9      	ldrb	r1, [r7, #7]
 8008112:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008116:	fb01 f303 	mul.w	r3, r1, r3
 800811a:	4413      	add	r3, r2
 800811c:	0a1b      	lsrs	r3, r3, #8
 800811e:	b2db      	uxtb	r3, r3
 8008120:	703b      	strb	r3, [r7, #0]
    return bg;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	2300      	movs	r3, #0
 8008128:	7b3a      	ldrb	r2, [r7, #12]
 800812a:	f362 0307 	bfi	r3, r2, #0, #8
 800812e:	7b7a      	ldrb	r2, [r7, #13]
 8008130:	f362 230f 	bfi	r3, r2, #8, #8
 8008134:	7bba      	ldrb	r2, [r7, #14]
 8008136:	f362 4317 	bfi	r3, r2, #16, #8
 800813a:	7bfa      	ldrb	r2, [r7, #15]
 800813c:	f362 631f 	bfi	r3, r2, #24, #8
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	2100      	movs	r1, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f014 ffff 	bl	801d15e <lv_memset>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <lv_draw_sw_blend_color_to_argb8888>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_blend_color_to_argb8888(_lv_draw_sw_blend_fill_dsc_t * dsc)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b097      	sub	sp, #92	@ 0x5c
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
    int32_t w = dsc->dest_w;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t h = dsc->dest_h;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
    lv_opa_t opa = dsc->opa;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7edb      	ldrb	r3, [r3, #27]
 8008180:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    const lv_opa_t * mask = dsc->mask_buf;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	657b      	str	r3, [r7, #84]	@ 0x54
    int32_t mask_stride = dsc->mask_stride;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t dest_stride = dsc->dest_stride;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	62bb      	str	r3, [r7, #40]	@ 0x28

    lv_color_mix_alpha_cache_t cache;
    lv_color_mix_with_alpha_cache_init(&cache);
 8008196:	f107 0314 	add.w	r3, r7, #20
 800819a:	4618      	mov	r0, r3
 800819c:	f001 f8ad 	bl	80092fa <lv_color_mix_with_alpha_cache_init>
    LV_UNUSED(mask);
    LV_UNUSED(mask_stride);
    LV_UNUSED(dest_stride);

    /*Simple fill*/
    if(mask == NULL && opa >= LV_OPA_MAX) {
 80081a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 80a7 	bne.w	80082f6 <lv_draw_sw_blend_color_to_argb8888+0x18e>
 80081a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081ac:	2bfc      	cmp	r3, #252	@ 0xfc
 80081ae:	f240 80a2 	bls.w	80082f6 <lv_draw_sw_blend_color_to_argb8888+0x18e>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888(dsc)) {
            uint32_t color32 = lv_color_to_u32(dsc->color);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6998      	ldr	r0, [r3, #24]
 80081b6:	f013 f922 	bl	801b3fe <lv_color_to_u32>
 80081ba:	6278      	str	r0, [r7, #36]	@ 0x24
            uint32_t * dest_buf = dsc->dest_buf;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	64bb      	str	r3, [r7, #72]	@ 0x48
            for(y = 0; y < h; y++) {
 80081c2:	2300      	movs	r3, #0
 80081c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081c6:	e090      	b.n	80082ea <lv_draw_sw_blend_color_to_argb8888+0x182>
                for(x = 0; x < w - 16; x += 16) {
 80081c8:	2300      	movs	r3, #0
 80081ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80081cc:	e071      	b.n	80082b2 <lv_draw_sw_blend_color_to_argb8888+0x14a>
                    dest_buf[x + 0] = color32;
 80081ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d4:	4413      	add	r3, r2
 80081d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081d8:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 1] = color32;
 80081da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081dc:	3301      	adds	r3, #1
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081e2:	4413      	add	r3, r2
 80081e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e6:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 2] = color32;
 80081e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ea:	3302      	adds	r3, #2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081f0:	4413      	add	r3, r2
 80081f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f4:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 3] = color32;
 80081f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f8:	3303      	adds	r3, #3
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081fe:	4413      	add	r3, r2
 8008200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008202:	601a      	str	r2, [r3, #0]

                    dest_buf[x + 4] = color32;
 8008204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008206:	3304      	adds	r3, #4
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800820c:	4413      	add	r3, r2
 800820e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008210:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 5] = color32;
 8008212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008214:	3305      	adds	r3, #5
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800821a:	4413      	add	r3, r2
 800821c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800821e:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 6] = color32;
 8008220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008222:	3306      	adds	r3, #6
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008228:	4413      	add	r3, r2
 800822a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800822c:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 7] = color32;
 800822e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008230:	3307      	adds	r3, #7
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008236:	4413      	add	r3, r2
 8008238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823a:	601a      	str	r2, [r3, #0]

                    dest_buf[x + 8] = color32;
 800823c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800823e:	3308      	adds	r3, #8
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008244:	4413      	add	r3, r2
 8008246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008248:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 9] = color32;
 800824a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800824c:	3309      	adds	r3, #9
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008252:	4413      	add	r3, r2
 8008254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008256:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 10] = color32;
 8008258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800825a:	330a      	adds	r3, #10
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008260:	4413      	add	r3, r2
 8008262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008264:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 11] = color32;
 8008266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008268:	330b      	adds	r3, #11
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800826e:	4413      	add	r3, r2
 8008270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008272:	601a      	str	r2, [r3, #0]

                    dest_buf[x + 12] = color32;
 8008274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008276:	330c      	adds	r3, #12
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800827c:	4413      	add	r3, r2
 800827e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008280:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 13] = color32;
 8008282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008284:	330d      	adds	r3, #13
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800828a:	4413      	add	r3, r2
 800828c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828e:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 14] = color32;
 8008290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008292:	330e      	adds	r3, #14
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008298:	4413      	add	r3, r2
 800829a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829c:	601a      	str	r2, [r3, #0]
                    dest_buf[x + 15] = color32;
 800829e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082a0:	330f      	adds	r3, #15
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082a6:	4413      	add	r3, r2
 80082a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082aa:	601a      	str	r2, [r3, #0]
                for(x = 0; x < w - 16; x += 16) {
 80082ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ae:	3310      	adds	r3, #16
 80082b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	3b10      	subs	r3, #16
 80082b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082b8:	429a      	cmp	r2, r3
 80082ba:	db88      	blt.n	80081ce <lv_draw_sw_blend_color_to_argb8888+0x66>
                }
                for(; x < w; x ++) {
 80082bc:	e008      	b.n	80082d0 <lv_draw_sw_blend_color_to_argb8888+0x168>
                    dest_buf[x] = color32;
 80082be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082c4:	4413      	add	r3, r2
 80082c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c8:	601a      	str	r2, [r3, #0]
                for(; x < w; x ++) {
 80082ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082cc:	3301      	adds	r3, #1
 80082ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80082d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	429a      	cmp	r2, r3
 80082d6:	dbf2      	blt.n	80082be <lv_draw_sw_blend_color_to_argb8888+0x156>
                }

                dest_buf = drawbuf_next_row(dest_buf, dest_stride);
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	4619      	mov	r1, r3
 80082dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80082de:	f001 f8ad 	bl	800943c <drawbuf_next_row>
 80082e2:	64b8      	str	r0, [r7, #72]	@ 0x48
            for(y = 0; y < h; y++) {
 80082e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e6:	3301      	adds	r3, #1
 80082e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	429a      	cmp	r2, r3
 80082f0:	f6ff af6a 	blt.w	80081c8 <lv_draw_sw_blend_color_to_argb8888+0x60>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888(dsc)) {
 80082f4:	e0ed      	b.n	80084d2 <lv_draw_sw_blend_color_to_argb8888+0x36a>
            }
        }

    }
    /*Opacity only*/
    else if(mask == NULL && opa < LV_OPA_MAX) {
 80082f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d146      	bne.n	800838a <lv_draw_sw_blend_color_to_argb8888+0x222>
 80082fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008300:	2bfc      	cmp	r3, #252	@ 0xfc
 8008302:	d842      	bhi.n	800838a <lv_draw_sw_blend_color_to_argb8888+0x222>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888_WITH_OPA(dsc)) {
            lv_color32_t color_argb = lv_color_to_32(dsc->color, opa);
 8008304:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4611      	mov	r1, r2
 800830c:	6998      	ldr	r0, [r3, #24]
 800830e:	f013 f833 	bl	801b378 <lv_color_to_32>
 8008312:	4603      	mov	r3, r0
 8008314:	613b      	str	r3, [r7, #16]
            lv_color32_t * dest_buf = dsc->dest_buf;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	647b      	str	r3, [r7, #68]	@ 0x44

            for(y = 0; y < h; y++) {
 800831c:	2300      	movs	r3, #0
 800831e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008320:	e02e      	b.n	8008380 <lv_draw_sw_blend_color_to_argb8888+0x218>
                for(x = 0; x < w; x++) {
 8008322:	2300      	movs	r3, #0
 8008324:	653b      	str	r3, [r7, #80]	@ 0x50
 8008326:	e01e      	b.n	8008366 <lv_draw_sw_blend_color_to_argb8888+0x1fe>
                    dest_buf[x] = lv_color_32_32_mix(color_argb, dest_buf[x], &cache);
 8008328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800832e:	4413      	add	r3, r2
 8008330:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008332:	0092      	lsls	r2, r2, #2
 8008334:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008336:	188c      	adds	r4, r1, r2
 8008338:	f107 0214 	add.w	r2, r7, #20
 800833c:	6819      	ldr	r1, [r3, #0]
 800833e:	460b      	mov	r3, r1
 8008340:	4619      	mov	r1, r3
 8008342:	6938      	ldr	r0, [r7, #16]
 8008344:	f000 ff3b 	bl	80091be <lv_color_32_32_mix>
 8008348:	4603      	mov	r3, r0
 800834a:	461a      	mov	r2, r3
 800834c:	7022      	strb	r2, [r4, #0]
 800834e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008352:	7062      	strb	r2, [r4, #1]
 8008354:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008358:	70a2      	strb	r2, [r4, #2]
 800835a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800835e:	70e3      	strb	r3, [r4, #3]
                for(x = 0; x < w; x++) {
 8008360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008362:	3301      	adds	r3, #1
 8008364:	653b      	str	r3, [r7, #80]	@ 0x50
 8008366:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	429a      	cmp	r2, r3
 800836c:	dbdc      	blt.n	8008328 <lv_draw_sw_blend_color_to_argb8888+0x1c0>
                }
                dest_buf = drawbuf_next_row(dest_buf, dest_stride);
 800836e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008370:	4619      	mov	r1, r3
 8008372:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008374:	f001 f862 	bl	800943c <drawbuf_next_row>
 8008378:	6478      	str	r0, [r7, #68]	@ 0x44
            for(y = 0; y < h; y++) {
 800837a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800837c:	3301      	adds	r3, #1
 800837e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008380:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008384:	429a      	cmp	r2, r3
 8008386:	dbcc      	blt.n	8008322 <lv_draw_sw_blend_color_to_argb8888+0x1ba>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888_WITH_OPA(dsc)) {
 8008388:	e0a3      	b.n	80084d2 <lv_draw_sw_blend_color_to_argb8888+0x36a>
            }
        }

    }
    /*Masked with full opacity*/
    else if(mask && opa >= LV_OPA_MAX) {
 800838a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800838c:	2b00      	cmp	r3, #0
 800838e:	d04d      	beq.n	800842c <lv_draw_sw_blend_color_to_argb8888+0x2c4>
 8008390:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008394:	2bfc      	cmp	r3, #252	@ 0xfc
 8008396:	d949      	bls.n	800842c <lv_draw_sw_blend_color_to_argb8888+0x2c4>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888_WITH_MASK(dsc)) {
            lv_color32_t color_argb = lv_color_to_32(dsc->color, 0xff);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	21ff      	movs	r1, #255	@ 0xff
 800839c:	6998      	ldr	r0, [r3, #24]
 800839e:	f012 ffeb 	bl	801b378 <lv_color_to_32>
 80083a2:	4603      	mov	r3, r0
 80083a4:	60fb      	str	r3, [r7, #12]
            lv_color32_t * dest_buf = dsc->dest_buf;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	643b      	str	r3, [r7, #64]	@ 0x40
            for(y = 0; y < h; y++) {
 80083ac:	2300      	movs	r3, #0
 80083ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b0:	e037      	b.n	8008422 <lv_draw_sw_blend_color_to_argb8888+0x2ba>
                for(x = 0; x < w; x++) {
 80083b2:	2300      	movs	r3, #0
 80083b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80083b6:	e023      	b.n	8008400 <lv_draw_sw_blend_color_to_argb8888+0x298>
                    color_argb.alpha = mask[x];
 80083b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083bc:	4413      	add	r3, r2
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	73fb      	strb	r3, [r7, #15]
                    dest_buf[x] = lv_color_32_32_mix(color_argb, dest_buf[x], &cache);
 80083c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083c8:	4413      	add	r3, r2
 80083ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083d0:	188c      	adds	r4, r1, r2
 80083d2:	f107 0214 	add.w	r2, r7, #20
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	460b      	mov	r3, r1
 80083da:	4619      	mov	r1, r3
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 feee 	bl	80091be <lv_color_32_32_mix>
 80083e2:	4603      	mov	r3, r0
 80083e4:	461a      	mov	r2, r3
 80083e6:	7022      	strb	r2, [r4, #0]
 80083e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083ec:	7062      	strb	r2, [r4, #1]
 80083ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80083f2:	70a2      	strb	r2, [r4, #2]
 80083f4:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80083f8:	70e3      	strb	r3, [r4, #3]
                for(x = 0; x < w; x++) {
 80083fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083fc:	3301      	adds	r3, #1
 80083fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008400:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008404:	429a      	cmp	r2, r3
 8008406:	dbd7      	blt.n	80083b8 <lv_draw_sw_blend_color_to_argb8888+0x250>
                }

                dest_buf = drawbuf_next_row(dest_buf, dest_stride);
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	4619      	mov	r1, r3
 800840c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800840e:	f001 f815 	bl	800943c <drawbuf_next_row>
 8008412:	6438      	str	r0, [r7, #64]	@ 0x40
                mask += mask_stride;
 8008414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008416:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008418:	4413      	add	r3, r2
 800841a:	657b      	str	r3, [r7, #84]	@ 0x54
            for(y = 0; y < h; y++) {
 800841c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800841e:	3301      	adds	r3, #1
 8008420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	429a      	cmp	r2, r3
 8008428:	dbc3      	blt.n	80083b2 <lv_draw_sw_blend_color_to_argb8888+0x24a>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888_WITH_MASK(dsc)) {
 800842a:	e052      	b.n	80084d2 <lv_draw_sw_blend_color_to_argb8888+0x36a>

    }
    /*Masked with opacity*/
    else {
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_ARGB8888_MIX_MASK_OPA(dsc)) {
            lv_color32_t color_argb = lv_color_to_32(dsc->color, opa);
 800842c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4611      	mov	r1, r2
 8008434:	6998      	ldr	r0, [r3, #24]
 8008436:	f012 ff9f 	bl	801b378 <lv_color_to_32>
 800843a:	4603      	mov	r3, r0
 800843c:	60bb      	str	r3, [r7, #8]
            lv_color32_t * dest_buf = dsc->dest_buf;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for(y = 0; y < h; y++) {
 8008444:	2300      	movs	r3, #0
 8008446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008448:	e03e      	b.n	80084c8 <lv_draw_sw_blend_color_to_argb8888+0x360>
                for(x = 0; x < w; x++) {
 800844a:	2300      	movs	r3, #0
 800844c:	653b      	str	r3, [r7, #80]	@ 0x50
 800844e:	e02a      	b.n	80084a6 <lv_draw_sw_blend_color_to_argb8888+0x33e>
                    color_argb.alpha = LV_OPA_MIX2(mask[x], opa);
 8008450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008452:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008454:	4413      	add	r3, r2
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	121b      	asrs	r3, r3, #8
 8008464:	b2db      	uxtb	r3, r3
 8008466:	72fb      	strb	r3, [r7, #11]
                    dest_buf[x] = lv_color_32_32_mix(color_argb, dest_buf[x], &cache);
 8008468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800846e:	4413      	add	r3, r2
 8008470:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008472:	0092      	lsls	r2, r2, #2
 8008474:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008476:	188c      	adds	r4, r1, r2
 8008478:	f107 0214 	add.w	r2, r7, #20
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	460b      	mov	r3, r1
 8008480:	4619      	mov	r1, r3
 8008482:	68b8      	ldr	r0, [r7, #8]
 8008484:	f000 fe9b 	bl	80091be <lv_color_32_32_mix>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
 800848c:	7022      	strb	r2, [r4, #0]
 800848e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008492:	7062      	strb	r2, [r4, #1]
 8008494:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008498:	70a2      	strb	r2, [r4, #2]
 800849a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800849e:	70e3      	strb	r3, [r4, #3]
                for(x = 0; x < w; x++) {
 80084a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084a2:	3301      	adds	r3, #1
 80084a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80084a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	429a      	cmp	r2, r3
 80084ac:	dbd0      	blt.n	8008450 <lv_draw_sw_blend_color_to_argb8888+0x2e8>
                }
                dest_buf = drawbuf_next_row(dest_buf, dest_stride);
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	4619      	mov	r1, r3
 80084b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80084b4:	f000 ffc2 	bl	800943c <drawbuf_next_row>
 80084b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
                mask += mask_stride;
 80084ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084be:	4413      	add	r3, r2
 80084c0:	657b      	str	r3, [r7, #84]	@ 0x54
            for(y = 0; y < h; y++) {
 80084c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c4:	3301      	adds	r3, #1
 80084c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084cc:	429a      	cmp	r2, r3
 80084ce:	dbbc      	blt.n	800844a <lv_draw_sw_blend_color_to_argb8888+0x2e2>
            }
        }
    }
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	375c      	adds	r7, #92	@ 0x5c
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd90      	pop	{r4, r7, pc}
	...

080084dc <lv_draw_sw_blend_image_to_argb8888>:

void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_blend_image_to_argb8888(_lv_draw_sw_blend_image_dsc_t * dsc)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
    switch(dsc->src_color_format) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084ea:	3b0f      	subs	r3, #15
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d81d      	bhi.n	800852c <lv_draw_sw_blend_image_to_argb8888+0x50>
 80084f0:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <lv_draw_sw_blend_image_to_argb8888+0x1c>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008525 	.word	0x08008525
 8008500:	0800851b 	.word	0x0800851b
 8008504:	08008509 	.word	0x08008509
        case LV_COLOR_FORMAT_RGB565:
            rgb565_image_blend(dsc);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f815 	bl	8008538 <rgb565_image_blend>
            break;
 800850e:	e00e      	b.n	800852e <lv_draw_sw_blend_image_to_argb8888+0x52>
        case LV_COLOR_FORMAT_RGB888:
            rgb888_image_blend(dsc, 3);
 8008510:	2103      	movs	r1, #3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa34 	bl	8008980 <rgb888_image_blend>
            break;
 8008518:	e009      	b.n	800852e <lv_draw_sw_blend_image_to_argb8888+0x52>
        case LV_COLOR_FORMAT_XRGB8888:
            rgb888_image_blend(dsc, 4);
 800851a:	2104      	movs	r1, #4
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fa2f 	bl	8008980 <rgb888_image_blend>
            break;
 8008522:	e004      	b.n	800852e <lv_draw_sw_blend_image_to_argb8888+0x52>
        case LV_COLOR_FORMAT_ARGB8888:
            argb8888_image_blend(dsc);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fc66 	bl	8008df6 <argb8888_image_blend>
            break;
 800852a:	e000      	b.n	800852e <lv_draw_sw_blend_image_to_argb8888+0x52>
        default:
            LV_LOG_WARN("Not supported source color format");
            break;
 800852c:	bf00      	nop
    }
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop

08008538 <rgb565_image_blend>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void LV_ATTRIBUTE_FAST_MEM rgb565_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc)
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b095      	sub	sp, #84	@ 0x54
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
    int32_t w = dsc->dest_w;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t h = dsc->dest_h;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	633b      	str	r3, [r7, #48]	@ 0x30
    lv_opa_t opa = dsc->opa;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    lv_color32_t * dest_buf_c32 = dsc->dest_buf;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t dest_stride = dsc->dest_stride;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	62bb      	str	r3, [r7, #40]	@ 0x28
    const lv_color16_t * src_buf_c16 = (const lv_color16_t *) dsc->src_buf;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t src_stride = dsc->src_stride;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
    const lv_opa_t * mask_buf = dsc->mask_buf;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t mask_stride = dsc->mask_stride;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	623b      	str	r3, [r7, #32]

    lv_color32_t color_argb;
    lv_color_mix_alpha_cache_t cache;
    lv_color_mix_with_alpha_cache_init(&cache);
 800857a:	f107 030c 	add.w	r3, r7, #12
 800857e:	4618      	mov	r0, r3
 8008580:	f000 febb 	bl	80092fa <lv_color_mix_with_alpha_cache_init>
    int32_t x;
    int32_t y;

    LV_UNUSED(color_argb);

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 817d 	bne.w	800888a <rgb565_image_blend+0x352>
        if(mask_buf == NULL) {
 8008590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008592:	2b00      	cmp	r3, #0
 8008594:	d17f      	bne.n	8008696 <rgb565_image_blend+0x15e>
            lv_result_t accelerated;
            if(opa >= LV_OPA_MAX) {
 8008596:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800859a:	2bfc      	cmp	r3, #252	@ 0xfc
 800859c:	d903      	bls.n	80085a6 <rgb565_image_blend+0x6e>
                accelerated = LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_ARGB8888(dsc);
 800859e:	2300      	movs	r3, #0
 80085a0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80085a4:	e002      	b.n	80085ac <rgb565_image_blend+0x74>
            }
            else {
                accelerated = LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_ARGB8888_WITH_OPA(dsc);
 80085a6:	2300      	movs	r3, #0
 80085a8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            }
            if(LV_RESULT_INVALID == accelerated) {
 80085ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 81e1 	bne.w	8008978 <rgb565_image_blend+0x440>
                color_argb.alpha = opa;
 80085b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80085ba:	77fb      	strb	r3, [r7, #31]
                for(y = 0; y < h; y++) {
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085c0:	e064      	b.n	800868c <rgb565_image_blend+0x154>
                    for(x = 0; x < w; x++) {
 80085c2:	2300      	movs	r3, #0
 80085c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80085c6:	e04e      	b.n	8008666 <rgb565_image_blend+0x12e>
                        color_argb.red = (src_buf_c16[x].red * 2106) >> 8;  /*To make it rounded*/
 80085c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ce:	4413      	add	r3, r2
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	f640 033a 	movw	r3, #2106	@ 0x83a
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	121b      	asrs	r3, r3, #8
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	77bb      	strb	r3, [r7, #30]
                        color_argb.green = (src_buf_c16[x].green * 1037) >> 8;
 80085e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ee:	4413      	add	r3, r2
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	f240 430d 	movw	r3, #1037	@ 0x40d
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
 8008602:	121b      	asrs	r3, r3, #8
 8008604:	b2db      	uxtb	r3, r3
 8008606:	777b      	strb	r3, [r7, #29]
                        color_argb.blue = (src_buf_c16[x].blue * 2106) >> 8;
 8008608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800860e:	4413      	add	r3, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008616:	b2db      	uxtb	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	f640 033a 	movw	r3, #2106	@ 0x83a
 800861e:	fb02 f303 	mul.w	r3, r2, r3
 8008622:	121b      	asrs	r3, r3, #8
 8008624:	b2db      	uxtb	r3, r3
 8008626:	773b      	strb	r3, [r7, #28]
                        dest_buf_c32[x] = lv_color_32_32_mix(color_argb, dest_buf_c32[x], &cache);
 8008628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800862e:	4413      	add	r3, r2
 8008630:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008632:	0092      	lsls	r2, r2, #2
 8008634:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008636:	188c      	adds	r4, r1, r2
 8008638:	f107 020c 	add.w	r2, r7, #12
 800863c:	6819      	ldr	r1, [r3, #0]
 800863e:	460b      	mov	r3, r1
 8008640:	4619      	mov	r1, r3
 8008642:	69f8      	ldr	r0, [r7, #28]
 8008644:	f000 fdbb 	bl	80091be <lv_color_32_32_mix>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	7022      	strb	r2, [r4, #0]
 800864e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008652:	7062      	strb	r2, [r4, #1]
 8008654:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008658:	70a2      	strb	r2, [r4, #2]
 800865a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800865e:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 8008660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008662:	3301      	adds	r3, #1
 8008664:	643b      	str	r3, [r7, #64]	@ 0x40
 8008666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866a:	429a      	cmp	r2, r3
 800866c:	dbac      	blt.n	80085c8 <rgb565_image_blend+0x90>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 800866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008670:	4619      	mov	r1, r3
 8008672:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008674:	f000 fee2 	bl	800943c <drawbuf_next_row>
 8008678:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	4619      	mov	r1, r3
 800867e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008680:	f000 fedc 	bl	800943c <drawbuf_next_row>
 8008684:	64b8      	str	r0, [r7, #72]	@ 0x48
                for(y = 0; y < h; y++) {
 8008686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008688:	3301      	adds	r3, #1
 800868a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800868c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	429a      	cmp	r2, r3
 8008692:	db96      	blt.n	80085c2 <rgb565_image_blend+0x8a>
            if(mask_buf) mask_buf += mask_stride;
            dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
            src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
        }
    }
}
 8008694:	e170      	b.n	8008978 <rgb565_image_blend+0x440>
        else if(mask_buf && opa >= LV_OPA_MAX) {
 8008696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008698:	2b00      	cmp	r3, #0
 800869a:	d079      	beq.n	8008790 <rgb565_image_blend+0x258>
 800869c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086a0:	2bfc      	cmp	r3, #252	@ 0xfc
 80086a2:	d975      	bls.n	8008790 <rgb565_image_blend+0x258>
                for(y = 0; y < h; y++) {
 80086a4:	2300      	movs	r3, #0
 80086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a8:	e06d      	b.n	8008786 <rgb565_image_blend+0x24e>
                    for(x = 0; x < w; x++) {
 80086aa:	2300      	movs	r3, #0
 80086ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80086ae:	e053      	b.n	8008758 <rgb565_image_blend+0x220>
                        color_argb.alpha = mask_buf[x];
 80086b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b4:	4413      	add	r3, r2
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	77fb      	strb	r3, [r7, #31]
                        color_argb.red = (src_buf_c16[x].red * 2106) >> 8;  /*To make it rounded*/
 80086ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086c0:	4413      	add	r3, r2
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	461a      	mov	r2, r3
 80086cc:	f640 033a 	movw	r3, #2106	@ 0x83a
 80086d0:	fb02 f303 	mul.w	r3, r2, r3
 80086d4:	121b      	asrs	r3, r3, #8
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	77bb      	strb	r3, [r7, #30]
                        color_argb.green = (src_buf_c16[x].green * 1037) >> 8;
 80086da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	f240 430d 	movw	r3, #1037	@ 0x40d
 80086f0:	fb02 f303 	mul.w	r3, r2, r3
 80086f4:	121b      	asrs	r3, r3, #8
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	777b      	strb	r3, [r7, #29]
                        color_argb.blue = (src_buf_c16[x].blue * 2106) >> 8;
 80086fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008700:	4413      	add	r3, r2
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008708:	b2db      	uxtb	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	f640 033a 	movw	r3, #2106	@ 0x83a
 8008710:	fb02 f303 	mul.w	r3, r2, r3
 8008714:	121b      	asrs	r3, r3, #8
 8008716:	b2db      	uxtb	r3, r3
 8008718:	773b      	strb	r3, [r7, #28]
                        dest_buf_c32[x] = lv_color_32_32_mix(color_argb, dest_buf_c32[x], &cache);
 800871a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008720:	4413      	add	r3, r2
 8008722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008728:	188c      	adds	r4, r1, r2
 800872a:	f107 020c 	add.w	r2, r7, #12
 800872e:	6819      	ldr	r1, [r3, #0]
 8008730:	460b      	mov	r3, r1
 8008732:	4619      	mov	r1, r3
 8008734:	69f8      	ldr	r0, [r7, #28]
 8008736:	f000 fd42 	bl	80091be <lv_color_32_32_mix>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	7022      	strb	r2, [r4, #0]
 8008740:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008744:	7062      	strb	r2, [r4, #1]
 8008746:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800874a:	70a2      	strb	r2, [r4, #2]
 800874c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008750:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 8008752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008754:	3301      	adds	r3, #1
 8008756:	643b      	str	r3, [r7, #64]	@ 0x40
 8008758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875c:	429a      	cmp	r2, r3
 800875e:	dba7      	blt.n	80086b0 <rgb565_image_blend+0x178>
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	4619      	mov	r1, r3
 8008764:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008766:	f000 fe69 	bl	800943c <drawbuf_next_row>
 800876a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	4619      	mov	r1, r3
 8008770:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008772:	f000 fe63 	bl	800943c <drawbuf_next_row>
 8008776:	64b8      	str	r0, [r7, #72]	@ 0x48
                    mask_buf += mask_stride;
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800877c:	4413      	add	r3, r2
 800877e:	647b      	str	r3, [r7, #68]	@ 0x44
                for(y = 0; y < h; y++) {
 8008780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008782:	3301      	adds	r3, #1
 8008784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008786:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878a:	429a      	cmp	r2, r3
 800878c:	db8d      	blt.n	80086aa <rgb565_image_blend+0x172>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_ARGB8888_WITH_MASK(dsc)) {
 800878e:	e0f3      	b.n	8008978 <rgb565_image_blend+0x440>
                for(y = 0; y < h; y++) {
 8008790:	2300      	movs	r3, #0
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008794:	e074      	b.n	8008880 <rgb565_image_blend+0x348>
                    for(x = 0; x < w; x++) {
 8008796:	2300      	movs	r3, #0
 8008798:	643b      	str	r3, [r7, #64]	@ 0x40
 800879a:	e05a      	b.n	8008852 <rgb565_image_blend+0x31a>
                        color_argb.alpha = LV_OPA_MIX2(mask_buf[x], opa);
 800879c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800879e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087a0:	4413      	add	r3, r2
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	121b      	asrs	r3, r3, #8
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	77fb      	strb	r3, [r7, #31]
                        color_argb.red = (src_buf_c16[x].red * 2106) >> 8;  /*To make it rounded*/
 80087b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ba:	4413      	add	r3, r2
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	f640 033a 	movw	r3, #2106	@ 0x83a
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	121b      	asrs	r3, r3, #8
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	77bb      	strb	r3, [r7, #30]
                        color_argb.green = (src_buf_c16[x].green * 1037) >> 8;
 80087d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087da:	4413      	add	r3, r2
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	f240 430d 	movw	r3, #1037	@ 0x40d
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	121b      	asrs	r3, r3, #8
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	777b      	strb	r3, [r7, #29]
                        color_argb.blue = (src_buf_c16[x].blue * 2106) >> 8;
 80087f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087fa:	4413      	add	r3, r2
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008802:	b2db      	uxtb	r3, r3
 8008804:	461a      	mov	r2, r3
 8008806:	f640 033a 	movw	r3, #2106	@ 0x83a
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	121b      	asrs	r3, r3, #8
 8008810:	b2db      	uxtb	r3, r3
 8008812:	773b      	strb	r3, [r7, #28]
                        dest_buf_c32[x] = lv_color_32_32_mix(color_argb, dest_buf_c32[x], &cache);
 8008814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800881a:	4413      	add	r3, r2
 800881c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800881e:	0092      	lsls	r2, r2, #2
 8008820:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008822:	188c      	adds	r4, r1, r2
 8008824:	f107 020c 	add.w	r2, r7, #12
 8008828:	6819      	ldr	r1, [r3, #0]
 800882a:	460b      	mov	r3, r1
 800882c:	4619      	mov	r1, r3
 800882e:	69f8      	ldr	r0, [r7, #28]
 8008830:	f000 fcc5 	bl	80091be <lv_color_32_32_mix>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	7022      	strb	r2, [r4, #0]
 800883a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800883e:	7062      	strb	r2, [r4, #1]
 8008840:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008844:	70a2      	strb	r2, [r4, #2]
 8008846:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800884a:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 800884c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800884e:	3301      	adds	r3, #1
 8008850:	643b      	str	r3, [r7, #64]	@ 0x40
 8008852:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	429a      	cmp	r2, r3
 8008858:	dba0      	blt.n	800879c <rgb565_image_blend+0x264>
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	4619      	mov	r1, r3
 800885e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008860:	f000 fdec 	bl	800943c <drawbuf_next_row>
 8008864:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	4619      	mov	r1, r3
 800886a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800886c:	f000 fde6 	bl	800943c <drawbuf_next_row>
 8008870:	64b8      	str	r0, [r7, #72]	@ 0x48
                    mask_buf += mask_stride;
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008876:	4413      	add	r3, r2
 8008878:	647b      	str	r3, [r7, #68]	@ 0x44
                for(y = 0; y < h; y++) {
 800887a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887c:	3301      	adds	r3, #1
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008880:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	429a      	cmp	r2, r3
 8008886:	db86      	blt.n	8008796 <rgb565_image_blend+0x25e>
}
 8008888:	e076      	b.n	8008978 <rgb565_image_blend+0x440>
        for(y = 0; y < h; y++) {
 800888a:	2300      	movs	r3, #0
 800888c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800888e:	e06e      	b.n	800896e <rgb565_image_blend+0x436>
            for(x = 0; x < w; x++) {
 8008890:	2300      	movs	r3, #0
 8008892:	643b      	str	r3, [r7, #64]	@ 0x40
 8008894:	e051      	b.n	800893a <rgb565_image_blend+0x402>
                src_argb.red = (src_buf_c16[x].red * 2106) >> 8;
 8008896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800889c:	4413      	add	r3, r2
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	f640 033a 	movw	r3, #2106	@ 0x83a
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	121b      	asrs	r3, r3, #8
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	72bb      	strb	r3, [r7, #10]
                src_argb.green = (src_buf_c16[x].green * 1037) >> 8;
 80088b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088bc:	4413      	add	r3, r2
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	461a      	mov	r2, r3
 80088c8:	f240 430d 	movw	r3, #1037	@ 0x40d
 80088cc:	fb02 f303 	mul.w	r3, r2, r3
 80088d0:	121b      	asrs	r3, r3, #8
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	727b      	strb	r3, [r7, #9]
                src_argb.blue = (src_buf_c16[x].blue * 2106) >> 8;
 80088d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088dc:	4413      	add	r3, r2
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	461a      	mov	r2, r3
 80088e8:	f640 033a 	movw	r3, #2106	@ 0x83a
 80088ec:	fb02 f303 	mul.w	r3, r2, r3
 80088f0:	121b      	asrs	r3, r3, #8
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	723b      	strb	r3, [r7, #8]
                if(mask_buf == NULL) src_argb.alpha = opa;
 80088f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d103      	bne.n	8008904 <rgb565_image_blend+0x3cc>
 80088fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008900:	72fb      	strb	r3, [r7, #11]
 8008902:	e00b      	b.n	800891c <rgb565_image_blend+0x3e4>
                else src_argb.alpha = LV_OPA_MIX2(mask_buf[x], opa);
 8008904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008908:	4413      	add	r3, r2
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	121b      	asrs	r3, r3, #8
 8008918:	b2db      	uxtb	r3, r3
 800891a:	72fb      	strb	r3, [r7, #11]
                blend_non_normal_pixel(&dest_buf_c32[x], src_argb, dsc->blend_mode, &cache);
 800891c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008922:	18d0      	adds	r0, r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800892a:	f107 030c 	add.w	r3, r7, #12
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	f000 fd02 	bl	8009338 <blend_non_normal_pixel>
            for(x = 0; x < w; x++) {
 8008934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008936:	3301      	adds	r3, #1
 8008938:	643b      	str	r3, [r7, #64]	@ 0x40
 800893a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800893c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893e:	429a      	cmp	r2, r3
 8008940:	dba9      	blt.n	8008896 <rgb565_image_blend+0x35e>
            if(mask_buf) mask_buf += mask_stride;
 8008942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <rgb565_image_blend+0x418>
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800894c:	4413      	add	r3, r2
 800894e:	647b      	str	r3, [r7, #68]	@ 0x44
            dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	4619      	mov	r1, r3
 8008954:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008956:	f000 fd71 	bl	800943c <drawbuf_next_row>
 800895a:	64f8      	str	r0, [r7, #76]	@ 0x4c
            src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	4619      	mov	r1, r3
 8008960:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008962:	f000 fd6b 	bl	800943c <drawbuf_next_row>
 8008966:	64b8      	str	r0, [r7, #72]	@ 0x48
        for(y = 0; y < h; y++) {
 8008968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800896a:	3301      	adds	r3, #1
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800896e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	429a      	cmp	r2, r3
 8008974:	db8c      	blt.n	8008890 <rgb565_image_blend+0x358>
}
 8008976:	e7ff      	b.n	8008978 <rgb565_image_blend+0x440>
 8008978:	bf00      	nop
 800897a:	3754      	adds	r7, #84	@ 0x54
 800897c:	46bd      	mov	sp, r7
 800897e:	bd90      	pop	{r4, r7, pc}

08008980 <rgb888_image_blend>:

static void LV_ATTRIBUTE_FAST_MEM rgb888_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc, const uint8_t src_px_size)
{
 8008980:	b590      	push	{r4, r7, lr}
 8008982:	b097      	sub	sp, #92	@ 0x5c
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]

    int32_t w = dsc->dest_w;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t h = dsc->dest_h;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	63bb      	str	r3, [r7, #56]	@ 0x38
    lv_opa_t opa = dsc->opa;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800899e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    lv_color32_t * dest_buf_c32 = dsc->dest_buf;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	657b      	str	r3, [r7, #84]	@ 0x54
    int32_t dest_stride = dsc->dest_stride;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	633b      	str	r3, [r7, #48]	@ 0x30
    const uint8_t * src_buf = dsc->src_buf;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	653b      	str	r3, [r7, #80]	@ 0x50
    int32_t src_stride = dsc->src_stride;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const lv_opa_t * mask_buf = dsc->mask_buf;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t mask_stride = dsc->mask_stride;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	62bb      	str	r3, [r7, #40]	@ 0x28

    lv_color32_t color_argb;
    lv_color_mix_alpha_cache_t cache;
    lv_color_mix_with_alpha_cache_init(&cache);
 80089c6:	f107 0310 	add.w	r3, r7, #16
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fc95 	bl	80092fa <lv_color_mix_with_alpha_cache_init>
    int32_t src_x;
    int32_t y;

    LV_UNUSED(color_argb);

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 81ac 	bne.w	8008d34 <rgb888_image_blend+0x3b4>
        /*Special case*/
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 80089dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d170      	bne.n	8008ac4 <rgb888_image_blend+0x144>
 80089e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089e6:	2bfc      	cmp	r3, #252	@ 0xfc
 80089e8:	d96c      	bls.n	8008ac4 <rgb888_image_blend+0x144>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_ARGB8888(dsc, src_px_size)) {
                if(src_px_size == 4) {
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d11e      	bne.n	8008a2e <rgb888_image_blend+0xae>
                    uint32_t line_in_bytes = w * 4;
 80089f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(y = 0; y < h; y++) {
 80089f6:	2300      	movs	r3, #0
 80089f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80089fa:	e013      	b.n	8008a24 <rgb888_image_blend+0xa4>
                        lv_memcpy(dest_buf_c32, src_buf, line_in_bytes);
 80089fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a00:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008a02:	f014 f98f 	bl	801cd24 <lv_memcpy>
                        dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008a0c:	f000 fd16 	bl	800943c <drawbuf_next_row>
 8008a10:	6578      	str	r0, [r7, #84]	@ 0x54
                        src_buf = drawbuf_next_row(src_buf, src_stride);
 8008a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a14:	4619      	mov	r1, r3
 8008a16:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008a18:	f000 fd10 	bl	800943c <drawbuf_next_row>
 8008a1c:	6538      	str	r0, [r7, #80]	@ 0x50
                    for(y = 0; y < h; y++) {
 8008a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a20:	3301      	adds	r3, #1
 8008a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	dbe7      	blt.n	80089fc <rgb888_image_blend+0x7c>
 8008a2c:	e04a      	b.n	8008ac4 <rgb888_image_blend+0x144>
                    }
                }
                else if(src_px_size == 3) {
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d147      	bne.n	8008ac4 <rgb888_image_blend+0x144>
                    for(y = 0; y < h; y++) {
 8008a34:	2300      	movs	r3, #0
 8008a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a38:	e040      	b.n	8008abc <rgb888_image_blend+0x13c>
                        for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 3) {
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a3e:	2300      	movs	r3, #0
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a42:	e028      	b.n	8008a96 <rgb888_image_blend+0x116>
                            dest_buf_c32[dest_x].red = src_buf[src_x + 2];
 8008a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a46:	3302      	adds	r3, #2
 8008a48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a4a:	441a      	add	r2, r3
 8008a4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a52:	440b      	add	r3, r1
 8008a54:	7812      	ldrb	r2, [r2, #0]
 8008a56:	709a      	strb	r2, [r3, #2]
                            dest_buf_c32[dest_x].green = src_buf[src_x + 1];
 8008a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a5e:	441a      	add	r2, r3
 8008a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a66:	440b      	add	r3, r1
 8008a68:	7812      	ldrb	r2, [r2, #0]
 8008a6a:	705a      	strb	r2, [r3, #1]
                            dest_buf_c32[dest_x].blue = src_buf[src_x + 0];
 8008a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a70:	441a      	add	r2, r3
 8008a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a78:	440b      	add	r3, r1
 8008a7a:	7812      	ldrb	r2, [r2, #0]
 8008a7c:	701a      	strb	r2, [r3, #0]
                            dest_buf_c32[dest_x].alpha = 0xff;
 8008a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a84:	4413      	add	r3, r2
 8008a86:	22ff      	movs	r2, #255	@ 0xff
 8008a88:	70da      	strb	r2, [r3, #3]
                        for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 3) {
 8008a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a92:	3303      	adds	r3, #3
 8008a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	dbd2      	blt.n	8008a44 <rgb888_image_blend+0xc4>
                        }
                        dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008aa4:	f000 fcca 	bl	800943c <drawbuf_next_row>
 8008aa8:	6578      	str	r0, [r7, #84]	@ 0x54
                        src_buf = drawbuf_next_row(src_buf, src_stride);
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	4619      	mov	r1, r3
 8008aae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008ab0:	f000 fcc4 	bl	800943c <drawbuf_next_row>
 8008ab4:	6538      	str	r0, [r7, #80]	@ 0x50
                    for(y = 0; y < h; y++) {
 8008ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ab8:	3301      	adds	r3, #1
 8008aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	dbba      	blt.n	8008a3a <rgb888_image_blend+0xba>
                    }
                }
            }

        }
        if(mask_buf == NULL && opa < LV_OPA_MAX) {
 8008ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d15d      	bne.n	8008b86 <rgb888_image_blend+0x206>
 8008aca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ace:	2bfc      	cmp	r3, #252	@ 0xfc
 8008ad0:	d859      	bhi.n	8008b86 <rgb888_image_blend+0x206>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_ARGB8888_WITH_OPA(dsc, src_px_size)) {
                color_argb.alpha = opa;
 8008ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                for(y = 0; y < h; y++) {
 8008ada:	2300      	movs	r3, #0
 8008adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ade:	e04e      	b.n	8008b7e <rgb888_image_blend+0x1fe>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ae8:	e036      	b.n	8008b58 <rgb888_image_blend+0x1d8>
                        color_argb.red = src_buf[src_x + 2];
 8008aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008aec:	3302      	adds	r3, #2
 8008aee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008af0:	4413      	add	r3, r2
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                        color_argb.green = src_buf[src_x + 1];
 8008af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008afa:	3301      	adds	r3, #1
 8008afc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008afe:	4413      	add	r3, r2
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                        color_argb.blue = src_buf[src_x + 0];
 8008b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b0a:	4413      	add	r3, r2
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f887 3020 	strb.w	r3, [r7, #32]
                        dest_buf_c32[dest_x] = lv_color_32_32_mix(color_argb, dest_buf_c32[dest_x], &cache);
 8008b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b18:	4413      	add	r3, r2
 8008b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b1c:	0092      	lsls	r2, r2, #2
 8008b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b20:	188c      	adds	r4, r1, r2
 8008b22:	f107 0210 	add.w	r2, r7, #16
 8008b26:	6819      	ldr	r1, [r3, #0]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6a38      	ldr	r0, [r7, #32]
 8008b2e:	f000 fb46 	bl	80091be <lv_color_32_32_mix>
 8008b32:	4603      	mov	r3, r0
 8008b34:	461a      	mov	r2, r3
 8008b36:	7022      	strb	r2, [r4, #0]
 8008b38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008b3c:	7062      	strb	r2, [r4, #1]
 8008b3e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008b42:	70a2      	strb	r2, [r4, #2]
 8008b44:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008b48:	70e3      	strb	r3, [r4, #3]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b54:	4413      	add	r3, r2
 8008b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	dbc4      	blt.n	8008aea <rgb888_image_blend+0x16a>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	4619      	mov	r1, r3
 8008b64:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008b66:	f000 fc69 	bl	800943c <drawbuf_next_row>
 8008b6a:	6578      	str	r0, [r7, #84]	@ 0x54
                    src_buf = drawbuf_next_row(src_buf, src_stride);
 8008b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008b72:	f000 fc63 	bl	800943c <drawbuf_next_row>
 8008b76:	6538      	str	r0, [r7, #80]	@ 0x50
                for(y = 0; y < h; y++) {
 8008b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	429a      	cmp	r2, r3
 8008b84:	dbac      	blt.n	8008ae0 <rgb888_image_blend+0x160>
                }
            }

        }
        if(mask_buf && opa >= LV_OPA_MAX) {
 8008b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d063      	beq.n	8008c54 <rgb888_image_blend+0x2d4>
 8008b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b90:	2bfc      	cmp	r3, #252	@ 0xfc
 8008b92:	d95f      	bls.n	8008c54 <rgb888_image_blend+0x2d4>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_ARGB8888_WITH_MASK(dsc, src_px_size)) {
                for(y = 0; y < h; y++) {
 8008b94:	2300      	movs	r3, #0
 8008b96:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b98:	e058      	b.n	8008c4c <rgb888_image_blend+0x2cc>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ba2:	e03c      	b.n	8008c1e <rgb888_image_blend+0x29e>
                        color_argb.alpha = mask_buf[dest_x];
 8008ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ba8:	4413      	add	r3, r2
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        color_argb.red = src_buf[src_x + 2];
 8008bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bb6:	4413      	add	r3, r2
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                        color_argb.green = src_buf[src_x + 1];
 8008bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bc4:	4413      	add	r3, r2
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                        color_argb.blue = src_buf[src_x + 0];
 8008bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bd0:	4413      	add	r3, r2
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f887 3020 	strb.w	r3, [r7, #32]
                        dest_buf_c32[dest_x] = lv_color_32_32_mix(color_argb, dest_buf_c32[dest_x], &cache);
 8008bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008bde:	4413      	add	r3, r2
 8008be0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008be6:	188c      	adds	r4, r1, r2
 8008be8:	f107 0210 	add.w	r2, r7, #16
 8008bec:	6819      	ldr	r1, [r3, #0]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6a38      	ldr	r0, [r7, #32]
 8008bf4:	f000 fae3 	bl	80091be <lv_color_32_32_mix>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	7022      	strb	r2, [r4, #0]
 8008bfe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c02:	7062      	strb	r2, [r4, #1]
 8008c04:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008c08:	70a2      	strb	r2, [r4, #2]
 8008c0a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008c0e:	70e3      	strb	r3, [r4, #3]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c12:	3301      	adds	r3, #1
 8008c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c1a:	4413      	add	r3, r2
 8008c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	dbbe      	blt.n	8008ba4 <rgb888_image_blend+0x224>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008c2c:	f000 fc06 	bl	800943c <drawbuf_next_row>
 8008c30:	6578      	str	r0, [r7, #84]	@ 0x54
                    src_buf = drawbuf_next_row(src_buf, src_stride);
 8008c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c34:	4619      	mov	r1, r3
 8008c36:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008c38:	f000 fc00 	bl	800943c <drawbuf_next_row>
 8008c3c:	6538      	str	r0, [r7, #80]	@ 0x50
                    mask_buf += mask_stride;
 8008c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c42:	4413      	add	r3, r2
 8008c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
                for(y = 0; y < h; y++) {
 8008c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c48:	3301      	adds	r3, #1
 8008c4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	429a      	cmp	r2, r3
 8008c52:	dba2      	blt.n	8008b9a <rgb888_image_blend+0x21a>
                }
            }
        }
        if(mask_buf && opa < LV_OPA_MAX) {
 8008c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80c9 	beq.w	8008dee <rgb888_image_blend+0x46e>
 8008c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c60:	2bfc      	cmp	r3, #252	@ 0xfc
 8008c62:	f200 80c4 	bhi.w	8008dee <rgb888_image_blend+0x46e>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_ARGB8888_MIX_MASK_OPA(dsc, src_px_size)) {
                for(y = 0; y < h; y++) {
 8008c66:	2300      	movs	r3, #0
 8008c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c6a:	e05e      	b.n	8008d2a <rgb888_image_blend+0x3aa>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c70:	2300      	movs	r3, #0
 8008c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c74:	e042      	b.n	8008cfc <rgb888_image_blend+0x37c>
                        color_argb.alpha = (opa * mask_buf[dest_x]) >> 8;
 8008c76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c7c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008c7e:	440a      	add	r2, r1
 8008c80:	7812      	ldrb	r2, [r2, #0]
 8008c82:	fb02 f303 	mul.w	r3, r2, r3
 8008c86:	121b      	asrs	r3, r3, #8
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        color_argb.red = src_buf[src_x + 2];
 8008c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c90:	3302      	adds	r3, #2
 8008c92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c94:	4413      	add	r3, r2
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                        color_argb.green = src_buf[src_x + 1];
 8008c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ca2:	4413      	add	r3, r2
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                        color_argb.blue = src_buf[src_x + 0];
 8008caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cae:	4413      	add	r3, r2
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	f887 3020 	strb.w	r3, [r7, #32]
                        dest_buf_c32[dest_x] = lv_color_32_32_mix(color_argb, dest_buf_c32[dest_x], &cache);
 8008cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008cbc:	4413      	add	r3, r2
 8008cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc0:	0092      	lsls	r2, r2, #2
 8008cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cc4:	188c      	adds	r4, r1, r2
 8008cc6:	f107 0210 	add.w	r2, r7, #16
 8008cca:	6819      	ldr	r1, [r3, #0]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6a38      	ldr	r0, [r7, #32]
 8008cd2:	f000 fa74 	bl	80091be <lv_color_32_32_mix>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	461a      	mov	r2, r3
 8008cda:	7022      	strb	r2, [r4, #0]
 8008cdc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008ce0:	7062      	strb	r2, [r4, #1]
 8008ce2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008ce6:	70a2      	strb	r2, [r4, #2]
 8008ce8:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008cec:	70e3      	strb	r3, [r4, #3]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf8:	4413      	add	r3, r2
 8008cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d00:	429a      	cmp	r2, r3
 8008d02:	dbb8      	blt.n	8008c76 <rgb888_image_blend+0x2f6>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	4619      	mov	r1, r3
 8008d08:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008d0a:	f000 fb97 	bl	800943c <drawbuf_next_row>
 8008d0e:	6578      	str	r0, [r7, #84]	@ 0x54
                    src_buf = drawbuf_next_row(src_buf, src_stride);
 8008d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d12:	4619      	mov	r1, r3
 8008d14:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008d16:	f000 fb91 	bl	800943c <drawbuf_next_row>
 8008d1a:	6538      	str	r0, [r7, #80]	@ 0x50
                    mask_buf += mask_stride;
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d20:	4413      	add	r3, r2
 8008d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
                for(y = 0; y < h; y++) {
 8008d24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d26:	3301      	adds	r3, #1
 8008d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	db9c      	blt.n	8008c6c <rgb888_image_blend+0x2ec>
            if(mask_buf) mask_buf += mask_stride;
            dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
            src_buf = drawbuf_next_row(src_buf, src_stride);
        }
    }
}
 8008d32:	e05c      	b.n	8008dee <rgb888_image_blend+0x46e>
        for(y = 0; y < h; y++) {
 8008d34:	2300      	movs	r3, #0
 8008d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d38:	e055      	b.n	8008de6 <rgb888_image_blend+0x466>
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d3e:	2300      	movs	r3, #0
 8008d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d42:	e036      	b.n	8008db2 <rgb888_image_blend+0x432>
                src_argb.red = src_buf[src_x + 2];
 8008d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d46:	3302      	adds	r3, #2
 8008d48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d4a:	4413      	add	r3, r2
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	73bb      	strb	r3, [r7, #14]
                src_argb.green = src_buf[src_x + 1];
 8008d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d52:	3301      	adds	r3, #1
 8008d54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d56:	4413      	add	r3, r2
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	737b      	strb	r3, [r7, #13]
                src_argb.blue = src_buf[src_x + 0];
 8008d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d60:	4413      	add	r3, r2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	733b      	strb	r3, [r7, #12]
                if(mask_buf == NULL) src_argb.alpha = opa;
 8008d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <rgb888_image_blend+0x3f4>
 8008d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d70:	73fb      	strb	r3, [r7, #15]
 8008d72:	e00b      	b.n	8008d8c <rgb888_image_blend+0x40c>
                else src_argb.alpha = LV_OPA_MIX2(mask_buf[dest_x], opa);
 8008d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d78:	4413      	add	r3, r2
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d82:	fb02 f303 	mul.w	r3, r2, r3
 8008d86:	121b      	asrs	r3, r3, #8
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	73fb      	strb	r3, [r7, #15]
                blend_non_normal_pixel(&dest_buf_c32[dest_x], src_argb, dsc->blend_mode, &cache);
 8008d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d92:	18d0      	adds	r0, r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008d9a:	f107 0310 	add.w	r3, r7, #16
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	f000 faca 	bl	8009338 <blend_non_normal_pixel>
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8008da4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008da6:	3301      	adds	r3, #1
 8008da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dae:	4413      	add	r3, r2
 8008db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	dbc4      	blt.n	8008d44 <rgb888_image_blend+0x3c4>
            if(mask_buf) mask_buf += mask_stride;
 8008dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <rgb888_image_blend+0x448>
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dc4:	4413      	add	r3, r2
 8008dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008dce:	f000 fb35 	bl	800943c <drawbuf_next_row>
 8008dd2:	6578      	str	r0, [r7, #84]	@ 0x54
            src_buf = drawbuf_next_row(src_buf, src_stride);
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008dda:	f000 fb2f 	bl	800943c <drawbuf_next_row>
 8008dde:	6538      	str	r0, [r7, #80]	@ 0x50
        for(y = 0; y < h; y++) {
 8008de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008de2:	3301      	adds	r3, #1
 8008de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008de6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	429a      	cmp	r2, r3
 8008dec:	dba5      	blt.n	8008d3a <rgb888_image_blend+0x3ba>
}
 8008dee:	bf00      	nop
 8008df0:	375c      	adds	r7, #92	@ 0x5c
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd90      	pop	{r4, r7, pc}

08008df6 <argb8888_image_blend>:

static void LV_ATTRIBUTE_FAST_MEM argb8888_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc)
{
 8008df6:	b590      	push	{r4, r7, lr}
 8008df8:	b093      	sub	sp, #76	@ 0x4c
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
    int32_t w = dsc->dest_w;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t h = dsc->dest_h;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lv_opa_t opa = dsc->opa;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    lv_color32_t * dest_buf_c32 = dsc->dest_buf;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t dest_stride = dsc->dest_stride;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    const lv_color32_t * src_buf_c32 = dsc->src_buf;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	643b      	str	r3, [r7, #64]	@ 0x40
    int32_t src_stride = dsc->src_stride;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	623b      	str	r3, [r7, #32]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t mask_stride = dsc->mask_stride;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	61fb      	str	r3, [r7, #28]

    lv_color32_t color_argb;
    lv_color_mix_alpha_cache_t cache;
    lv_color_mix_with_alpha_cache_init(&cache);
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fa5c 	bl	80092fa <lv_color_mix_with_alpha_cache_init>

    int32_t x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 815c 	bne.w	8009106 <argb8888_image_blend+0x310>
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d147      	bne.n	8008ee4 <argb8888_image_blend+0xee>
 8008e54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e58:	2bfc      	cmp	r3, #252	@ 0xfc
 8008e5a:	d943      	bls.n	8008ee4 <argb8888_image_blend+0xee>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888(dsc)) {
                for(y = 0; y < h; y++) {
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e60:	e03b      	b.n	8008eda <argb8888_image_blend+0xe4>
                    for(x = 0; x < w; x++) {
 8008e62:	2300      	movs	r3, #0
 8008e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e66:	e025      	b.n	8008eb4 <argb8888_image_blend+0xbe>
                        dest_buf_c32[x] = lv_color_32_32_mix(src_buf_c32[x], dest_buf_c32[x], &cache);
 8008e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e6e:	4413      	add	r3, r2
 8008e70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e76:	440a      	add	r2, r1
 8008e78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e7a:	0089      	lsls	r1, r1, #2
 8008e7c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008e7e:	1844      	adds	r4, r0, r1
 8008e80:	f107 0108 	add.w	r1, r7, #8
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	4610      	mov	r0, r2
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	460a      	mov	r2, r1
 8008e8e:	4601      	mov	r1, r0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 f994 	bl	80091be <lv_color_32_32_mix>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	7022      	strb	r2, [r4, #0]
 8008e9c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008ea0:	7062      	strb	r2, [r4, #1]
 8008ea2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008ea6:	70a2      	strb	r2, [r4, #2]
 8008ea8:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008eac:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 8008eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	dbd5      	blt.n	8008e68 <argb8888_image_blend+0x72>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008ec2:	f000 fabb 	bl	800943c <drawbuf_next_row>
 8008ec6:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008ece:	f000 fab5 	bl	800943c <drawbuf_next_row>
 8008ed2:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	dbbf      	blt.n	8008e62 <argb8888_image_blend+0x6c>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888(dsc)) {
 8008ee2:	e168      	b.n	80091b6 <argb8888_image_blend+0x3c0>
                }
            }
        }
        else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d151      	bne.n	8008f8e <argb8888_image_blend+0x198>
 8008eea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008eee:	2bfc      	cmp	r3, #252	@ 0xfc
 8008ef0:	d84d      	bhi.n	8008f8e <argb8888_image_blend+0x198>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888_WITH_OPA(dsc)) {
                for(y = 0; y < h; y++) {
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ef6:	e045      	b.n	8008f84 <argb8888_image_blend+0x18e>
                    for(x = 0; x < w; x++) {
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008efc:	e02f      	b.n	8008f5e <argb8888_image_blend+0x168>
                        color_argb = src_buf_c32[x];
 8008efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f04:	441a      	add	r2, r3
 8008f06:	f107 0318 	add.w	r3, r7, #24
 8008f0a:	6810      	ldr	r0, [r2, #0]
 8008f0c:	6018      	str	r0, [r3, #0]
                        color_argb.alpha = LV_OPA_MIX2(color_argb.alpha, opa);
 8008f0e:	7efb      	ldrb	r3, [r7, #27]
 8008f10:	461a      	mov	r2, r3
 8008f12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	121b      	asrs	r3, r3, #8
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	76fb      	strb	r3, [r7, #27]
                        dest_buf_c32[x] = lv_color_32_32_mix(color_argb, dest_buf_c32[x], &cache);
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f26:	4413      	add	r3, r2
 8008f28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f2a:	0092      	lsls	r2, r2, #2
 8008f2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f2e:	188c      	adds	r4, r1, r2
 8008f30:	f107 0208 	add.w	r2, r7, #8
 8008f34:	6819      	ldr	r1, [r3, #0]
 8008f36:	460b      	mov	r3, r1
 8008f38:	4619      	mov	r1, r3
 8008f3a:	69b8      	ldr	r0, [r7, #24]
 8008f3c:	f000 f93f 	bl	80091be <lv_color_32_32_mix>
 8008f40:	4603      	mov	r3, r0
 8008f42:	461a      	mov	r2, r3
 8008f44:	7022      	strb	r2, [r4, #0]
 8008f46:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008f4a:	7062      	strb	r2, [r4, #1]
 8008f4c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008f50:	70a2      	strb	r2, [r4, #2]
 8008f52:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8008f56:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 8008f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	429a      	cmp	r2, r3
 8008f64:	dbcb      	blt.n	8008efe <argb8888_image_blend+0x108>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008f6c:	f000 fa66 	bl	800943c <drawbuf_next_row>
 8008f70:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	4619      	mov	r1, r3
 8008f76:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008f78:	f000 fa60 	bl	800943c <drawbuf_next_row>
 8008f7c:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f80:	3301      	adds	r3, #1
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	dbb5      	blt.n	8008ef8 <argb8888_image_blend+0x102>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888_WITH_OPA(dsc)) {
 8008f8c:	e113      	b.n	80091b6 <argb8888_image_blend+0x3c0>
                }
            }
        }
        else if(mask_buf && opa >= LV_OPA_MAX) {
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d057      	beq.n	8009044 <argb8888_image_blend+0x24e>
 8008f94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f98:	2bfc      	cmp	r3, #252	@ 0xfc
 8008f9a:	d953      	bls.n	8009044 <argb8888_image_blend+0x24e>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888_WITH_MASK(dsc)) {
                for(y = 0; y < h; y++) {
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa0:	e04b      	b.n	800903a <argb8888_image_blend+0x244>
                    for(x = 0; x < w; x++) {
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fa6:	e031      	b.n	800900c <argb8888_image_blend+0x216>
                        color_argb = src_buf_c32[x];
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fae:	441a      	add	r2, r3
 8008fb0:	f107 0318 	add.w	r3, r7, #24
 8008fb4:	6810      	ldr	r0, [r2, #0]
 8008fb6:	6018      	str	r0, [r3, #0]
                        color_argb.alpha = LV_OPA_MIX2(color_argb.alpha, mask_buf[x]);
 8008fb8:	7efb      	ldrb	r3, [r7, #27]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fc0:	4413      	add	r3, r2
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	121b      	asrs	r3, r3, #8
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	76fb      	strb	r3, [r7, #27]
                        dest_buf_c32[x] = lv_color_32_32_mix(color_argb, dest_buf_c32[x], &cache);
 8008fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fd4:	4413      	add	r3, r2
 8008fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fd8:	0092      	lsls	r2, r2, #2
 8008fda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fdc:	188c      	adds	r4, r1, r2
 8008fde:	f107 0208 	add.w	r2, r7, #8
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	69b8      	ldr	r0, [r7, #24]
 8008fea:	f000 f8e8 	bl	80091be <lv_color_32_32_mix>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	7022      	strb	r2, [r4, #0]
 8008ff4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008ff8:	7062      	strb	r2, [r4, #1]
 8008ffa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008ffe:	70a2      	strb	r2, [r4, #2]
 8009000:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8009004:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 8009006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009008:	3301      	adds	r3, #1
 800900a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800900c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	429a      	cmp	r2, r3
 8009012:	dbc9      	blt.n	8008fa8 <argb8888_image_blend+0x1b2>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 8009014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009016:	4619      	mov	r1, r3
 8009018:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800901a:	f000 fa0f 	bl	800943c <drawbuf_next_row>
 800901e:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	4619      	mov	r1, r3
 8009024:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009026:	f000 fa09 	bl	800943c <drawbuf_next_row>
 800902a:	6438      	str	r0, [r7, #64]	@ 0x40
                    mask_buf += mask_stride;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009030:	4413      	add	r3, r2
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(y = 0; y < h; y++) {
 8009034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009036:	3301      	adds	r3, #1
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
 800903a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800903c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903e:	429a      	cmp	r2, r3
 8009040:	dbaf      	blt.n	8008fa2 <argb8888_image_blend+0x1ac>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888_WITH_MASK(dsc)) {
 8009042:	e0b8      	b.n	80091b6 <argb8888_image_blend+0x3c0>
                }
            }
        }
        else if(mask_buf && opa < LV_OPA_MAX) {
 8009044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80b5 	beq.w	80091b6 <argb8888_image_blend+0x3c0>
 800904c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009050:	2bfc      	cmp	r3, #252	@ 0xfc
 8009052:	f200 80b0 	bhi.w	80091b6 <argb8888_image_blend+0x3c0>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_ARGB8888_MIX_MASK_OPA(dsc)) {
                for(y = 0; y < h; y++) {
 8009056:	2300      	movs	r3, #0
 8009058:	637b      	str	r3, [r7, #52]	@ 0x34
 800905a:	e04f      	b.n	80090fc <argb8888_image_blend+0x306>
                    for(x = 0; x < w; x++) {
 800905c:	2300      	movs	r3, #0
 800905e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009060:	e035      	b.n	80090ce <argb8888_image_blend+0x2d8>
                        color_argb = src_buf_c32[x];
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009068:	441a      	add	r2, r3
 800906a:	f107 0318 	add.w	r3, r7, #24
 800906e:	6810      	ldr	r0, [r2, #0]
 8009070:	6018      	str	r0, [r3, #0]
                        color_argb.alpha = LV_OPA_MIX3(color_argb.alpha, opa, mask_buf[x]);
 8009072:	7efb      	ldrb	r3, [r7, #27]
 8009074:	461a      	mov	r2, r3
 8009076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800907a:	fb02 f303 	mul.w	r3, r2, r3
 800907e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009082:	440a      	add	r2, r1
 8009084:	7812      	ldrb	r2, [r2, #0]
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	141b      	asrs	r3, r3, #16
 800908c:	b2db      	uxtb	r3, r3
 800908e:	76fb      	strb	r3, [r7, #27]
                        dest_buf_c32[x] = lv_color_32_32_mix(color_argb, dest_buf_c32[x], &cache);
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009096:	4413      	add	r3, r2
 8009098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800909e:	188c      	adds	r4, r1, r2
 80090a0:	f107 0208 	add.w	r2, r7, #8
 80090a4:	6819      	ldr	r1, [r3, #0]
 80090a6:	460b      	mov	r3, r1
 80090a8:	4619      	mov	r1, r3
 80090aa:	69b8      	ldr	r0, [r7, #24]
 80090ac:	f000 f887 	bl	80091be <lv_color_32_32_mix>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	7022      	strb	r2, [r4, #0]
 80090b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80090ba:	7062      	strb	r2, [r4, #1]
 80090bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80090c0:	70a2      	strb	r2, [r4, #2]
 80090c2:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80090c6:	70e3      	strb	r3, [r4, #3]
                    for(x = 0; x < w; x++) {
 80090c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ca:	3301      	adds	r3, #1
 80090cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	429a      	cmp	r2, r3
 80090d4:	dbc5      	blt.n	8009062 <argb8888_image_blend+0x26c>
                    }
                    dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	4619      	mov	r1, r3
 80090da:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80090dc:	f000 f9ae 	bl	800943c <drawbuf_next_row>
 80090e0:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	4619      	mov	r1, r3
 80090e6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80090e8:	f000 f9a8 	bl	800943c <drawbuf_next_row>
 80090ec:	6438      	str	r0, [r7, #64]	@ 0x40
                    mask_buf += mask_stride;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80090f2:	4413      	add	r3, r2
 80090f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(y = 0; y < h; y++) {
 80090f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f8:	3301      	adds	r3, #1
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009100:	429a      	cmp	r2, r3
 8009102:	dbab      	blt.n	800905c <argb8888_image_blend+0x266>
            if(mask_buf) mask_buf += mask_stride;
            dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
            src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
        }
    }
}
 8009104:	e057      	b.n	80091b6 <argb8888_image_blend+0x3c0>
        for(y = 0; y < h; y++) {
 8009106:	2300      	movs	r3, #0
 8009108:	637b      	str	r3, [r7, #52]	@ 0x34
 800910a:	e04f      	b.n	80091ac <argb8888_image_blend+0x3b6>
            for(x = 0; x < w; x++) {
 800910c:	2300      	movs	r3, #0
 800910e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009110:	e032      	b.n	8009178 <argb8888_image_blend+0x382>
                color_argb = src_buf_c32[x];
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009118:	441a      	add	r2, r3
 800911a:	f107 0318 	add.w	r3, r7, #24
 800911e:	6810      	ldr	r0, [r2, #0]
 8009120:	6018      	str	r0, [r3, #0]
                if(mask_buf == NULL) color_argb.alpha = LV_OPA_MIX2(color_argb.alpha, opa);
 8009122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <argb8888_image_blend+0x346>
 8009128:	7efb      	ldrb	r3, [r7, #27]
 800912a:	461a      	mov	r2, r3
 800912c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009130:	fb02 f303 	mul.w	r3, r2, r3
 8009134:	121b      	asrs	r3, r3, #8
 8009136:	b2db      	uxtb	r3, r3
 8009138:	76fb      	strb	r3, [r7, #27]
 800913a:	e00e      	b.n	800915a <argb8888_image_blend+0x364>
                else color_argb.alpha = LV_OPA_MIX3(color_argb.alpha, mask_buf[x], opa);
 800913c:	7efb      	ldrb	r3, [r7, #27]
 800913e:	4619      	mov	r1, r3
 8009140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009142:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009144:	4413      	add	r3, r2
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	fb01 f303 	mul.w	r3, r1, r3
 800914c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8009150:	fb02 f303 	mul.w	r3, r2, r3
 8009154:	141b      	asrs	r3, r3, #16
 8009156:	b2db      	uxtb	r3, r3
 8009158:	76fb      	strb	r3, [r7, #27]
                blend_non_normal_pixel(&dest_buf_c32[x], color_argb, dsc->blend_mode, &cache);
 800915a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009160:	18d0      	adds	r0, r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8009168:	f107 0308 	add.w	r3, r7, #8
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	f000 f8e3 	bl	8009338 <blend_non_normal_pixel>
            for(x = 0; x < w; x++) {
 8009172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009174:	3301      	adds	r3, #1
 8009176:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	429a      	cmp	r2, r3
 800917e:	dbc8      	blt.n	8009112 <argb8888_image_blend+0x31c>
            if(mask_buf) mask_buf += mask_stride;
 8009180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <argb8888_image_blend+0x398>
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800918a:	4413      	add	r3, r2
 800918c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dest_buf_c32 = drawbuf_next_row(dest_buf_c32, dest_stride);
 800918e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009190:	4619      	mov	r1, r3
 8009192:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009194:	f000 f952 	bl	800943c <drawbuf_next_row>
 8009198:	6478      	str	r0, [r7, #68]	@ 0x44
            src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	4619      	mov	r1, r3
 800919e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80091a0:	f000 f94c 	bl	800943c <drawbuf_next_row>
 80091a4:	6438      	str	r0, [r7, #64]	@ 0x40
        for(y = 0; y < h; y++) {
 80091a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a8:	3301      	adds	r3, #1
 80091aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	dbab      	blt.n	800910c <argb8888_image_blend+0x316>
}
 80091b4:	e7ff      	b.n	80091b6 <argb8888_image_blend+0x3c0>
 80091b6:	bf00      	nop
 80091b8:	374c      	adds	r7, #76	@ 0x4c
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd90      	pop	{r4, r7, pc}

080091be <lv_color_32_32_mix>:

static inline lv_color32_t LV_ATTRIBUTE_FAST_MEM lv_color_32_32_mix(lv_color32_t fg, lv_color32_t bg,
                                                                    lv_color_mix_alpha_cache_t * cache)
{
 80091be:	b590      	push	{r4, r7, lr}
 80091c0:	b087      	sub	sp, #28
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
    /*Pick the foreground if it's fully opaque or the Background is fully transparent*/
    if(fg.alpha >= LV_OPA_MAX || bg.alpha <= LV_OPA_MIN) {
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2bfc      	cmp	r3, #252	@ 0xfc
 80091ce:	d802      	bhi.n	80091d6 <lv_color_32_32_mix+0x18>
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d802      	bhi.n	80091dc <lv_color_32_32_mix+0x1e>
        return fg;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	e07d      	b.n	80092d8 <lv_color_32_32_mix+0x11a>
    }
    /*Transparent foreground: use the Background*/
    else if(fg.alpha <= LV_OPA_MIN) {
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d802      	bhi.n	80091e8 <lv_color_32_32_mix+0x2a>
        return bg;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e077      	b.n	80092d8 <lv_color_32_32_mix+0x11a>
    }
    /*Opaque background: use simple mix*/
    else if(bg.alpha == 255) {
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	2bff      	cmp	r3, #255	@ 0xff
 80091ec:	d106      	bne.n	80091fc <lv_color_32_32_mix+0x3e>
        return lv_color_mix32(fg, bg);
 80091ee:	68b9      	ldr	r1, [r7, #8]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7fe ff59 	bl	80080a8 <lv_color_mix32>
 80091f6:	4603      	mov	r3, r0
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e06d      	b.n	80092d8 <lv_color_32_32_mix+0x11a>
    /*Both colors have alpha. Expensive calculation need to be applied*/
    else {
        /*Save the parameters and the result. If they will be asked again don't compute again*/

        /*Update the ratio and the result alpha value if the input alpha values change*/
        if(bg.alpha != cache->bg_saved.alpha || fg.alpha != cache->fg_saved.alpha) {
 80091fc:	7afa      	ldrb	r2, [r7, #11]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	79db      	ldrb	r3, [r3, #7]
 8009202:	429a      	cmp	r2, r3
 8009204:	d104      	bne.n	8009210 <lv_color_32_32_mix+0x52>
 8009206:	7bfa      	ldrb	r2, [r7, #15]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	78db      	ldrb	r3, [r3, #3]
 800920c:	429a      	cmp	r2, r3
 800920e:	d01f      	beq.n	8009250 <lv_color_32_32_mix+0x92>
            /*Info:
             * https://en.wikipedia.org/wiki/Alpha_compositing#Analytical_derivation_of_the_over_operator*/
            cache->res_alpha_saved  = 255 - LV_OPA_MIX2(255 - fg.alpha, 255 - bg.alpha);
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8009216:	7afa      	ldrb	r2, [r7, #11]
 8009218:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 800921c:	fb02 f303 	mul.w	r3, r2, r3
 8009220:	121b      	asrs	r3, r3, #8
 8009222:	b2db      	uxtb	r3, r3
 8009224:	43db      	mvns	r3, r3
 8009226:	b2da      	uxtb	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	731a      	strb	r2, [r3, #12]
            LV_ASSERT(cache->ratio_saved != 0);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7b5b      	ldrb	r3, [r3, #13]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <lv_color_32_32_mix+0x7a>
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <lv_color_32_32_mix+0x76>
            cache->ratio_saved = (uint32_t)((uint32_t)fg.alpha * 255) / cache->res_alpha_saved;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	461a      	mov	r2, r3
 800923c:	4613      	mov	r3, r2
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	7b12      	ldrb	r2, [r2, #12]
 8009246:	fbb3 f3f2 	udiv	r3, r3, r2
 800924a:	b2da      	uxtb	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	735a      	strb	r2, [r3, #13]
        }

        if(!lv_color32_eq(bg, cache->bg_saved) || !lv_color32_eq(fg, cache->fg_saved)) {
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	4613      	mov	r3, r2
 8009256:	4619      	mov	r1, r3
 8009258:	68b8      	ldr	r0, [r7, #8]
 800925a:	f7fe ff11 	bl	8008080 <lv_color32_eq>
 800925e:	4603      	mov	r3, r0
 8009260:	f083 0301 	eor.w	r3, r3, #1
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10c      	bne.n	8009284 <lv_color_32_32_mix+0xc6>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7fe ff04 	bl	8008080 <lv_color32_eq>
 8009278:	4603      	mov	r3, r0
 800927a:	f083 0301 	eor.w	r3, r3, #1
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d023      	beq.n	80092cc <lv_color_32_32_mix+0x10e>
            cache->fg_saved = fg;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	461a      	mov	r2, r3
 8009288:	f107 030c 	add.w	r3, r7, #12
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	6010      	str	r0, [r2, #0]
            cache->bg_saved = bg;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3304      	adds	r3, #4
 8009294:	f107 0208 	add.w	r2, r7, #8
 8009298:	6810      	ldr	r0, [r2, #0]
 800929a:	6018      	str	r0, [r3, #0]
            fg.alpha = cache->ratio_saved;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7b5b      	ldrb	r3, [r3, #13]
 80092a0:	73fb      	strb	r3, [r7, #15]
            cache->res_saved = lv_color_mix32(fg, bg);
 80092a2:	687c      	ldr	r4, [r7, #4]
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7fe fefe 	bl	80080a8 <lv_color_mix32>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	7222      	strb	r2, [r4, #8]
 80092b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80092b6:	7262      	strb	r2, [r4, #9]
 80092b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80092bc:	72a2      	strb	r2, [r4, #10]
 80092be:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80092c2:	72e3      	strb	r3, [r4, #11]
            cache->res_saved.alpha = cache->res_alpha_saved;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7b1a      	ldrb	r2, [r3, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	72da      	strb	r2, [r3, #11]
        }

        return cache->res_saved;
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	f107 0314 	add.w	r3, r7, #20
 80092d2:	3208      	adds	r2, #8
 80092d4:	6810      	ldr	r0, [r2, #0]
 80092d6:	6018      	str	r0, [r3, #0]
    }
}
 80092d8:	2300      	movs	r3, #0
 80092da:	7d3a      	ldrb	r2, [r7, #20]
 80092dc:	f362 0307 	bfi	r3, r2, #0, #8
 80092e0:	7d7a      	ldrb	r2, [r7, #21]
 80092e2:	f362 230f 	bfi	r3, r2, #8, #8
 80092e6:	7dba      	ldrb	r2, [r7, #22]
 80092e8:	f362 4317 	bfi	r3, r2, #16, #8
 80092ec:	7dfa      	ldrb	r2, [r7, #23]
 80092ee:	f362 631f 	bfi	r3, r2, #24, #8
 80092f2:	4618      	mov	r0, r3
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd90      	pop	{r4, r7, pc}

080092fa <lv_color_mix_with_alpha_cache_init>:

void lv_color_mix_with_alpha_cache_init(lv_color_mix_alpha_cache_t * cache)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
    lv_memzero(&cache->fg_saved, sizeof(lv_color32_t));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2104      	movs	r1, #4
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe ff20 	bl	800814c <lv_memzero>
    lv_memzero(&cache->bg_saved, sizeof(lv_color32_t));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3304      	adds	r3, #4
 8009310:	2104      	movs	r1, #4
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe ff1a 	bl	800814c <lv_memzero>
    lv_memzero(&cache->res_saved, sizeof(lv_color32_t));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3308      	adds	r3, #8
 800931c:	2104      	movs	r1, #4
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe ff14 	bl	800814c <lv_memzero>
    cache->res_alpha_saved = 255;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	22ff      	movs	r2, #255	@ 0xff
 8009328:	731a      	strb	r2, [r3, #12]
    cache->ratio_saved = 255;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	22ff      	movs	r2, #255	@ 0xff
 800932e:	735a      	strb	r2, [r3, #13]
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <blend_non_normal_pixel>:

static inline void LV_ATTRIBUTE_FAST_MEM blend_non_normal_pixel(lv_color32_t * dest, lv_color32_t src,
                                                                lv_blend_mode_t mode, lv_color_mix_alpha_cache_t * cache)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	4613      	mov	r3, r2
 8009346:	71fb      	strb	r3, [r7, #7]
    lv_color32_t res;
    switch(mode) {
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b03      	cmp	r3, #3
 800934c:	d041      	beq.n	80093d2 <blend_non_normal_pixel+0x9a>
 800934e:	2b03      	cmp	r3, #3
 8009350:	dc70      	bgt.n	8009434 <blend_non_normal_pixel+0xfc>
 8009352:	2b01      	cmp	r3, #1
 8009354:	d002      	beq.n	800935c <blend_non_normal_pixel+0x24>
 8009356:	2b02      	cmp	r3, #2
 8009358:	d01f      	beq.n	800939a <blend_non_normal_pixel+0x62>
            res.green = (dest->green * src.green) >> 8;
            res.blue = (dest->blue * src.blue) >> 8;
            break;
        default:
            LV_LOG_WARN("Not supported blend mode: %d", mode);
            return;
 800935a:	e06b      	b.n	8009434 <blend_non_normal_pixel+0xfc>
            res.red = LV_MIN(dest->red + src.red, 255);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	789b      	ldrb	r3, [r3, #2]
 8009360:	461a      	mov	r2, r3
 8009362:	7abb      	ldrb	r3, [r7, #10]
 8009364:	4413      	add	r3, r2
 8009366:	2bff      	cmp	r3, #255	@ 0xff
 8009368:	bfa8      	it	ge
 800936a:	23ff      	movge	r3, #255	@ 0xff
 800936c:	b2db      	uxtb	r3, r3
 800936e:	75bb      	strb	r3, [r7, #22]
            res.green = LV_MIN(dest->green + src.green, 255);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	461a      	mov	r2, r3
 8009376:	7a7b      	ldrb	r3, [r7, #9]
 8009378:	4413      	add	r3, r2
 800937a:	2bff      	cmp	r3, #255	@ 0xff
 800937c:	bfa8      	it	ge
 800937e:	23ff      	movge	r3, #255	@ 0xff
 8009380:	b2db      	uxtb	r3, r3
 8009382:	757b      	strb	r3, [r7, #21]
            res.blue = LV_MIN(dest->blue + src.blue, 255);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	7a3b      	ldrb	r3, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	2bff      	cmp	r3, #255	@ 0xff
 8009390:	bfa8      	it	ge
 8009392:	23ff      	movge	r3, #255	@ 0xff
 8009394:	b2db      	uxtb	r3, r3
 8009396:	753b      	strb	r3, [r7, #20]
            break;
 8009398:	e034      	b.n	8009404 <blend_non_normal_pixel+0xcc>
            res.red = LV_MAX(dest->red - src.red, 0);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	789b      	ldrb	r3, [r3, #2]
 800939e:	461a      	mov	r2, r3
 80093a0:	7abb      	ldrb	r3, [r7, #10]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	75bb      	strb	r3, [r7, #22]
            res.green = LV_MAX(dest->green - src.green, 0);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	461a      	mov	r2, r3
 80093b2:	7a7b      	ldrb	r3, [r7, #9]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	757b      	strb	r3, [r7, #21]
            res.blue = LV_MAX(dest->blue - src.blue, 0);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	7a3b      	ldrb	r3, [r7, #8]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	753b      	strb	r3, [r7, #20]
            break;
 80093d0:	e018      	b.n	8009404 <blend_non_normal_pixel+0xcc>
            res.red = (dest->red * src.red) >> 8;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	789b      	ldrb	r3, [r3, #2]
 80093d6:	7aba      	ldrb	r2, [r7, #10]
 80093d8:	fb02 f303 	mul.w	r3, r2, r3
 80093dc:	121b      	asrs	r3, r3, #8
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	75bb      	strb	r3, [r7, #22]
            res.green = (dest->green * src.green) >> 8;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	7a7a      	ldrb	r2, [r7, #9]
 80093e8:	fb02 f303 	mul.w	r3, r2, r3
 80093ec:	121b      	asrs	r3, r3, #8
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	757b      	strb	r3, [r7, #21]
            res.blue = (dest->blue * src.blue) >> 8;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	7a3a      	ldrb	r2, [r7, #8]
 80093f8:	fb02 f303 	mul.w	r3, r2, r3
 80093fc:	121b      	asrs	r3, r3, #8
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	753b      	strb	r3, [r7, #20]
            break;
 8009402:	bf00      	nop
    }
    res.alpha = src.alpha;
 8009404:	7afb      	ldrb	r3, [r7, #11]
 8009406:	75fb      	strb	r3, [r7, #23]
    *dest = lv_color_32_32_mix(res, *dest, cache);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	4613      	mov	r3, r2
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	6978      	ldr	r0, [r7, #20]
 8009414:	f7ff fed3 	bl	80091be <lv_color_32_32_mix>
 8009418:	4602      	mov	r2, r0
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4611      	mov	r1, r2
 800941e:	7019      	strb	r1, [r3, #0]
 8009420:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009424:	7059      	strb	r1, [r3, #1]
 8009426:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800942a:	7099      	strb	r1, [r3, #2]
 800942c:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8009430:	70da      	strb	r2, [r3, #3]
 8009432:	e000      	b.n	8009436 <blend_non_normal_pixel+0xfe>
            return;
 8009434:	bf00      	nop
}
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <drawbuf_next_row>:

static inline void * LV_ATTRIBUTE_FAST_MEM drawbuf_next_row(const void * buf, uint32_t stride)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
    return (void *)((uint8_t *)buf + stride);
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	4413      	add	r3, r2
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <lv_color_16_16_mix>:
 * @return          mix == 0: c2
 *                  mix == 255: c1
 *                  mix == 128: 0.5 x c1 + 0.5 x c2
 */
static inline uint16_t LV_ATTRIBUTE_FAST_MEM lv_color_16_16_mix(uint16_t c1, uint16_t c2, uint8_t mix)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	80fb      	strh	r3, [r7, #6]
 8009462:	460b      	mov	r3, r1
 8009464:	80bb      	strh	r3, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	70fb      	strb	r3, [r7, #3]
    if(mix == 255) return c1;
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	2bff      	cmp	r3, #255	@ 0xff
 800946e:	d101      	bne.n	8009474 <lv_color_16_16_mix+0x1c>
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	e02a      	b.n	80094ca <lv_color_16_16_mix+0x72>
    if(mix == 0) return c2;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <lv_color_16_16_mix+0x26>
 800947a:	88bb      	ldrh	r3, [r7, #4]
 800947c:	e025      	b.n	80094ca <lv_color_16_16_mix+0x72>

    uint16_t ret;

    /* Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	3304      	adds	r3, #4
 8009482:	08db      	lsrs	r3, r3, #3
 8009484:	70fb      	strb	r3, [r7, #3]

    /*0x7E0F81F = 0b00000111111000001111100000011111*/
    uint32_t bg = (uint32_t)(c2 | ((uint32_t)c2 << 16)) & 0x7E0F81F;
 8009486:	88ba      	ldrh	r2, [r7, #4]
 8009488:	4613      	mov	r3, r2
 800948a:	041b      	lsls	r3, r3, #16
 800948c:	441a      	add	r2, r3
 800948e:	4b12      	ldr	r3, [pc, #72]	@ (80094d8 <lv_color_16_16_mix+0x80>)
 8009490:	4013      	ands	r3, r2
 8009492:	617b      	str	r3, [r7, #20]
    uint32_t fg = (uint32_t)(c1 | ((uint32_t)c1 << 16)) & 0x7E0F81F;
 8009494:	88fa      	ldrh	r2, [r7, #6]
 8009496:	4613      	mov	r3, r2
 8009498:	041b      	lsls	r3, r3, #16
 800949a:	441a      	add	r2, r3
 800949c:	4b0e      	ldr	r3, [pc, #56]	@ (80094d8 <lv_color_16_16_mix+0x80>)
 800949e:	4013      	ands	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	78fa      	ldrb	r2, [r7, #3]
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	095a      	lsrs	r2, r3, #5
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	441a      	add	r2, r3
 80094b4:	4b08      	ldr	r3, [pc, #32]	@ (80094d8 <lv_color_16_16_mix+0x80>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
    ret = (uint16_t)(result >> 16) | result;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	0c1b      	lsrs	r3, r3, #16
 80094be:	b29a      	uxth	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	4313      	orrs	r3, r2
 80094c6:	817b      	strh	r3, [r7, #10]

    return ret;
 80094c8:	897b      	ldrh	r3, [r7, #10]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	07e0f81f 	.word	0x07e0f81f

080094dc <lv_draw_sw_blend_color_to_rgb565>:
 * @param opa
 * @param mask
 * @param mask_stride
 */
void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_blend_color_to_rgb565(_lv_draw_sw_blend_fill_dsc_t * dsc)
{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b095      	sub	sp, #84	@ 0x54
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
    int32_t w = dsc->dest_w;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t h = dsc->dest_h;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t color16 = lv_color_to_u16(dsc->color);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6998      	ldr	r0, [r3, #24]
 80094f4:	f011 ff63 	bl	801b3be <lv_color_to_u16>
 80094f8:	4603      	mov	r3, r0
 80094fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    lv_opa_t opa = dsc->opa;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7edb      	ldrb	r3, [r3, #27]
 8009500:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    const lv_opa_t * mask = dsc->mask_buf;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t mask_stride = dsc->mask_stride;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t * dest_buf_u16 = dsc->dest_buf;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t dest_stride = dsc->dest_stride;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	623b      	str	r3, [r7, #32]
    LV_UNUSED(mask_stride);
    LV_UNUSED(dest_stride);
    LV_UNUSED(dest_buf_u16);

    /*Simple fill*/
    if(mask == NULL && opa >= LV_OPA_MAX)  {
 800951c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d16d      	bne.n	80095fe <lv_draw_sw_blend_color_to_rgb565+0x122>
 8009522:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009526:	2bfc      	cmp	r3, #252	@ 0xfc
 8009528:	d969      	bls.n	80095fe <lv_draw_sw_blend_color_to_rgb565+0x122>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565(dsc)) {
            for(y = 0; y < h; y++) {
 800952a:	2300      	movs	r3, #0
 800952c:	643b      	str	r3, [r7, #64]	@ 0x40
 800952e:	e061      	b.n	80095f4 <lv_draw_sw_blend_color_to_rgb565+0x118>
                uint16_t * dest_end_final = dest_buf_u16 + w;
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009536:	4413      	add	r3, r2
 8009538:	61fb      	str	r3, [r7, #28]
                uint32_t * dest_end_mid = (uint32_t *)((uint16_t *) dest_buf_u16 + ((w - 1) & ~(0xF)));
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	3b01      	subs	r3, #1
 800953e:	f023 030f 	bic.w	r3, r3, #15
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009546:	4413      	add	r3, r2
 8009548:	61bb      	str	r3, [r7, #24]
                if((lv_uintptr_t)&dest_buf_u16[0] & 0x3) {
 800954a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800954c:	f003 0303 	and.w	r3, r3, #3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <lv_draw_sw_blend_color_to_rgb565+0x84>
                    dest_buf_u16[0] = color16;
 8009554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009556:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009558:	801a      	strh	r2, [r3, #0]
                    dest_buf_u16++;
 800955a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800955c:	3302      	adds	r3, #2
 800955e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }

                uint32_t c32 = (uint32_t)color16 + ((uint32_t)color16 << 16);
 8009560:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009562:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009564:	041b      	lsls	r3, r3, #16
 8009566:	4413      	add	r3, r2
 8009568:	617b      	str	r3, [r7, #20]
                uint32_t * dest32 = (uint32_t *)dest_buf_u16;
 800956a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800956c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                while(dest32 < dest_end_mid) {
 800956e:	e021      	b.n	80095b4 <lv_draw_sw_blend_color_to_rgb565+0xd8>
                    dest32[0] = c32;
 8009570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	601a      	str	r2, [r3, #0]
                    dest32[1] = c32;
 8009576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009578:	3304      	adds	r3, #4
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	601a      	str	r2, [r3, #0]
                    dest32[2] = c32;
 800957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009580:	3308      	adds	r3, #8
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	601a      	str	r2, [r3, #0]
                    dest32[3] = c32;
 8009586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009588:	330c      	adds	r3, #12
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	601a      	str	r2, [r3, #0]
                    dest32[4] = c32;
 800958e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009590:	3310      	adds	r3, #16
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	601a      	str	r2, [r3, #0]
                    dest32[5] = c32;
 8009596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009598:	3314      	adds	r3, #20
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	601a      	str	r2, [r3, #0]
                    dest32[6] = c32;
 800959e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a0:	3318      	adds	r3, #24
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	601a      	str	r2, [r3, #0]
                    dest32[7] = c32;
 80095a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a8:	331c      	adds	r3, #28
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	601a      	str	r2, [r3, #0]
                    dest32 += 8;
 80095ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b0:	3320      	adds	r3, #32
 80095b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                while(dest32 < dest_end_mid) {
 80095b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d3d9      	bcc.n	8009570 <lv_draw_sw_blend_color_to_rgb565+0x94>
                }

                dest_buf_u16 = (uint16_t *)dest32;
 80095bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095be:	64bb      	str	r3, [r7, #72]	@ 0x48

                while(dest_buf_u16 < dest_end_final) {
 80095c0:	e005      	b.n	80095ce <lv_draw_sw_blend_color_to_rgb565+0xf2>
                    *dest_buf_u16 = color16;
 80095c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80095c6:	801a      	strh	r2, [r3, #0]
                    dest_buf_u16++;
 80095c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ca:	3302      	adds	r3, #2
 80095cc:	64bb      	str	r3, [r7, #72]	@ 0x48
                while(dest_buf_u16 < dest_end_final) {
 80095ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d3f5      	bcc.n	80095c2 <lv_draw_sw_blend_color_to_rgb565+0xe6>
                }

                dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	4619      	mov	r1, r3
 80095da:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80095dc:	f001 fa7a 	bl	800aad4 <drawbuf_next_row>
 80095e0:	64b8      	str	r0, [r7, #72]	@ 0x48
                dest_buf_u16 -= w;
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	425b      	negs	r3, r3
 80095e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095ea:	4413      	add	r3, r2
 80095ec:	64bb      	str	r3, [r7, #72]	@ 0x48
            for(y = 0; y < h; y++) {
 80095ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095f0:	3301      	adds	r3, #1
 80095f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80095f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f8:	429a      	cmp	r2, r3
 80095fa:	db99      	blt.n	8009530 <lv_draw_sw_blend_color_to_rgb565+0x54>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565(dsc)) {
 80095fc:	e1a2      	b.n	8009944 <lv_draw_sw_blend_color_to_rgb565+0x468>
            }
        }

    }
    /*Opacity only*/
    else if(mask == NULL && opa < LV_OPA_MAX) {
 80095fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009600:	2b00      	cmp	r3, #0
 8009602:	f040 80b6 	bne.w	8009772 <lv_draw_sw_blend_color_to_rgb565+0x296>
 8009606:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800960a:	2bfc      	cmp	r3, #252	@ 0xfc
 800960c:	f200 80b1 	bhi.w	8009772 <lv_draw_sw_blend_color_to_rgb565+0x296>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565_WITH_OPA(dsc)) {
            uint32_t last_dest32_color = dest_buf_u16[0] + 1; /*Set to value which is not equal to the first pixel*/
 8009610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t last_res32_color = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34

            for(y = 0; y < h; y++) {
 800961c:	2300      	movs	r3, #0
 800961e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009620:	e0a1      	b.n	8009766 <lv_draw_sw_blend_color_to_rgb565+0x28a>
                x = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	647b      	str	r3, [r7, #68]	@ 0x44
                if((lv_uintptr_t)&dest_buf_u16[0] & 0x3) {
 8009626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d073      	beq.n	8009718 <lv_draw_sw_blend_color_to_rgb565+0x23c>
                    dest_buf_u16[0] = lv_color_16_16_mix(color16, dest_buf_u16[0], opa);
 8009630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009632:	8819      	ldrh	r1, [r3, #0]
 8009634:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8009638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff ff0c 	bl	8009458 <lv_color_16_16_mix>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009646:	801a      	strh	r2, [r3, #0]
                    x = 1;
 8009648:	2301      	movs	r3, #1
 800964a:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                for(; x < w - 2; x += 2) {
 800964c:	e064      	b.n	8009718 <lv_draw_sw_blend_color_to_rgb565+0x23c>
                    if(dest_buf_u16[x] != dest_buf_u16[x + 1]) {
 800964e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009650:	005b      	lsls	r3, r3, #1
 8009652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009654:	4413      	add	r3, r2
 8009656:	881a      	ldrh	r2, [r3, #0]
 8009658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800965a:	3301      	adds	r3, #1
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009660:	440b      	add	r3, r1
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	429a      	cmp	r2, r3
 8009666:	d024      	beq.n	80096b2 <lv_draw_sw_blend_color_to_rgb565+0x1d6>
                        dest_buf_u16[x + 0] = lv_color_16_16_mix(color16, dest_buf_u16[x + 0], opa);
 8009668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800966e:	4413      	add	r3, r2
 8009670:	8819      	ldrh	r1, [r3, #0]
 8009672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009678:	18d4      	adds	r4, r2, r3
 800967a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800967e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fee9 	bl	8009458 <lv_color_16_16_mix>
 8009686:	4603      	mov	r3, r0
 8009688:	8023      	strh	r3, [r4, #0]
                        dest_buf_u16[x + 1] = lv_color_16_16_mix(color16, dest_buf_u16[x + 1], opa);
 800968a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800968c:	3301      	adds	r3, #1
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009692:	4413      	add	r3, r2
 8009694:	8819      	ldrh	r1, [r3, #0]
 8009696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009698:	3301      	adds	r3, #1
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800969e:	18d4      	adds	r4, r2, r3
 80096a0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80096a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fed6 	bl	8009458 <lv_color_16_16_mix>
 80096ac:	4603      	mov	r3, r0
 80096ae:	8023      	strh	r3, [r4, #0]
 80096b0:	e02f      	b.n	8009712 <lv_draw_sw_blend_color_to_rgb565+0x236>
                    }
                    else {
                        volatile uint32_t * dest32 = (uint32_t *)&dest_buf_u16[x];
 80096b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096b4:	005b      	lsls	r3, r3, #1
 80096b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096b8:	4413      	add	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
                        if(last_dest32_color == *dest32) {
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d103      	bne.n	80096ce <lv_draw_sw_blend_color_to_rgb565+0x1f2>
                            *dest32 = last_res32_color;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	e021      	b.n	8009712 <lv_draw_sw_blend_color_to_rgb565+0x236>
                        }
                        else {
                            last_dest32_color =  *dest32;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	63bb      	str	r3, [r7, #56]	@ 0x38

                            dest_buf_u16[x] = lv_color_16_16_mix(color16, dest_buf_u16[x + 0], opa);
 80096d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096da:	4413      	add	r3, r2
 80096dc:	8819      	ldrh	r1, [r3, #0]
 80096de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096e4:	18d4      	adds	r4, r2, r3
 80096e6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80096ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7ff feb3 	bl	8009458 <lv_color_16_16_mix>
 80096f2:	4603      	mov	r3, r0
 80096f4:	8023      	strh	r3, [r4, #0]
                            dest_buf_u16[x + 1] = dest_buf_u16[x];
 80096f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096fc:	441a      	add	r2, r3
 80096fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009700:	3301      	adds	r3, #1
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009706:	440b      	add	r3, r1
 8009708:	8812      	ldrh	r2, [r2, #0]
 800970a:	801a      	strh	r2, [r3, #0]

                            last_res32_color = *dest32;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	637b      	str	r3, [r7, #52]	@ 0x34
                for(; x < w - 2; x += 2) {
 8009712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009714:	3302      	adds	r3, #2
 8009716:	647b      	str	r3, [r7, #68]	@ 0x44
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	3b02      	subs	r3, #2
 800971c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800971e:	429a      	cmp	r2, r3
 8009720:	db95      	blt.n	800964e <lv_draw_sw_blend_color_to_rgb565+0x172>
                        }
                    }
                }

                for(; x < w ; x++) {
 8009722:	e013      	b.n	800974c <lv_draw_sw_blend_color_to_rgb565+0x270>
                    dest_buf_u16[x] = lv_color_16_16_mix(color16, dest_buf_u16[x], opa);
 8009724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800972a:	4413      	add	r3, r2
 800972c:	8819      	ldrh	r1, [r3, #0]
 800972e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009734:	18d4      	adds	r4, r2, r3
 8009736:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800973a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff fe8b 	bl	8009458 <lv_color_16_16_mix>
 8009742:	4603      	mov	r3, r0
 8009744:	8023      	strh	r3, [r4, #0]
                for(; x < w ; x++) {
 8009746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009748:	3301      	adds	r3, #1
 800974a:	647b      	str	r3, [r7, #68]	@ 0x44
 800974c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	429a      	cmp	r2, r3
 8009752:	dbe7      	blt.n	8009724 <lv_draw_sw_blend_color_to_rgb565+0x248>
                }
                dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	4619      	mov	r1, r3
 8009758:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800975a:	f001 f9bb 	bl	800aad4 <drawbuf_next_row>
 800975e:	64b8      	str	r0, [r7, #72]	@ 0x48
            for(y = 0; y < h; y++) {
 8009760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009762:	3301      	adds	r3, #1
 8009764:	643b      	str	r3, [r7, #64]	@ 0x40
 8009766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976a:	429a      	cmp	r2, r3
 800976c:	f6ff af59 	blt.w	8009622 <lv_draw_sw_blend_color_to_rgb565+0x146>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565_WITH_OPA(dsc)) {
 8009770:	e0e8      	b.n	8009944 <lv_draw_sw_blend_color_to_rgb565+0x468>
        }

    }

    /*Masked with full opacity*/
    else if(mask && opa >= LV_OPA_MAX) {
 8009772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80a4 	beq.w	80098c2 <lv_draw_sw_blend_color_to_rgb565+0x3e6>
 800977a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800977e:	2bfc      	cmp	r3, #252	@ 0xfc
 8009780:	f240 809f 	bls.w	80098c2 <lv_draw_sw_blend_color_to_rgb565+0x3e6>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565_WITH_MASK(dsc)) {
            for(y = 0; y < h; y++) {
 8009784:	2300      	movs	r3, #0
 8009786:	643b      	str	r3, [r7, #64]	@ 0x40
 8009788:	e095      	b.n	80098b6 <lv_draw_sw_blend_color_to_rgb565+0x3da>
                x = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	647b      	str	r3, [r7, #68]	@ 0x44
                if((lv_uintptr_t)(mask) & 0x1) {
 800978e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d060      	beq.n	800985a <lv_draw_sw_blend_color_to_rgb565+0x37e>
                    dest_buf_u16[x] = lv_color_16_16_mix(color16, dest_buf_u16[x], mask[x]);
 8009798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800979e:	4413      	add	r3, r2
 80097a0:	8819      	ldrh	r1, [r3, #0]
 80097a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097a6:	4413      	add	r3, r2
 80097a8:	7818      	ldrb	r0, [r3, #0]
 80097aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097b0:	18d4      	adds	r4, r2, r3
 80097b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80097b4:	4602      	mov	r2, r0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fe4e 	bl	8009458 <lv_color_16_16_mix>
 80097bc:	4603      	mov	r3, r0
 80097be:	8023      	strh	r3, [r4, #0]
                    x++;
 80097c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097c2:	3301      	adds	r3, #1
 80097c4:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                for(; x <= w - 2; x += 2) {
 80097c6:	e048      	b.n	800985a <lv_draw_sw_blend_color_to_rgb565+0x37e>
                    uint16_t mask16 = *((uint16_t *)&mask[x]);
 80097c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097cc:	4413      	add	r3, r2
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	81fb      	strh	r3, [r7, #14]
                    if(mask16 == 0xFFFF) {
 80097d2:	89fb      	ldrh	r3, [r7, #14]
 80097d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097d8:	4293      	cmp	r3, r2
 80097da:	d10d      	bne.n	80097f8 <lv_draw_sw_blend_color_to_rgb565+0x31c>
                        dest_buf_u16[x + 0] = color16;
 80097dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097de:	005b      	lsls	r3, r3, #1
 80097e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097e2:	4413      	add	r3, r2
 80097e4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80097e6:	801a      	strh	r2, [r3, #0]
                        dest_buf_u16[x + 1] = color16;
 80097e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097ea:	3301      	adds	r3, #1
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f0:	4413      	add	r3, r2
 80097f2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80097f4:	801a      	strh	r2, [r3, #0]
 80097f6:	e02d      	b.n	8009854 <lv_draw_sw_blend_color_to_rgb565+0x378>
                    }
                    else if(mask16 != 0) {
 80097f8:	89fb      	ldrh	r3, [r7, #14]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d02a      	beq.n	8009854 <lv_draw_sw_blend_color_to_rgb565+0x378>
                        dest_buf_u16[x + 0] = lv_color_16_16_mix(color16, dest_buf_u16[x + 0], mask[x + 0]);
 80097fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009800:	005b      	lsls	r3, r3, #1
 8009802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009804:	4413      	add	r3, r2
 8009806:	8819      	ldrh	r1, [r3, #0]
 8009808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800980a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800980c:	4413      	add	r3, r2
 800980e:	7818      	ldrb	r0, [r3, #0]
 8009810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009816:	18d4      	adds	r4, r2, r3
 8009818:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800981a:	4602      	mov	r2, r0
 800981c:	4618      	mov	r0, r3
 800981e:	f7ff fe1b 	bl	8009458 <lv_color_16_16_mix>
 8009822:	4603      	mov	r3, r0
 8009824:	8023      	strh	r3, [r4, #0]
                        dest_buf_u16[x + 1] = lv_color_16_16_mix(color16, dest_buf_u16[x + 1], mask[x + 1]);
 8009826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009828:	3301      	adds	r3, #1
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800982e:	4413      	add	r3, r2
 8009830:	8819      	ldrh	r1, [r3, #0]
 8009832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009834:	3301      	adds	r3, #1
 8009836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009838:	4413      	add	r3, r2
 800983a:	7818      	ldrb	r0, [r3, #0]
 800983c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800983e:	3301      	adds	r3, #1
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009844:	18d4      	adds	r4, r2, r3
 8009846:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009848:	4602      	mov	r2, r0
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fe04 	bl	8009458 <lv_color_16_16_mix>
 8009850:	4603      	mov	r3, r0
 8009852:	8023      	strh	r3, [r4, #0]
                for(; x <= w - 2; x += 2) {
 8009854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009856:	3302      	adds	r3, #2
 8009858:	647b      	str	r3, [r7, #68]	@ 0x44
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	3b01      	subs	r3, #1
 800985e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009860:	429a      	cmp	r2, r3
 8009862:	dbb1      	blt.n	80097c8 <lv_draw_sw_blend_color_to_rgb565+0x2ec>
                    }
                }

                for(; x < w ; x++) {
 8009864:	e016      	b.n	8009894 <lv_draw_sw_blend_color_to_rgb565+0x3b8>
                    dest_buf_u16[x] = lv_color_16_16_mix(color16, dest_buf_u16[x], mask[x]);
 8009866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986c:	4413      	add	r3, r2
 800986e:	8819      	ldrh	r1, [r3, #0]
 8009870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009874:	4413      	add	r3, r2
 8009876:	7818      	ldrb	r0, [r3, #0]
 8009878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800987e:	18d4      	adds	r4, r2, r3
 8009880:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009882:	4602      	mov	r2, r0
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fde7 	bl	8009458 <lv_color_16_16_mix>
 800988a:	4603      	mov	r3, r0
 800988c:	8023      	strh	r3, [r4, #0]
                for(; x < w ; x++) {
 800988e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009890:	3301      	adds	r3, #1
 8009892:	647b      	str	r3, [r7, #68]	@ 0x44
 8009894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009898:	429a      	cmp	r2, r3
 800989a:	dbe4      	blt.n	8009866 <lv_draw_sw_blend_color_to_rgb565+0x38a>
                }
                dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800989c:	6a3b      	ldr	r3, [r7, #32]
 800989e:	4619      	mov	r1, r3
 80098a0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80098a2:	f001 f917 	bl	800aad4 <drawbuf_next_row>
 80098a6:	64b8      	str	r0, [r7, #72]	@ 0x48
                mask += mask_stride;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098ac:	4413      	add	r3, r2
 80098ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for(y = 0; y < h; y++) {
 80098b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098b2:	3301      	adds	r3, #1
 80098b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80098b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	429a      	cmp	r2, r3
 80098bc:	f6ff af65 	blt.w	800978a <lv_draw_sw_blend_color_to_rgb565+0x2ae>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565_WITH_MASK(dsc)) {
 80098c0:	e040      	b.n	8009944 <lv_draw_sw_blend_color_to_rgb565+0x468>
            }
        }

    }
    /*Masked with opacity*/
    else if(mask && opa < LV_OPA_MAX) {
 80098c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d03d      	beq.n	8009944 <lv_draw_sw_blend_color_to_rgb565+0x468>
 80098c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098cc:	2bfc      	cmp	r3, #252	@ 0xfc
 80098ce:	d839      	bhi.n	8009944 <lv_draw_sw_blend_color_to_rgb565+0x468>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB565_MIX_MASK_OPA(dsc)) {
            for(y = 0; y < h; y++) {
 80098d0:	2300      	movs	r3, #0
 80098d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80098d4:	e031      	b.n	800993a <lv_draw_sw_blend_color_to_rgb565+0x45e>
                for(x = 0; x < w; x++) {
 80098d6:	2300      	movs	r3, #0
 80098d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098da:	e01d      	b.n	8009918 <lv_draw_sw_blend_color_to_rgb565+0x43c>
                    dest_buf_u16[x] = lv_color_16_16_mix(color16, dest_buf_u16[x], LV_OPA_MIX2(mask[x], opa));
 80098dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098e2:	4413      	add	r3, r2
 80098e4:	8819      	ldrh	r1, [r3, #0]
 80098e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098ea:	4413      	add	r3, r2
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098f4:	fb02 f303 	mul.w	r3, r2, r3
 80098f8:	121b      	asrs	r3, r3, #8
 80098fa:	b2d8      	uxtb	r0, r3
 80098fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009902:	18d4      	adds	r4, r2, r3
 8009904:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009906:	4602      	mov	r2, r0
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fda5 	bl	8009458 <lv_color_16_16_mix>
 800990e:	4603      	mov	r3, r0
 8009910:	8023      	strh	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8009912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009914:	3301      	adds	r3, #1
 8009916:	647b      	str	r3, [r7, #68]	@ 0x44
 8009918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800991a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991c:	429a      	cmp	r2, r3
 800991e:	dbdd      	blt.n	80098dc <lv_draw_sw_blend_color_to_rgb565+0x400>
                }
                dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	4619      	mov	r1, r3
 8009924:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009926:	f001 f8d5 	bl	800aad4 <drawbuf_next_row>
 800992a:	64b8      	str	r0, [r7, #72]	@ 0x48
                mask += mask_stride;
 800992c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009930:	4413      	add	r3, r2
 8009932:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for(y = 0; y < h; y++) {
 8009934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009936:	3301      	adds	r3, #1
 8009938:	643b      	str	r3, [r7, #64]	@ 0x40
 800993a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993e:	429a      	cmp	r2, r3
 8009940:	dbc9      	blt.n	80098d6 <lv_draw_sw_blend_color_to_rgb565+0x3fa>
            }
        }
    }
}
 8009942:	e7ff      	b.n	8009944 <lv_draw_sw_blend_color_to_rgb565+0x468>
 8009944:	bf00      	nop
 8009946:	3754      	adds	r7, #84	@ 0x54
 8009948:	46bd      	mov	sp, r7
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <lv_draw_sw_blend_image_to_rgb565>:

void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_blend_image_to_rgb565(_lv_draw_sw_blend_image_dsc_t * dsc)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
    switch(dsc->src_color_format) {
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800995a:	3b0f      	subs	r3, #15
 800995c:	2b03      	cmp	r3, #3
 800995e:	d81d      	bhi.n	800999c <lv_draw_sw_blend_image_to_rgb565+0x50>
 8009960:	a201      	add	r2, pc, #4	@ (adr r2, 8009968 <lv_draw_sw_blend_image_to_rgb565+0x1c>)
 8009962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009966:	bf00      	nop
 8009968:	08009981 	.word	0x08009981
 800996c:	08009995 	.word	0x08009995
 8009970:	0800998b 	.word	0x0800998b
 8009974:	08009979 	.word	0x08009979
        case LV_COLOR_FORMAT_RGB565:
            rgb565_image_blend(dsc);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f815 	bl	80099a8 <rgb565_image_blend>
            break;
 800997e:	e00e      	b.n	800999e <lv_draw_sw_blend_image_to_rgb565+0x52>
        case LV_COLOR_FORMAT_RGB888:
            rgb888_image_blend(dsc, 3);
 8009980:	2103      	movs	r1, #3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 faac 	bl	8009ee0 <rgb888_image_blend>
            break;
 8009988:	e009      	b.n	800999e <lv_draw_sw_blend_image_to_rgb565+0x52>
        case LV_COLOR_FORMAT_XRGB8888:
            rgb888_image_blend(dsc, 4);
 800998a:	2104      	movs	r1, #4
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 faa7 	bl	8009ee0 <rgb888_image_blend>
            break;
 8009992:	e004      	b.n	800999e <lv_draw_sw_blend_image_to_rgb565+0x52>
        case LV_COLOR_FORMAT_ARGB8888:
            argb8888_image_blend(dsc);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fd47 	bl	800a428 <argb8888_image_blend>
            break;
 800999a:	e000      	b.n	800999e <lv_draw_sw_blend_image_to_rgb565+0x52>
        default:
            LV_LOG_WARN("Not supported source color format");
            break;
 800999c:	bf00      	nop
    }
}
 800999e:	bf00      	nop
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop

080099a8 <rgb565_image_blend>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void LV_ATTRIBUTE_FAST_MEM rgb565_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc)
{
 80099a8:	b5b0      	push	{r4, r5, r7, lr}
 80099aa:	b092      	sub	sp, #72	@ 0x48
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
    int32_t w = dsc->dest_w;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t h = dsc->dest_h;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    lv_opa_t opa = dsc->opa;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint16_t * dest_buf_u16 = dsc->dest_buf;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t dest_stride = dsc->dest_stride;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	623b      	str	r3, [r7, #32]
    const uint16_t * src_buf_u16 = dsc->src_buf;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	643b      	str	r3, [r7, #64]	@ 0x40
    int32_t src_stride = dsc->src_stride;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	61fb      	str	r3, [r7, #28]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t mask_stride = dsc->mask_stride;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f040 80e9 	bne.w	8009bc8 <rgb565_image_blend+0x220>
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 80099f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d122      	bne.n	8009a42 <rgb565_image_blend+0x9a>
 80099fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a00:	2bfc      	cmp	r3, #252	@ 0xfc
 8009a02:	d91e      	bls.n	8009a42 <rgb565_image_blend+0x9a>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565(dsc)) {
                uint32_t line_in_bytes = w * 2;
 8009a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	60fb      	str	r3, [r7, #12]
                for(y = 0; y < h; y++) {
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0e:	e013      	b.n	8009a38 <rgb565_image_blend+0x90>
                    lv_memcpy(dest_buf_u16, src_buf_u16, line_in_bytes);
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a14:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009a16:	f013 f985 	bl	801cd24 <lv_memcpy>
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009a20:	f001 f858 	bl	800aad4 <drawbuf_next_row>
 8009a24:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_u16 = drawbuf_next_row(src_buf_u16, src_stride);
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009a2c:	f001 f852 	bl	800aad4 <drawbuf_next_row>
 8009a30:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 8009a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a34:	3301      	adds	r3, #1
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	dbe7      	blt.n	8009a10 <rgb565_image_blend+0x68>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565(dsc)) {
 8009a40:	e24b      	b.n	8009eda <rgb565_image_blend+0x532>
                }
            }
        }
        else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 8009a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d139      	bne.n	8009abc <rgb565_image_blend+0x114>
 8009a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a4c:	2bfc      	cmp	r3, #252	@ 0xfc
 8009a4e:	d835      	bhi.n	8009abc <rgb565_image_blend+0x114>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565_WITH_OPA(dsc)) {
                for(y = 0; y < h; y++) {
 8009a50:	2300      	movs	r3, #0
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a54:	e02d      	b.n	8009ab2 <rgb565_image_blend+0x10a>
                    for(x = 0; x < w; x++) {
 8009a56:	2300      	movs	r3, #0
 8009a58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a5a:	e017      	b.n	8009a8c <rgb565_image_blend+0xe4>
                        dest_buf_u16[x] = lv_color_16_16_mix(src_buf_u16[x], dest_buf_u16[x], opa);
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a62:	4413      	add	r3, r2
 8009a64:	8818      	ldrh	r0, [r3, #0]
 8009a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a6c:	4413      	add	r3, r2
 8009a6e:	8819      	ldrh	r1, [r3, #0]
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a76:	18d4      	adds	r4, r2, r3
 8009a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f7ff fceb 	bl	8009458 <lv_color_16_16_mix>
 8009a82:	4603      	mov	r3, r0
 8009a84:	8023      	strh	r3, [r4, #0]
                    for(x = 0; x < w; x++) {
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	3301      	adds	r3, #1
 8009a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a90:	429a      	cmp	r2, r3
 8009a92:	dbe3      	blt.n	8009a5c <rgb565_image_blend+0xb4>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009a9a:	f001 f81b 	bl	800aad4 <drawbuf_next_row>
 8009a9e:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_u16 = drawbuf_next_row(src_buf_u16, src_stride);
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009aa6:	f001 f815 	bl	800aad4 <drawbuf_next_row>
 8009aaa:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 8009aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aae:	3301      	adds	r3, #1
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	dbcd      	blt.n	8009a56 <rgb565_image_blend+0xae>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565_WITH_OPA(dsc)) {
 8009aba:	e20e      	b.n	8009eda <rgb565_image_blend+0x532>
                }
            }
        }
        else if(mask_buf && opa >= LV_OPA_MAX) {
 8009abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d03f      	beq.n	8009b42 <rgb565_image_blend+0x19a>
 8009ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ac6:	2bfc      	cmp	r3, #252	@ 0xfc
 8009ac8:	d93b      	bls.n	8009b42 <rgb565_image_blend+0x19a>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565_WITH_MASK(dsc)) {
                for(y = 0; y < h; y++) {
 8009aca:	2300      	movs	r3, #0
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ace:	e033      	b.n	8009b38 <rgb565_image_blend+0x190>
                    for(x = 0; x < w; x++) {
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ad4:	e019      	b.n	8009b0a <rgb565_image_blend+0x162>
                        dest_buf_u16[x] = lv_color_16_16_mix(src_buf_u16[x], dest_buf_u16[x], mask_buf[x]);
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009adc:	4413      	add	r3, r2
 8009ade:	8818      	ldrh	r0, [r3, #0]
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ae6:	4413      	add	r3, r2
 8009ae8:	8819      	ldrh	r1, [r3, #0]
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009aee:	4413      	add	r3, r2
 8009af0:	781d      	ldrb	r5, [r3, #0]
 8009af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af8:	18d4      	adds	r4, r2, r3
 8009afa:	462a      	mov	r2, r5
 8009afc:	f7ff fcac 	bl	8009458 <lv_color_16_16_mix>
 8009b00:	4603      	mov	r3, r0
 8009b02:	8023      	strh	r3, [r4, #0]
                    for(x = 0; x < w; x++) {
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	3301      	adds	r3, #1
 8009b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	dbe1      	blt.n	8009ad6 <rgb565_image_blend+0x12e>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009b18:	f000 ffdc 	bl	800aad4 <drawbuf_next_row>
 8009b1c:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_u16 = drawbuf_next_row(src_buf_u16, src_stride);
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	4619      	mov	r1, r3
 8009b22:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009b24:	f000 ffd6 	bl	800aad4 <drawbuf_next_row>
 8009b28:	6438      	str	r0, [r7, #64]	@ 0x40
                    mask_buf += mask_stride;
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b2e:	4413      	add	r3, r2
 8009b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(y = 0; y < h; y++) {
 8009b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b34:	3301      	adds	r3, #1
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	dbc7      	blt.n	8009ad0 <rgb565_image_blend+0x128>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565_WITH_MASK(dsc)) {
 8009b40:	e1cb      	b.n	8009eda <rgb565_image_blend+0x532>
                }
            }
        }
        else {
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB565_MIX_MASK_OPA(dsc)) {
                for(y = 0; y < h; y++) {
 8009b42:	2300      	movs	r3, #0
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b46:	e03a      	b.n	8009bbe <rgb565_image_blend+0x216>
                    for(x = 0; x < w; x++) {
 8009b48:	2300      	movs	r3, #0
 8009b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b4c:	e020      	b.n	8009b90 <rgb565_image_blend+0x1e8>
                        dest_buf_u16[x] = lv_color_16_16_mix(src_buf_u16[x], dest_buf_u16[x], LV_OPA_MIX2(mask_buf[x], opa));
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b54:	4413      	add	r3, r2
 8009b56:	8818      	ldrh	r0, [r3, #0]
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b5e:	4413      	add	r3, r2
 8009b60:	8819      	ldrh	r1, [r3, #0]
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b66:	4413      	add	r3, r2
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	121b      	asrs	r3, r3, #8
 8009b76:	b2dd      	uxtb	r5, r3
 8009b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b7e:	18d4      	adds	r4, r2, r3
 8009b80:	462a      	mov	r2, r5
 8009b82:	f7ff fc69 	bl	8009458 <lv_color_16_16_mix>
 8009b86:	4603      	mov	r3, r0
 8009b88:	8023      	strh	r3, [r4, #0]
                    for(x = 0; x < w; x++) {
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b94:	429a      	cmp	r2, r3
 8009b96:	dbda      	blt.n	8009b4e <rgb565_image_blend+0x1a6>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009b9e:	f000 ff99 	bl	800aad4 <drawbuf_next_row>
 8009ba2:	6478      	str	r0, [r7, #68]	@ 0x44
                    src_buf_u16 = drawbuf_next_row(src_buf_u16, src_stride);
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009baa:	f000 ff93 	bl	800aad4 <drawbuf_next_row>
 8009bae:	6438      	str	r0, [r7, #64]	@ 0x40
                    mask_buf += mask_stride;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009bb4:	4413      	add	r3, r2
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(y = 0; y < h; y++) {
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bba:	3301      	adds	r3, #1
 8009bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	dbc0      	blt.n	8009b48 <rgb565_image_blend+0x1a0>
 8009bc6:	e188      	b.n	8009eda <rgb565_image_blend+0x532>
                }
            }
        }
    }
    else {
        uint16_t res = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	867b      	strh	r3, [r7, #50]	@ 0x32
        for(y = 0; y < h; y++) {
 8009bcc:	2300      	movs	r3, #0
 8009bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bd0:	e17c      	b.n	8009ecc <rgb565_image_blend+0x524>
            lv_color16_t * dest_buf_c16 = (lv_color16_t *) dest_buf_u16;
 8009bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bd4:	617b      	str	r3, [r7, #20]
            lv_color16_t * src_buf_c16 = (lv_color16_t *) src_buf_u16;
 8009bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bd8:	613b      	str	r3, [r7, #16]
            for(x = 0; x < w; x++) {
 8009bda:	2300      	movs	r3, #0
 8009bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bde:	e15a      	b.n	8009e96 <rgb565_image_blend+0x4ee>
                switch(dsc->blend_mode) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	f000 80af 	beq.w	8009d4a <rgb565_image_blend+0x3a2>
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	f300 8173 	bgt.w	8009ed8 <rgb565_image_blend+0x530>
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d002      	beq.n	8009bfc <rgb565_image_blend+0x254>
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d055      	beq.n	8009ca6 <rgb565_image_blend+0x2fe>
                        res += ((dest_buf_c16[x].green * src_buf_c16[x].green) >> 6) << 5;
                        res += (dest_buf_c16[x].blue * src_buf_c16[x].blue) >> 5;
                        break;
                    default:
                        LV_LOG_WARN("Not supported blend mode: %d", dsc->blend_mode);
                        return;
 8009bfa:	e16d      	b.n	8009ed8 <rgb565_image_blend+0x530>
                        if(src_buf_u16[x] == 0x0000) continue;   /*Do not add pure black*/
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c02:	4413      	add	r3, r2
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 813d 	beq.w	8009e86 <rgb565_image_blend+0x4de>
                        res = (LV_MIN(dest_buf_c16[x].red + src_buf_c16[x].red, 31)) << 11;
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	4413      	add	r3, r2
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	4413      	add	r3, r2
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	440b      	add	r3, r1
 8009c30:	2b1f      	cmp	r3, #31
 8009c32:	bfa8      	it	ge
 8009c34:	231f      	movge	r3, #31
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	02db      	lsls	r3, r3, #11
 8009c3a:	867b      	strh	r3, [r7, #50]	@ 0x32
                        res += (LV_MIN(dest_buf_c16[x].green + src_buf_c16[x].green, 63)) << 5;
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	4413      	add	r3, r2
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4413      	add	r3, r2
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	440b      	add	r3, r1
 8009c60:	2b3f      	cmp	r3, #63	@ 0x3f
 8009c62:	bfa8      	it	ge
 8009c64:	233f      	movge	r3, #63	@ 0x3f
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	015b      	lsls	r3, r3, #5
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009c6e:	4413      	add	r3, r2
 8009c70:	867b      	strh	r3, [r7, #50]	@ 0x32
                        res += LV_MIN(dest_buf_c16[x].blue + src_buf_c16[x].blue, 31);
 8009c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	4619      	mov	r1, r3
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	440b      	add	r3, r1
 8009c96:	2b1f      	cmp	r3, #31
 8009c98:	bfa8      	it	ge
 8009c9a:	231f      	movge	r3, #31
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009ca0:	4413      	add	r3, r2
 8009ca2:	867b      	strh	r3, [r7, #50]	@ 0x32
                        break;
 8009ca4:	e0a5      	b.n	8009df2 <rgb565_image_blend+0x44a>
                        if(src_buf_u16[x] == 0x0000) continue;   /*Do not subtract pure black*/
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cac:	4413      	add	r3, r2
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 80ea 	beq.w	8009e8a <rgb565_image_blend+0x4e2>
                        res = (LV_MAX(dest_buf_c16[x].red - src_buf_c16[x].red, 0)) << 11;
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	785b      	ldrb	r3, [r3, #1]
 8009cc0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4413      	add	r3, r2
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	1acb      	subs	r3, r1, r3
 8009cda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	02db      	lsls	r3, r3, #11
 8009ce2:	867b      	strh	r3, [r7, #50]	@ 0x32
                        res += (LV_MAX(dest_buf_c16[x].green - src_buf_c16[x].green, 0)) << 5;
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	4413      	add	r3, r2
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	1acb      	subs	r3, r1, r3
 8009d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	015b      	lsls	r3, r3, #5
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009d14:	4413      	add	r3, r2
 8009d16:	867b      	strh	r3, [r7, #50]	@ 0x32
                        res += LV_MAX(dest_buf_c16[x].blue - src_buf_c16[x].blue, 0);
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4413      	add	r3, r2
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	4413      	add	r3, r2
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	1acb      	subs	r3, r1, r3
 8009d3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009d44:	4413      	add	r3, r2
 8009d46:	867b      	strh	r3, [r7, #50]	@ 0x32
                        break;
 8009d48:	e053      	b.n	8009df2 <rgb565_image_blend+0x44a>
                        if(src_buf_u16[x] == 0xffff) continue;   /*Do not multiply with pure white (considered as 1)*/
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d50:	4413      	add	r3, r2
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	f000 8098 	beq.w	8009e8e <rgb565_image_blend+0x4e6>
                        res = ((dest_buf_c16[x].red * src_buf_c16[x].red) >> 5) << 11;
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	4413      	add	r3, r2
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4413      	add	r3, r2
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	fb01 f303 	mul.w	r3, r1, r3
 8009d84:	115b      	asrs	r3, r3, #5
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	02db      	lsls	r3, r3, #11
 8009d8a:	867b      	strh	r3, [r7, #50]	@ 0x32
                        res += ((dest_buf_c16[x].green * src_buf_c16[x].green) >> 6) << 5;
 8009d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	4413      	add	r3, r2
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4413      	add	r3, r2
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	fb01 f303 	mul.w	r3, r1, r3
 8009db2:	119b      	asrs	r3, r3, #6
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	015b      	lsls	r3, r3, #5
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009dbc:	4413      	add	r3, r2
 8009dbe:	867b      	strh	r3, [r7, #50]	@ 0x32
                        res += (dest_buf_c16[x].blue * src_buf_c16[x].blue) >> 5;
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	4413      	add	r3, r2
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	fb01 f303 	mul.w	r3, r1, r3
 8009de6:	115b      	asrs	r3, r3, #5
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009dec:	4413      	add	r3, r2
 8009dee:	867b      	strh	r3, [r7, #50]	@ 0x32
                        break;
 8009df0:	bf00      	nop
                }

                if(mask_buf == NULL) {
 8009df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d111      	bne.n	8009e1c <rgb565_image_blend+0x474>
                    dest_buf_u16[x] = lv_color_16_16_mix(res, dest_buf_u16[x], opa);
 8009df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dfe:	4413      	add	r3, r2
 8009e00:	8819      	ldrh	r1, [r3, #0]
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e08:	18d4      	adds	r4, r2, r3
 8009e0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fb21 	bl	8009458 <lv_color_16_16_mix>
 8009e16:	4603      	mov	r3, r0
 8009e18:	8023      	strh	r3, [r4, #0]
 8009e1a:	e039      	b.n	8009e90 <rgb565_image_blend+0x4e8>
                }
                else {
                    if(opa >= LV_OPA_MAX) dest_buf_u16[x] = lv_color_16_16_mix(res, dest_buf_u16[x], mask_buf[x]);
 8009e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e20:	2bfc      	cmp	r3, #252	@ 0xfc
 8009e22:	d914      	bls.n	8009e4e <rgb565_image_blend+0x4a6>
 8009e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e2a:	4413      	add	r3, r2
 8009e2c:	8819      	ldrh	r1, [r3, #0]
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e32:	4413      	add	r3, r2
 8009e34:	7818      	ldrb	r0, [r3, #0]
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e3c:	18d4      	adds	r4, r2, r3
 8009e3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009e40:	4602      	mov	r2, r0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff fb08 	bl	8009458 <lv_color_16_16_mix>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	8023      	strh	r3, [r4, #0]
 8009e4c:	e020      	b.n	8009e90 <rgb565_image_blend+0x4e8>
                    else dest_buf_u16[x] = lv_color_16_16_mix(res, dest_buf_u16[x], LV_OPA_MIX2(mask_buf[x], opa));
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e50:	005b      	lsls	r3, r3, #1
 8009e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e54:	4413      	add	r3, r2
 8009e56:	8819      	ldrh	r1, [r3, #0]
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
 8009e6a:	121b      	asrs	r3, r3, #8
 8009e6c:	b2d8      	uxtb	r0, r3
 8009e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e74:	18d4      	adds	r4, r2, r3
 8009e76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009e78:	4602      	mov	r2, r0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff faec 	bl	8009458 <lv_color_16_16_mix>
 8009e80:	4603      	mov	r3, r0
 8009e82:	8023      	strh	r3, [r4, #0]
 8009e84:	e004      	b.n	8009e90 <rgb565_image_blend+0x4e8>
                        if(src_buf_u16[x] == 0x0000) continue;   /*Do not add pure black*/
 8009e86:	bf00      	nop
 8009e88:	e002      	b.n	8009e90 <rgb565_image_blend+0x4e8>
                        if(src_buf_u16[x] == 0x0000) continue;   /*Do not subtract pure black*/
 8009e8a:	bf00      	nop
 8009e8c:	e000      	b.n	8009e90 <rgb565_image_blend+0x4e8>
                        if(src_buf_u16[x] == 0xffff) continue;   /*Do not multiply with pure white (considered as 1)*/
 8009e8e:	bf00      	nop
            for(x = 0; x < w; x++) {
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	3301      	adds	r3, #1
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	f6ff aea0 	blt.w	8009be0 <rgb565_image_blend+0x238>
                }
            }

            dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009ea6:	f000 fe15 	bl	800aad4 <drawbuf_next_row>
 8009eaa:	6478      	str	r0, [r7, #68]	@ 0x44
            src_buf_u16 = drawbuf_next_row(src_buf_u16, src_stride);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009eb2:	f000 fe0f 	bl	800aad4 <drawbuf_next_row>
 8009eb6:	6438      	str	r0, [r7, #64]	@ 0x40
            if(mask_buf) mask_buf += mask_stride;
 8009eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <rgb565_image_blend+0x51e>
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ec2:	4413      	add	r3, r2
 8009ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(y = 0; y < h; y++) {
 8009ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ec8:	3301      	adds	r3, #1
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	f6ff ae7e 	blt.w	8009bd2 <rgb565_image_blend+0x22a>
 8009ed6:	e000      	b.n	8009eda <rgb565_image_blend+0x532>
                        return;
 8009ed8:	bf00      	nop
        }
    }
}
 8009eda:	3748      	adds	r7, #72	@ 0x48
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bdb0      	pop	{r4, r5, r7, pc}

08009ee0 <rgb888_image_blend>:

static void LV_ATTRIBUTE_FAST_MEM rgb888_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc, const uint8_t src_px_size)
{
 8009ee0:	b5b0      	push	{r4, r5, r7, lr}
 8009ee2:	b090      	sub	sp, #64	@ 0x40
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
    int32_t w = dsc->dest_w;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	623b      	str	r3, [r7, #32]
    int32_t h = dsc->dest_h;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	61fb      	str	r3, [r7, #28]
    lv_opa_t opa = dsc->opa;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009efe:	76fb      	strb	r3, [r7, #27]
    uint16_t * dest_buf_u16 = dsc->dest_buf;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t dest_stride = dsc->dest_stride;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	617b      	str	r3, [r7, #20]
    const uint8_t * src_buf_u8 = dsc->src_buf;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t src_stride = dsc->src_stride;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	613b      	str	r3, [r7, #16]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t mask_stride = dsc->mask_stride;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	60fb      	str	r3, [r7, #12]

    int32_t dest_x;
    int32_t src_x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f040 811d 	bne.w	800a16a <rgb888_image_blend+0x28a>
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 8009f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d14e      	bne.n	8009fd4 <rgb888_image_blend+0xf4>
 8009f36:	7efb      	ldrb	r3, [r7, #27]
 8009f38:	2bfc      	cmp	r3, #252	@ 0xfc
 8009f3a:	d94b      	bls.n	8009fd4 <rgb888_image_blend+0xf4>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB565(dsc, src_px_size)) {
                for(y = 0; y < h; y++) {
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f40:	e043      	b.n	8009fca <rgb888_image_blend+0xea>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8009f42:	2300      	movs	r3, #0
 8009f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f46:	2300      	movs	r3, #0
 8009f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f4a:	e02d      	b.n	8009fa8 <rgb888_image_blend+0xc8>
                        dest_buf_u16[dest_x]  = ((src_buf_u8[src_x + 2] & 0xF8) << 8) +
 8009f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4e:	3302      	adds	r3, #2
 8009f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f52:	4413      	add	r3, r2
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	021b      	lsls	r3, r3, #8
 8009f58:	b21b      	sxth	r3, r3
 8009f5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009f5e:	f023 0307 	bic.w	r3, r3, #7
 8009f62:	b21a      	sxth	r2, r3
                                                ((src_buf_u8[src_x + 1] & 0xFC) << 3) +
 8009f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f66:	3301      	adds	r3, #1
 8009f68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f6a:	440b      	add	r3, r1
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	b21b      	sxth	r3, r3
 8009f72:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8009f76:	b21b      	sxth	r3, r3
                        dest_buf_u16[dest_x]  = ((src_buf_u8[src_x + 2] & 0xF8) << 8) +
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	b21b      	sxth	r3, r3
 8009f7c:	b29a      	uxth	r2, r3
                                                ((src_buf_u8[src_x + 0] & 0xF8) >> 3);
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f82:	440b      	add	r3, r1
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	08db      	lsrs	r3, r3, #3
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	4618      	mov	r0, r3
                        dest_buf_u16[dest_x]  = ((src_buf_u8[src_x + 2] & 0xF8) << 8) +
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f92:	440b      	add	r3, r1
                                                ((src_buf_u8[src_x + 1] & 0xFC) << 3) +
 8009f94:	4402      	add	r2, r0
 8009f96:	b292      	uxth	r2, r2
                        dest_buf_u16[dest_x]  = ((src_buf_u8[src_x + 2] & 0xF8) << 8) +
 8009f98:	801a      	strh	r2, [r3, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa4:	4413      	add	r3, r2
 8009fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	dbcd      	blt.n	8009f4c <rgb888_image_blend+0x6c>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009fb6:	f000 fd8d 	bl	800aad4 <drawbuf_next_row>
 8009fba:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fc0:	4413      	add	r3, r2
 8009fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
                for(y = 0; y < h; y++) {
 8009fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	dbb7      	blt.n	8009f42 <rgb888_image_blend+0x62>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB565(dsc, src_px_size)) {
 8009fd2:	e03b      	b.n	800a04c <rgb888_image_blend+0x16c>
                }
            }
        }
        else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d138      	bne.n	800a04c <rgb888_image_blend+0x16c>
 8009fda:	7efb      	ldrb	r3, [r7, #27]
 8009fdc:	2bfc      	cmp	r3, #252	@ 0xfc
 8009fde:	d835      	bhi.n	800a04c <rgb888_image_blend+0x16c>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB565_WITH_OPA(dsc, src_px_size)) {
                for(y = 0; y < h; y++) {
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fe4:	e02e      	b.n	800a044 <rgb888_image_blend+0x164>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fea:	2300      	movs	r3, #0
 8009fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fee:	e018      	b.n	800a022 <rgb888_image_blend+0x142>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x], opa);
 8009ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ff4:	18d0      	adds	r0, r2, r3
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ffc:	4413      	add	r3, r2
 8009ffe:	8819      	ldrh	r1, [r3, #0]
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a006:	18d4      	adds	r4, r2, r3
 800a008:	7efb      	ldrb	r3, [r7, #27]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f000 fce7 	bl	800a9de <lv_color_24_16_mix>
 800a010:	4603      	mov	r3, r0
 800a012:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a016:	3301      	adds	r3, #1
 800a018:	633b      	str	r3, [r7, #48]	@ 0x30
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a01e:	4413      	add	r3, r2
 800a020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	429a      	cmp	r2, r3
 800a028:	dbe2      	blt.n	8009ff0 <rgb888_image_blend+0x110>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	4619      	mov	r1, r3
 800a02e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a030:	f000 fd50 	bl	800aad4 <drawbuf_next_row>
 800a034:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a03a:	4413      	add	r3, r2
 800a03c:	63bb      	str	r3, [r7, #56]	@ 0x38
                for(y = 0; y < h; y++) {
 800a03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a040:	3301      	adds	r3, #1
 800a042:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	429a      	cmp	r2, r3
 800a04a:	dbcc      	blt.n	8009fe6 <rgb888_image_blend+0x106>
                }
            }
        }
        if(mask_buf && opa >= LV_OPA_MAX) {
 800a04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d03f      	beq.n	800a0d2 <rgb888_image_blend+0x1f2>
 800a052:	7efb      	ldrb	r3, [r7, #27]
 800a054:	2bfc      	cmp	r3, #252	@ 0xfc
 800a056:	d93c      	bls.n	800a0d2 <rgb888_image_blend+0x1f2>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB565_WITH_MASK(dsc, src_px_size)) {
                for(y = 0; y < h; y++) {
 800a058:	2300      	movs	r3, #0
 800a05a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a05c:	e035      	b.n	800a0ca <rgb888_image_blend+0x1ea>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a05e:	2300      	movs	r3, #0
 800a060:	633b      	str	r3, [r7, #48]	@ 0x30
 800a062:	2300      	movs	r3, #0
 800a064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a066:	e01b      	b.n	800a0a0 <rgb888_image_blend+0x1c0>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x], mask_buf[dest_x]);
 800a068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a06a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a06c:	18d0      	adds	r0, r2, r3
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a074:	4413      	add	r3, r2
 800a076:	8819      	ldrh	r1, [r3, #0]
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a07c:	4413      	add	r3, r2
 800a07e:	781d      	ldrb	r5, [r3, #0]
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a086:	18d4      	adds	r4, r2, r3
 800a088:	462a      	mov	r2, r5
 800a08a:	f000 fca8 	bl	800a9de <lv_color_24_16_mix>
 800a08e:	4603      	mov	r3, r0
 800a090:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a094:	3301      	adds	r3, #1
 800a096:	633b      	str	r3, [r7, #48]	@ 0x30
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a09c:	4413      	add	r3, r2
 800a09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	dbdf      	blt.n	800a068 <rgb888_image_blend+0x188>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a0ae:	f000 fd11 	bl	800aad4 <drawbuf_next_row>
 800a0b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0b8:	4413      	add	r3, r2
 800a0ba:	63bb      	str	r3, [r7, #56]	@ 0x38
                    mask_buf += mask_stride;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0c0:	4413      	add	r3, r2
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
                for(y = 0; y < h; y++) {
 800a0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	dbc5      	blt.n	800a05e <rgb888_image_blend+0x17e>
                }
            }
        }
        if(mask_buf && opa < LV_OPA_MAX) {
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 81a4 	beq.w	800a422 <rgb888_image_blend+0x542>
 800a0da:	7efb      	ldrb	r3, [r7, #27]
 800a0dc:	2bfc      	cmp	r3, #252	@ 0xfc
 800a0de:	f200 81a0 	bhi.w	800a422 <rgb888_image_blend+0x542>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB565_MIX_MASK_OPA(dsc, src_px_size)) {
                for(y = 0; y < h; y++) {
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0e6:	e03b      	b.n	800a160 <rgb888_image_blend+0x280>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0f0:	e021      	b.n	800a136 <rgb888_image_blend+0x256>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x], LV_OPA_MIX2(mask_buf[dest_x], opa));
 800a0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0f6:	18d0      	adds	r0, r2, r3
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a0fe:	4413      	add	r3, r2
 800a100:	8819      	ldrh	r1, [r3, #0]
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a106:	4413      	add	r3, r2
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	7efb      	ldrb	r3, [r7, #27]
 800a10e:	fb02 f303 	mul.w	r3, r2, r3
 800a112:	121b      	asrs	r3, r3, #8
 800a114:	b2dd      	uxtb	r5, r3
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	005b      	lsls	r3, r3, #1
 800a11a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a11c:	18d4      	adds	r4, r2, r3
 800a11e:	462a      	mov	r2, r5
 800a120:	f000 fc5d 	bl	800a9de <lv_color_24_16_mix>
 800a124:	4603      	mov	r3, r0
 800a126:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	3301      	adds	r3, #1
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a132:	4413      	add	r3, r2
 800a134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	dbd9      	blt.n	800a0f2 <rgb888_image_blend+0x212>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	4619      	mov	r1, r3
 800a142:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a144:	f000 fcc6 	bl	800aad4 <drawbuf_next_row>
 800a148:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a14e:	4413      	add	r3, r2
 800a150:	63bb      	str	r3, [r7, #56]	@ 0x38
                    mask_buf += mask_stride;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a156:	4413      	add	r3, r2
 800a158:	637b      	str	r3, [r7, #52]	@ 0x34
                for(y = 0; y < h; y++) {
 800a15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15c:	3301      	adds	r3, #1
 800a15e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	429a      	cmp	r2, r3
 800a166:	dbbf      	blt.n	800a0e8 <rgb888_image_blend+0x208>
 800a168:	e15b      	b.n	800a422 <rgb888_image_blend+0x542>
                }
            }
        }
    }
    else {
        uint16_t res = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        for(y = 0; y < h; y++) {
 800a16e:	2300      	movs	r3, #0
 800a170:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a172:	e14f      	b.n	800a414 <rgb888_image_blend+0x534>
            lv_color16_t * dest_buf_c16 = (lv_color16_t *) dest_buf_u16;
 800a174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a176:	60bb      	str	r3, [r7, #8]
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a178:	2300      	movs	r3, #0
 800a17a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a17c:	2300      	movs	r3, #0
 800a17e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a180:	e12f      	b.n	800a3e2 <rgb888_image_blend+0x502>
                switch(dsc->blend_mode) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a188:	2b03      	cmp	r3, #3
 800a18a:	f000 8097 	beq.w	800a2bc <rgb888_image_blend+0x3dc>
 800a18e:	2b03      	cmp	r3, #3
 800a190:	f300 8146 	bgt.w	800a420 <rgb888_image_blend+0x540>
 800a194:	2b01      	cmp	r3, #1
 800a196:	d002      	beq.n	800a19e <rgb888_image_blend+0x2be>
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d049      	beq.n	800a230 <rgb888_image_blend+0x350>
                        res += ((dest_buf_c16[dest_x].green * (src_buf_u8[src_x + 1] >> 2)) >> 6) << 5;
                        res += (dest_buf_c16[dest_x].blue * (src_buf_u8[src_x + 0] >> 3)) >> 5;
                        break;
                    default:
                        LV_LOG_WARN("Not supported blend mode: %d", dsc->blend_mode);
                        return;
 800a19c:	e140      	b.n	800a420 <rgb888_image_blend+0x540>
                        res = (LV_MIN(dest_buf_c16[dest_x].red + (src_buf_u8[src_x + 2] >> 3), 31)) << 11;
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	3302      	adds	r3, #2
 800a1b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1b6:	4413      	add	r3, r2
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	08db      	lsrs	r3, r3, #3
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	440b      	add	r3, r1
 800a1c0:	2b1f      	cmp	r3, #31
 800a1c2:	bfa8      	it	ge
 800a1c4:	231f      	movge	r3, #31
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	02db      	lsls	r3, r3, #11
 800a1ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += (LV_MIN(dest_buf_c16[dest_x].green + (src_buf_u8[src_x + 1] >> 2), 63)) << 5;
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1e4:	4413      	add	r3, r2
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	089b      	lsrs	r3, r3, #2
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	440b      	add	r3, r1
 800a1ee:	2b3f      	cmp	r3, #63	@ 0x3f
 800a1f0:	bfa8      	it	ge
 800a1f2:	233f      	movge	r3, #63	@ 0x3f
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	015b      	lsls	r3, r3, #5
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a1fc:	4413      	add	r3, r2
 800a1fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += LV_MIN(dest_buf_c16[dest_x].blue + (src_buf_u8[src_x + 0] >> 3), 31);
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	4413      	add	r3, r2
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	4619      	mov	r1, r3
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a216:	4413      	add	r3, r2
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	440b      	add	r3, r1
 800a220:	2b1f      	cmp	r3, #31
 800a222:	bfa8      	it	ge
 800a224:	231f      	movge	r3, #31
 800a226:	b29a      	uxth	r2, r3
 800a228:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a22a:	4413      	add	r3, r2
 800a22c:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        break;
 800a22e:	e08b      	b.n	800a348 <rgb888_image_blend+0x468>
                        res = (LV_MAX(dest_buf_c16[dest_x].red - (src_buf_u8[src_x + 2] >> 3), 0)) << 11;
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	4413      	add	r3, r2
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	4619      	mov	r1, r3
 800a242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a244:	3302      	adds	r3, #2
 800a246:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a248:	4413      	add	r3, r2
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	08db      	lsrs	r3, r3, #3
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	1acb      	subs	r3, r1, r3
 800a252:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a256:	b29b      	uxth	r3, r3
 800a258:	02db      	lsls	r3, r3, #11
 800a25a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += (LV_MAX(dest_buf_c16[dest_x].green - (src_buf_u8[src_x + 1] >> 2), 0)) << 5;
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	4413      	add	r3, r2
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	4619      	mov	r1, r3
 800a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a270:	3301      	adds	r3, #1
 800a272:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a274:	4413      	add	r3, r2
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	089b      	lsrs	r3, r3, #2
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	1acb      	subs	r3, r1, r3
 800a27e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a282:	b29b      	uxth	r3, r3
 800a284:	015b      	lsls	r3, r3, #5
 800a286:	b29a      	uxth	r2, r3
 800a288:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a28a:	4413      	add	r3, r2
 800a28c:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += LV_MAX(dest_buf_c16[dest_x].blue - (src_buf_u8[src_x + 0] >> 3), 0);
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	4413      	add	r3, r2
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2a4:	4413      	add	r3, r2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	08db      	lsrs	r3, r3, #3
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	1acb      	subs	r3, r1, r3
 800a2ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a2b6:	4413      	add	r3, r2
 800a2b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        break;
 800a2ba:	e045      	b.n	800a348 <rgb888_image_blend+0x468>
                        res = ((dest_buf_c16[dest_x].red * (src_buf_u8[src_x + 2] >> 3)) >> 5) << 11;
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	785b      	ldrb	r3, [r3, #1]
 800a2c6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d0:	3302      	adds	r3, #2
 800a2d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2d4:	4413      	add	r3, r2
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	08db      	lsrs	r3, r3, #3
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	fb01 f303 	mul.w	r3, r1, r3
 800a2e0:	115b      	asrs	r3, r3, #5
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	02db      	lsls	r3, r3, #11
 800a2e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += ((dest_buf_c16[dest_x].green * (src_buf_u8[src_x + 1] >> 2)) >> 6) << 5;
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a300:	4413      	add	r3, r2
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	089b      	lsrs	r3, r3, #2
 800a306:	b2db      	uxtb	r3, r3
 800a308:	fb01 f303 	mul.w	r3, r1, r3
 800a30c:	119b      	asrs	r3, r3, #6
 800a30e:	b29b      	uxth	r3, r3
 800a310:	015b      	lsls	r3, r3, #5
 800a312:	b29a      	uxth	r2, r3
 800a314:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a316:	4413      	add	r3, r2
 800a318:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += (dest_buf_c16[dest_x].blue * (src_buf_u8[src_x + 0] >> 3)) >> 5;
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	4413      	add	r3, r2
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	4619      	mov	r1, r3
 800a32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a330:	4413      	add	r3, r2
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	08db      	lsrs	r3, r3, #3
 800a336:	b2db      	uxtb	r3, r3
 800a338:	fb01 f303 	mul.w	r3, r1, r3
 800a33c:	115b      	asrs	r3, r3, #5
 800a33e:	b29a      	uxth	r2, r3
 800a340:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a342:	4413      	add	r3, r2
 800a344:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        break;
 800a346:	bf00      	nop
                }

                if(mask_buf == NULL) {
 800a348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d110      	bne.n	800a370 <rgb888_image_blend+0x490>
                    dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], opa);
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a354:	4413      	add	r3, r2
 800a356:	8819      	ldrh	r1, [r3, #0]
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a35e:	18d4      	adds	r4, r2, r3
 800a360:	7efa      	ldrb	r2, [r7, #27]
 800a362:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff f877 	bl	8009458 <lv_color_16_16_mix>
 800a36a:	4603      	mov	r3, r0
 800a36c:	8023      	strh	r3, [r4, #0]
 800a36e:	e031      	b.n	800a3d4 <rgb888_image_blend+0x4f4>
                }
                else {
                    if(opa >= LV_OPA_MAX) dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], mask_buf[dest_x]);
 800a370:	7efb      	ldrb	r3, [r7, #27]
 800a372:	2bfc      	cmp	r3, #252	@ 0xfc
 800a374:	d914      	bls.n	800a3a0 <rgb888_image_blend+0x4c0>
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a37c:	4413      	add	r3, r2
 800a37e:	8819      	ldrh	r1, [r3, #0]
 800a380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a384:	4413      	add	r3, r2
 800a386:	7818      	ldrb	r0, [r3, #0]
 800a388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a38e:	18d4      	adds	r4, r2, r3
 800a390:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a392:	4602      	mov	r2, r0
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff f85f 	bl	8009458 <lv_color_16_16_mix>
 800a39a:	4603      	mov	r3, r0
 800a39c:	8023      	strh	r3, [r4, #0]
 800a39e:	e019      	b.n	800a3d4 <rgb888_image_blend+0x4f4>
                    else dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], LV_OPA_MIX2(mask_buf[dest_x], opa));
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3a6:	4413      	add	r3, r2
 800a3a8:	8819      	ldrh	r1, [r3, #0]
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3ae:	4413      	add	r3, r2
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	7efb      	ldrb	r3, [r7, #27]
 800a3b6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ba:	121b      	asrs	r3, r3, #8
 800a3bc:	b2d8      	uxtb	r0, r3
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3c4:	18d4      	adds	r4, r2, r3
 800a3c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff f844 	bl	8009458 <lv_color_16_16_mix>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	8023      	strh	r3, [r4, #0]
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += src_px_size) {
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3da:	78fb      	ldrb	r3, [r7, #3]
 800a3dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3de:	4413      	add	r3, r2
 800a3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	f6ff aecb 	blt.w	800a182 <rgb888_image_blend+0x2a2>
                }
            }
            dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3f2:	f000 fb6f 	bl	800aad4 <drawbuf_next_row>
 800a3f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
            src_buf_u8 += src_stride;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3fc:	4413      	add	r3, r2
 800a3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
            if(mask_buf) mask_buf += mask_stride;
 800a400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <rgb888_image_blend+0x52e>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a40a:	4413      	add	r3, r2
 800a40c:	637b      	str	r3, [r7, #52]	@ 0x34
        for(y = 0; y < h; y++) {
 800a40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a410:	3301      	adds	r3, #1
 800a412:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a414:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	429a      	cmp	r2, r3
 800a41a:	f6ff aeab 	blt.w	800a174 <rgb888_image_blend+0x294>
 800a41e:	e000      	b.n	800a422 <rgb888_image_blend+0x542>
                        return;
 800a420:	bf00      	nop
        }

    }
}
 800a422:	3740      	adds	r7, #64	@ 0x40
 800a424:	46bd      	mov	sp, r7
 800a426:	bdb0      	pop	{r4, r5, r7, pc}

0800a428 <argb8888_image_blend>:

static void LV_ATTRIBUTE_FAST_MEM argb8888_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc)
{
 800a428:	b5b0      	push	{r4, r5, r7, lr}
 800a42a:	b090      	sub	sp, #64	@ 0x40
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    int32_t w = dsc->dest_w;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	623b      	str	r3, [r7, #32]
    int32_t h = dsc->dest_h;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	61fb      	str	r3, [r7, #28]
    lv_opa_t opa = dsc->opa;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a442:	76fb      	strb	r3, [r7, #27]
    uint16_t * dest_buf_u16 = dsc->dest_buf;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t dest_stride = dsc->dest_stride;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	617b      	str	r3, [r7, #20]
    const uint8_t * src_buf_u8 = dsc->src_buf;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t src_stride = dsc->src_stride;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	613b      	str	r3, [r7, #16]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t mask_stride = dsc->mask_stride;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	60fb      	str	r3, [r7, #12]

    int32_t dest_x;
    int32_t src_x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 8125 	bne.w	800a6be <argb8888_image_blend+0x296>
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 800a474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a476:	2b00      	cmp	r3, #0
 800a478:	d13c      	bne.n	800a4f4 <argb8888_image_blend+0xcc>
 800a47a:	7efb      	ldrb	r3, [r7, #27]
 800a47c:	2bfc      	cmp	r3, #252	@ 0xfc
 800a47e:	d939      	bls.n	800a4f4 <argb8888_image_blend+0xcc>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565(dsc)) {
                for(y = 0; y < h; y++) {
 800a480:	2300      	movs	r3, #0
 800a482:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a484:	e031      	b.n	800a4ea <argb8888_image_blend+0xc2>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a486:	2300      	movs	r3, #0
 800a488:	633b      	str	r3, [r7, #48]	@ 0x30
 800a48a:	2300      	movs	r3, #0
 800a48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a48e:	e01b      	b.n	800a4c8 <argb8888_image_blend+0xa0>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x], src_buf_u8[src_x + 3]);
 800a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a494:	18d0      	adds	r0, r2, r3
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	005b      	lsls	r3, r3, #1
 800a49a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a49c:	4413      	add	r3, r2
 800a49e:	8819      	ldrh	r1, [r3, #0]
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	3303      	adds	r3, #3
 800a4a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4a6:	4413      	add	r3, r2
 800a4a8:	781d      	ldrb	r5, [r3, #0]
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	005b      	lsls	r3, r3, #1
 800a4ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4b0:	18d4      	adds	r4, r2, r3
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	f000 fa93 	bl	800a9de <lv_color_24_16_mix>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	3301      	adds	r3, #1
 800a4c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	dbdf      	blt.n	800a490 <argb8888_image_blend+0x68>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a4d6:	f000 fafd 	bl	800aad4 <drawbuf_next_row>
 800a4da:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4e0:	4413      	add	r3, r2
 800a4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
                for(y = 0; y < h; y++) {
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	dbc9      	blt.n	800a486 <argb8888_image_blend+0x5e>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565(dsc)) {
 800a4f2:	e271      	b.n	800a9d8 <argb8888_image_blend+0x5b0>
                }
            }
        }
        else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d142      	bne.n	800a580 <argb8888_image_blend+0x158>
 800a4fa:	7efb      	ldrb	r3, [r7, #27]
 800a4fc:	2bfc      	cmp	r3, #252	@ 0xfc
 800a4fe:	d83f      	bhi.n	800a580 <argb8888_image_blend+0x158>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565_WITH_OPA(dsc)) {
                for(y = 0; y < h; y++) {
 800a500:	2300      	movs	r3, #0
 800a502:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a504:	e037      	b.n	800a576 <argb8888_image_blend+0x14e>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a506:	2300      	movs	r3, #0
 800a508:	633b      	str	r3, [r7, #48]	@ 0x30
 800a50a:	2300      	movs	r3, #0
 800a50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a50e:	e021      	b.n	800a554 <argb8888_image_blend+0x12c>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x], LV_OPA_MIX2(src_buf_u8[src_x + 3],
 800a510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a512:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a514:	18d0      	adds	r0, r2, r3
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a51c:	4413      	add	r3, r2
 800a51e:	8819      	ldrh	r1, [r3, #0]
 800a520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a522:	3303      	adds	r3, #3
 800a524:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a526:	4413      	add	r3, r2
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	7efb      	ldrb	r3, [r7, #27]
 800a52e:	fb02 f303 	mul.w	r3, r2, r3
 800a532:	121b      	asrs	r3, r3, #8
 800a534:	b2dd      	uxtb	r5, r3
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a53c:	18d4      	adds	r4, r2, r3
 800a53e:	462a      	mov	r2, r5
 800a540:	f000 fa4d 	bl	800a9de <lv_color_24_16_mix>
 800a544:	4603      	mov	r3, r0
 800a546:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	3301      	adds	r3, #1
 800a54c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	3304      	adds	r3, #4
 800a552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	429a      	cmp	r2, r3
 800a55a:	dbd9      	blt.n	800a510 <argb8888_image_blend+0xe8>
                                                                                                                        opa));
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	4619      	mov	r1, r3
 800a560:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a562:	f000 fab7 	bl	800aad4 <drawbuf_next_row>
 800a566:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a56c:	4413      	add	r3, r2
 800a56e:	63bb      	str	r3, [r7, #56]	@ 0x38
                for(y = 0; y < h; y++) {
 800a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a572:	3301      	adds	r3, #1
 800a574:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	dbc3      	blt.n	800a506 <argb8888_image_blend+0xde>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565_WITH_OPA(dsc)) {
 800a57e:	e22b      	b.n	800a9d8 <argb8888_image_blend+0x5b0>
                }
            }
        }
        else if(mask_buf && opa >= LV_OPA_MAX) {
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a582:	2b00      	cmp	r3, #0
 800a584:	d049      	beq.n	800a61a <argb8888_image_blend+0x1f2>
 800a586:	7efb      	ldrb	r3, [r7, #27]
 800a588:	2bfc      	cmp	r3, #252	@ 0xfc
 800a58a:	d946      	bls.n	800a61a <argb8888_image_blend+0x1f2>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565_WITH_MASK(dsc)) {
                for(y = 0; y < h; y++) {
 800a58c:	2300      	movs	r3, #0
 800a58e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a590:	e03e      	b.n	800a610 <argb8888_image_blend+0x1e8>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a592:	2300      	movs	r3, #0
 800a594:	633b      	str	r3, [r7, #48]	@ 0x30
 800a596:	2300      	movs	r3, #0
 800a598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a59a:	e024      	b.n	800a5e6 <argb8888_image_blend+0x1be>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x],
 800a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5a0:	18d0      	adds	r0, r2, r3
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a5a8:	4413      	add	r3, r2
 800a5aa:	8819      	ldrh	r1, [r3, #0]
                                                                  LV_OPA_MIX2(src_buf_u8[src_x + 3], mask_buf[dest_x]));
 800a5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ae:	3303      	adds	r3, #3
 800a5b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5b2:	4413      	add	r3, r2
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	461c      	mov	r4, r3
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5bc:	4413      	add	r3, r2
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	fb04 f303 	mul.w	r3, r4, r3
 800a5c4:	121b      	asrs	r3, r3, #8
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x],
 800a5c6:	b2dd      	uxtb	r5, r3
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a5ce:	18d4      	adds	r4, r2, r3
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	f000 fa04 	bl	800a9de <lv_color_24_16_mix>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	3301      	adds	r3, #1
 800a5de:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	dbd6      	blt.n	800a59c <argb8888_image_blend+0x174>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a5f4:	f000 fa6e 	bl	800aad4 <drawbuf_next_row>
 800a5f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5fe:	4413      	add	r3, r2
 800a600:	63bb      	str	r3, [r7, #56]	@ 0x38
                    mask_buf += mask_stride;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a606:	4413      	add	r3, r2
 800a608:	637b      	str	r3, [r7, #52]	@ 0x34
                for(y = 0; y < h; y++) {
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	3301      	adds	r3, #1
 800a60e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	429a      	cmp	r2, r3
 800a616:	dbbc      	blt.n	800a592 <argb8888_image_blend+0x16a>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565_WITH_MASK(dsc)) {
 800a618:	e1de      	b.n	800a9d8 <argb8888_image_blend+0x5b0>
                }
            }
        }
        else if(mask_buf && opa < LV_OPA_MAX) {
 800a61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 81db 	beq.w	800a9d8 <argb8888_image_blend+0x5b0>
 800a622:	7efb      	ldrb	r3, [r7, #27]
 800a624:	2bfc      	cmp	r3, #252	@ 0xfc
 800a626:	f200 81d7 	bhi.w	800a9d8 <argb8888_image_blend+0x5b0>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB565_MIX_MASK_OPA(dsc)) {
                for(y = 0; y < h; y++) {
 800a62a:	2300      	movs	r3, #0
 800a62c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a62e:	e041      	b.n	800a6b4 <argb8888_image_blend+0x28c>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a630:	2300      	movs	r3, #0
 800a632:	633b      	str	r3, [r7, #48]	@ 0x30
 800a634:	2300      	movs	r3, #0
 800a636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a638:	e027      	b.n	800a68a <argb8888_image_blend+0x262>
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x],
 800a63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a63e:	18d0      	adds	r0, r2, r3
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a646:	4413      	add	r3, r2
 800a648:	8819      	ldrh	r1, [r3, #0]
                                                                  LV_OPA_MIX3(src_buf_u8[src_x + 3], mask_buf[dest_x], opa));
 800a64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64c:	3303      	adds	r3, #3
 800a64e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a650:	4413      	add	r3, r2
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	461c      	mov	r4, r3
 800a656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a65a:	4413      	add	r3, r2
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	fb04 f303 	mul.w	r3, r4, r3
 800a662:	7efa      	ldrb	r2, [r7, #27]
 800a664:	fb02 f303 	mul.w	r3, r2, r3
 800a668:	141b      	asrs	r3, r3, #16
                        dest_buf_u16[dest_x] = lv_color_24_16_mix(&src_buf_u8[src_x], dest_buf_u16[dest_x],
 800a66a:	b2dd      	uxtb	r5, r3
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a672:	18d4      	adds	r4, r2, r3
 800a674:	462a      	mov	r2, r5
 800a676:	f000 f9b2 	bl	800a9de <lv_color_24_16_mix>
 800a67a:	4603      	mov	r3, r0
 800a67c:	8023      	strh	r3, [r4, #0]
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	3301      	adds	r3, #1
 800a682:	633b      	str	r3, [r7, #48]	@ 0x30
 800a684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a686:	3304      	adds	r3, #4
 800a688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a68a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	429a      	cmp	r2, r3
 800a690:	dbd3      	blt.n	800a63a <argb8888_image_blend+0x212>
                    }
                    dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	4619      	mov	r1, r3
 800a696:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a698:	f000 fa1c 	bl	800aad4 <drawbuf_next_row>
 800a69c:	63f8      	str	r0, [r7, #60]	@ 0x3c
                    src_buf_u8 += src_stride;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6a2:	4413      	add	r3, r2
 800a6a4:	63bb      	str	r3, [r7, #56]	@ 0x38
                    mask_buf += mask_stride;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6aa:	4413      	add	r3, r2
 800a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
                for(y = 0; y < h; y++) {
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	dbb9      	blt.n	800a630 <argb8888_image_blend+0x208>
 800a6bc:	e18c      	b.n	800a9d8 <argb8888_image_blend+0x5b0>
                }
            }
        }
    }
    else {
        uint16_t res = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        for(y = 0; y < h; y++) {
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6c6:	e180      	b.n	800a9ca <argb8888_image_blend+0x5a2>
            lv_color16_t * dest_buf_c16 = (lv_color16_t *) dest_buf_u16;
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ca:	60bb      	str	r3, [r7, #8]
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6d4:	e160      	b.n	800a998 <argb8888_image_blend+0x570>
                switch(dsc->blend_mode) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	f000 8097 	beq.w	800a810 <argb8888_image_blend+0x3e8>
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	f300 8177 	bgt.w	800a9d6 <argb8888_image_blend+0x5ae>
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d002      	beq.n	800a6f2 <argb8888_image_blend+0x2ca>
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d049      	beq.n	800a784 <argb8888_image_blend+0x35c>
                        res += ((dest_buf_c16[dest_x].green * (src_buf_u8[src_x + 1] >> 2)) >> 6) << 5;
                        res += (dest_buf_c16[dest_x].blue * (src_buf_u8[src_x + 0] >> 3)) >> 5;
                        break;
                    default:
                        LV_LOG_WARN("Not supported blend mode: %d", dsc->blend_mode);
                        return;
 800a6f0:	e171      	b.n	800a9d6 <argb8888_image_blend+0x5ae>
                        res = (LV_MIN(dest_buf_c16[dest_x].red + (src_buf_u8[src_x + 2] >> 3), 31)) << 11;
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	785b      	ldrb	r3, [r3, #1]
 800a6fc:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a700:	b2db      	uxtb	r3, r3
 800a702:	4619      	mov	r1, r3
 800a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a706:	3302      	adds	r3, #2
 800a708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a70a:	4413      	add	r3, r2
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	08db      	lsrs	r3, r3, #3
 800a710:	b2db      	uxtb	r3, r3
 800a712:	440b      	add	r3, r1
 800a714:	2b1f      	cmp	r3, #31
 800a716:	bfa8      	it	ge
 800a718:	231f      	movge	r3, #31
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	02db      	lsls	r3, r3, #11
 800a71e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += (LV_MIN(dest_buf_c16[dest_x].green + (src_buf_u8[src_x + 1] >> 2), 63)) << 5;
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	4413      	add	r3, r2
 800a728:	881b      	ldrh	r3, [r3, #0]
 800a72a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a734:	3301      	adds	r3, #1
 800a736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a738:	4413      	add	r3, r2
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	089b      	lsrs	r3, r3, #2
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	440b      	add	r3, r1
 800a742:	2b3f      	cmp	r3, #63	@ 0x3f
 800a744:	bfa8      	it	ge
 800a746:	233f      	movge	r3, #63	@ 0x3f
 800a748:	b29b      	uxth	r3, r3
 800a74a:	015b      	lsls	r3, r3, #5
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a750:	4413      	add	r3, r2
 800a752:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += LV_MIN(dest_buf_c16[dest_x].blue + (src_buf_u8[src_x + 0] >> 3), 31);
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	4413      	add	r3, r2
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a762:	b2db      	uxtb	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a76a:	4413      	add	r3, r2
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	08db      	lsrs	r3, r3, #3
 800a770:	b2db      	uxtb	r3, r3
 800a772:	440b      	add	r3, r1
 800a774:	2b1f      	cmp	r3, #31
 800a776:	bfa8      	it	ge
 800a778:	231f      	movge	r3, #31
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a77e:	4413      	add	r3, r2
 800a780:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        break;
 800a782:	e08b      	b.n	800a89c <argb8888_image_blend+0x474>
                        res = (LV_MAX(dest_buf_c16[dest_x].red - (src_buf_u8[src_x + 2] >> 3), 0)) << 11;
 800a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4413      	add	r3, r2
 800a78c:	785b      	ldrb	r3, [r3, #1]
 800a78e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a792:	b2db      	uxtb	r3, r3
 800a794:	4619      	mov	r1, r3
 800a796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a798:	3302      	adds	r3, #2
 800a79a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a79c:	4413      	add	r3, r2
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	08db      	lsrs	r3, r3, #3
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	1acb      	subs	r3, r1, r3
 800a7a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	02db      	lsls	r3, r3, #11
 800a7ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += (LV_MAX(dest_buf_c16[dest_x].green - (src_buf_u8[src_x + 1] >> 2), 0)) << 5;
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7c8:	4413      	add	r3, r2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	089b      	lsrs	r3, r3, #2
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	1acb      	subs	r3, r1, r3
 800a7d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	015b      	lsls	r3, r3, #5
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a7de:	4413      	add	r3, r2
 800a7e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += LV_MAX(dest_buf_c16[dest_x].blue - (src_buf_u8[src_x + 0] >> 3), 0);
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7f8:	4413      	add	r3, r2
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	08db      	lsrs	r3, r3, #3
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	1acb      	subs	r3, r1, r3
 800a802:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a806:	b29a      	uxth	r2, r3
 800a808:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a80a:	4413      	add	r3, r2
 800a80c:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        break;
 800a80e:	e045      	b.n	800a89c <argb8888_image_blend+0x474>
                        res = ((dest_buf_c16[dest_x].red * (src_buf_u8[src_x + 2] >> 3)) >> 5) << 11;
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	4413      	add	r3, r2
 800a818:	785b      	ldrb	r3, [r3, #1]
 800a81a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	4619      	mov	r1, r3
 800a822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a824:	3302      	adds	r3, #2
 800a826:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a828:	4413      	add	r3, r2
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	08db      	lsrs	r3, r3, #3
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	fb01 f303 	mul.w	r3, r1, r3
 800a834:	115b      	asrs	r3, r3, #5
 800a836:	b29b      	uxth	r3, r3
 800a838:	02db      	lsls	r3, r3, #11
 800a83a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += ((dest_buf_c16[dest_x].green * (src_buf_u8[src_x + 1] >> 2)) >> 6) << 5;
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	4413      	add	r3, r2
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	4619      	mov	r1, r3
 800a84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a850:	3301      	adds	r3, #1
 800a852:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a854:	4413      	add	r3, r2
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	089b      	lsrs	r3, r3, #2
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	fb01 f303 	mul.w	r3, r1, r3
 800a860:	119b      	asrs	r3, r3, #6
 800a862:	b29b      	uxth	r3, r3
 800a864:	015b      	lsls	r3, r3, #5
 800a866:	b29a      	uxth	r2, r3
 800a868:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a86a:	4413      	add	r3, r2
 800a86c:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        res += (dest_buf_c16[dest_x].blue * (src_buf_u8[src_x + 0] >> 3)) >> 5;
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	4413      	add	r3, r2
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	4619      	mov	r1, r3
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a884:	4413      	add	r3, r2
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	08db      	lsrs	r3, r3, #3
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	fb01 f303 	mul.w	r3, r1, r3
 800a890:	115b      	asrs	r3, r3, #5
 800a892:	b29a      	uxth	r2, r3
 800a894:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a896:	4413      	add	r3, r2
 800a898:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        break;
 800a89a:	bf00      	nop
                }

                if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 800a89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d118      	bne.n	800a8d4 <argb8888_image_blend+0x4ac>
 800a8a2:	7efb      	ldrb	r3, [r7, #27]
 800a8a4:	2bfc      	cmp	r3, #252	@ 0xfc
 800a8a6:	d915      	bls.n	800a8d4 <argb8888_image_blend+0x4ac>
                    dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], src_buf_u8[src_x + 3]);
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8ae:	4413      	add	r3, r2
 800a8b0:	8819      	ldrh	r1, [r3, #0]
 800a8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b4:	3303      	adds	r3, #3
 800a8b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8b8:	4413      	add	r3, r2
 800a8ba:	7818      	ldrb	r0, [r3, #0]
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8c2:	18d4      	adds	r4, r2, r3
 800a8c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe fdc5 	bl	8009458 <lv_color_16_16_mix>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	8023      	strh	r3, [r4, #0]
 800a8d2:	e05b      	b.n	800a98c <argb8888_image_blend+0x564>
                }
                else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 800a8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d11e      	bne.n	800a918 <argb8888_image_blend+0x4f0>
 800a8da:	7efb      	ldrb	r3, [r7, #27]
 800a8dc:	2bfc      	cmp	r3, #252	@ 0xfc
 800a8de:	d81b      	bhi.n	800a918 <argb8888_image_blend+0x4f0>
                    dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], LV_OPA_MIX2(opa, src_buf_u8[src_x + 3]));
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8e6:	4413      	add	r3, r2
 800a8e8:	8818      	ldrh	r0, [r3, #0]
 800a8ea:	7efb      	ldrb	r3, [r7, #27]
 800a8ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8ee:	3203      	adds	r2, #3
 800a8f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a8f2:	440a      	add	r2, r1
 800a8f4:	7812      	ldrb	r2, [r2, #0]
 800a8f6:	fb02 f303 	mul.w	r3, r2, r3
 800a8fa:	121b      	asrs	r3, r3, #8
 800a8fc:	b2d9      	uxtb	r1, r3
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a900:	005b      	lsls	r3, r3, #1
 800a902:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a904:	18d4      	adds	r4, r2, r3
 800a906:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a908:	460a      	mov	r2, r1
 800a90a:	4601      	mov	r1, r0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe fda3 	bl	8009458 <lv_color_16_16_mix>
 800a912:	4603      	mov	r3, r0
 800a914:	8023      	strh	r3, [r4, #0]
 800a916:	e039      	b.n	800a98c <argb8888_image_blend+0x564>
                }
                else {
                    if(opa >= LV_OPA_MAX) dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], mask_buf[dest_x]);
 800a918:	7efb      	ldrb	r3, [r7, #27]
 800a91a:	2bfc      	cmp	r3, #252	@ 0xfc
 800a91c:	d914      	bls.n	800a948 <argb8888_image_blend+0x520>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a924:	4413      	add	r3, r2
 800a926:	8819      	ldrh	r1, [r3, #0]
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a92c:	4413      	add	r3, r2
 800a92e:	7818      	ldrb	r0, [r3, #0]
 800a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a936:	18d4      	adds	r4, r2, r3
 800a938:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a93a:	4602      	mov	r2, r0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fd8b 	bl	8009458 <lv_color_16_16_mix>
 800a942:	4603      	mov	r3, r0
 800a944:	8023      	strh	r3, [r4, #0]
 800a946:	e021      	b.n	800a98c <argb8888_image_blend+0x564>
                    else dest_buf_u16[dest_x] = lv_color_16_16_mix(res, dest_buf_u16[dest_x], LV_OPA_MIX3(mask_buf[dest_x], opa,
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a94e:	4413      	add	r3, r2
 800a950:	8818      	ldrh	r0, [r3, #0]
 800a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a956:	4413      	add	r3, r2
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	7efb      	ldrb	r3, [r7, #27]
 800a95e:	fb02 f303 	mul.w	r3, r2, r3
 800a962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a964:	3203      	adds	r2, #3
 800a966:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a968:	440a      	add	r2, r1
 800a96a:	7812      	ldrb	r2, [r2, #0]
 800a96c:	fb02 f303 	mul.w	r3, r2, r3
 800a970:	141b      	asrs	r3, r3, #16
 800a972:	b2d9      	uxtb	r1, r3
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a97a:	18d4      	adds	r4, r2, r3
 800a97c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a97e:	460a      	mov	r2, r1
 800a980:	4601      	mov	r1, r0
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe fd68 	bl	8009458 <lv_color_16_16_mix>
 800a988:	4603      	mov	r3, r0
 800a98a:	8023      	strh	r3, [r4, #0]
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x++, src_x += 4) {
 800a98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98e:	3301      	adds	r3, #1
 800a990:	633b      	str	r3, [r7, #48]	@ 0x30
 800a992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a994:	3304      	adds	r3, #4
 800a996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	f6ff ae9a 	blt.w	800a6d6 <argb8888_image_blend+0x2ae>
                                                                                                              src_buf_u8[src_x + 3]));
                }
            }

            dest_buf_u16 = drawbuf_next_row(dest_buf_u16, dest_stride);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a9a8:	f000 f894 	bl	800aad4 <drawbuf_next_row>
 800a9ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
            src_buf_u8 += src_stride;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9b2:	4413      	add	r3, r2
 800a9b4:	63bb      	str	r3, [r7, #56]	@ 0x38
            if(mask_buf) mask_buf += mask_stride;
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <argb8888_image_blend+0x59c>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9c0:	4413      	add	r3, r2
 800a9c2:	637b      	str	r3, [r7, #52]	@ 0x34
        for(y = 0; y < h; y++) {
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	f6ff ae7a 	blt.w	800a6c8 <argb8888_image_blend+0x2a0>
 800a9d4:	e000      	b.n	800a9d8 <argb8888_image_blend+0x5b0>
                        return;
 800a9d6:	bf00      	nop
        }
    }
}
 800a9d8:	3740      	adds	r7, #64	@ 0x40
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bdb0      	pop	{r4, r5, r7, pc}

0800a9de <lv_color_24_16_mix>:

static inline uint16_t LV_ATTRIBUTE_FAST_MEM lv_color_24_16_mix(const uint8_t * c1, uint16_t c2, uint8_t mix)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	807b      	strh	r3, [r7, #2]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	707b      	strb	r3, [r7, #1]
    if(mix == 0) {
 800a9ee:	787b      	ldrb	r3, [r7, #1]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <lv_color_24_16_mix+0x1a>
        return c2;
 800a9f4:	887b      	ldrh	r3, [r7, #2]
 800a9f6:	e067      	b.n	800aac8 <lv_color_24_16_mix+0xea>
    }
    else if(mix == 255) {
 800a9f8:	787b      	ldrb	r3, [r7, #1]
 800a9fa:	2bff      	cmp	r3, #255	@ 0xff
 800a9fc:	d11b      	bne.n	800aa36 <lv_color_24_16_mix+0x58>
        return ((c1[2] & 0xF8) << 8)  + ((c1[1] & 0xFC) << 3) + ((c1[0] & 0xF8) >> 3);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3302      	adds	r3, #2
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	021b      	lsls	r3, r3, #8
 800aa06:	b21b      	sxth	r3, r3
 800aa08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa0c:	f023 0307 	bic.w	r3, r3, #7
 800aa10:	b21a      	sxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	3301      	adds	r3, #1
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	b21b      	sxth	r3, r3
 800aa1c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800aa20:	b21b      	sxth	r3, r3
 800aa22:	4313      	orrs	r3, r2
 800aa24:	b21b      	sxth	r3, r3
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	7812      	ldrb	r2, [r2, #0]
 800aa2c:	08d2      	lsrs	r2, r2, #3
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	4413      	add	r3, r2
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	e048      	b.n	800aac8 <lv_color_24_16_mix+0xea>
    }
    else {
        lv_opa_t mix_inv = 255 - mix;
 800aa36:	787b      	ldrb	r3, [r7, #1]
 800aa38:	43db      	mvns	r3, r3
 800aa3a:	73fb      	strb	r3, [r7, #15]

        return ((((c1[2] >> 3) * mix + ((c2 >> 11) & 0x1F) * mix_inv) << 3) & 0xF800) +
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3302      	adds	r3, #2
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	08db      	lsrs	r3, r3, #3
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	461a      	mov	r2, r3
 800aa48:	787b      	ldrb	r3, [r7, #1]
 800aa4a:	fb03 f202 	mul.w	r2, r3, r2
 800aa4e:	887b      	ldrh	r3, [r7, #2]
 800aa50:	0adb      	lsrs	r3, r3, #11
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	7bf9      	ldrb	r1, [r7, #15]
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	4413      	add	r3, r2
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	b21b      	sxth	r3, r3
 800aa64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa68:	f023 0307 	bic.w	r3, r3, #7
 800aa6c:	b21a      	sxth	r2, r3
               ((((c1[1] >> 2) * mix + ((c2 >> 5) & 0x3F) * mix_inv) >> 3) & 0x07E0) +
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	3301      	adds	r3, #1
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	089b      	lsrs	r3, r3, #2
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	4619      	mov	r1, r3
 800aa7a:	787b      	ldrb	r3, [r7, #1]
 800aa7c:	fb03 f101 	mul.w	r1, r3, r1
 800aa80:	887b      	ldrh	r3, [r7, #2]
 800aa82:	095b      	lsrs	r3, r3, #5
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa8a:	7bf8      	ldrb	r0, [r7, #15]
 800aa8c:	fb00 f303 	mul.w	r3, r0, r3
 800aa90:	440b      	add	r3, r1
 800aa92:	10db      	asrs	r3, r3, #3
 800aa94:	b21b      	sxth	r3, r3
 800aa96:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800aa9a:	b21b      	sxth	r3, r3
        return ((((c1[2] >> 3) * mix + ((c2 >> 11) & 0x1F) * mix_inv) << 3) & 0xF800) +
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	b21b      	sxth	r3, r3
 800aaa0:	b29a      	uxth	r2, r3
               (((c1[0] >> 3) * mix + (c2 & 0x1F) * mix_inv) >> 8);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	08db      	lsrs	r3, r3, #3
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	4619      	mov	r1, r3
 800aaac:	787b      	ldrb	r3, [r7, #1]
 800aaae:	fb03 f101 	mul.w	r1, r3, r1
 800aab2:	887b      	ldrh	r3, [r7, #2]
 800aab4:	f003 031f 	and.w	r3, r3, #31
 800aab8:	7bf8      	ldrb	r0, [r7, #15]
 800aaba:	fb00 f303 	mul.w	r3, r0, r3
 800aabe:	440b      	add	r3, r1
 800aac0:	121b      	asrs	r3, r3, #8
               ((((c1[1] >> 2) * mix + ((c2 >> 5) & 0x3F) * mix_inv) >> 3) & 0x07E0) +
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	4413      	add	r3, r2
 800aac6:	b29b      	uxth	r3, r3
    }
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <drawbuf_next_row>:

static inline void * LV_ATTRIBUTE_FAST_MEM drawbuf_next_row(const void * buf, uint32_t stride)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
    return (void *)((uint8_t *)buf + stride);
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	4413      	add	r3, r2
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <lv_draw_sw_blend_color_to_rgb888>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_blend_color_to_rgb888(_lv_draw_sw_blend_fill_dsc_t * dsc, uint32_t dest_px_size)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b096      	sub	sp, #88	@ 0x58
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
    int32_t w = dsc->dest_w;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	657b      	str	r3, [r7, #84]	@ 0x54
    int32_t h = dsc->dest_h;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	62bb      	str	r3, [r7, #40]	@ 0x28
    lv_opa_t opa = dsc->opa;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	7edb      	ldrb	r3, [r3, #27]
 800ab0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    const lv_opa_t * mask = dsc->mask_buf;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	653b      	str	r3, [r7, #80]	@ 0x50
    int32_t mask_stride = dsc->mask_stride;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	623b      	str	r3, [r7, #32]
    int32_t dest_stride = dsc->dest_stride;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	61fb      	str	r3, [r7, #28]
    LV_UNUSED(mask);
    LV_UNUSED(mask_stride);
    LV_UNUSED(dest_stride);

    /*Simple fill*/
    if(mask == NULL && opa >= LV_OPA_MAX) {
 800ab20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f040 80ef 	bne.w	800ad06 <lv_draw_sw_blend_color_to_rgb888+0x216>
 800ab28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab2c:	2bfc      	cmp	r3, #252	@ 0xfc
 800ab2e:	f240 80ea 	bls.w	800ad06 <lv_draw_sw_blend_color_to_rgb888+0x216>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888(dsc, dest_px_size)) {
            if(dest_px_size == 3) {
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d140      	bne.n	800abba <lv_draw_sw_blend_color_to_rgb888+0xca>
                uint8_t * dest_buf_u8 = dsc->dest_buf;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	647b      	str	r3, [r7, #68]	@ 0x44
                uint8_t * dest_buf_ori = dsc->dest_buf;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	61bb      	str	r3, [r7, #24]
                w *= dest_px_size;
 800ab44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	fb02 f303 	mul.w	r3, r2, r3
 800ab4c:	657b      	str	r3, [r7, #84]	@ 0x54

                for(x = 0; x < w; x += 3) {
 800ab4e:	2300      	movs	r3, #0
 800ab50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab52:	e016      	b.n	800ab82 <lv_draw_sw_blend_color_to_rgb888+0x92>
                    dest_buf_u8[x + 0] = dsc->color.blue;
 800ab54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab58:	4413      	add	r3, r2
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	7e12      	ldrb	r2, [r2, #24]
 800ab5e:	701a      	strb	r2, [r3, #0]
                    dest_buf_u8[x + 1] = dsc->color.green;
 800ab60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab62:	3301      	adds	r3, #1
 800ab64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab66:	4413      	add	r3, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7e52      	ldrb	r2, [r2, #25]
 800ab6c:	701a      	strb	r2, [r3, #0]
                    dest_buf_u8[x + 2] = dsc->color.red;
 800ab6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab70:	3302      	adds	r3, #2
 800ab72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab74:	4413      	add	r3, r2
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	7e92      	ldrb	r2, [r2, #26]
 800ab7a:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x += 3) {
 800ab7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab7e:	3303      	adds	r3, #3
 800ab80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab86:	429a      	cmp	r2, r3
 800ab88:	dbe4      	blt.n	800ab54 <lv_draw_sw_blend_color_to_rgb888+0x64>
                }

                dest_buf_u8 += dest_stride;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab8e:	4413      	add	r3, r2
 800ab90:	647b      	str	r3, [r7, #68]	@ 0x44

                for(y = 1; y < h; y++) {
 800ab92:	2301      	movs	r3, #1
 800ab94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab96:	e00c      	b.n	800abb2 <lv_draw_sw_blend_color_to_rgb888+0xc2>
                    lv_memcpy(dest_buf_u8, dest_buf_ori, w);
 800ab98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	69b9      	ldr	r1, [r7, #24]
 800ab9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800aba0:	f012 f8c0 	bl	801cd24 <lv_memcpy>
                    dest_buf_u8 += dest_stride;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aba8:	4413      	add	r3, r2
 800abaa:	647b      	str	r3, [r7, #68]	@ 0x44
                for(y = 1; y < h; y++) {
 800abac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abae:	3301      	adds	r3, #1
 800abb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	429a      	cmp	r2, r3
 800abb8:	dbee      	blt.n	800ab98 <lv_draw_sw_blend_color_to_rgb888+0xa8>
                }
            }
            if(dest_px_size == 4) {
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	f040 8165 	bne.w	800ae8c <lv_draw_sw_blend_color_to_rgb888+0x39c>
                uint32_t color32 = lv_color_to_u32(dsc->color);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6998      	ldr	r0, [r3, #24]
 800abc6:	f010 fc1a 	bl	801b3fe <lv_color_to_u32>
 800abca:	6178      	str	r0, [r7, #20]
                uint32_t * dest_buf_u32 = dsc->dest_buf;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	643b      	str	r3, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 800abd2:	2300      	movs	r3, #0
 800abd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd6:	e090      	b.n	800acfa <lv_draw_sw_blend_color_to_rgb888+0x20a>
                    for(x = 0; x <= w - 16; x += 16) {
 800abd8:	2300      	movs	r3, #0
 800abda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abdc:	e071      	b.n	800acc2 <lv_draw_sw_blend_color_to_rgb888+0x1d2>
                        dest_buf_u32[x + 0] = color32;
 800abde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abe4:	4413      	add	r3, r2
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 1] = color32;
 800abea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abec:	3301      	adds	r3, #1
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abf2:	4413      	add	r3, r2
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 2] = color32;
 800abf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abfa:	3302      	adds	r3, #2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac00:	4413      	add	r3, r2
 800ac02:	697a      	ldr	r2, [r7, #20]
 800ac04:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 3] = color32;
 800ac06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac08:	3303      	adds	r3, #3
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac0e:	4413      	add	r3, r2
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	601a      	str	r2, [r3, #0]

                        dest_buf_u32[x + 4] = color32;
 800ac14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac16:	3304      	adds	r3, #4
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac1c:	4413      	add	r3, r2
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 5] = color32;
 800ac22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac24:	3305      	adds	r3, #5
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac2a:	4413      	add	r3, r2
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 6] = color32;
 800ac30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac32:	3306      	adds	r3, #6
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac38:	4413      	add	r3, r2
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 7] = color32;
 800ac3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac40:	3307      	adds	r3, #7
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac46:	4413      	add	r3, r2
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	601a      	str	r2, [r3, #0]

                        dest_buf_u32[x + 8] = color32;
 800ac4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac4e:	3308      	adds	r3, #8
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac54:	4413      	add	r3, r2
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 9] = color32;
 800ac5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac5c:	3309      	adds	r3, #9
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac62:	4413      	add	r3, r2
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 10] = color32;
 800ac68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac6a:	330a      	adds	r3, #10
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac70:	4413      	add	r3, r2
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 11] = color32;
 800ac76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac78:	330b      	adds	r3, #11
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac7e:	4413      	add	r3, r2
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	601a      	str	r2, [r3, #0]

                        dest_buf_u32[x + 12] = color32;
 800ac84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac86:	330c      	adds	r3, #12
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac8c:	4413      	add	r3, r2
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 13] = color32;
 800ac92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac94:	330d      	adds	r3, #13
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac9a:	4413      	add	r3, r2
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 14] = color32;
 800aca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aca2:	330e      	adds	r3, #14
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aca8:	4413      	add	r3, r2
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	601a      	str	r2, [r3, #0]
                        dest_buf_u32[x + 15] = color32;
 800acae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb0:	330f      	adds	r3, #15
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acb6:	4413      	add	r3, r2
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	601a      	str	r2, [r3, #0]
                    for(x = 0; x <= w - 16; x += 16) {
 800acbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acbe:	3310      	adds	r3, #16
 800acc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acc4:	3b0f      	subs	r3, #15
 800acc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800acc8:	429a      	cmp	r2, r3
 800acca:	db88      	blt.n	800abde <lv_draw_sw_blend_color_to_rgb888+0xee>
                    }
                    for(; x < w; x ++) {
 800accc:	e008      	b.n	800ace0 <lv_draw_sw_blend_color_to_rgb888+0x1f0>
                        dest_buf_u32[x] = color32;
 800acce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800acd4:	4413      	add	r3, r2
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	601a      	str	r2, [r3, #0]
                    for(; x < w; x ++) {
 800acda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acdc:	3301      	adds	r3, #1
 800acde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ace0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ace2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ace4:	429a      	cmp	r2, r3
 800ace6:	dbf2      	blt.n	800acce <lv_draw_sw_blend_color_to_rgb888+0x1de>
                    }

                    dest_buf_u32 = drawbuf_next_row(dest_buf_u32, dest_stride);
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	4619      	mov	r1, r3
 800acec:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800acee:	f000 ff72 	bl	800bbd6 <drawbuf_next_row>
 800acf2:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 800acf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800acf6:	3301      	adds	r3, #1
 800acf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfe:	429a      	cmp	r2, r3
 800ad00:	f6ff af6a 	blt.w	800abd8 <lv_draw_sw_blend_color_to_rgb888+0xe8>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888(dsc, dest_px_size)) {
 800ad04:	e0c2      	b.n	800ae8c <lv_draw_sw_blend_color_to_rgb888+0x39c>
                }
            }
        }
    }
    /*Opacity only*/
    else if(mask == NULL && opa < LV_OPA_MAX) {
 800ad06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d137      	bne.n	800ad7c <lv_draw_sw_blend_color_to_rgb888+0x28c>
 800ad0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad10:	2bfc      	cmp	r3, #252	@ 0xfc
 800ad12:	d833      	bhi.n	800ad7c <lv_draw_sw_blend_color_to_rgb888+0x28c>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888_WITH_OPA(dsc, dest_px_size)) {
            uint32_t color32 = lv_color_to_u32(dsc->color);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6998      	ldr	r0, [r3, #24]
 800ad18:	f010 fb71 	bl	801b3fe <lv_color_to_u32>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	613b      	str	r3, [r7, #16]
            uint8_t * dest_buf = dsc->dest_buf;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	63fb      	str	r3, [r7, #60]	@ 0x3c
            w *= dest_px_size;
 800ad26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	657b      	str	r3, [r7, #84]	@ 0x54
            for(y = 0; y < h; y++) {
 800ad30:	2300      	movs	r3, #0
 800ad32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad34:	e01d      	b.n	800ad72 <lv_draw_sw_blend_color_to_rgb888+0x282>
                for(x = 0; x < w; x += dest_px_size) {
 800ad36:	2300      	movs	r3, #0
 800ad38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad3a:	e00d      	b.n	800ad58 <lv_draw_sw_blend_color_to_rgb888+0x268>
                    lv_color_24_24_mix((const uint8_t *)&color32, &dest_buf[x], opa);
 800ad3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ad40:	18d1      	adds	r1, r2, r3
 800ad42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ad46:	f107 0310 	add.w	r3, r7, #16
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fee2 	bl	800bb14 <lv_color_24_24_mix>
                for(x = 0; x < w; x += dest_px_size) {
 800ad50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	4413      	add	r3, r2
 800ad56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	dbed      	blt.n	800ad3c <lv_draw_sw_blend_color_to_rgb888+0x24c>
                }

                dest_buf = drawbuf_next_row(dest_buf, dest_stride);
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	4619      	mov	r1, r3
 800ad64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ad66:	f000 ff36 	bl	800bbd6 <drawbuf_next_row>
 800ad6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
            for(y = 0; y < h; y++) {
 800ad6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad6e:	3301      	adds	r3, #1
 800ad70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	429a      	cmp	r2, r3
 800ad78:	dbdd      	blt.n	800ad36 <lv_draw_sw_blend_color_to_rgb888+0x246>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888_WITH_OPA(dsc, dest_px_size)) {
 800ad7a:	e088      	b.n	800ae8e <lv_draw_sw_blend_color_to_rgb888+0x39e>
            }
        }
    }
    /*Masked with full opacity*/
    else if(mask && opa >= LV_OPA_MAX) {
 800ad7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d040      	beq.n	800ae04 <lv_draw_sw_blend_color_to_rgb888+0x314>
 800ad82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad86:	2bfc      	cmp	r3, #252	@ 0xfc
 800ad88:	d93c      	bls.n	800ae04 <lv_draw_sw_blend_color_to_rgb888+0x314>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888_WITH_MASK(dsc, dest_px_size)) {
            uint32_t color32 = lv_color_to_u32(dsc->color);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6998      	ldr	r0, [r3, #24]
 800ad8e:	f010 fb36 	bl	801b3fe <lv_color_to_u32>
 800ad92:	4603      	mov	r3, r0
 800ad94:	60fb      	str	r3, [r7, #12]
            uint8_t * dest_buf = dsc->dest_buf;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	63bb      	str	r3, [r7, #56]	@ 0x38
            w *= dest_px_size;
 800ad9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	657b      	str	r3, [r7, #84]	@ 0x54

            for(y = 0; y < h; y++) {
 800ada6:	2300      	movs	r3, #0
 800ada8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adaa:	e026      	b.n	800adfa <lv_draw_sw_blend_color_to_rgb888+0x30a>
                uint32_t mask_x;
                for(x = 0, mask_x = 0; x < w; x += dest_px_size, mask_x++) {
 800adac:	2300      	movs	r3, #0
 800adae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adb0:	2300      	movs	r3, #0
 800adb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800adb4:	e012      	b.n	800addc <lv_draw_sw_blend_color_to_rgb888+0x2ec>
                    lv_color_24_24_mix((const uint8_t *)&color32, &dest_buf[x], mask[mask_x]);
 800adb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adba:	18d1      	adds	r1, r2, r3
 800adbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc0:	4413      	add	r3, r2
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	f107 030c 	add.w	r3, r7, #12
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fea3 	bl	800bb14 <lv_color_24_24_mix>
                for(x = 0, mask_x = 0; x < w; x += dest_px_size, mask_x++) {
 800adce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	4413      	add	r3, r2
 800add4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800add6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add8:	3301      	adds	r3, #1
 800adda:	637b      	str	r3, [r7, #52]	@ 0x34
 800addc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ade0:	429a      	cmp	r2, r3
 800ade2:	dbe8      	blt.n	800adb6 <lv_draw_sw_blend_color_to_rgb888+0x2c6>
                }
                dest_buf += dest_stride;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ade8:	4413      	add	r3, r2
 800adea:	63bb      	str	r3, [r7, #56]	@ 0x38
                mask += mask_stride;
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adf0:	4413      	add	r3, r2
 800adf2:	653b      	str	r3, [r7, #80]	@ 0x50
            for(y = 0; y < h; y++) {
 800adf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adf6:	3301      	adds	r3, #1
 800adf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfe:	429a      	cmp	r2, r3
 800ae00:	dbd4      	blt.n	800adac <lv_draw_sw_blend_color_to_rgb888+0x2bc>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888_WITH_MASK(dsc, dest_px_size)) {
 800ae02:	e044      	b.n	800ae8e <lv_draw_sw_blend_color_to_rgb888+0x39e>
        }
    }
    /*Masked with opacity*/
    else {
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888_MIX_MASK_OPA(dsc, dest_px_size)) {
            uint32_t color32 = lv_color_to_u32(dsc->color);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6998      	ldr	r0, [r3, #24]
 800ae08:	f010 faf9 	bl	801b3fe <lv_color_to_u32>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	60bb      	str	r3, [r7, #8]
            uint8_t * dest_buf = dsc->dest_buf;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	633b      	str	r3, [r7, #48]	@ 0x30
            w *= dest_px_size;
 800ae16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	fb02 f303 	mul.w	r3, r2, r3
 800ae1e:	657b      	str	r3, [r7, #84]	@ 0x54

            for(y = 0; y < h; y++) {
 800ae20:	2300      	movs	r3, #0
 800ae22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae24:	e02d      	b.n	800ae82 <lv_draw_sw_blend_color_to_rgb888+0x392>
                uint32_t mask_x;
                for(x = 0, mask_x = 0; x < w; x += dest_px_size, mask_x++) {
 800ae26:	2300      	movs	r3, #0
 800ae28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae2e:	e019      	b.n	800ae64 <lv_draw_sw_blend_color_to_rgb888+0x374>
                    lv_color_24_24_mix((const uint8_t *) &color32, &dest_buf[x], LV_OPA_MIX2(opa, mask[mask_x]));
 800ae30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae34:	18d0      	adds	r0, r2, r3
 800ae36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae3e:	440a      	add	r2, r1
 800ae40:	7812      	ldrb	r2, [r2, #0]
 800ae42:	fb02 f303 	mul.w	r3, r2, r3
 800ae46:	121b      	asrs	r3, r3, #8
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	f107 0308 	add.w	r3, r7, #8
 800ae4e:	4601      	mov	r1, r0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fe5f 	bl	800bb14 <lv_color_24_24_mix>
                for(x = 0, mask_x = 0; x < w; x += dest_px_size, mask_x++) {
 800ae56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	3301      	adds	r3, #1
 800ae62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	dbe1      	blt.n	800ae30 <lv_draw_sw_blend_color_to_rgb888+0x340>
                }
                dest_buf += dest_stride;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae70:	4413      	add	r3, r2
 800ae72:	633b      	str	r3, [r7, #48]	@ 0x30
                mask += mask_stride;
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae78:	4413      	add	r3, r2
 800ae7a:	653b      	str	r3, [r7, #80]	@ 0x50
            for(y = 0; y < h; y++) {
 800ae7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae7e:	3301      	adds	r3, #1
 800ae80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae86:	429a      	cmp	r2, r3
 800ae88:	dbcd      	blt.n	800ae26 <lv_draw_sw_blend_color_to_rgb888+0x336>
            }
        }
    }
}
 800ae8a:	e000      	b.n	800ae8e <lv_draw_sw_blend_color_to_rgb888+0x39e>
        if(LV_RESULT_INVALID == LV_DRAW_SW_COLOR_BLEND_TO_RGB888(dsc, dest_px_size)) {
 800ae8c:	bf00      	nop
}
 800ae8e:	bf00      	nop
 800ae90:	3758      	adds	r7, #88	@ 0x58
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <lv_draw_sw_blend_image_to_rgb888>:

void LV_ATTRIBUTE_FAST_MEM lv_draw_sw_blend_image_to_rgb888(_lv_draw_sw_blend_image_dsc_t * dsc, uint32_t dest_px_size)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]

    switch(dsc->src_color_format) {
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aea8:	3b0f      	subs	r3, #15
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d824      	bhi.n	800aef8 <lv_draw_sw_blend_image_to_rgb888+0x60>
 800aeae:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb4 <lv_draw_sw_blend_image_to_rgb888+0x1c>)
 800aeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb4:	0800aecf 	.word	0x0800aecf
 800aeb8:	0800aeef 	.word	0x0800aeef
 800aebc:	0800aedf 	.word	0x0800aedf
 800aec0:	0800aec5 	.word	0x0800aec5
        case LV_COLOR_FORMAT_RGB565:
            rgb565_image_blend(dsc, dest_px_size);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 f81c 	bl	800af04 <rgb565_image_blend>
            break;
 800aecc:	e015      	b.n	800aefa <lv_draw_sw_blend_image_to_rgb888+0x62>
        case LV_COLOR_FORMAT_RGB888:
            rgb888_image_blend(dsc, dest_px_size, 3);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2203      	movs	r2, #3
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa5e 	bl	800b398 <rgb888_image_blend>
            break;
 800aedc:	e00d      	b.n	800aefa <lv_draw_sw_blend_image_to_rgb888+0x62>
        case LV_COLOR_FORMAT_XRGB8888:
            rgb888_image_blend(dsc, dest_px_size, 4);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2204      	movs	r2, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa56 	bl	800b398 <rgb888_image_blend>
            break;
 800aeec:	e005      	b.n	800aefa <lv_draw_sw_blend_image_to_rgb888+0x62>
        case LV_COLOR_FORMAT_ARGB8888:
            argb8888_image_blend(dsc, dest_px_size);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fbfc 	bl	800b6ee <argb8888_image_blend>
            break;
 800aef6:	e000      	b.n	800aefa <lv_draw_sw_blend_image_to_rgb888+0x62>
        default:
            LV_LOG_WARN("Not supported source color format");
            break;
 800aef8:	bf00      	nop
    }
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop

0800af04 <rgb565_image_blend>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void LV_ATTRIBUTE_FAST_MEM rgb565_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc, uint32_t dest_px_size)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b092      	sub	sp, #72	@ 0x48
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
    int32_t w = dsc->dest_w;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t h = dsc->dest_h;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	62bb      	str	r3, [r7, #40]	@ 0x28
    lv_opa_t opa = dsc->opa;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800af20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t * dest_buf_u8 = dsc->dest_buf;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t dest_stride = dsc->dest_stride;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	623b      	str	r3, [r7, #32]
    const lv_color16_t * src_buf_c16 = (const lv_color16_t *) dsc->src_buf;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	643b      	str	r3, [r7, #64]	@ 0x40
    int32_t src_stride = dsc->src_stride;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	61fb      	str	r3, [r7, #28]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t mask_stride = dsc->mask_stride;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	61bb      	str	r3, [r7, #24]

    int32_t src_x;
    int32_t dest_x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f040 81a5 	bne.w	800b29e <rgb565_image_blend+0x39a>
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 800af54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af56:	2b00      	cmp	r3, #0
 800af58:	d163      	bne.n	800b022 <rgb565_image_blend+0x11e>
 800af5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af5e:	2bfc      	cmp	r3, #252	@ 0xfc
 800af60:	d95f      	bls.n	800b022 <rgb565_image_blend+0x11e>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888(dsc, dest_px_size)) {
                for(y = 0; y < h; y++) {
 800af62:	2300      	movs	r3, #0
 800af64:	633b      	str	r3, [r7, #48]	@ 0x30
 800af66:	e057      	b.n	800b018 <rgb565_image_blend+0x114>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800af68:	2300      	movs	r3, #0
 800af6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af6c:	2300      	movs	r3, #0
 800af6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af70:	e041      	b.n	800aff6 <rgb565_image_blend+0xf2>
                        dest_buf_u8[dest_x + 2] = (src_buf_c16[src_x].red * 2106) >> 8;  /*To make it rounded*/
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af78:	4413      	add	r3, r2
 800af7a:	785b      	ldrb	r3, [r3, #1]
 800af7c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800af80:	b2db      	uxtb	r3, r3
 800af82:	461a      	mov	r2, r3
 800af84:	f640 033a 	movw	r3, #2106	@ 0x83a
 800af88:	fb02 f303 	mul.w	r3, r2, r3
 800af8c:	1219      	asrs	r1, r3, #8
 800af8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af90:	3302      	adds	r3, #2
 800af92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af94:	4413      	add	r3, r2
 800af96:	b2ca      	uxtb	r2, r1
 800af98:	701a      	strb	r2, [r3, #0]
                        dest_buf_u8[dest_x + 1] = (src_buf_c16[src_x].green * 1037) >> 8;
 800af9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afa0:	4413      	add	r3, r2
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	f240 430d 	movw	r3, #1037	@ 0x40d
 800afb0:	fb02 f303 	mul.w	r3, r2, r3
 800afb4:	1219      	asrs	r1, r3, #8
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	3301      	adds	r3, #1
 800afba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afbc:	4413      	add	r3, r2
 800afbe:	b2ca      	uxtb	r2, r1
 800afc0:	701a      	strb	r2, [r3, #0]
                        dest_buf_u8[dest_x + 0] = (src_buf_c16[src_x].blue * 2106) >> 8;
 800afc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afc8:	4413      	add	r3, r2
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	461a      	mov	r2, r3
 800afd4:	f640 033a 	movw	r3, #2106	@ 0x83a
 800afd8:	fb02 f303 	mul.w	r3, r2, r3
 800afdc:	1219      	asrs	r1, r3, #8
 800afde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afe2:	4413      	add	r3, r2
 800afe4:	b2ca      	uxtb	r2, r1
 800afe6:	701a      	strb	r2, [r3, #0]
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800afe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	4413      	add	r3, r2
 800afee:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	3301      	adds	r3, #1
 800aff4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aff6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800affa:	429a      	cmp	r2, r3
 800affc:	dbb9      	blt.n	800af72 <rgb565_image_blend+0x6e>
                    }
                    dest_buf_u8 += dest_stride;
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b002:	4413      	add	r3, r2
 800b004:	647b      	str	r3, [r7, #68]	@ 0x44
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	4619      	mov	r1, r3
 800b00a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b00c:	f000 fde3 	bl	800bbd6 <drawbuf_next_row>
 800b010:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	3301      	adds	r3, #1
 800b016:	633b      	str	r3, [r7, #48]	@ 0x30
 800b018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01c:	429a      	cmp	r2, r3
 800b01e:	dba3      	blt.n	800af68 <rgb565_image_blend+0x64>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888(dsc, dest_px_size)) {
 800b020:	e1b6      	b.n	800b390 <rgb565_image_blend+0x48c>
                }
            }
        }
        else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 800b022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b024:	2b00      	cmp	r3, #0
 800b026:	d162      	bne.n	800b0ee <rgb565_image_blend+0x1ea>
 800b028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b02c:	2bfc      	cmp	r3, #252	@ 0xfc
 800b02e:	d85e      	bhi.n	800b0ee <rgb565_image_blend+0x1ea>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888_WITH_OPA(dsc, dest_px_size)) {
                uint8_t res[3];
                for(y = 0; y < h; y++) {
 800b030:	2300      	movs	r3, #0
 800b032:	633b      	str	r3, [r7, #48]	@ 0x30
 800b034:	e056      	b.n	800b0e4 <rgb565_image_blend+0x1e0>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b036:	2300      	movs	r3, #0
 800b038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b03a:	2300      	movs	r3, #0
 800b03c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b03e:	e040      	b.n	800b0c2 <rgb565_image_blend+0x1be>
                        res[2] = (src_buf_c16[src_x].red * 2106) >> 8; /*To make it rounded*/
 800b040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b046:	4413      	add	r3, r2
 800b048:	785b      	ldrb	r3, [r3, #1]
 800b04a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	461a      	mov	r2, r3
 800b052:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b056:	fb02 f303 	mul.w	r3, r2, r3
 800b05a:	121b      	asrs	r3, r3, #8
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	75bb      	strb	r3, [r7, #22]
                        res[1] = (src_buf_c16[src_x].green * 1037) >> 8;
 800b060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b066:	4413      	add	r3, r2
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	461a      	mov	r2, r3
 800b072:	f240 430d 	movw	r3, #1037	@ 0x40d
 800b076:	fb02 f303 	mul.w	r3, r2, r3
 800b07a:	121b      	asrs	r3, r3, #8
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	757b      	strb	r3, [r7, #21]
                        res[0] = (src_buf_c16[src_x].blue * 2106) >> 8;
 800b080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b086:	4413      	add	r3, r2
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	461a      	mov	r2, r3
 800b092:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b096:	fb02 f303 	mul.w	r3, r2, r3
 800b09a:	121b      	asrs	r3, r3, #8
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	753b      	strb	r3, [r7, #20]
                        lv_color_24_24_mix(res, &dest_buf_u8[dest_x], opa);
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0a4:	18d1      	adds	r1, r2, r3
 800b0a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b0aa:	f107 0314 	add.w	r3, r7, #20
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fd30 	bl	800bb14 <lv_color_24_24_mix>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b0b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0be:	3301      	adds	r3, #1
 800b0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	dbba      	blt.n	800b040 <rgb565_image_blend+0x13c>
                    }
                    dest_buf_u8 += dest_stride;
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0ce:	4413      	add	r3, r2
 800b0d0:	647b      	str	r3, [r7, #68]	@ 0x44
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b0d8:	f000 fd7d 	bl	800bbd6 <drawbuf_next_row>
 800b0dc:	6438      	str	r0, [r7, #64]	@ 0x40
                for(y = 0; y < h; y++) {
 800b0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	dba4      	blt.n	800b036 <rgb565_image_blend+0x132>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888_WITH_OPA(dsc, dest_px_size)) {
 800b0ec:	e150      	b.n	800b390 <rgb565_image_blend+0x48c>
                }
            }
        }
        else if(mask_buf && opa >= LV_OPA_MAX) {
 800b0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d068      	beq.n	800b1c6 <rgb565_image_blend+0x2c2>
 800b0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0f8:	2bfc      	cmp	r3, #252	@ 0xfc
 800b0fa:	d964      	bls.n	800b1c6 <rgb565_image_blend+0x2c2>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888_WITH_MASK(dsc, dest_px_size)) {
                uint8_t res[3];
                for(y = 0; y < h; y++) {
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800b100:	e05c      	b.n	800b1bc <rgb565_image_blend+0x2b8>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b102:	2300      	movs	r3, #0
 800b104:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b106:	2300      	movs	r3, #0
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10a:	e042      	b.n	800b192 <rgb565_image_blend+0x28e>
                        res[2] = (src_buf_c16[src_x].red * 2106) >> 8;  /*To make it rounded*/
 800b10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b112:	4413      	add	r3, r2
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	461a      	mov	r2, r3
 800b11e:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b122:	fb02 f303 	mul.w	r3, r2, r3
 800b126:	121b      	asrs	r3, r3, #8
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	74bb      	strb	r3, [r7, #18]
                        res[1] = (src_buf_c16[src_x].green * 1037) >> 8;
 800b12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b132:	4413      	add	r3, r2
 800b134:	881b      	ldrh	r3, [r3, #0]
 800b136:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	f240 430d 	movw	r3, #1037	@ 0x40d
 800b142:	fb02 f303 	mul.w	r3, r2, r3
 800b146:	121b      	asrs	r3, r3, #8
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	747b      	strb	r3, [r7, #17]
                        res[0] = (src_buf_c16[src_x].blue * 2106) >> 8;
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b152:	4413      	add	r3, r2
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	461a      	mov	r2, r3
 800b15e:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b162:	fb02 f303 	mul.w	r3, r2, r3
 800b166:	121b      	asrs	r3, r3, #8
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	743b      	strb	r3, [r7, #16]
                        lv_color_24_24_mix(res, &dest_buf_u8[dest_x], mask_buf[src_x]);
 800b16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b170:	18d1      	adds	r1, r2, r3
 800b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b176:	4413      	add	r3, r2
 800b178:	781a      	ldrb	r2, [r3, #0]
 800b17a:	f107 0310 	add.w	r3, r7, #16
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fcc8 	bl	800bb14 <lv_color_24_24_mix>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	4413      	add	r3, r2
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18e:	3301      	adds	r3, #1
 800b190:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	429a      	cmp	r2, r3
 800b198:	dbb8      	blt.n	800b10c <rgb565_image_blend+0x208>
                    }
                    dest_buf_u8 += dest_stride;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b19e:	4413      	add	r3, r2
 800b1a0:	647b      	str	r3, [r7, #68]	@ 0x44
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b1a8:	f000 fd15 	bl	800bbd6 <drawbuf_next_row>
 800b1ac:	6438      	str	r0, [r7, #64]	@ 0x40
                    mask_buf += mask_stride;
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b1b2:	4413      	add	r3, r2
 800b1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(y = 0; y < h; y++) {
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	db9e      	blt.n	800b102 <rgb565_image_blend+0x1fe>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888_WITH_MASK(dsc, dest_px_size)) {
 800b1c4:	e0e4      	b.n	800b390 <rgb565_image_blend+0x48c>
            }
        }
        else {
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_BLEND_NORMAL_TO_RGB888_MIX_MASK_OPA(dsc, dest_px_size)) {
                uint8_t res[3];
                for(y = 0; y < h; y++) {
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1ca:	e063      	b.n	800b294 <rgb565_image_blend+0x390>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1d4:	e049      	b.n	800b26a <rgb565_image_blend+0x366>
                        res[2] = (src_buf_c16[src_x].red * 2106) >> 8;  /*To make it rounded*/
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1dc:	4413      	add	r3, r2
 800b1de:	785b      	ldrb	r3, [r3, #1]
 800b1e0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b1ec:	fb02 f303 	mul.w	r3, r2, r3
 800b1f0:	121b      	asrs	r3, r3, #8
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	73bb      	strb	r3, [r7, #14]
                        res[1] = (src_buf_c16[src_x].green * 1037) >> 8;
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1fc:	4413      	add	r3, r2
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800b204:	b2db      	uxtb	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	f240 430d 	movw	r3, #1037	@ 0x40d
 800b20c:	fb02 f303 	mul.w	r3, r2, r3
 800b210:	121b      	asrs	r3, r3, #8
 800b212:	b2db      	uxtb	r3, r3
 800b214:	737b      	strb	r3, [r7, #13]
                        res[0] = (src_buf_c16[src_x].blue * 2106) >> 8;
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b21c:	4413      	add	r3, r2
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b224:	b2db      	uxtb	r3, r3
 800b226:	461a      	mov	r2, r3
 800b228:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b22c:	fb02 f303 	mul.w	r3, r2, r3
 800b230:	121b      	asrs	r3, r3, #8
 800b232:	b2db      	uxtb	r3, r3
 800b234:	733b      	strb	r3, [r7, #12]
                        lv_color_24_24_mix(res, &dest_buf_u8[dest_x], LV_OPA_MIX2(opa, mask_buf[src_x]));
 800b236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b23a:	18d0      	adds	r0, r2, r3
 800b23c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b244:	440a      	add	r2, r1
 800b246:	7812      	ldrb	r2, [r2, #0]
 800b248:	fb02 f303 	mul.w	r3, r2, r3
 800b24c:	121b      	asrs	r3, r3, #8
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	4601      	mov	r1, r0
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fc5c 	bl	800bb14 <lv_color_24_24_mix>
                    for(src_x = 0, dest_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b25c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	4413      	add	r3, r2
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	3301      	adds	r3, #1
 800b268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b26a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26e:	429a      	cmp	r2, r3
 800b270:	dbb1      	blt.n	800b1d6 <rgb565_image_blend+0x2d2>
                    }
                    dest_buf_u8 += dest_stride;
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b276:	4413      	add	r3, r2
 800b278:	647b      	str	r3, [r7, #68]	@ 0x44
                    src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4619      	mov	r1, r3
 800b27e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b280:	f000 fca9 	bl	800bbd6 <drawbuf_next_row>
 800b284:	6438      	str	r0, [r7, #64]	@ 0x40
                    mask_buf += mask_stride;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b28a:	4413      	add	r3, r2
 800b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(y = 0; y < h; y++) {
 800b28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b290:	3301      	adds	r3, #1
 800b292:	633b      	str	r3, [r7, #48]	@ 0x30
 800b294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	429a      	cmp	r2, r3
 800b29a:	db97      	blt.n	800b1cc <rgb565_image_blend+0x2c8>
            if(mask_buf) mask_buf += mask_stride;
            dest_buf_u8 += dest_stride;
            src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
        }
    }
}
 800b29c:	e078      	b.n	800b390 <rgb565_image_blend+0x48c>
        for(y = 0; y < h; y++) {
 800b29e:	2300      	movs	r3, #0
 800b2a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2a2:	e070      	b.n	800b386 <rgb565_image_blend+0x482>
            for(src_x = 0, dest_x = 0; src_x < w; src_x++, dest_x += dest_px_size) {
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ac:	e053      	b.n	800b356 <rgb565_image_blend+0x452>
                src_argb.red = (src_buf_c16[src_x].red * 2106) >> 8;
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b0:	005b      	lsls	r3, r3, #1
 800b2b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2b4:	4413      	add	r3, r2
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b2c4:	fb02 f303 	mul.w	r3, r2, r3
 800b2c8:	121b      	asrs	r3, r3, #8
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	72bb      	strb	r3, [r7, #10]
                src_argb.green = (src_buf_c16[src_x].green * 1037) >> 8;
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2d4:	4413      	add	r3, r2
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f240 430d 	movw	r3, #1037	@ 0x40d
 800b2e4:	fb02 f303 	mul.w	r3, r2, r3
 800b2e8:	121b      	asrs	r3, r3, #8
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	727b      	strb	r3, [r7, #9]
                src_argb.blue = (src_buf_c16[src_x].blue * 2106) >> 8;
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2f4:	4413      	add	r3, r2
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	f640 033a 	movw	r3, #2106	@ 0x83a
 800b304:	fb02 f303 	mul.w	r3, r2, r3
 800b308:	121b      	asrs	r3, r3, #8
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	723b      	strb	r3, [r7, #8]
                if(mask_buf == NULL) src_argb.alpha = opa;
 800b30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d103      	bne.n	800b31c <rgb565_image_blend+0x418>
 800b314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b318:	72fb      	strb	r3, [r7, #11]
 800b31a:	e00b      	b.n	800b334 <rgb565_image_blend+0x430>
                else src_argb.alpha = LV_OPA_MIX2(mask_buf[src_x], opa);
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b320:	4413      	add	r3, r2
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	461a      	mov	r2, r3
 800b326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b32a:	fb02 f303 	mul.w	r3, r2, r3
 800b32e:	121b      	asrs	r3, r3, #8
 800b330:	b2db      	uxtb	r3, r3
 800b332:	72fb      	strb	r3, [r7, #11]
                blend_non_normal_pixel(&dest_buf_u8[dest_x], src_argb, dsc->blend_mode);
 800b334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b338:	18d0      	adds	r0, r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b340:	461a      	mov	r2, r3
 800b342:	68b9      	ldr	r1, [r7, #8]
 800b344:	f000 fb64 	bl	800ba10 <blend_non_normal_pixel>
            for(src_x = 0, dest_x = 0; src_x < w; src_x++, dest_x += dest_px_size) {
 800b348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34a:	3301      	adds	r3, #1
 800b34c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b34e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	4413      	add	r3, r2
 800b354:	637b      	str	r3, [r7, #52]	@ 0x34
 800b356:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	dba7      	blt.n	800b2ae <rgb565_image_blend+0x3aa>
            if(mask_buf) mask_buf += mask_stride;
 800b35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <rgb565_image_blend+0x468>
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b368:	4413      	add	r3, r2
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dest_buf_u8 += dest_stride;
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b370:	4413      	add	r3, r2
 800b372:	647b      	str	r3, [r7, #68]	@ 0x44
            src_buf_c16 = drawbuf_next_row(src_buf_c16, src_stride);
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	4619      	mov	r1, r3
 800b378:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800b37a:	f000 fc2c 	bl	800bbd6 <drawbuf_next_row>
 800b37e:	6438      	str	r0, [r7, #64]	@ 0x40
        for(y = 0; y < h; y++) {
 800b380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b382:	3301      	adds	r3, #1
 800b384:	633b      	str	r3, [r7, #48]	@ 0x30
 800b386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38a:	429a      	cmp	r2, r3
 800b38c:	db8a      	blt.n	800b2a4 <rgb565_image_blend+0x3a0>
}
 800b38e:	e7ff      	b.n	800b390 <rgb565_image_blend+0x48c>
 800b390:	bf00      	nop
 800b392:	3748      	adds	r7, #72	@ 0x48
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <rgb888_image_blend>:

static void LV_ATTRIBUTE_FAST_MEM rgb888_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc, const uint8_t dest_px_size,
                                                     uint32_t src_px_size)
{
 800b398:	b590      	push	{r4, r7, lr}
 800b39a:	b095      	sub	sp, #84	@ 0x54
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	72fb      	strb	r3, [r7, #11]
    int32_t w = dsc->dest_w * dest_px_size;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	7afa      	ldrb	r2, [r7, #11]
 800b3ac:	fb02 f303 	mul.w	r3, r2, r3
 800b3b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t h = dsc->dest_h;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    lv_opa_t opa = dsc->opa;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b3be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t * dest_buf = dsc->dest_buf;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t dest_stride = dsc->dest_stride;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	623b      	str	r3, [r7, #32]
    const uint8_t * src_buf = dsc->src_buf;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	699b      	ldr	r3, [r3, #24]
 800b3d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t src_stride = dsc->src_stride;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	61fb      	str	r3, [r7, #28]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t mask_stride = dsc->mask_stride;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	61bb      	str	r3, [r7, #24]

    int32_t dest_x;
    int32_t src_x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 8122 	bne.w	800b636 <rgb888_image_blend+0x29e>
        /*Special case*/
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 800b3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d15f      	bne.n	800b4b8 <rgb888_image_blend+0x120>
 800b3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3fc:	2bfc      	cmp	r3, #252	@ 0xfc
 800b3fe:	d95b      	bls.n	800b4b8 <rgb888_image_blend+0x120>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB888(dsc, dest_px_size, src_px_size)) {
                if(src_px_size == dest_px_size) {
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d118      	bne.n	800b43a <rgb888_image_blend+0xa2>
                    for(y = 0; y < h; y++) {
 800b408:	2300      	movs	r3, #0
 800b40a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b40c:	e010      	b.n	800b430 <rgb888_image_blend+0x98>
                        lv_memcpy(dest_buf, src_buf, w);
 800b40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b410:	461a      	mov	r2, r3
 800b412:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b414:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b416:	f011 fc85 	bl	801cd24 <lv_memcpy>
                        dest_buf += dest_stride;
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b41e:	4413      	add	r3, r2
 800b420:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        src_buf += src_stride;
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b426:	4413      	add	r3, r2
 800b428:	64bb      	str	r3, [r7, #72]	@ 0x48
                    for(y = 0; y < h; y++) {
 800b42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42c:	3301      	adds	r3, #1
 800b42e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b434:	429a      	cmp	r2, r3
 800b436:	dbea      	blt.n	800b40e <rgb888_image_blend+0x76>
 800b438:	e03e      	b.n	800b4b8 <rgb888_image_blend+0x120>
                    }
                }
                else {
                    for(y = 0; y < h; y++) {
 800b43a:	2300      	movs	r3, #0
 800b43c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b43e:	e037      	b.n	800b4b0 <rgb888_image_blend+0x118>
                        for(dest_x = 0, src_x = 0; dest_x < w; dest_x += dest_px_size, src_x += src_px_size) {
 800b440:	2300      	movs	r3, #0
 800b442:	643b      	str	r3, [r7, #64]	@ 0x40
 800b444:	2300      	movs	r3, #0
 800b446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b448:	e023      	b.n	800b492 <rgb888_image_blend+0xfa>
                            dest_buf[dest_x + 0] = src_buf[src_x + 0];
 800b44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b44c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b44e:	441a      	add	r2, r3
 800b450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b452:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b454:	440b      	add	r3, r1
 800b456:	7812      	ldrb	r2, [r2, #0]
 800b458:	701a      	strb	r2, [r3, #0]
                            dest_buf[dest_x + 1] = src_buf[src_x + 1];
 800b45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b45c:	3301      	adds	r3, #1
 800b45e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b460:	441a      	add	r2, r3
 800b462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b464:	3301      	adds	r3, #1
 800b466:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b468:	440b      	add	r3, r1
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	701a      	strb	r2, [r3, #0]
                            dest_buf[dest_x + 2] = src_buf[src_x + 2];
 800b46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b470:	3302      	adds	r3, #2
 800b472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b474:	441a      	add	r2, r3
 800b476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b478:	3302      	adds	r3, #2
 800b47a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b47c:	440b      	add	r3, r1
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	701a      	strb	r2, [r3, #0]
                        for(dest_x = 0, src_x = 0; dest_x < w; dest_x += dest_px_size, src_x += src_px_size) {
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b486:	4413      	add	r3, r2
 800b488:	643b      	str	r3, [r7, #64]	@ 0x40
 800b48a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4413      	add	r3, r2
 800b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b496:	429a      	cmp	r2, r3
 800b498:	dbd7      	blt.n	800b44a <rgb888_image_blend+0xb2>
                        }
                        dest_buf += dest_stride;
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b49e:	4413      	add	r3, r2
 800b4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        src_buf += src_stride;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4a6:	4413      	add	r3, r2
 800b4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
                    for(y = 0; y < h; y++) {
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	dbc3      	blt.n	800b440 <rgb888_image_blend+0xa8>
                    }
                }
            }
        }
        if(mask_buf == NULL && opa < LV_OPA_MAX) {
 800b4b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d131      	bne.n	800b522 <rgb888_image_blend+0x18a>
 800b4be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4c2:	2bfc      	cmp	r3, #252	@ 0xfc
 800b4c4:	d82d      	bhi.n	800b522 <rgb888_image_blend+0x18a>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB888_WITH_OPA(dsc, dest_px_size, src_px_size)) {
                for(y = 0; y < h; y++) {
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4ca:	e026      	b.n	800b51a <rgb888_image_blend+0x182>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x += dest_px_size, src_x += src_px_size) {
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4d4:	e012      	b.n	800b4fc <rgb888_image_blend+0x164>
                        lv_color_24_24_mix(&src_buf[src_x], &dest_buf[dest_x], opa);
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4da:	18d0      	adds	r0, r2, r3
 800b4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	f000 fb14 	bl	800bb14 <lv_color_24_24_mix>
                    for(dest_x = 0, src_x = 0; dest_x < w; dest_x += dest_px_size, src_x += src_px_size) {
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4f0:	4413      	add	r3, r2
 800b4f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b500:	429a      	cmp	r2, r3
 800b502:	dbe8      	blt.n	800b4d6 <rgb888_image_blend+0x13e>
                    }
                    dest_buf += dest_stride;
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b508:	4413      	add	r3, r2
 800b50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    src_buf += src_stride;
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b510:	4413      	add	r3, r2
 800b512:	64bb      	str	r3, [r7, #72]	@ 0x48
                for(y = 0; y < h; y++) {
 800b514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b516:	3301      	adds	r3, #1
 800b518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b51a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	429a      	cmp	r2, r3
 800b520:	dbd4      	blt.n	800b4cc <rgb888_image_blend+0x134>
                }
            }
        }
        if(mask_buf && opa >= LV_OPA_MAX) {
 800b522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b524:	2b00      	cmp	r3, #0
 800b526:	d03c      	beq.n	800b5a2 <rgb888_image_blend+0x20a>
 800b528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b52c:	2bfc      	cmp	r3, #252	@ 0xfc
 800b52e:	d938      	bls.n	800b5a2 <rgb888_image_blend+0x20a>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB888_WITH_MASK(dsc, dest_px_size, src_px_size)) {
                uint32_t mask_x;
                for(y = 0; y < h; y++) {
 800b530:	2300      	movs	r3, #0
 800b532:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b534:	e031      	b.n	800b59a <rgb888_image_blend+0x202>
                    for(mask_x = 0, dest_x = 0, src_x = 0; dest_x < w; mask_x++, dest_x += dest_px_size, src_x += src_px_size) {
 800b536:	2300      	movs	r3, #0
 800b538:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53a:	2300      	movs	r3, #0
 800b53c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b53e:	2300      	movs	r3, #0
 800b540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b542:	e017      	b.n	800b574 <rgb888_image_blend+0x1dc>
                        lv_color_24_24_mix(&src_buf[src_x], &dest_buf[dest_x], mask_buf[mask_x]);
 800b544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b548:	18d0      	adds	r0, r2, r3
 800b54a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b54c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b54e:	18d1      	adds	r1, r2, r3
 800b550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b554:	4413      	add	r3, r2
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	461a      	mov	r2, r3
 800b55a:	f000 fadb 	bl	800bb14 <lv_color_24_24_mix>
                    for(mask_x = 0, dest_x = 0, src_x = 0; dest_x < w; mask_x++, dest_x += dest_px_size, src_x += src_px_size) {
 800b55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b560:	3301      	adds	r3, #1
 800b562:	637b      	str	r3, [r7, #52]	@ 0x34
 800b564:	7afb      	ldrb	r3, [r7, #11]
 800b566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b568:	4413      	add	r3, r2
 800b56a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b56c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4413      	add	r3, r2
 800b572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b574:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	dbe3      	blt.n	800b544 <rgb888_image_blend+0x1ac>
                    }
                    dest_buf += dest_stride;
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b580:	4413      	add	r3, r2
 800b582:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    src_buf += src_stride;
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b588:	4413      	add	r3, r2
 800b58a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    mask_buf += mask_stride;
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b590:	4413      	add	r3, r2
 800b592:	647b      	str	r3, [r7, #68]	@ 0x44
                for(y = 0; y < h; y++) {
 800b594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b596:	3301      	adds	r3, #1
 800b598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b59a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	dbc9      	blt.n	800b536 <rgb888_image_blend+0x19e>
                }
            }
        }
        if(mask_buf && opa < LV_OPA_MAX) {
 800b5a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 809e 	beq.w	800b6e6 <rgb888_image_blend+0x34e>
 800b5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5ae:	2bfc      	cmp	r3, #252	@ 0xfc
 800b5b0:	f200 8099 	bhi.w	800b6e6 <rgb888_image_blend+0x34e>
            if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_BLEND_NORMAL_TO_RGB888_MIX_MASK_OPA(dsc, dest_px_size, src_px_size)) {
                uint32_t mask_x;
                for(y = 0; y < h; y++) {
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5b8:	e038      	b.n	800b62c <rgb888_image_blend+0x294>
                    for(mask_x = 0, dest_x = 0, src_x = 0; dest_x < w; mask_x++, dest_x += dest_px_size, src_x += src_px_size) {
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5be:	2300      	movs	r3, #0
 800b5c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5c6:	e01e      	b.n	800b606 <rgb888_image_blend+0x26e>
                        lv_color_24_24_mix(&src_buf[src_x], &dest_buf[dest_x], LV_OPA_MIX2(opa, mask_buf[mask_x]));
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5cc:	18d0      	adds	r0, r2, r3
 800b5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5d2:	18d4      	adds	r4, r2, r3
 800b5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b5da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5dc:	440a      	add	r2, r1
 800b5de:	7812      	ldrb	r2, [r2, #0]
 800b5e0:	fb02 f303 	mul.w	r3, r2, r3
 800b5e4:	121b      	asrs	r3, r3, #8
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	f000 fa92 	bl	800bb14 <lv_color_24_24_mix>
                    for(mask_x = 0, dest_x = 0, src_x = 0; dest_x < w; mask_x++, dest_x += dest_px_size, src_x += src_px_size) {
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5fa:	4413      	add	r3, r2
 800b5fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4413      	add	r3, r2
 800b604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b606:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60a:	429a      	cmp	r2, r3
 800b60c:	dbdc      	blt.n	800b5c8 <rgb888_image_blend+0x230>
                    }
                    dest_buf += dest_stride;
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b612:	4413      	add	r3, r2
 800b614:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    src_buf += src_stride;
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b61a:	4413      	add	r3, r2
 800b61c:	64bb      	str	r3, [r7, #72]	@ 0x48
                    mask_buf += mask_stride;
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b622:	4413      	add	r3, r2
 800b624:	647b      	str	r3, [r7, #68]	@ 0x44
                for(y = 0; y < h; y++) {
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	3301      	adds	r3, #1
 800b62a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b62c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b630:	429a      	cmp	r2, r3
 800b632:	dbc2      	blt.n	800b5ba <rgb888_image_blend+0x222>
            if(mask_buf) mask_buf += mask_stride;
            dest_buf += dest_stride;
            src_buf += src_stride;
        }
    }
}
 800b634:	e057      	b.n	800b6e6 <rgb888_image_blend+0x34e>
        for(y = 0; y < h; y++) {
 800b636:	2300      	movs	r3, #0
 800b638:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b63a:	e050      	b.n	800b6de <rgb888_image_blend+0x346>
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x += dest_px_size, src_x += src_px_size) {
 800b63c:	2300      	movs	r3, #0
 800b63e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b640:	2300      	movs	r3, #0
 800b642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b644:	e035      	b.n	800b6b2 <rgb888_image_blend+0x31a>
                src_argb.red = src_buf[src_x + 2];
 800b646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b648:	3302      	adds	r3, #2
 800b64a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b64c:	4413      	add	r3, r2
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	75bb      	strb	r3, [r7, #22]
                src_argb.green = src_buf[src_x + 1];
 800b652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b654:	3301      	adds	r3, #1
 800b656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b658:	4413      	add	r3, r2
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	757b      	strb	r3, [r7, #21]
                src_argb.blue = src_buf[src_x + 0];
 800b65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b660:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b662:	4413      	add	r3, r2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	753b      	strb	r3, [r7, #20]
                if(mask_buf == NULL) src_argb.alpha = opa;
 800b668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d103      	bne.n	800b676 <rgb888_image_blend+0x2de>
 800b66e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b672:	75fb      	strb	r3, [r7, #23]
 800b674:	e00b      	b.n	800b68e <rgb888_image_blend+0x2f6>
                else src_argb.alpha = LV_OPA_MIX2(mask_buf[dest_x], opa);
 800b676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b67a:	4413      	add	r3, r2
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b684:	fb02 f303 	mul.w	r3, r2, r3
 800b688:	121b      	asrs	r3, r3, #8
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	75fb      	strb	r3, [r7, #23]
                blend_non_normal_pixel(&dest_buf[dest_x], src_argb, dsc->blend_mode);
 800b68e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b692:	18d0      	adds	r0, r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b69a:	461a      	mov	r2, r3
 800b69c:	6979      	ldr	r1, [r7, #20]
 800b69e:	f000 f9b7 	bl	800ba10 <blend_non_normal_pixel>
            for(dest_x = 0, src_x = 0; dest_x < w; dest_x += dest_px_size, src_x += src_px_size) {
 800b6a2:	7afb      	ldrb	r3, [r7, #11]
 800b6a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6a6:	4413      	add	r3, r2
 800b6a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	dbc5      	blt.n	800b646 <rgb888_image_blend+0x2ae>
            if(mask_buf) mask_buf += mask_stride;
 800b6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d003      	beq.n	800b6c8 <rgb888_image_blend+0x330>
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6c4:	4413      	add	r3, r2
 800b6c6:	647b      	str	r3, [r7, #68]	@ 0x44
            dest_buf += dest_stride;
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6cc:	4413      	add	r3, r2
 800b6ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
            src_buf += src_stride;
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6d4:	4413      	add	r3, r2
 800b6d6:	64bb      	str	r3, [r7, #72]	@ 0x48
        for(y = 0; y < h; y++) {
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	3301      	adds	r3, #1
 800b6dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	dbaa      	blt.n	800b63c <rgb888_image_blend+0x2a4>
}
 800b6e6:	bf00      	nop
 800b6e8:	3754      	adds	r7, #84	@ 0x54
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd90      	pop	{r4, r7, pc}

0800b6ee <argb8888_image_blend>:

static void LV_ATTRIBUTE_FAST_MEM argb8888_image_blend(_lv_draw_sw_blend_image_dsc_t * dsc, uint32_t dest_px_size)
{
 800b6ee:	b590      	push	{r4, r7, lr}
 800b6f0:	b091      	sub	sp, #68	@ 0x44
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
    int32_t w = dsc->dest_w;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t h = dsc->dest_h;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	623b      	str	r3, [r7, #32]
    lv_opa_t opa = dsc->opa;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b70a:	77fb      	strb	r3, [r7, #31]
    uint8_t * dest_buf = dsc->dest_buf;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t dest_stride = dsc->dest_stride;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	61bb      	str	r3, [r7, #24]
    const lv_color32_t * src_buf_c32 = dsc->src_buf;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t src_stride = dsc->src_stride;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	617b      	str	r3, [r7, #20]
    const lv_opa_t * mask_buf = dsc->mask_buf;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t mask_stride = dsc->mask_stride;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	613b      	str	r3, [r7, #16]

    int32_t dest_x;
    int32_t src_x;
    int32_t y;

    if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b736:	2b00      	cmp	r3, #0
 800b738:	f040 810d 	bne.w	800b956 <argb8888_image_blend+0x268>
        if(mask_buf == NULL && opa >= LV_OPA_MAX) {
 800b73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d136      	bne.n	800b7b0 <argb8888_image_blend+0xc2>
 800b742:	7ffb      	ldrb	r3, [r7, #31]
 800b744:	2bfc      	cmp	r3, #252	@ 0xfc
 800b746:	d933      	bls.n	800b7b0 <argb8888_image_blend+0xc2>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888(dsc, dest_px_size)) {
                for(y = 0; y < h; y++) {
 800b748:	2300      	movs	r3, #0
 800b74a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b74c:	e02b      	b.n	800b7a6 <argb8888_image_blend+0xb8>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b74e:	2300      	movs	r3, #0
 800b750:	633b      	str	r3, [r7, #48]	@ 0x30
 800b752:	2300      	movs	r3, #0
 800b754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b756:	e015      	b.n	800b784 <argb8888_image_blend+0x96>
                        lv_color_24_24_mix((const uint8_t *)&src_buf_c32[src_x], &dest_buf[dest_x], src_buf_c32[src_x].alpha);
 800b758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b75e:	18d0      	adds	r0, r2, r3
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b764:	18d1      	adds	r1, r2, r3
 800b766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b76c:	4413      	add	r3, r2
 800b76e:	78db      	ldrb	r3, [r3, #3]
 800b770:	461a      	mov	r2, r3
 800b772:	f000 f9cf 	bl	800bb14 <lv_color_24_24_mix>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	4413      	add	r3, r2
 800b77c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b780:	3301      	adds	r3, #1
 800b782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b788:	429a      	cmp	r2, r3
 800b78a:	dbe5      	blt.n	800b758 <argb8888_image_blend+0x6a>
                    }
                    dest_buf += dest_stride;
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b790:	4413      	add	r3, r2
 800b792:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	4619      	mov	r1, r3
 800b798:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b79a:	f000 fa1c 	bl	800bbd6 <drawbuf_next_row>
 800b79e:	63b8      	str	r0, [r7, #56]	@ 0x38
                for(y = 0; y < h; y++) {
 800b7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	dbcf      	blt.n	800b74e <argb8888_image_blend+0x60>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888(dsc, dest_px_size)) {
 800b7ae:	e12a      	b.n	800ba06 <argb8888_image_blend+0x318>
                }
            }
        }
        else if(mask_buf == NULL && opa < LV_OPA_MAX) {
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d13c      	bne.n	800b830 <argb8888_image_blend+0x142>
 800b7b6:	7ffb      	ldrb	r3, [r7, #31]
 800b7b8:	2bfc      	cmp	r3, #252	@ 0xfc
 800b7ba:	d839      	bhi.n	800b830 <argb8888_image_blend+0x142>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888_WITH_OPA(dsc, dest_px_size)) {
                for(y = 0; y < h; y++) {
 800b7bc:	2300      	movs	r3, #0
 800b7be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7c0:	e031      	b.n	800b826 <argb8888_image_blend+0x138>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7ca:	e01b      	b.n	800b804 <argb8888_image_blend+0x116>
                        lv_color_24_24_mix((const uint8_t *)&src_buf_c32[src_x], &dest_buf[dest_x], LV_OPA_MIX2(src_buf_c32[src_x].alpha, opa));
 800b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7d2:	18d0      	adds	r0, r2, r3
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7d8:	18d1      	adds	r1, r2, r3
 800b7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7e0:	4413      	add	r3, r2
 800b7e2:	78db      	ldrb	r3, [r3, #3]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	7ffb      	ldrb	r3, [r7, #31]
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ec:	121b      	asrs	r3, r3, #8
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	f000 f98f 	bl	800bb14 <lv_color_24_24_mix>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b7f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b800:	3301      	adds	r3, #1
 800b802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	429a      	cmp	r2, r3
 800b80a:	dbdf      	blt.n	800b7cc <argb8888_image_blend+0xde>
                    }
                    dest_buf += dest_stride;
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b810:	4413      	add	r3, r2
 800b812:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	4619      	mov	r1, r3
 800b818:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b81a:	f000 f9dc 	bl	800bbd6 <drawbuf_next_row>
 800b81e:	63b8      	str	r0, [r7, #56]	@ 0x38
                for(y = 0; y < h; y++) {
 800b820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b822:	3301      	adds	r3, #1
 800b824:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	dbc9      	blt.n	800b7c2 <argb8888_image_blend+0xd4>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888_WITH_OPA(dsc, dest_px_size)) {
 800b82e:	e0ea      	b.n	800ba06 <argb8888_image_blend+0x318>
                }
            }
        }
        else if(mask_buf && opa >= LV_OPA_MAX) {
 800b830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b832:	2b00      	cmp	r3, #0
 800b834:	d043      	beq.n	800b8be <argb8888_image_blend+0x1d0>
 800b836:	7ffb      	ldrb	r3, [r7, #31]
 800b838:	2bfc      	cmp	r3, #252	@ 0xfc
 800b83a:	d940      	bls.n	800b8be <argb8888_image_blend+0x1d0>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888_WITH_MASK(dsc, dest_px_size)) {
                for(y = 0; y < h; y++) {
 800b83c:	2300      	movs	r3, #0
 800b83e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b840:	e038      	b.n	800b8b4 <argb8888_image_blend+0x1c6>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b842:	2300      	movs	r3, #0
 800b844:	633b      	str	r3, [r7, #48]	@ 0x30
 800b846:	2300      	movs	r3, #0
 800b848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b84a:	e01e      	b.n	800b88a <argb8888_image_blend+0x19c>
                        lv_color_24_24_mix((const uint8_t *)&src_buf_c32[src_x], &dest_buf[dest_x],
 800b84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b852:	18d0      	adds	r0, r2, r3
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b858:	18d1      	adds	r1, r2, r3
                                           LV_OPA_MIX2(src_buf_c32[src_x].alpha, mask_buf[src_x]));
 800b85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b860:	4413      	add	r3, r2
 800b862:	78db      	ldrb	r3, [r3, #3]
 800b864:	461c      	mov	r4, r3
 800b866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b86a:	4413      	add	r3, r2
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	fb04 f303 	mul.w	r3, r4, r3
 800b872:	121b      	asrs	r3, r3, #8
                        lv_color_24_24_mix((const uint8_t *)&src_buf_c32[src_x], &dest_buf[dest_x],
 800b874:	b2db      	uxtb	r3, r3
 800b876:	461a      	mov	r2, r3
 800b878:	f000 f94c 	bl	800bb14 <lv_color_24_24_mix>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b87c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	4413      	add	r3, r2
 800b882:	633b      	str	r3, [r7, #48]	@ 0x30
 800b884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b886:	3301      	adds	r3, #1
 800b888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b88a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88e:	429a      	cmp	r2, r3
 800b890:	dbdc      	blt.n	800b84c <argb8888_image_blend+0x15e>
                    }
                    dest_buf += dest_stride;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b896:	4413      	add	r3, r2
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b8a0:	f000 f999 	bl	800bbd6 <drawbuf_next_row>
 800b8a4:	63b8      	str	r0, [r7, #56]	@ 0x38
                    mask_buf += mask_stride;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8aa:	4413      	add	r3, r2
 800b8ac:	637b      	str	r3, [r7, #52]	@ 0x34
                for(y = 0; y < h; y++) {
 800b8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	dbc2      	blt.n	800b842 <argb8888_image_blend+0x154>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888_WITH_MASK(dsc, dest_px_size)) {
 800b8bc:	e0a3      	b.n	800ba06 <argb8888_image_blend+0x318>
                }
            }
        }
        else if(mask_buf && opa < LV_OPA_MAX) {
 800b8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 80a0 	beq.w	800ba06 <argb8888_image_blend+0x318>
 800b8c6:	7ffb      	ldrb	r3, [r7, #31]
 800b8c8:	2bfc      	cmp	r3, #252	@ 0xfc
 800b8ca:	f200 809c 	bhi.w	800ba06 <argb8888_image_blend+0x318>
            if(LV_RESULT_INVALID == LV_DRAW_SW_ARGB8888_BLEND_NORMAL_TO_RGB888_MIX_MASK_OPA(dsc, dest_px_size)) {
                for(y = 0; y < h; y++) {
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8d2:	e03b      	b.n	800b94c <argb8888_image_blend+0x25e>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8d8:	2300      	movs	r3, #0
 800b8da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8dc:	e021      	b.n	800b922 <argb8888_image_blend+0x234>
                        lv_color_24_24_mix((const uint8_t *)&src_buf_c32[src_x], &dest_buf[dest_x],
 800b8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8e4:	18d0      	adds	r0, r2, r3
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b8ea:	18d1      	adds	r1, r2, r3
                                           LV_OPA_MIX3(src_buf_c32[src_x].alpha, mask_buf[src_x], opa));
 800b8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8f2:	4413      	add	r3, r2
 800b8f4:	78db      	ldrb	r3, [r3, #3]
 800b8f6:	461c      	mov	r4, r3
 800b8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8fc:	4413      	add	r3, r2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	fb04 f303 	mul.w	r3, r4, r3
 800b904:	7ffa      	ldrb	r2, [r7, #31]
 800b906:	fb02 f303 	mul.w	r3, r2, r3
 800b90a:	141b      	asrs	r3, r3, #16
                        lv_color_24_24_mix((const uint8_t *)&src_buf_c32[src_x], &dest_buf[dest_x],
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	461a      	mov	r2, r3
 800b910:	f000 f900 	bl	800bb14 <lv_color_24_24_mix>
                    for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x++) {
 800b914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	4413      	add	r3, r2
 800b91a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91e:	3301      	adds	r3, #1
 800b920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	429a      	cmp	r2, r3
 800b928:	dbd9      	blt.n	800b8de <argb8888_image_blend+0x1f0>
                    }
                    dest_buf += dest_stride;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b92e:	4413      	add	r3, r2
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	4619      	mov	r1, r3
 800b936:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b938:	f000 f94d 	bl	800bbd6 <drawbuf_next_row>
 800b93c:	63b8      	str	r0, [r7, #56]	@ 0x38
                    mask_buf += mask_stride;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b942:	4413      	add	r3, r2
 800b944:	637b      	str	r3, [r7, #52]	@ 0x34
                for(y = 0; y < h; y++) {
 800b946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b948:	3301      	adds	r3, #1
 800b94a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b94c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	429a      	cmp	r2, r3
 800b952:	dbbf      	blt.n	800b8d4 <argb8888_image_blend+0x1e6>
            if(mask_buf) mask_buf += mask_stride;
            dest_buf += dest_stride;
            src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
        }
    }
}
 800b954:	e057      	b.n	800ba06 <argb8888_image_blend+0x318>
        for(y = 0; y < h; y++) {
 800b956:	2300      	movs	r3, #0
 800b958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b95a:	e04f      	b.n	800b9fc <argb8888_image_blend+0x30e>
            for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x ++) {
 800b95c:	2300      	movs	r3, #0
 800b95e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b960:	2300      	movs	r3, #0
 800b962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b964:	e032      	b.n	800b9cc <argb8888_image_blend+0x2de>
                src_argb = src_buf_c32[src_x];
 800b966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b96c:	441a      	add	r2, r3
 800b96e:	f107 030c 	add.w	r3, r7, #12
 800b972:	6810      	ldr	r0, [r2, #0]
 800b974:	6018      	str	r0, [r3, #0]
                if(mask_buf == NULL) src_argb.alpha = LV_OPA_MIX2(src_argb.alpha, opa);
 800b976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d108      	bne.n	800b98e <argb8888_image_blend+0x2a0>
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	461a      	mov	r2, r3
 800b980:	7ffb      	ldrb	r3, [r7, #31]
 800b982:	fb02 f303 	mul.w	r3, r2, r3
 800b986:	121b      	asrs	r3, r3, #8
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	73fb      	strb	r3, [r7, #15]
 800b98c:	e00d      	b.n	800b9aa <argb8888_image_blend+0x2bc>
                else src_argb.alpha = LV_OPA_MIX3(src_argb.alpha, mask_buf[dest_x], opa);
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	4619      	mov	r1, r3
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b996:	4413      	add	r3, r2
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	fb01 f303 	mul.w	r3, r1, r3
 800b99e:	7ffa      	ldrb	r2, [r7, #31]
 800b9a0:	fb02 f303 	mul.w	r3, r2, r3
 800b9a4:	141b      	asrs	r3, r3, #16
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	73fb      	strb	r3, [r7, #15]
                blend_non_normal_pixel(&dest_buf[dest_x], src_argb, dsc->blend_mode);
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b9ae:	18d0      	adds	r0, r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	68f9      	ldr	r1, [r7, #12]
 800b9ba:	f000 f829 	bl	800ba10 <blend_non_normal_pixel>
            for(dest_x = 0, src_x = 0; src_x < w; dest_x += dest_px_size, src_x ++) {
 800b9be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	dbc8      	blt.n	800b966 <argb8888_image_blend+0x278>
            if(mask_buf) mask_buf += mask_stride;
 800b9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <argb8888_image_blend+0x2f4>
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9de:	4413      	add	r3, r2
 800b9e0:	637b      	str	r3, [r7, #52]	@ 0x34
            dest_buf += dest_stride;
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b9e6:	4413      	add	r3, r2
 800b9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            src_buf_c32 = drawbuf_next_row(src_buf_c32, src_stride);
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b9f0:	f000 f8f1 	bl	800bbd6 <drawbuf_next_row>
 800b9f4:	63b8      	str	r0, [r7, #56]	@ 0x38
        for(y = 0; y < h; y++) {
 800b9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	dbab      	blt.n	800b95c <argb8888_image_blend+0x26e>
}
 800ba04:	e7ff      	b.n	800ba06 <argb8888_image_blend+0x318>
 800ba06:	bf00      	nop
 800ba08:	3744      	adds	r7, #68	@ 0x44
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd90      	pop	{r4, r7, pc}
	...

0800ba10 <blend_non_normal_pixel>:

static inline void LV_ATTRIBUTE_FAST_MEM blend_non_normal_pixel(uint8_t * dest, lv_color32_t src, lv_blend_mode_t mode)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	71fb      	strb	r3, [r7, #7]
    uint8_t res[3] = {0, 0, 0};
 800ba1e:	4a3c      	ldr	r2, [pc, #240]	@ (800bb10 <blend_non_normal_pixel+0x100>)
 800ba20:	f107 0314 	add.w	r3, r7, #20
 800ba24:	6812      	ldr	r2, [r2, #0]
 800ba26:	4611      	mov	r1, r2
 800ba28:	8019      	strh	r1, [r3, #0]
 800ba2a:	3302      	adds	r3, #2
 800ba2c:	0c12      	lsrs	r2, r2, #16
 800ba2e:	701a      	strb	r2, [r3, #0]
    switch(mode) {
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d045      	beq.n	800bac2 <blend_non_normal_pixel+0xb2>
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	dc66      	bgt.n	800bb08 <blend_non_normal_pixel+0xf8>
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d002      	beq.n	800ba44 <blend_non_normal_pixel+0x34>
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d021      	beq.n	800ba86 <blend_non_normal_pixel+0x76>
            res[1] = (dest[1] * src.green) >> 8;
            res[2] = (dest[2] * src.red) >> 8;
            break;
        default:
            LV_LOG_WARN("Not supported blend mode: %d", mode);
            return;
 800ba42:	e061      	b.n	800bb08 <blend_non_normal_pixel+0xf8>
            res[0] = LV_MIN(dest[0] + src.blue, 255);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	7a3b      	ldrb	r3, [r7, #8]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	2bff      	cmp	r3, #255	@ 0xff
 800ba50:	bfa8      	it	ge
 800ba52:	23ff      	movge	r3, #255	@ 0xff
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	753b      	strb	r3, [r7, #20]
            res[1] = LV_MIN(dest[1] + src.green, 255);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	7a7b      	ldrb	r3, [r7, #9]
 800ba62:	4413      	add	r3, r2
 800ba64:	2bff      	cmp	r3, #255	@ 0xff
 800ba66:	bfa8      	it	ge
 800ba68:	23ff      	movge	r3, #255	@ 0xff
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	757b      	strb	r3, [r7, #21]
            res[2] = LV_MIN(dest[2] + src.red, 255);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3302      	adds	r3, #2
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	461a      	mov	r2, r3
 800ba76:	7abb      	ldrb	r3, [r7, #10]
 800ba78:	4413      	add	r3, r2
 800ba7a:	2bff      	cmp	r3, #255	@ 0xff
 800ba7c:	bfa8      	it	ge
 800ba7e:	23ff      	movge	r3, #255	@ 0xff
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	75bb      	strb	r3, [r7, #22]
            break;
 800ba84:	e038      	b.n	800baf8 <blend_non_normal_pixel+0xe8>
            res[0] = LV_MAX(dest[0] - src.blue, 0);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	7a3b      	ldrb	r3, [r7, #8]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	753b      	strb	r3, [r7, #20]
            res[1] = LV_MAX(dest[1] - src.green, 0);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	7a7b      	ldrb	r3, [r7, #9]
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	757b      	strb	r3, [r7, #21]
            res[2] = LV_MAX(dest[2] - src.red, 0);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	3302      	adds	r3, #2
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	7abb      	ldrb	r3, [r7, #10]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800babc:	b2db      	uxtb	r3, r3
 800babe:	75bb      	strb	r3, [r7, #22]
            break;
 800bac0:	e01a      	b.n	800baf8 <blend_non_normal_pixel+0xe8>
            res[0] = (dest[0] * src.blue) >> 8;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	7a3a      	ldrb	r2, [r7, #8]
 800bac8:	fb02 f303 	mul.w	r3, r2, r3
 800bacc:	121b      	asrs	r3, r3, #8
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	753b      	strb	r3, [r7, #20]
            res[1] = (dest[1] * src.green) >> 8;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3301      	adds	r3, #1
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	7a7a      	ldrb	r2, [r7, #9]
 800bada:	fb02 f303 	mul.w	r3, r2, r3
 800bade:	121b      	asrs	r3, r3, #8
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	757b      	strb	r3, [r7, #21]
            res[2] = (dest[2] * src.red) >> 8;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3302      	adds	r3, #2
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	7aba      	ldrb	r2, [r7, #10]
 800baec:	fb02 f303 	mul.w	r3, r2, r3
 800baf0:	121b      	asrs	r3, r3, #8
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	75bb      	strb	r3, [r7, #22]
            break;
 800baf6:	bf00      	nop
    }
    lv_color_24_24_mix(res, dest, src.alpha);
 800baf8:	7afa      	ldrb	r2, [r7, #11]
 800bafa:	f107 0314 	add.w	r3, r7, #20
 800bafe:	68f9      	ldr	r1, [r7, #12]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f000 f807 	bl	800bb14 <lv_color_24_24_mix>
 800bb06:	e000      	b.n	800bb0a <blend_non_normal_pixel+0xfa>
            return;
 800bb08:	bf00      	nop
}
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	0801e2d0 	.word	0x0801e2d0

0800bb14 <lv_color_24_24_mix>:

static inline void LV_ATTRIBUTE_FAST_MEM lv_color_24_24_mix(const uint8_t * src, uint8_t * dest, uint8_t mix)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b087      	sub	sp, #28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	71fb      	strb	r3, [r7, #7]

    if(mix == 0) return;
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d050      	beq.n	800bbca <lv_color_24_24_mix+0xb6>

    if(mix >= LV_OPA_MAX) {
 800bb28:	79fb      	ldrb	r3, [r7, #7]
 800bb2a:	2bfc      	cmp	r3, #252	@ 0xfc
 800bb2c:	d910      	bls.n	800bb50 <lv_color_24_24_mix+0x3c>
        dest[0] = src[0];
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	781a      	ldrb	r2, [r3, #0]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	701a      	strb	r2, [r3, #0]
        dest[1] = src[1];
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	1c5a      	adds	r2, r3, #1
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	7812      	ldrb	r2, [r2, #0]
 800bb40:	701a      	strb	r2, [r3, #0]
        dest[2] = src[2];
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1c9a      	adds	r2, r3, #2
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	3302      	adds	r3, #2
 800bb4a:	7812      	ldrb	r2, [r2, #0]
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	e03d      	b.n	800bbcc <lv_color_24_24_mix+0xb8>
    }
    else {
        lv_opa_t mix_inv = 255 - mix;
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	43db      	mvns	r3, r3
 800bb54:	75fb      	strb	r3, [r7, #23]
        dest[0] = (uint32_t)((uint32_t)src[0] * mix + dest[0] * mix_inv) >> 8;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	fb02 f303 	mul.w	r3, r2, r3
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	7812      	ldrb	r2, [r2, #0]
 800bb66:	4611      	mov	r1, r2
 800bb68:	7dfa      	ldrb	r2, [r7, #23]
 800bb6a:	fb01 f202 	mul.w	r2, r1, r2
 800bb6e:	4413      	add	r3, r2
 800bb70:	0a1b      	lsrs	r3, r3, #8
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	701a      	strb	r2, [r3, #0]
        dest[1] = (uint32_t)((uint32_t)src[1] * mix + dest[1] * mix_inv) >> 8;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	fb02 f303 	mul.w	r3, r2, r3
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	3201      	adds	r2, #1
 800bb8a:	7812      	ldrb	r2, [r2, #0]
 800bb8c:	4611      	mov	r1, r2
 800bb8e:	7dfa      	ldrb	r2, [r7, #23]
 800bb90:	fb01 f202 	mul.w	r2, r1, r2
 800bb94:	4413      	add	r3, r2
 800bb96:	0a1a      	lsrs	r2, r3, #8
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	b2d2      	uxtb	r2, r2
 800bb9e:	701a      	strb	r2, [r3, #0]
        dest[2] = (uint32_t)((uint32_t)src[2] * mix + dest[2] * mix_inv) >> 8;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3302      	adds	r3, #2
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	fb02 f303 	mul.w	r3, r2, r3
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	3202      	adds	r2, #2
 800bbb2:	7812      	ldrb	r2, [r2, #0]
 800bbb4:	4611      	mov	r1, r2
 800bbb6:	7dfa      	ldrb	r2, [r7, #23]
 800bbb8:	fb01 f202 	mul.w	r2, r1, r2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	0a1a      	lsrs	r2, r3, #8
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	3302      	adds	r3, #2
 800bbc4:	b2d2      	uxtb	r2, r2
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	e000      	b.n	800bbcc <lv_color_24_24_mix+0xb8>
    if(mix == 0) return;
 800bbca:	bf00      	nop
    }
}
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <drawbuf_next_row>:

static inline void * LV_ATTRIBUTE_FAST_MEM drawbuf_next_row(const void * buf, uint32_t stride)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
    return (void *)((uint8_t *)buf + stride);
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	4413      	add	r3, r2
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <lv_draw_sw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0

#if LV_DRAW_SW_COMPLEX == 1
    lv_draw_sw_mask_init();
 800bbfa:	f005 fcb7 	bl	801156c <lv_draw_sw_mask_init>
#endif

    uint32_t i;
    for(i = 0; i < LV_DRAW_SW_DRAW_UNIT_CNT; i++) {
 800bbfe:	2300      	movs	r3, #0
 800bc00:	607b      	str	r3, [r7, #4]
 800bc02:	e012      	b.n	800bc2a <lv_draw_sw_init+0x36>
        lv_draw_sw_unit_t * draw_sw_unit = lv_draw_create_unit(sizeof(lv_draw_sw_unit_t));
 800bc04:	2020      	movs	r0, #32
 800bc06:	f7f9 fe05 	bl	8005814 <lv_draw_create_unit>
 800bc0a:	6038      	str	r0, [r7, #0]
        draw_sw_unit->base_unit.dispatch_cb = dispatch;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	4a0b      	ldr	r2, [pc, #44]	@ (800bc3c <lv_draw_sw_init+0x48>)
 800bc10:	60da      	str	r2, [r3, #12]
        draw_sw_unit->base_unit.evaluate_cb = evaluate;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	4a0a      	ldr	r2, [pc, #40]	@ (800bc40 <lv_draw_sw_init+0x4c>)
 800bc16:	611a      	str	r2, [r3, #16]
        draw_sw_unit->idx = i;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	61da      	str	r2, [r3, #28]
        draw_sw_unit->base_unit.delete_cb = LV_USE_OS ? lv_draw_sw_delete : NULL;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2200      	movs	r2, #0
 800bc22:	615a      	str	r2, [r3, #20]
    for(i = 0; i < LV_DRAW_SW_DRAW_UNIT_CNT; i++) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3301      	adds	r3, #1
 800bc28:	607b      	str	r3, [r7, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0e9      	beq.n	800bc04 <lv_draw_sw_init+0x10>
    }

#if LV_USE_VECTOR_GRAPHIC && LV_USE_THORVG
    tvg_engine_init(TVG_ENGINE_SW, 0);
#endif
}
 800bc30:	bf00      	nop
 800bc32:	bf00      	nop
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	0800bd31 	.word	0x0800bd31
 800bc40:	0800bc6d 	.word	0x0800bc6d

0800bc44 <execute_drawing_unit>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static inline void execute_drawing_unit(lv_draw_sw_unit_t * u)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
    execute_drawing(u);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f8ab 	bl	800bda8 <execute_drawing>

    u->task_act->state = LV_DRAW_TASK_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	2203      	movs	r2, #3
 800bc58:	649a      	str	r2, [r3, #72]	@ 0x48
    u->task_act = NULL;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	619a      	str	r2, [r3, #24]

    /*The draw unit is free now. Request a new dispatching as it can get a new task*/
    lv_draw_dispatch_request();
 800bc60:	f7f9 fdf0 	bl	8005844 <lv_draw_dispatch_request>
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <evaluate>:

static int32_t evaluate(lv_draw_unit_t * draw_unit, lv_draw_task_t * task)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_unit);

    switch(task->type) {
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	791b      	ldrb	r3, [r3, #4]
 800bc7a:	3b04      	subs	r3, #4
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d840      	bhi.n	800bd02 <evaluate+0x96>
        case LV_DRAW_TASK_TYPE_IMAGE:
        case LV_DRAW_TASK_TYPE_LAYER: {
                lv_draw_image_dsc_t * draw_dsc = task->draw_dsc;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc84:	60fb      	str	r3, [r7, #12]

                /* not support skew */
                if(draw_dsc->skew_x != 0 || draw_dsc->skew_y != 0) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d103      	bne.n	800bc96 <evaluate+0x2a>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <evaluate+0x2e>
                    return 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	e044      	b.n	800bd24 <evaluate+0xb8>
                }

                bool transformed = draw_dsc->rotation != 0 || draw_dsc->scale_x != LV_SCALE_NONE ||
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                                   draw_dsc->scale_y != LV_SCALE_NONE ? true : false;
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d109      	bne.n	800bcb6 <evaluate+0x4a>
                bool transformed = draw_dsc->rotation != 0 || draw_dsc->scale_x != LV_SCALE_NONE ||
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcaa:	d104      	bne.n	800bcb6 <evaluate+0x4a>
                                   draw_dsc->scale_y != LV_SCALE_NONE ? true : false;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcb4:	d001      	beq.n	800bcba <evaluate+0x4e>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e000      	b.n	800bcbc <evaluate+0x50>
 800bcba:	2300      	movs	r3, #0
                bool transformed = draw_dsc->rotation != 0 || draw_dsc->scale_x != LV_SCALE_NONE ||
 800bcbc:	72fb      	strb	r3, [r7, #11]
 800bcbe:	7afb      	ldrb	r3, [r7, #11]
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	72fb      	strb	r3, [r7, #11]

                bool masked = draw_dsc->bitmap_mask_src != NULL;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bf14      	ite	ne
 800bcce:	2301      	movne	r3, #1
 800bcd0:	2300      	moveq	r3, #0
 800bcd2:	72bb      	strb	r3, [r7, #10]
                if(masked && transformed)  return 0;
 800bcd4:	7abb      	ldrb	r3, [r7, #10]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d004      	beq.n	800bce4 <evaluate+0x78>
 800bcda:	7afb      	ldrb	r3, [r7, #11]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <evaluate+0x78>
 800bce0:	2300      	movs	r3, #0
 800bce2:	e01f      	b.n	800bd24 <evaluate+0xb8>

                lv_color_format_t cf = draw_dsc->header.cf;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bcea:	727b      	strb	r3, [r7, #9]
                if(masked && (cf == LV_COLOR_FORMAT_A8 || cf == LV_COLOR_FORMAT_RGB565A8)) {
 800bcec:	7abb      	ldrb	r3, [r7, #10]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d009      	beq.n	800bd06 <evaluate+0x9a>
 800bcf2:	7a7b      	ldrb	r3, [r7, #9]
 800bcf4:	2b0e      	cmp	r3, #14
 800bcf6:	d002      	beq.n	800bcfe <evaluate+0x92>
 800bcf8:	7a7b      	ldrb	r3, [r7, #9]
 800bcfa:	2b14      	cmp	r3, #20
 800bcfc:	d103      	bne.n	800bd06 <evaluate+0x9a>
                    return 0;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e010      	b.n	800bd24 <evaluate+0xb8>
                }
            }
            break;
        default:
            break;
 800bd02:	bf00      	nop
 800bd04:	e000      	b.n	800bd08 <evaluate+0x9c>
            break;
 800bd06:	bf00      	nop
    }

    if(task->preference_score >= 100) {
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bd0e:	2b63      	cmp	r3, #99	@ 0x63
 800bd10:	d907      	bls.n	800bd22 <evaluate+0xb6>
        task->preference_score = 100;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2264      	movs	r2, #100	@ 0x64
 800bd16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        task->preferred_draw_unit_id = DRAW_UNIT_ID_SW;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    return 0;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <dispatch>:

static int32_t dispatch(lv_draw_unit_t * draw_unit, lv_layer_t * layer)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
    LV_PROFILER_BEGIN;
    lv_draw_sw_unit_t * draw_sw_unit = (lv_draw_sw_unit_t *) draw_unit;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	617b      	str	r3, [r7, #20]

    /*Return immediately if it's busy with draw task*/
    if(draw_sw_unit->task_act) {
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d001      	beq.n	800bd4a <dispatch+0x1a>
        LV_PROFILER_END;
        return 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	e029      	b.n	800bd9e <dispatch+0x6e>
    }

    lv_draw_task_t * t = NULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	613b      	str	r3, [r7, #16]
    t = lv_draw_get_next_available_task(layer, NULL, DRAW_UNIT_ID_SW);
 800bd4e:	2201      	movs	r2, #1
 800bd50:	2100      	movs	r1, #0
 800bd52:	6838      	ldr	r0, [r7, #0]
 800bd54:	f7f9 fd84 	bl	8005860 <lv_draw_get_next_available_task>
 800bd58:	6138      	str	r0, [r7, #16]
    if(t == NULL) {
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <dispatch+0x36>
        LV_PROFILER_END;
        return -1;
 800bd60:	f04f 33ff 	mov.w	r3, #4294967295
 800bd64:	e01b      	b.n	800bd9e <dispatch+0x6e>
    }

    void * buf = lv_draw_layer_alloc_buf(layer);
 800bd66:	6838      	ldr	r0, [r7, #0]
 800bd68:	f7f9 fdde 	bl	8005928 <lv_draw_layer_alloc_buf>
 800bd6c:	60f8      	str	r0, [r7, #12]
    if(buf == NULL) {
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d102      	bne.n	800bd7a <dispatch+0x4a>
        LV_PROFILER_END;
        return -1;
 800bd74:	f04f 33ff 	mov.w	r3, #4294967295
 800bd78:	e011      	b.n	800bd9e <dispatch+0x6e>
    }

    t->state = LV_DRAW_TASK_STATE_IN_PROGRESS;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	649a      	str	r2, [r3, #72]	@ 0x48
    draw_sw_unit->base_unit.target_layer = layer;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	605a      	str	r2, [r3, #4]
    draw_sw_unit->base_unit.clip_area = &t->clip_area;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	609a      	str	r2, [r3, #8]
    draw_sw_unit->task_act = t;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	619a      	str	r2, [r3, #24]

#if LV_USE_OS
    /*Let the render thread work*/
    if(draw_sw_unit->inited) lv_thread_sync_signal(&draw_sw_unit->sync);
#else
    execute_drawing_unit(draw_sw_unit);
 800bd96:	6978      	ldr	r0, [r7, #20]
 800bd98:	f7ff ff54 	bl	800bc44 <execute_drawing_unit>
#endif
    LV_PROFILER_END;
    return 1;
 800bd9c:	2301      	movs	r3, #1
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
	...

0800bda8 <execute_drawing>:
    LV_LOG_INFO("exit software rendering thread");
}
#endif

static void execute_drawing(lv_draw_sw_unit_t * u)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
    LV_PROFILER_BEGIN;
    /*Render the draw task*/
    lv_draw_task_t * t = u->task_act;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	60fb      	str	r3, [r7, #12]
    switch(t->type) {
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	791b      	ldrb	r3, [r3, #4]
 800bdba:	2b09      	cmp	r3, #9
 800bdbc:	d86c      	bhi.n	800be98 <execute_drawing+0xf0>
 800bdbe:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc4 <execute_drawing+0x1c>)
 800bdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc4:	0800bded 	.word	0x0800bded
 800bdc8:	0800bdff 	.word	0x0800bdff
 800bdcc:	0800be11 	.word	0x0800be11
 800bdd0:	0800be23 	.word	0x0800be23
 800bdd4:	0800be35 	.word	0x0800be35
 800bdd8:	0800be75 	.word	0x0800be75
 800bddc:	0800be59 	.word	0x0800be59
 800bde0:	0800be47 	.word	0x0800be47
 800bde4:	0800be67 	.word	0x0800be67
 800bde8:	0800be87 	.word	0x0800be87
        case LV_DRAW_TASK_TYPE_FILL:
            lv_draw_sw_fill((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f003 f883 	bl	800ef02 <lv_draw_sw_fill>
            break;
 800bdfc:	e04d      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_BORDER:
            lv_draw_sw_border((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3308      	adds	r3, #8
 800be06:	461a      	mov	r2, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fe0a 	bl	800ca22 <lv_draw_sw_border>
            break;
 800be0e:	e044      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_BOX_SHADOW:
            lv_draw_sw_box_shadow((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3308      	adds	r3, #8
 800be18:	461a      	mov	r2, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f001 fabc 	bl	800d398 <lv_draw_sw_box_shadow>
            break;
 800be20:	e03b      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_LABEL:
            lv_draw_sw_label((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3308      	adds	r3, #8
 800be2a:	461a      	mov	r2, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f004 fc39 	bl	80106a4 <lv_draw_sw_label>
            break;
 800be32:	e032      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_IMAGE:
            lv_draw_sw_image((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	3308      	adds	r3, #8
 800be3c:	461a      	mov	r2, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f003 fdec 	bl	800fa1c <lv_draw_sw_image>
            break;
 800be44:	e029      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_ARC:
            lv_draw_sw_arc((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3308      	adds	r3, #8
 800be4e:	461a      	mov	r2, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f881 	bl	800bf58 <lv_draw_sw_arc>
            break;
 800be56:	e020      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_LINE:
            lv_draw_sw_line((lv_draw_unit_t *)u, t->draw_dsc);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be5c:	4619      	mov	r1, r3
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f004 fd05 	bl	801086e <lv_draw_sw_line>
            break;
 800be64:	e019      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_TRIANGLE:
            lv_draw_sw_triangle((lv_draw_unit_t *)u, t->draw_dsc);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be6a:	4619      	mov	r1, r3
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f008 ffbb 	bl	8014de8 <lv_draw_sw_triangle>
            break;
 800be72:	e012      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_LAYER:
            lv_draw_sw_layer((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3308      	adds	r3, #8
 800be7c:	461a      	mov	r2, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f003 fda7 	bl	800f9d2 <lv_draw_sw_layer>
            break;
 800be84:	e009      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_MASK_RECTANGLE:
            lv_draw_sw_mask_rect((lv_draw_unit_t *)u, t->draw_dsc, &t->area);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3308      	adds	r3, #8
 800be8e:	461a      	mov	r2, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f007 fb8a 	bl	80135aa <lv_draw_sw_mask_rect>
            break;
 800be96:	e000      	b.n	800be9a <execute_drawing+0xf2>
        case LV_DRAW_TASK_TYPE_VECTOR:
            lv_draw_sw_vector((lv_draw_unit_t *)u, t->draw_dsc);
            break;
#endif
        default:
            break;
 800be98:	bf00      	nop
        label_dsc.text = buf;
        lv_draw_sw_label((lv_draw_unit_t *)u, &label_dsc, &txt_area);
    }
#endif
    LV_PROFILER_END;
}
 800be9a:	bf00      	nop
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop

0800bea4 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	68da      	ldr	r2, [r3, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	60da      	str	r2, [r3, #12]
}
 800bece:	bf00      	nop
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr

0800beda <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 800beda:	b480      	push	{r7}
 800bedc:	b083      	sub	sp, #12
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	3301      	adds	r3, #1
}
 800beee:	4618      	mov	r0, r3
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	3301      	adds	r3, #1
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <lv_trigo_cos>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int32_t /* LV_ATTRIBUTE_FAST_MEM */ lv_trigo_sin(int16_t angle);

static inline int32_t LV_ATTRIBUTE_FAST_MEM lv_trigo_cos(int16_t angle)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	4603      	mov	r3, r0
 800bf22:	80fb      	strh	r3, [r7, #6]
    return lv_trigo_sin(angle + 90);
 800bf24:	88fb      	ldrh	r3, [r7, #6]
 800bf26:	335a      	adds	r3, #90	@ 0x5a
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	b21b      	sxth	r3, r3
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f010 f835 	bl	801bf9c <lv_trigo_sin>
 800bf32:	4603      	mov	r3, r0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f011 f907 	bl	801d15e <lv_memset>
}
 800bf50:	bf00      	nop
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <lv_draw_sw_arc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_unit_t * draw_unit, const lv_draw_arc_dsc_t * dsc, const lv_area_t * coords)
{
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800bf5e:	af02      	add	r7, sp, #8
 800bf60:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bf64:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800bf68:	6018      	str	r0, [r3, #0]
 800bf6a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bf6e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bf72:	6019      	str	r1, [r3, #0]
 800bf74:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bf78:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800bf7c:	601a      	str	r2, [r3, #0]
#if LV_DRAW_SW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 800bf7e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bf82:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	f240 8422 	bls.w	800c7d6 <lv_draw_sw_arc+0x87e>
    if(dsc->width == 0) return;
 800bf92:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bf96:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f000 841b 	beq.w	800c7da <lv_draw_sw_arc+0x882>
    if(dsc->start_angle == dsc->end_angle) return;
 800bfa4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bfa8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfb0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bfb4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	f000 840e 	beq.w	800c7de <lv_draw_sw_arc+0x886>

    int32_t width = dsc->width;
 800bfc2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bfc6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
    if(width > dsc->radius) width = dsc->radius;
 800bfd2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bfd6:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800bfde:	461a      	mov	r2, r3
 800bfe0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	dd07      	ble.n	800bff8 <lv_draw_sw_arc+0xa0>
 800bfe8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bfec:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800bff4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c

    lv_area_t area_out = *coords;
 800bff8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800bffc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f507 7400 	add.w	r4, r7, #512	@ 0x200
 800c006:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c008:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lv_area_t clipped_area;
    if(!_lv_area_intersect(&clipped_area, &area_out, draw_unit->clip_area)) return;
 800c00c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c010:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	689a      	ldr	r2, [r3, #8]
 800c018:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800c01c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800c020:	4618      	mov	r0, r3
 800c022:	f00e fb7f 	bl	801a724 <_lv_area_intersect>
 800c026:	4603      	mov	r3, r0
 800c028:	f083 0301 	eor.w	r3, r3, #1
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f040 83d7 	bne.w	800c7e2 <lv_draw_sw_arc+0x88a>

    /*Draw a full ring*/
    if(dsc->img_src == NULL &&
 800c034:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c038:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c040:	2b00      	cmp	r3, #0
 800c042:	d167      	bne.n	800c114 <lv_draw_sw_arc+0x1bc>
       (dsc->start_angle + 360 == dsc->end_angle || dsc->start_angle == dsc->end_angle + 360)) {
 800c044:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c048:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c050:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800c054:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c058:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if(dsc->img_src == NULL &&
 800c060:	429a      	cmp	r2, r3
 800c062:	d00f      	beq.n	800c084 <lv_draw_sw_arc+0x12c>
       (dsc->start_angle + 360 == dsc->end_angle || dsc->start_angle == dsc->end_angle + 360)) {
 800c064:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c068:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c070:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c074:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c07c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800c080:	429a      	cmp	r2, r3
 800c082:	d147      	bne.n	800c114 <lv_draw_sw_arc+0x1bc>
        lv_draw_border_dsc_t cir_dsc;
        lv_draw_border_dsc_init(&cir_dsc);
 800c084:	f107 0310 	add.w	r3, r7, #16
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fb fc04 	bl	8007896 <lv_draw_border_dsc_init>
        cir_dsc.opa = dsc->opa;
 800c08e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c092:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800c09c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c0a0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800c0a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        cir_dsc.color = dsc->color;
 800c0a8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c0ac:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800c0b0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c0b4:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800c0b8:	6812      	ldr	r2, [r2, #0]
 800c0ba:	3320      	adds	r3, #32
 800c0bc:	321c      	adds	r2, #28
 800c0be:	6812      	ldr	r2, [r2, #0]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	8019      	strh	r1, [r3, #0]
 800c0c4:	3302      	adds	r3, #2
 800c0c6:	0c12      	lsrs	r2, r2, #16
 800c0c8:	701a      	strb	r2, [r3, #0]
        cir_dsc.width = width;
 800c0ca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c0ce:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800c0d2:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800c0d6:	625a      	str	r2, [r3, #36]	@ 0x24
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800c0d8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c0dc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800c0e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c0e4:	61da      	str	r2, [r3, #28]
        cir_dsc.side = LV_BORDER_SIDE_FULL;
 800c0e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c0ea:	f5a3 720c 	sub.w	r2, r3, #560	@ 0x230
 800c0ee:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 800c0f2:	210f      	movs	r1, #15
 800c0f4:	f361 0304 	bfi	r3, r1, #0, #5
 800c0f8:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
        lv_draw_sw_border(draw_unit, &cir_dsc, &area_out);
 800c0fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800c100:	f107 0110 	add.w	r1, r7, #16
 800c104:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c108:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f000 fc88 	bl	800ca22 <lv_draw_sw_border>
 800c112:	e367      	b.n	800c7e4 <lv_draw_sw_arc+0x88c>
        return;
    }

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 800c114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800c118:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800c11c:	4611      	mov	r1, r2
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff fec0 	bl	800bea4 <lv_area_copy>
    area_in.x1 += dsc->width;
 800c124:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 800c128:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c12c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	4413      	add	r3, r2
 800c136:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    area_in.y1 += dsc->width;
 800c13a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 800c13e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c142:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	6a1b      	ldr	r3, [r3, #32]
 800c14a:	4413      	add	r3, r2
 800c14c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    area_in.x2 -= dsc->width;
 800c150:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 800c154:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c158:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
    area_in.y2 -= dsc->width;
 800c166:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 800c16a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c16e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec

    int32_t start_angle = (int32_t)dsc->start_angle;
 800c17c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c180:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c188:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
    int32_t end_angle = (int32_t)dsc->end_angle;
 800c18c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c190:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c198:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
    while(start_angle >= 360) start_angle -= 360;
 800c19c:	e005      	b.n	800c1aa <lv_draw_sw_arc+0x252>
 800c19e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800c1a2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800c1a6:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800c1aa:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800c1ae:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800c1b2:	daf4      	bge.n	800c19e <lv_draw_sw_arc+0x246>
    while(end_angle >= 360) end_angle -= 360;
 800c1b4:	e005      	b.n	800c1c2 <lv_draw_sw_arc+0x26a>
 800c1b6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800c1ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800c1be:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800c1c2:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800c1c6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800c1ca:	daf4      	bge.n	800c1b6 <lv_draw_sw_arc+0x25e>

    void * mask_list[4] = {0};
 800c1cc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	605a      	str	r2, [r3, #4]
 800c1d6:	609a      	str	r2, [r3, #8]
 800c1d8:	60da      	str	r2, [r3, #12]
    /*Create an angle mask*/
    lv_draw_sw_mask_angle_param_t mask_angle_param;
    lv_draw_sw_mask_angle_init(&mask_angle_param, dsc->center.x, dsc->center.y, start_angle, end_angle);
 800c1da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c1de:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c1e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c1ea:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1f2:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 800c1f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800c200:	f005 fb94 	bl	801192c <lv_draw_sw_mask_angle_init>
    mask_list[0] = &mask_angle_param;
 800c204:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800c208:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    /*Create an outer mask*/
    lv_draw_sw_mask_radius_param_t mask_out_param;
    lv_draw_sw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 800c20c:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 800c210:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800c214:	2300      	movs	r3, #0
 800c216:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c21a:	f005 fc27 	bl	8011a6c <lv_draw_sw_mask_radius_init>
    mask_list[1] = &mask_out_param;
 800c21e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c222:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    /*Create inner the mask*/
    lv_draw_sw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 800c226:	2300      	movs	r3, #0
 800c228:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 800c22c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff fe52 	bl	800beda <lv_area_get_width>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dd17      	ble.n	800c26c <lv_draw_sw_arc+0x314>
 800c23c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fe5a 	bl	800befa <lv_area_get_height>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dd0f      	ble.n	800c26c <lv_draw_sw_arc+0x314>
        lv_draw_sw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 800c24c:	f507 71f0 	add.w	r1, r7, #480	@ 0x1e0
 800c250:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 800c254:	2301      	movs	r3, #1
 800c256:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c25a:	f005 fc07 	bl	8011a6c <lv_draw_sw_mask_radius_init>
        mask_list[2] = &mask_in_param;
 800c25e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800c262:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
        mask_in_param_valid = true;
 800c266:	2301      	movs	r3, #1
 800c268:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
    }

    int32_t blend_h = lv_area_get_height(&clipped_area);
 800c26c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fe42 	bl	800befa <lv_area_get_height>
 800c276:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
    int32_t blend_w = lv_area_get_width(&clipped_area);
 800c27a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fe2b 	bl	800beda <lv_area_get_width>
 800c284:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    int32_t h;
    lv_opa_t * mask_buf = lv_malloc(blend_w);
 800c288:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800c28c:	4618      	mov	r0, r3
 800c28e:	f011 ff03 	bl	801e098 <lv_malloc>
 800c292:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218

    lv_area_t blend_area = clipped_area;
 800c296:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c29a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c29e:	461c      	mov	r4, r3
 800c2a0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800c2a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lv_area_t img_area;
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800c2aa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	232c      	movs	r3, #44	@ 0x2c
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	f011 ffbb 	bl	801e234 <memset>
    blend_dsc.mask_buf = mask_buf;
 800c2be:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c2c6:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 800c2ca:	619a      	str	r2, [r3, #24]
    blend_dsc.opa = dsc->opa;
 800c2cc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2d0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 800c2da:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2de:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c2e2:	751a      	strb	r2, [r3, #20]
    blend_dsc.blend_area = &blend_area;
 800c2e4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c2ec:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800c2f0:	601a      	str	r2, [r3, #0]
    blend_dsc.mask_area = &blend_area;
 800c2f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c2f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c2fa:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 800c2fe:	621a      	str	r2, [r3, #32]
    lv_image_decoder_dsc_t decoder_dsc;
    if(dsc->img_src == NULL) {
 800c300:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c304:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10f      	bne.n	800c330 <lv_draw_sw_arc+0x3d8>
        blend_dsc.color = dsc->color;
 800c310:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c314:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c318:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800c31c:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800c320:	6812      	ldr	r2, [r2, #0]
 800c322:	3315      	adds	r3, #21
 800c324:	321c      	adds	r2, #28
 800c326:	8811      	ldrh	r1, [r2, #0]
 800c328:	7892      	ldrb	r2, [r2, #2]
 800c32a:	8019      	strh	r1, [r3, #0]
 800c32c:	709a      	strb	r2, [r3, #2]
 800c32e:	e079      	b.n	800c424 <lv_draw_sw_arc+0x4cc>
    }
    else {
        lv_image_decoder_open(&decoder_dsc, dsc->img_src, NULL);
 800c330:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c334:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800c33c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c340:	2200      	movs	r2, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f7fb faf0 	bl	8007928 <lv_image_decoder_open>
        img_area.x1 = 0;
 800c348:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c34c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
        img_area.y1 = 0;
 800c354:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c358:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c35c:	2200      	movs	r2, #0
 800c35e:	605a      	str	r2, [r3, #4]
        img_area.x2 = decoder_dsc.decoded->header.w - 1;
 800c360:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c364:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	889b      	ldrh	r3, [r3, #4]
 800c36c:	1e5a      	subs	r2, r3, #1
 800c36e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c372:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c376:	609a      	str	r2, [r3, #8]
        img_area.y2 = decoder_dsc.decoded->header.h - 1;
 800c378:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c37c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c380:	69db      	ldr	r3, [r3, #28]
 800c382:	88db      	ldrh	r3, [r3, #6]
 800c384:	1e5a      	subs	r2, r3, #1
 800c386:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c38a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800c38e:	60da      	str	r2, [r3, #12]
        int32_t ofs = decoder_dsc.decoded->header.w / 2;
 800c390:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c394:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	889b      	ldrh	r3, [r3, #4]
 800c39c:	085b      	lsrs	r3, r3, #1
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
        lv_area_move(&img_area, dsc->center.x - ofs, dsc->center.y - ofs);
 800c3a4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3a8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800c3b4:	1ad1      	subs	r1, r2, r3
 800c3b6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3ba:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800c3c6:	1ad2      	subs	r2, r2, r3
 800c3c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f00e f985 	bl	801a6dc <lv_area_move>
        blend_dsc.src_area = &img_area;
 800c3d2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c3da:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800c3de:	611a      	str	r2, [r3, #16]
        blend_dsc.src_buf = decoder_dsc.decoded->data;
 800c3e0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3e4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	691a      	ldr	r2, [r3, #16]
 800c3ec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c3f4:	605a      	str	r2, [r3, #4]
        blend_dsc.src_color_format = decoder_dsc.decoded->header.cf;
 800c3f6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c3fa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c3fe:	69db      	ldr	r3, [r3, #28]
 800c400:	785a      	ldrb	r2, [r3, #1]
 800c402:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c406:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c40a:	731a      	strb	r2, [r3, #12]
        blend_dsc.src_stride = decoder_dsc.decoded->header.stride;
 800c40c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c410:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	891b      	ldrh	r3, [r3, #8]
 800c418:	461a      	mov	r2, r3
 800c41a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c41e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c422:	609a      	str	r2, [r3, #8]
    }

    lv_opa_t * circle_mask = NULL;
 800c424:	2300      	movs	r3, #0
 800c426:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
    lv_area_t round_area_1;
    lv_area_t round_area_2;
    if(dsc->rounded) {
 800c42a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c42e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 80c1 	beq.w	800c5c6 <lv_draw_sw_arc+0x66e>
        circle_mask = lv_malloc(width * width);
 800c444:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c448:	fb03 f303 	mul.w	r3, r3, r3
 800c44c:	4618      	mov	r0, r3
 800c44e:	f011 fe23 	bl	801e098 <lv_malloc>
 800c452:	f8c7 0228 	str.w	r0, [r7, #552]	@ 0x228
        lv_memset(circle_mask, 0xff, width * width);
 800c456:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c45a:	fb03 f303 	mul.w	r3, r3, r3
 800c45e:	461a      	mov	r2, r3
 800c460:	21ff      	movs	r1, #255	@ 0xff
 800c462:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 800c466:	f010 fe7a 	bl	801d15e <lv_memset>
        lv_area_t circle_area = {0, 0, width - 1, width - 1};
 800c46a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c46e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c47a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c47e:	2200      	movs	r2, #0
 800c480:	605a      	str	r2, [r3, #4]
 800c482:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c486:	1e5a      	subs	r2, r3, #1
 800c488:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c48c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c490:	609a      	str	r2, [r3, #8]
 800c492:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c496:	1e5a      	subs	r2, r3, #1
 800c498:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c49c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800c4a0:	60da      	str	r2, [r3, #12]
        lv_draw_sw_mask_radius_param_t circle_mask_param;
        lv_draw_sw_mask_radius_init(&circle_mask_param, &circle_area, width / 2, false);
 800c4a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c4a6:	0fda      	lsrs	r2, r3, #31
 800c4a8:	4413      	add	r3, r2
 800c4aa:	105b      	asrs	r3, r3, #1
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800c4b2:	f107 0010 	add.w	r0, r7, #16
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f005 fad8 	bl	8011a6c <lv_draw_sw_mask_radius_init>
        void * circle_mask_list[2] = {&circle_mask_param, NULL};
 800c4bc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c4c4:	f107 0210 	add.w	r2, r7, #16
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c4ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	605a      	str	r2, [r3, #4]

        lv_opa_t * circle_mask_tmp = circle_mask;
 800c4d6:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800c4da:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
        for(h = 0; h < width; h++) {
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800c4e4:	e025      	b.n	800c532 <lv_draw_sw_arc+0x5da>
            lv_draw_sw_mask_res_t res = lv_draw_sw_mask_apply(circle_mask_list, circle_mask_tmp, 0, h, width);
 800c4e6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800c4ea:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 800c4fa:	f005 f841 	bl	8011580 <lv_draw_sw_mask_apply>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
            if(res == LV_DRAW_SW_MASK_RES_TRANSP) {
 800c504:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <lv_draw_sw_arc+0x5c2>
                lv_memzero(circle_mask_tmp, width);
 800c50c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c510:	4619      	mov	r1, r3
 800c512:	f8d7 0224 	ldr.w	r0, [r7, #548]	@ 0x224
 800c516:	f7ff fd11 	bl	800bf3c <lv_memzero>
            }

            circle_mask_tmp += width;
 800c51a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c51e:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 800c522:	4413      	add	r3, r2
 800c524:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
        for(h = 0; h < width; h++) {
 800c528:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800c52c:	3301      	adds	r3, #1
 800c52e:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800c532:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800c536:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c53a:	429a      	cmp	r2, r3
 800c53c:	dbd3      	blt.n	800c4e6 <lv_draw_sw_arc+0x58e>
        }
        get_rounded_area(start_angle, dsc->radius, width, &round_area_1);
 800c53e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800c542:	b218      	sxth	r0, r3
 800c544:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c548:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800c550:	4619      	mov	r1, r3
 800c552:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c556:	b2da      	uxtb	r2, r3
 800c558:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c55c:	f000 f99c 	bl	800c898 <get_rounded_area>
        lv_area_move(&round_area_1, dsc->center.x, dsc->center.y);
 800c560:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c564:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c56c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c570:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c578:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800c57c:	4618      	mov	r0, r3
 800c57e:	f00e f8ad 	bl	801a6dc <lv_area_move>
        get_rounded_area(end_angle, dsc->radius, width, &round_area_2);
 800c582:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800c586:	b218      	sxth	r0, r3
 800c588:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c58c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800c594:	4619      	mov	r1, r3
 800c596:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c5a0:	f000 f97a 	bl	800c898 <get_rounded_area>
        lv_area_move(&round_area_2, dsc->center.x, dsc->center.y);
 800c5a4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5a8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c5b0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5b4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f00e f88b 	bl	801a6dc <lv_area_move>

    }

    blend_area.y2 = blend_area.y1;
 800c5c6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5d4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c5d8:	60da      	str	r2, [r3, #12]
    for(h = 0; h < blend_h; h++) {
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800c5e0:	e0c5      	b.n	800c76e <lv_draw_sw_arc+0x816>
        lv_memset(mask_buf, 0xff, blend_w);
 800c5e2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	21ff      	movs	r1, #255	@ 0xff
 800c5ea:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 800c5ee:	f010 fdb6 	bl	801d15e <lv_memset>
        blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, blend_area.y1, blend_w);
 800c5f2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c5f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c600:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c604:	6859      	ldr	r1, [r3, #4]
 800c606:	f507 70e8 	add.w	r0, r7, #464	@ 0x1d0
 800c60a:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	460b      	mov	r3, r1
 800c612:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 800c616:	f004 ffb3 	bl	8011580 <lv_draw_sw_mask_apply>
 800c61a:	4603      	mov	r3, r0
 800c61c:	461a      	mov	r2, r3
 800c61e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c622:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c626:	771a      	strb	r2, [r3, #28]

        if(dsc->rounded) {
 800c628:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c62c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d071      	beq.n	800c724 <lv_draw_sw_arc+0x7cc>
            if(blend_area.y1 >= round_area_1.y1 && blend_area.y1 <= round_area_1.y2) {
 800c640:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c644:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c64e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	db2c      	blt.n	800c6b2 <lv_draw_sw_arc+0x75a>
 800c658:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c65c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c666:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	dc20      	bgt.n	800c6b2 <lv_draw_sw_arc+0x75a>
                if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_TRANSP) {
 800c670:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c674:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c678:	7f1b      	ldrb	r3, [r3, #28]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10c      	bne.n	800c698 <lv_draw_sw_arc+0x740>
                    lv_memzero(mask_buf, blend_w);
 800c67e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800c682:	4619      	mov	r1, r3
 800c684:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 800c688:	f7ff fc58 	bl	800bf3c <lv_memzero>
                    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800c68c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c690:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c694:	2202      	movs	r2, #2
 800c696:	771a      	strb	r2, [r3, #28]
                }
                add_circle(circle_mask, &blend_area, &round_area_1, mask_buf, width);
 800c698:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800c69c:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800c6a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800c6aa:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 800c6ae:	f000 f89d 	bl	800c7ec <add_circle>
            }
            if(blend_area.y1 >= round_area_2.y1 && blend_area.y1 <= round_area_2.y2) {
 800c6b2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6b6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	db2c      	blt.n	800c724 <lv_draw_sw_arc+0x7cc>
 800c6ca:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c6d2:	685a      	ldr	r2, [r3, #4]
 800c6d4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6d8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	dc20      	bgt.n	800c724 <lv_draw_sw_arc+0x7cc>
                if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_TRANSP) {
 800c6e2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c6e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c6ea:	7f1b      	ldrb	r3, [r3, #28]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10c      	bne.n	800c70a <lv_draw_sw_arc+0x7b2>
                    lv_memzero(mask_buf, blend_w);
 800c6f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 800c6fa:	f7ff fc1f 	bl	800bf3c <lv_memzero>
                    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800c6fe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c702:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800c706:	2202      	movs	r2, #2
 800c708:	771a      	strb	r2, [r3, #28]
                }
                add_circle(circle_mask, &blend_area, &round_area_2, mask_buf, width);
 800c70a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800c70e:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800c712:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800c71c:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 800c720:	f000 f864 	bl	800c7ec <add_circle>
            }
        }

        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800c724:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800c728:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c72c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800c730:	4611      	mov	r1, r2
 800c732:	6818      	ldr	r0, [r3, #0]
 800c734:	f7fb faf8 	bl	8007d28 <lv_draw_sw_blend>

        blend_area.y1 ++;
 800c738:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c73c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c748:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c74c:	605a      	str	r2, [r3, #4]
        blend_area.y2 ++;
 800c74e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c752:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c75e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800c762:	60da      	str	r2, [r3, #12]
    for(h = 0; h < blend_h; h++) {
 800c764:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800c768:	3301      	adds	r3, #1
 800c76a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800c76e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800c772:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800c776:	429a      	cmp	r2, r3
 800c778:	f6ff af33 	blt.w	800c5e2 <lv_draw_sw_arc+0x68a>
    }

    lv_draw_sw_mask_free_param(&mask_angle_param);
 800c77c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800c780:	4618      	mov	r0, r3
 800c782:	f004 ff3f 	bl	8011604 <lv_draw_sw_mask_free_param>
    lv_draw_sw_mask_free_param(&mask_out_param);
 800c786:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800c78a:	4618      	mov	r0, r3
 800c78c:	f004 ff3a 	bl	8011604 <lv_draw_sw_mask_free_param>
    if(mask_in_param_valid) {
 800c790:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 800c794:	2b00      	cmp	r3, #0
 800c796:	d004      	beq.n	800c7a2 <lv_draw_sw_arc+0x84a>
        lv_draw_sw_mask_free_param(&mask_in_param);
 800c798:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800c79c:	4618      	mov	r0, r3
 800c79e:	f004 ff31 	bl	8011604 <lv_draw_sw_mask_free_param>
    }

    lv_free(mask_buf);
 800c7a2:	f8d7 0218 	ldr.w	r0, [r7, #536]	@ 0x218
 800c7a6:	f011 fcaf 	bl	801e108 <lv_free>
    if(dsc->img_src) lv_image_decoder_close(&decoder_dsc);
 800c7aa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c7ae:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d004      	beq.n	800c7c4 <lv_draw_sw_arc+0x86c>
 800c7ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fb f912 	bl	80079e8 <lv_image_decoder_close>
    if(circle_mask) lv_free(circle_mask);
 800c7c4:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00b      	beq.n	800c7e4 <lv_draw_sw_arc+0x88c>
 800c7cc:	f8d7 0228 	ldr.w	r0, [r7, #552]	@ 0x228
 800c7d0:	f011 fc9a 	bl	801e108 <lv_free>
 800c7d4:	e006      	b.n	800c7e4 <lv_draw_sw_arc+0x88c>
    if(dsc->opa <= LV_OPA_MIN) return;
 800c7d6:	bf00      	nop
 800c7d8:	e004      	b.n	800c7e4 <lv_draw_sw_arc+0x88c>
    if(dsc->width == 0) return;
 800c7da:	bf00      	nop
 800c7dc:	e002      	b.n	800c7e4 <lv_draw_sw_arc+0x88c>
    if(dsc->start_angle == dsc->end_angle) return;
 800c7de:	bf00      	nop
 800c7e0:	e000      	b.n	800c7e4 <lv_draw_sw_arc+0x88c>
    if(!_lv_area_intersect(&clipped_area, &area_out, draw_unit->clip_area)) return;
 800c7e2:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(layer);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_SW_COMPLEX*/
}
 800c7e4:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd90      	pop	{r4, r7, pc}

0800c7ec <add_circle>:
 *   STATIC FUNCTIONS
 **********************/

static void add_circle(const lv_opa_t * circle_mask, const lv_area_t * blend_area, const lv_area_t * circle_area,
                       lv_opa_t * mask_buf,  int32_t width)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08e      	sub	sp, #56	@ 0x38
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
 800c7f8:	603b      	str	r3, [r7, #0]
    lv_area_t circle_common_area;
    if(_lv_area_intersect(&circle_common_area, circle_area, blend_area)) {
 800c7fa:	f107 0314 	add.w	r3, r7, #20
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	4618      	mov	r0, r3
 800c804:	f00d ff8e 	bl	801a724 <_lv_area_intersect>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d040      	beq.n	800c890 <add_circle+0xa4>
        const lv_opa_t * circle_mask_tmp = circle_mask + width * (circle_common_area.y1 - circle_area->y1);
 800c80e:	69ba      	ldr	r2, [r7, #24]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c818:	fb02 f303 	mul.w	r3, r2, r3
 800c81c:	461a      	mov	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	4413      	add	r3, r2
 800c822:	633b      	str	r3, [r7, #48]	@ 0x30
        circle_mask_tmp += circle_common_area.x1 - circle_area->x1;
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	461a      	mov	r2, r3
 800c82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c830:	4413      	add	r3, r2
 800c832:	633b      	str	r3, [r7, #48]	@ 0x30

        lv_opa_t * mask_buf_tmp = mask_buf + circle_common_area.x1 - blend_area->x1;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	461a      	mov	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	4413      	add	r3, r2
 800c842:	62fb      	str	r3, [r7, #44]	@ 0x2c

        uint32_t x;
        uint32_t w = lv_area_get_width(&circle_common_area);
 800c844:	f107 0314 	add.w	r3, r7, #20
 800c848:	4618      	mov	r0, r3
 800c84a:	f7ff fb46 	bl	800beda <lv_area_get_width>
 800c84e:	4603      	mov	r3, r0
 800c850:	62bb      	str	r3, [r7, #40]	@ 0x28
        for(x = 0; x < w; x++) {
 800c852:	2300      	movs	r3, #0
 800c854:	637b      	str	r3, [r7, #52]	@ 0x34
 800c856:	e017      	b.n	800c888 <add_circle+0x9c>
            uint32_t res = mask_buf_tmp[x] + circle_mask_tmp[x];
 800c858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85c:	4413      	add	r3, r2
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	4619      	mov	r1, r3
 800c862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c866:	4413      	add	r3, r2
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	440b      	add	r3, r1
 800c86c:	627b      	str	r3, [r7, #36]	@ 0x24
            mask_buf_tmp[x] = res > 255 ? 255 : res;
 800c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c870:	2bff      	cmp	r3, #255	@ 0xff
 800c872:	bf28      	it	cs
 800c874:	23ff      	movcs	r3, #255	@ 0xff
 800c876:	4619      	mov	r1, r3
 800c878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c87c:	4413      	add	r3, r2
 800c87e:	b2ca      	uxtb	r2, r1
 800c880:	701a      	strb	r2, [r3, #0]
        for(x = 0; x < w; x++) {
 800c882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c884:	3301      	adds	r3, #1
 800c886:	637b      	str	r3, [r7, #52]	@ 0x34
 800c888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d3e3      	bcc.n	800c858 <add_circle+0x6c>
        }
    }

}
 800c890:	bf00      	nop
 800c892:	3738      	adds	r7, #56	@ 0x38
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <get_rounded_area>:

static void get_rounded_area(int16_t angle, int32_t radius, uint8_t thickness, lv_area_t * res_area)
{
 800c898:	b590      	push	{r4, r7, lr}
 800c89a:	b089      	sub	sp, #36	@ 0x24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60b9      	str	r1, [r7, #8]
 800c8a0:	607b      	str	r3, [r7, #4]
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	81fb      	strh	r3, [r7, #14]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	737b      	strb	r3, [r7, #13]
    int32_t thick_half = thickness / 2;
 800c8aa:	7b7b      	ldrb	r3, [r7, #13]
 800c8ac:	085b      	lsrs	r3, r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	61fb      	str	r3, [r7, #28]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 800c8b2:	7b7b      	ldrb	r3, [r7, #13]
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bf0c      	ite	eq
 800c8bc:	2301      	moveq	r3, #1
 800c8be:	2300      	movne	r3, #0
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	76fb      	strb	r3, [r7, #27]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_cos(angle)) >> (LV_TRIGO_SHIFT - 8);
 800c8c4:	68ba      	ldr	r2, [r7, #8]
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	1ad4      	subs	r4, r2, r3
 800c8ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fb23 	bl	800bf1a <lv_trigo_cos>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	fb04 f303 	mul.w	r3, r4, r3
 800c8da:	11db      	asrs	r3, r3, #7
 800c8dc:	617b      	str	r3, [r7, #20]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - 8);
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	1ad4      	subs	r4, r2, r3
 800c8e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f00f fb57 	bl	801bf9c <lv_trigo_sin>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	fb04 f303 	mul.w	r3, r4, r3
 800c8f4:	11db      	asrs	r3, r3, #7
 800c8f6:	613b      	str	r3, [r7, #16]

    /*The center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dd10      	ble.n	800c920 <get_rounded_area+0x88>
        cir_x = (cir_x - 128) >> 8;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	3b80      	subs	r3, #128	@ 0x80
 800c902:	121b      	asrs	r3, r3, #8
 800c904:	617b      	str	r3, [r7, #20]
        res_area->x1 = cir_x - thick_half + thick_corr;
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	1ad2      	subs	r2, r2, r3
 800c90c:	7efb      	ldrb	r3, [r7, #27]
 800c90e:	441a      	add	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	441a      	add	r2, r3
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	609a      	str	r2, [r3, #8]
 800c91e:	e00f      	b.n	800c940 <get_rounded_area+0xa8>
    }
    else {
        cir_x = (cir_x + 128) >> 8;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	3380      	adds	r3, #128	@ 0x80
 800c924:	121b      	asrs	r3, r3, #8
 800c926:	617b      	str	r3, [r7, #20]
        res_area->x1 = cir_x - thick_half;
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	1ad2      	subs	r2, r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	601a      	str	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	441a      	add	r2, r3
 800c938:	7efb      	ldrb	r3, [r7, #27]
 800c93a:	1ad2      	subs	r2, r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	609a      	str	r2, [r3, #8]
    }

    if(cir_y > 0) {
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	dd10      	ble.n	800c968 <get_rounded_area+0xd0>
        cir_y = (cir_y - 128) >> 8;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	3b80      	subs	r3, #128	@ 0x80
 800c94a:	121b      	asrs	r3, r3, #8
 800c94c:	613b      	str	r3, [r7, #16]
        res_area->y1 = cir_y - thick_half + thick_corr;
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	1ad2      	subs	r2, r2, r3
 800c954:	7efb      	ldrb	r3, [r7, #27]
 800c956:	441a      	add	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	605a      	str	r2, [r3, #4]
        res_area->y2 = cir_y + thick_half;
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	441a      	add	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	60da      	str	r2, [r3, #12]
    else {
        cir_y = (cir_y + 128) >> 8;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 800c966:	e00f      	b.n	800c988 <get_rounded_area+0xf0>
        cir_y = (cir_y + 128) >> 8;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3380      	adds	r3, #128	@ 0x80
 800c96c:	121b      	asrs	r3, r3, #8
 800c96e:	613b      	str	r3, [r7, #16]
        res_area->y1 = cir_y - thick_half;
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	1ad2      	subs	r2, r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	605a      	str	r2, [r3, #4]
        res_area->y2 = cir_y + thick_half - thick_corr;
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	441a      	add	r2, r3
 800c980:	7efb      	ldrb	r3, [r7, #27]
 800c982:	1ad2      	subs	r2, r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	60da      	str	r2, [r3, #12]
}
 800c988:	bf00      	nop
 800c98a:	3724      	adds	r7, #36	@ 0x24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd90      	pop	{r4, r7, pc}

0800c990 <lv_area_copy>:
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	685a      	ldr	r2, [r3, #4]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	689a      	ldr	r2, [r3, #8]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	68da      	ldr	r2, [r3, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	60da      	str	r2, [r3, #12]
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <lv_area_get_width>:
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b083      	sub	sp, #12
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689a      	ldr	r2, [r3, #8]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	3301      	adds	r3, #1
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <lv_area_get_height>:
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b083      	sub	sp, #12
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	3301      	adds	r3, #1
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <lv_memzero>:
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b082      	sub	sp, #8
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 800ca10:	683a      	ldr	r2, [r7, #0]
 800ca12:	2100      	movs	r1, #0
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f010 fba2 	bl	801d15e <lv_memset>
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <lv_draw_sw_border>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_border(lv_draw_unit_t * draw_unit, const lv_draw_border_dsc_t * dsc, const lv_area_t * coords)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b092      	sub	sp, #72	@ 0x48
 800ca26:	af04      	add	r7, sp, #16
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
    if(dsc->opa <= LV_OPA_MIN) return;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	f240 80b7 	bls.w	800cba8 <lv_draw_sw_border+0x186>
    if(dsc->width == 0) return;
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80b4 	beq.w	800cbac <lv_draw_sw_border+0x18a>
    if(dsc->side == LV_BORDER_SIDE_NONE) return;
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ca4a:	f003 031f 	and.w	r3, r3, #31
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 80ad 	beq.w	800cbb0 <lv_draw_sw_border+0x18e>

    int32_t coords_w = lv_area_get_width(coords);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff ffb5 	bl	800c9c6 <lv_area_get_width>
 800ca5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t coords_h = lv_area_get_height(coords);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff ffc1 	bl	800c9e6 <lv_area_get_height>
 800ca64:	62b8      	str	r0, [r7, #40]	@ 0x28
    int32_t rout = dsc->radius;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800ca6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca70:	4293      	cmp	r3, r2
 800ca72:	bfa8      	it	ge
 800ca74:	4613      	movge	r3, r2
 800ca76:	627b      	str	r3, [r7, #36]	@ 0x24
    if(rout > short_side >> 1) rout = short_side >> 1;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7a:	105b      	asrs	r3, r3, #1
 800ca7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	dd02      	ble.n	800ca88 <lv_draw_sw_border+0x66>
 800ca82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca84:	105b      	asrs	r3, r3, #1
 800ca86:	637b      	str	r3, [r7, #52]	@ 0x34

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 800ca88:	f107 0314 	add.w	r3, r7, #20
 800ca8c:	6879      	ldr	r1, [r7, #4]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff ff7e 	bl	800c990 <lv_area_copy>
    area_inner.x1 += ((dsc->side & LV_BORDER_SIDE_LEFT) ? dsc->width : - (dsc->width + rout));
 800ca94:	697a      	ldr	r2, [r7, #20]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800ca9c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	f003 0304 	and.w	r3, r3, #4
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <lv_draw_sw_border+0x8e>
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caae:	e004      	b.n	800caba <lv_draw_sw_border+0x98>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab6:	440b      	add	r3, r1
 800cab8:	425b      	negs	r3, r3
 800caba:	4413      	add	r3, r2
 800cabc:	617b      	str	r3, [r7, #20]
    area_inner.x2 -= ((dsc->side & LV_BORDER_SIDE_RIGHT) ? dsc->width : - (dsc->width + rout));
 800cabe:	69fa      	ldr	r2, [r7, #28]
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cac6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	f003 0308 	and.w	r3, r3, #8
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <lv_draw_sw_border+0xb8>
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad8:	e004      	b.n	800cae4 <lv_draw_sw_border+0xc2>
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae0:	440b      	add	r3, r1
 800cae2:	425b      	negs	r3, r3
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	61fb      	str	r3, [r7, #28]
    area_inner.y1 += ((dsc->side & LV_BORDER_SIDE_TOP) ? dsc->width : - (dsc->width + rout));
 800cae8:	69ba      	ldr	r2, [r7, #24]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800caf0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d002      	beq.n	800cb04 <lv_draw_sw_border+0xe2>
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb02:	e004      	b.n	800cb0e <lv_draw_sw_border+0xec>
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0a:	440b      	add	r3, r1
 800cb0c:	425b      	negs	r3, r3
 800cb0e:	4413      	add	r3, r2
 800cb10:	61bb      	str	r3, [r7, #24]
    area_inner.y2 -= ((dsc->side & LV_BORDER_SIDE_BOTTOM) ? dsc->width : - (dsc->width + rout));
 800cb12:	6a3a      	ldr	r2, [r7, #32]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800cb1a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <lv_draw_sw_border+0x10c>
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb2c:	e004      	b.n	800cb38 <lv_draw_sw_border+0x116>
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cb32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb34:	440b      	add	r3, r1
 800cb36:	425b      	negs	r3, r3
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	623b      	str	r3, [r7, #32]

    int32_t rin = rout - dsc->width;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	633b      	str	r3, [r7, #48]	@ 0x30
    if(rin < 0) rin = 0;
 800cb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	da01      	bge.n	800cb50 <lv_draw_sw_border+0x12e>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if(rout == 0 && rin == 0) {
 800cb50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d110      	bne.n	800cb78 <lv_draw_sw_border+0x156>
 800cb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10d      	bne.n	800cb78 <lv_draw_sw_border+0x156>
        draw_border_simple(draw_unit, coords, &area_inner, dsc->color, dsc->opa);
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f107 0114 	add.w	r1, r7, #20
 800cb68:	9200      	str	r2, [sp, #0]
 800cb6a:	6a1b      	ldr	r3, [r3, #32]
 800cb6c:	460a      	mov	r2, r1
 800cb6e:	6879      	ldr	r1, [r7, #4]
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 fb23 	bl	800d1bc <draw_border_simple>
 800cb76:	e01c      	b.n	800cbb2 <lv_draw_sw_border+0x190>
    }
    else {
        draw_border_complex(draw_unit, coords, &area_inner, rout, rin, dsc->color, dsc->opa);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb7e:	f107 0114 	add.w	r1, r7, #20
 800cb82:	9302      	str	r3, [sp, #8]
 800cb84:	68ba      	ldr	r2, [r7, #8]
 800cb86:	ab01      	add	r3, sp, #4
 800cb88:	3220      	adds	r2, #32
 800cb8a:	6812      	ldr	r2, [r2, #0]
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	8018      	strh	r0, [r3, #0]
 800cb90:	3302      	adds	r3, #2
 800cb92:	0c12      	lsrs	r2, r2, #16
 800cb94:	701a      	strb	r2, [r3, #0]
 800cb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9c:	460a      	mov	r2, r1
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 f809 	bl	800cbb8 <draw_border_complex>
 800cba6:	e004      	b.n	800cbb2 <lv_draw_sw_border+0x190>
    if(dsc->opa <= LV_OPA_MIN) return;
 800cba8:	bf00      	nop
 800cbaa:	e002      	b.n	800cbb2 <lv_draw_sw_border+0x190>
    if(dsc->width == 0) return;
 800cbac:	bf00      	nop
 800cbae:	e000      	b.n	800cbb2 <lv_draw_sw_border+0x190>
    if(dsc->side == LV_BORDER_SIDE_NONE) return;
 800cbb0:	bf00      	nop
    }

}
 800cbb2:	3738      	adds	r7, #56	@ 0x38
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <draw_border_complex>:
 *   STATIC FUNCTIONS
 **********************/

void draw_border_complex(lv_draw_unit_t * draw_unit, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         int32_t rout, int32_t rin, lv_color_t color, lv_opa_t opa)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b0bc      	sub	sp, #240	@ 0xf0
 800cbbc:	af02      	add	r7, sp, #8
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	603b      	str	r3, [r7, #0]
#if LV_DRAW_SW_COMPLEX
    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_unit->clip_area)) return;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	689a      	ldr	r2, [r3, #8]
 800cbca:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f00d fda7 	bl	801a724 <_lv_area_intersect>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f083 0301 	eor.w	r3, r3, #1
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f040 82e8 	bne.w	800d1b4 <draw_border_complex+0x5fc>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 800cbe4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff feec 	bl	800c9c6 <lv_area_get_width>
 800cbee:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memzero(&blend_dsc, sizeof(blend_dsc));
 800cbf2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cbf6:	212c      	movs	r1, #44	@ 0x2c
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7ff ff04 	bl	800ca06 <lv_memzero>
    lv_opa_t * mask_buf = lv_malloc(draw_area_w);
 800cbfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cc02:	4618      	mov	r0, r3
 800cc04:	f011 fa48 	bl	801e098 <lv_malloc>
 800cc08:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    blend_dsc.mask_buf = mask_buf;
 800cc0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    void * mask_list[3] = {0};
 800cc14:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800cc18:	2200      	movs	r2, #0
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	605a      	str	r2, [r3, #4]
 800cc1e:	609a      	str	r2, [r3, #8]

    /*Create mask for the inner mask*/
    lv_draw_sw_mask_radius_param_t mask_rin_param;
    lv_draw_sw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 800cc20:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800cc24:	2301      	movs	r3, #1
 800cc26:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	f004 ff1e 	bl	8011a6c <lv_draw_sw_mask_radius_init>
    mask_list[0] = &mask_rin_param;
 800cc30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800cc34:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*Create mask for the outer area*/
    lv_draw_sw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dd09      	ble.n	800cc50 <draw_border_complex+0x98>
        lv_draw_sw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 800cc3c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800cc40:	2300      	movs	r3, #0
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	f004 ff11 	bl	8011a6c <lv_draw_sw_mask_radius_init>
        mask_list[1] = &mask_rout_param;
 800cc4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cc4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 800cc50:	f107 0320 	add.w	r3, r7, #32
 800cc54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    blend_dsc.mask_area = &blend_area;
 800cc58:	f107 0320 	add.w	r3, r7, #32
 800cc5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    blend_dsc.color = color;
 800cc60:	f107 0399 	add.w	r3, r7, #153	@ 0x99
 800cc64:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800cc68:	8811      	ldrh	r1, [r2, #0]
 800cc6a:	7892      	ldrb	r2, [r2, #2]
 800cc6c:	8019      	strh	r1, [r3, #0]
 800cc6e:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = opa;
 800cc70:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 800cc74:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    /*Calculate the x and y coordinates where the straight parts area is*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	6819      	ldr	r1, [r3, #0]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	440b      	add	r3, r1
 800cc84:	4293      	cmp	r3, r2
 800cc86:	bfb8      	it	lt
 800cc88:	4613      	movlt	r3, r2
 800cc8a:	613b      	str	r3, [r7, #16]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689a      	ldr	r2, [r3, #8]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	6899      	ldr	r1, [r3, #8]
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	1acb      	subs	r3, r1, r3
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	bfa8      	it	ge
 800cc9c:	4613      	movge	r3, r2
 800cc9e:	61bb      	str	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	6859      	ldr	r1, [r3, #4]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	440b      	add	r3, r1
 800ccac:	4293      	cmp	r3, r2
 800ccae:	bfb8      	it	lt
 800ccb0:	4613      	movlt	r3, r2
 800ccb2:	617b      	str	r3, [r7, #20]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	68d9      	ldr	r1, [r3, #12]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	1acb      	subs	r3, r1, r3
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	bfa8      	it	ge
 800ccc4:	4613      	movge	r3, r2
 800ccc6:	61fb      	str	r3, [r7, #28]
    int32_t core_w = lv_area_get_width(&core_area);
 800ccc8:	f107 0310 	add.w	r3, r7, #16
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff fe7a 	bl	800c9c6 <lv_area_get_width>
 800ccd2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    bool top_side = outer_area->y1 <= inner_area->y1;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	685a      	ldr	r2, [r3, #4]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	bfd4      	ite	le
 800cce2:	2301      	movle	r3, #1
 800cce4:	2300      	movgt	r3, #0
 800cce6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    bool bottom_side = outer_area->y2 >= inner_area->y2;
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	bfac      	ite	ge
 800ccf6:	2301      	movge	r3, #1
 800ccf8:	2300      	movlt	r3, #0
 800ccfa:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1;
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	bfd4      	ite	le
 800cd0a:	2301      	movle	r3, #1
 800cd0c:	2300      	movgt	r3, #0
 800cd0e:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    bool right_side = outer_area->x2 >= inner_area->x2;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	689a      	ldr	r2, [r3, #8]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	bfac      	ite	ge
 800cd1e:	2301      	movge	r3, #1
 800cd20:	2300      	movlt	r3, #0
 800cd22:	f887 30d0 	strb.w	r3, [r7, #208]	@ 0xd0

    bool split_hor = true;
 800cd26:	2301      	movs	r3, #1
 800cd28:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    if(left_side && right_side && top_side && bottom_side &&
 800cd2c:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d012      	beq.n	800cd5a <draw_border_complex+0x1a2>
 800cd34:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00e      	beq.n	800cd5a <draw_border_complex+0x1a2>
 800cd3c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00a      	beq.n	800cd5a <draw_border_complex+0x1a2>
 800cd44:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d006      	beq.n	800cd5a <draw_border_complex+0x1a2>
 800cd4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cd50:	2b31      	cmp	r3, #49	@ 0x31
 800cd52:	dc02      	bgt.n	800cd5a <draw_border_complex+0x1a2>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 800cd54:	2300      	movs	r3, #0
 800cd56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }

    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_FULL_COVER;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 800cd60:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d014      	beq.n	800cd92 <draw_border_complex+0x1da>
 800cd68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d010      	beq.n	800cd92 <draw_border_complex+0x1da>
        blend_area.x1 = core_area.x1;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	623b      	str	r3, [r7, #32]
        blend_area.x2 = core_area.x2;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	62bb      	str	r3, [r7, #40]	@ 0x28
        blend_area.y1 = outer_area->y1;
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	627b      	str	r3, [r7, #36]	@ 0x24
        blend_area.y2 = inner_area->y1 - 1;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800cd86:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f7fa ffcb 	bl	8007d28 <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 800cd92:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d014      	beq.n	800cdc4 <draw_border_complex+0x20c>
 800cd9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d010      	beq.n	800cdc4 <draw_border_complex+0x20c>
        blend_area.x1 = core_area.x1;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	623b      	str	r3, [r7, #32]
        blend_area.x2 = core_area.x2;
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	62bb      	str	r3, [r7, #40]	@ 0x28
        blend_area.y1 = inner_area->y2 + 1;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	627b      	str	r3, [r7, #36]	@ 0x24
        blend_area.y2 = outer_area->y2;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800cdb8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7fa ffb2 	bl	8007d28 <lv_draw_sw_blend>
    }

    /*If the border is very thick and the vertical sides overlap horizontally draw a single rectangle*/
    if(inner_area->x1 >= inner_area->x2 && left_side && right_side) {
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	db18      	blt.n	800ce02 <draw_border_complex+0x24a>
 800cdd0:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d014      	beq.n	800ce02 <draw_border_complex+0x24a>
 800cdd8:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d010      	beq.n	800ce02 <draw_border_complex+0x24a>
        blend_area.x1 = outer_area->x1;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	623b      	str	r3, [r7, #32]
        blend_area.x2 = outer_area->x2;
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	62bb      	str	r3, [r7, #40]	@ 0x28
        blend_area.y1 = core_area.y1;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	627b      	str	r3, [r7, #36]	@ 0x24
        blend_area.y2 = core_area.y2;
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800cdf4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f7fa ff94 	bl	8007d28 <lv_draw_sw_blend>
 800ce00:	e029      	b.n	800ce56 <draw_border_complex+0x29e>
    }
    else {
        if(left_side) {
 800ce02:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d010      	beq.n	800ce2c <draw_border_complex+0x274>
            blend_area.x1 = outer_area->x1;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	623b      	str	r3, [r7, #32]
            blend_area.x2 = inner_area->x1 - 1;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	62bb      	str	r3, [r7, #40]	@ 0x28
            blend_area.y1 = core_area.y1;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
            blend_area.y2 = core_area.y2;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 800ce20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800ce24:	4619      	mov	r1, r3
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7fa ff7e 	bl	8007d28 <lv_draw_sw_blend>
        }

        if(right_side) {
 800ce2c:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d010      	beq.n	800ce56 <draw_border_complex+0x29e>
            blend_area.x1 = inner_area->x2 + 1;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	623b      	str	r3, [r7, #32]
            blend_area.x2 = outer_area->x2;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	62bb      	str	r3, [r7, #40]	@ 0x28
            blend_area.y1 = core_area.y1;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	627b      	str	r3, [r7, #36]	@ 0x24
            blend_area.y2 = core_area.y2;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 800ce4a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800ce4e:	4619      	mov	r1, r3
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f7fa ff69 	bl	8007d28 <lv_draw_sw_blend>

    /*Draw the corners*/
    int32_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 800ce56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800ce5a:	f083 0301 	eor.w	r3, r3, #1
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d077      	beq.n	800cf54 <draw_border_complex+0x39c>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 800ce64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ce68:	623b      	str	r3, [r7, #32]
        blend_area.x2 = draw_area.x2;
 800ce6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce6e:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	685a      	ldr	r2, [r3, #4]
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	bfb8      	it	lt
 800ce80:	4613      	movlt	r3, r2
 800ce82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        for(h = 0; h < max_h; h++) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ce8c:	e05b      	b.n	800cf46 <draw_border_complex+0x38e>
            int32_t top_y = outer_area->y1 + h;
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ce96:	4413      	add	r3, r2
 800ce98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            int32_t bottom_y = outer_area->y2 - h;
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	68da      	ldr	r2, [r3, #12]
 800cea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800ceaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ceae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	da05      	bge.n	800cec2 <draw_border_complex+0x30a>
 800ceb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ceba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cebe:	429a      	cmp	r2, r3
 800cec0:	dc3b      	bgt.n	800cf3a <draw_border_complex+0x382>

            lv_memset(mask_buf, 0xff, draw_area_w);
 800cec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cec6:	461a      	mov	r2, r3
 800cec8:	21ff      	movs	r1, #255	@ 0xff
 800ceca:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800cece:	f010 f946 	bl	801d15e <lv_memset>
            blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, top_y, draw_area_w);
 800ced2:	6a3a      	ldr	r2, [r7, #32]
 800ced4:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800ced8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cee2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800cee6:	f004 fb4b 	bl	8011580 <lv_draw_sw_mask_apply>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0

            if(top_y >= draw_area.y1) {
 800cef0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cef4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cef8:	429a      	cmp	r2, r3
 800cefa:	db0b      	blt.n	800cf14 <draw_border_complex+0x35c>
                blend_area.y1 = top_y;
 800cefc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf00:	627b      	str	r3, [r7, #36]	@ 0x24
                blend_area.y2 = top_y;
 800cf02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800cf08:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f7fa ff0a 	bl	8007d28 <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 800cf14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cf18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	dc0d      	bgt.n	800cf3c <draw_border_complex+0x384>
                blend_area.y1 = bottom_y;
 800cf20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cf24:	627b      	str	r3, [r7, #36]	@ 0x24
                blend_area.y2 = bottom_y;
 800cf26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cf2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800cf2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cf30:	4619      	mov	r1, r3
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f7fa fef8 	bl	8007d28 <lv_draw_sw_blend>
 800cf38:	e000      	b.n	800cf3c <draw_border_complex+0x384>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800cf3a:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 800cf3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf40:	3301      	adds	r3, #1
 800cf42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cf4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	db9d      	blt.n	800ce8e <draw_border_complex+0x2d6>
 800cf52:	e11d      	b.n	800d190 <draw_border_complex+0x5d8>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 800cf54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cf58:	623b      	str	r3, [r7, #32]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	1e5a      	subs	r2, r3, #1
 800cf5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bfa8      	it	ge
 800cf66:	4613      	movge	r3, r2
 800cf68:	62bb      	str	r3, [r7, #40]	@ 0x28
        blend_w = lv_area_get_width(&blend_area);
 800cf6a:	f107 0320 	add.w	r3, r7, #32
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fd29 	bl	800c9c6 <lv_area_get_width>
 800cf74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if(blend_w > 0) {
 800cf78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dd74      	ble.n	800d06a <draw_border_complex+0x4b2>
            if(left_side || top_side) {
 800cf80:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d103      	bne.n	800cf90 <draw_border_complex+0x3d8>
 800cf88:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d031      	beq.n	800cff4 <draw_border_complex+0x43c>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800cf90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf98:	e027      	b.n	800cfea <draw_border_complex+0x432>
                    blend_area.y1 = h;
 800cf9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
                    blend_area.y2 = h;
 800cfa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    lv_memset(mask_buf, 0xff, blend_w);
 800cfa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cfaa:	461a      	mov	r2, r3
 800cfac:	21ff      	movs	r1, #255	@ 0xff
 800cfae:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800cfb2:	f010 f8d4 	bl	801d15e <lv_memset>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, h, blend_w);
 800cfb6:	6a3a      	ldr	r2, [r7, #32]
 800cfb8:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800cfbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfc6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800cfca:	f004 fad9 	bl	8011580 <lv_draw_sw_mask_apply>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800cfd4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800cfd8:	4619      	mov	r1, r3
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f7fa fea4 	bl	8007d28 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800cfe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cff0:	429a      	cmp	r2, r3
 800cff2:	dbd2      	blt.n	800cf9a <draw_border_complex+0x3e2>
                }
            }

            if(left_side || bottom_side) {
 800cff4:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d103      	bne.n	800d004 <draw_border_complex+0x44c>
 800cffc:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 800d000:	2b00      	cmp	r3, #0
 800d002:	d032      	beq.n	800d06a <draw_border_complex+0x4b2>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	3301      	adds	r3, #1
 800d008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d00c:	e027      	b.n	800d05e <draw_border_complex+0x4a6>
                    blend_area.y1 = h;
 800d00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d012:	627b      	str	r3, [r7, #36]	@ 0x24
                    blend_area.y2 = h;
 800d014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d018:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    lv_memset(mask_buf, 0xff, blend_w);
 800d01a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d01e:	461a      	mov	r2, r3
 800d020:	21ff      	movs	r1, #255	@ 0xff
 800d022:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800d026:	f010 f89a 	bl	801d15e <lv_memset>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, h, blend_w);
 800d02a:	6a3a      	ldr	r2, [r7, #32]
 800d02c:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800d030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d03a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800d03e:	f004 fa9f 	bl	8011580 <lv_draw_sw_mask_apply>
 800d042:	4603      	mov	r3, r0
 800d044:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d048:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800d04c:	4619      	mov	r1, r3
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f7fa fe6a 	bl	8007d28 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800d054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d058:	3301      	adds	r3, #1
 800d05a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d05e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d066:	429a      	cmp	r2, r3
 800d068:	ddd1      	ble.n	800d00e <draw_border_complex+0x456>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, blend_area.x2 + 1);    /*To not overlap with the left side*/
 800d06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d072:	4293      	cmp	r3, r2
 800d074:	bfb8      	it	lt
 800d076:	4613      	movlt	r3, r2
 800d078:	623b      	str	r3, [r7, #32]
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	1c5a      	adds	r2, r3, #1
 800d07e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d082:	4293      	cmp	r3, r2
 800d084:	bfb8      	it	lt
 800d086:	4613      	movlt	r3, r2
 800d088:	623b      	str	r3, [r7, #32]

        blend_area.x2 = draw_area.x2;
 800d08a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d08e:	62bb      	str	r3, [r7, #40]	@ 0x28
        blend_w = lv_area_get_width(&blend_area);
 800d090:	f107 0320 	add.w	r3, r7, #32
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff fc96 	bl	800c9c6 <lv_area_get_width>
 800d09a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        if(blend_w > 0) {
 800d09e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	dd74      	ble.n	800d190 <draw_border_complex+0x5d8>
            if(right_side || top_side) {
 800d0a6:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d103      	bne.n	800d0b6 <draw_border_complex+0x4fe>
 800d0ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d031      	beq.n	800d11a <draw_border_complex+0x562>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800d0b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d0ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d0be:	e027      	b.n	800d110 <draw_border_complex+0x558>
                    blend_area.y1 = h;
 800d0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0c4:	627b      	str	r3, [r7, #36]	@ 0x24
                    blend_area.y2 = h;
 800d0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    lv_memset(mask_buf, 0xff, blend_w);
 800d0cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	21ff      	movs	r1, #255	@ 0xff
 800d0d4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800d0d8:	f010 f841 	bl	801d15e <lv_memset>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, h, blend_w);
 800d0dc:	6a3a      	ldr	r2, [r7, #32]
 800d0de:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800d0e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0ec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800d0f0:	f004 fa46 	bl	8011580 <lv_draw_sw_mask_apply>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d0fa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800d0fe:	4619      	mov	r1, r3
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7fa fe11 	bl	8007d28 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800d106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d10a:	3301      	adds	r3, #1
 800d10c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d116:	429a      	cmp	r2, r3
 800d118:	dbd2      	blt.n	800d0c0 <draw_border_complex+0x508>
                }
            }

            if(right_side || bottom_side) {
 800d11a:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <draw_border_complex+0x572>
 800d122:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 800d126:	2b00      	cmp	r3, #0
 800d128:	d032      	beq.n	800d190 <draw_border_complex+0x5d8>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	3301      	adds	r3, #1
 800d12e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d132:	e027      	b.n	800d184 <draw_border_complex+0x5cc>
                    blend_area.y1 = h;
 800d134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d138:	627b      	str	r3, [r7, #36]	@ 0x24
                    blend_area.y2 = h;
 800d13a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d13e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    lv_memset(mask_buf, 0xff, blend_w);
 800d140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d144:	461a      	mov	r2, r3
 800d146:	21ff      	movs	r1, #255	@ 0xff
 800d148:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800d14c:	f010 f807 	bl	801d15e <lv_memset>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, h, blend_w);
 800d150:	6a3a      	ldr	r2, [r7, #32]
 800d152:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800d156:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d160:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800d164:	f004 fa0c 	bl	8011580 <lv_draw_sw_mask_apply>
 800d168:	4603      	mov	r3, r0
 800d16a:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d16e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800d172:	4619      	mov	r1, r3
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7fa fdd7 	bl	8007d28 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800d17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d17e:	3301      	adds	r3, #1
 800d180:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d188:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d18c:	429a      	cmp	r2, r3
 800d18e:	ddd1      	ble.n	800d134 <draw_border_complex+0x57c>
                }
            }
        }
    }

    lv_draw_sw_mask_free_param(&mask_rin_param);
 800d190:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d194:	4618      	mov	r0, r3
 800d196:	f004 fa35 	bl	8011604 <lv_draw_sw_mask_free_param>
    if(rout > 0) lv_draw_sw_mask_free_param(&mask_rout_param);
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dd04      	ble.n	800d1aa <draw_border_complex+0x5f2>
 800d1a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f004 fa2d 	bl	8011604 <lv_draw_sw_mask_free_param>
    lv_free(mask_buf);
 800d1aa:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800d1ae:	f010 ffab 	bl	801e108 <lv_free>
 800d1b2:	e000      	b.n	800d1b6 <draw_border_complex+0x5fe>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_unit->clip_area)) return;
 800d1b4:	bf00      	nop

#endif /*LV_DRAW_SW_COMPLEX*/
}
 800d1b6:	37e8      	adds	r7, #232	@ 0xe8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <draw_border_simple>:
static void draw_border_simple(lv_draw_unit_t * draw_unit, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b094      	sub	sp, #80	@ 0x50
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
 800d1c8:	603b      	str	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memzero(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800d1ca:	f107 0310 	add.w	r3, r7, #16
 800d1ce:	212c      	movs	r1, #44	@ 0x2c
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7ff fc18 	bl	800ca06 <lv_memzero>
    blend_dsc.blend_area = &a;
 800d1d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d1da:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 800d1dc:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 800d1e0:	463a      	mov	r2, r7
 800d1e2:	8811      	ldrh	r1, [r2, #0]
 800d1e4:	7892      	ldrb	r2, [r2, #2]
 800d1e6:	8019      	strh	r1, [r3, #0]
 800d1e8:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = opa;
 800d1ea:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800d1ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    bool top_side = outer_area->y1 <= inner_area->y1;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	bfd4      	ite	le
 800d1fe:	2301      	movle	r3, #1
 800d200:	2300      	movgt	r3, #0
 800d202:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    bool bottom_side = outer_area->y2 >= inner_area->y2;
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	68da      	ldr	r2, [r3, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	429a      	cmp	r2, r3
 800d210:	bfac      	ite	ge
 800d212:	2301      	movge	r3, #1
 800d214:	2300      	movlt	r3, #0
 800d216:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    bool left_side = outer_area->x1 <= inner_area->x1;
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	429a      	cmp	r2, r3
 800d224:	bfd4      	ite	le
 800d226:	2301      	movle	r3, #1
 800d228:	2300      	movgt	r3, #0
 800d22a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    bool right_side = outer_area->x2 >= inner_area->x2;
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	689a      	ldr	r2, [r3, #8]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	429a      	cmp	r2, r3
 800d238:	bfac      	ite	ge
 800d23a:	2301      	movge	r3, #1
 800d23c:	2300      	movlt	r3, #0
 800d23e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

    /*Top*/
    a.x1 = outer_area->x1;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	63fb      	str	r3, [r7, #60]	@ 0x3c
    a.x2 = outer_area->x2;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	647b      	str	r3, [r7, #68]	@ 0x44
    a.y1 = outer_area->y1;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	643b      	str	r3, [r7, #64]	@ 0x40
    a.y2 = inner_area->y1 - 1;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	3b01      	subs	r3, #1
 800d25a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if(top_side) {
 800d25c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <draw_border_simple+0xb4>
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d264:	f107 0310 	add.w	r3, r7, #16
 800d268:	4619      	mov	r1, r3
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f7fa fd5c 	bl	8007d28 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	3301      	adds	r3, #1
 800d276:	643b      	str	r3, [r7, #64]	@ 0x40
    a.y2 = outer_area->y2;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if(bottom_side) {
 800d27e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <draw_border_simple+0xd6>
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d286:	f107 0310 	add.w	r3, r7, #16
 800d28a:	4619      	mov	r1, r3
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f7fa fd4b 	bl	8007d28 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	63fb      	str	r3, [r7, #60]	@ 0x3c
    a.x2 = inner_area->x1 - 1;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3b01      	subs	r3, #1
 800d29e:	647b      	str	r3, [r7, #68]	@ 0x44
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800d2a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <draw_border_simple+0xf2>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	e001      	b.n	800d2b2 <draw_border_simple+0xf6>
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	643b      	str	r3, [r7, #64]	@ 0x40
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800d2b4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <draw_border_simple+0x106>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	e001      	b.n	800d2c6 <draw_border_simple+0x10a>
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if(left_side) {
 800d2c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d005      	beq.n	800d2dc <draw_border_simple+0x120>
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d2d0:	f107 0310 	add.w	r3, r7, #16
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7fa fd26 	bl	8007d28 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    a.x2 = outer_area->x2;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	647b      	str	r3, [r7, #68]	@ 0x44
    if(right_side) {
 800d2ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d005      	beq.n	800d2fe <draw_border_simple+0x142>
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d2f2:	f107 0310 	add.w	r3, r7, #16
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7fa fd15 	bl	8007d28 <lv_draw_sw_blend>
    }
}
 800d2fe:	bf00      	nop
 800d300:	3750      	adds	r7, #80	@ 0x50
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <lv_area_copy>:
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	60da      	str	r2, [r3, #12]
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <lv_area_get_width>:
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	3301      	adds	r3, #1
}
 800d350:	4618      	mov	r0, r3
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <lv_area_get_height>:
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	3301      	adds	r3, #1
}
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <lv_memzero>:
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 800d386:	683a      	ldr	r2, [r7, #0]
 800d388:	2100      	movs	r1, #0
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f00f fee7 	bl	801d15e <lv_memset>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <lv_draw_sw_box_shadow>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_box_shadow(lv_draw_unit_t * draw_unit, const lv_draw_box_shadow_dsc_t * dsc, const lv_area_t * coords)
{
 800d398:	b590      	push	{r4, r7, lr}
 800d39a:	b0cf      	sub	sp, #316	@ 0x13c
 800d39c:	af02      	add	r7, sp, #8
 800d39e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d3a6:	6018      	str	r0, [r3, #0]
 800d3a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3ac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3b0:	6019      	str	r1, [r3, #0]
 800d3b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3ba:	601a      	str	r2, [r3, #0]
    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->ofs_x - dsc->spread;
 800d3bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d4:	441a      	add	r2, r3
 800d3d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    core_area.x2 = coords->x2  + dsc->ofs_x + dsc->spread;
 800d3e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	689a      	ldr	r2, [r3, #8]
 800d3f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d400:	441a      	add	r2, r3
 800d402:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d406:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40e:	4413      	add	r3, r2
 800d410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    core_area.y1 = coords->y1  + dsc->ofs_y - dsc->spread;
 800d414:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d418:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	685a      	ldr	r2, [r3, #4]
 800d420:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d424:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d42c:	441a      	add	r2, r3
 800d42e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d432:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    core_area.y2 = coords->y2  + dsc->ofs_y + dsc->spread;
 800d440:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d444:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	68da      	ldr	r2, [r3, #12]
 800d44c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d450:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d458:	441a      	add	r2, r3
 800d45a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d45e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d466:	4413      	add	r3, r2
 800d468:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->width / 2 - 1;
 800d46c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d470:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d474:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d47c:	0fd9      	lsrs	r1, r3, #31
 800d47e:	440b      	add	r3, r1
 800d480:	105b      	asrs	r3, r3, #1
 800d482:	425b      	negs	r3, r3
 800d484:	4413      	add	r3, r2
 800d486:	3b01      	subs	r3, #1
 800d488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    shadow_area.x2 = core_area.x2 + dsc->width / 2 + 1;
 800d48c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d490:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d494:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d49c:	0fd9      	lsrs	r1, r3, #31
 800d49e:	440b      	add	r3, r1
 800d4a0:	105b      	asrs	r3, r3, #1
 800d4a2:	4413      	add	r3, r2
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    shadow_area.y1 = core_area.y1 - dsc->width / 2 - 1;
 800d4aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800d4ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ba:	0fd9      	lsrs	r1, r3, #31
 800d4bc:	440b      	add	r3, r1
 800d4be:	105b      	asrs	r3, r3, #1
 800d4c0:	425b      	negs	r3, r3
 800d4c2:	4413      	add	r3, r2
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    shadow_area.y2 = core_area.y2 + dsc->width / 2 + 1;
 800d4ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d4ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4da:	0fd9      	lsrs	r1, r3, #31
 800d4dc:	440b      	add	r3, r1
 800d4de:	105b      	asrs	r3, r3, #1
 800d4e0:	4413      	add	r3, r2
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    lv_opa_t opa = dsc->opa;
 800d4e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d4f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800d4fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d4fe:	2bfd      	cmp	r3, #253	@ 0xfd
 800d500:	d902      	bls.n	800d508 <lv_draw_sw_box_shadow+0x170>
 800d502:	23ff      	movs	r3, #255	@ 0xff
 800d504:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_unit->clip_area)) return;
 800d508:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d50c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	689a      	ldr	r2, [r3, #8]
 800d514:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 800d518:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800d51c:	4618      	mov	r0, r3
 800d51e:	f00d f901 	bl	801a724 <_lv_area_intersect>
 800d522:	4603      	mov	r3, r0
 800d524:	f083 0301 	eor.w	r3, r3, #1
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f041 8214 	bne.w	800e958 <lv_draw_sw_box_shadow+0x15c0>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 800d530:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d534:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d538:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800d53c:	6819      	ldr	r1, [r3, #0]
 800d53e:	4610      	mov	r0, r2
 800d540:	f7ff fee1 	bl	800d306 <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 800d544:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800d548:	f04f 32ff 	mov.w	r2, #4294967295
 800d54c:	f04f 31ff 	mov.w	r1, #4294967295
 800d550:	4618      	mov	r0, r3
 800d552:	f00d f89f 	bl	801a694 <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 800d556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d55a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int32_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 800d566:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff fee6 	bl	800d33c <lv_area_get_width>
 800d570:	4604      	mov	r4, r0
 800d572:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff fef0 	bl	800d35c <lv_area_get_height>
 800d57c:	4603      	mov	r3, r0
 800d57e:	429c      	cmp	r4, r3
 800d580:	da06      	bge.n	800d590 <lv_draw_sw_box_shadow+0x1f8>
 800d582:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff fed8 	bl	800d33c <lv_area_get_width>
 800d58c:	4603      	mov	r3, r0
 800d58e:	e005      	b.n	800d59c <lv_draw_sw_box_shadow+0x204>
 800d590:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800d594:	4618      	mov	r0, r3
 800d596:	f7ff fee1 	bl	800d35c <lv_area_get_height>
 800d59a:	4603      	mov	r3, r0
 800d59c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800d5a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800d5a4:	105b      	asrs	r3, r3, #1
 800d5a6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	dd04      	ble.n	800d5b8 <lv_draw_sw_box_shadow+0x220>
 800d5ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800d5b2:	105b      	asrs	r3, r3, #1
 800d5b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 800d5b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 800d5c8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff feb5 	bl	800d33c <lv_area_get_width>
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff febf 	bl	800d35c <lv_area_get_height>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	429c      	cmp	r4, r3
 800d5e2:	da06      	bge.n	800d5f2 <lv_draw_sw_box_shadow+0x25a>
 800d5e4:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff fea7 	bl	800d33c <lv_area_get_width>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	e005      	b.n	800d5fe <lv_draw_sw_box_shadow+0x266>
 800d5f2:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff feb0 	bl	800d35c <lv_area_get_height>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800d602:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800d606:	105b      	asrs	r3, r3, #1
 800d608:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800d60c:	429a      	cmp	r2, r3
 800d60e:	dd04      	ble.n	800d61a <lv_draw_sw_box_shadow+0x282>
 800d610:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800d614:	105b      	asrs	r3, r3, #1
 800d616:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->width  + r_sh;
 800d61a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d61e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d626:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800d62a:	4413      	add	r3, r2
 800d62c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cache->cache_size = corner_size;
            cache->cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_malloc(corner_size * corner_size * sizeof(uint16_t));
 800d630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d634:	fb03 f303 	mul.w	r3, r3, r3
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	4618      	mov	r0, r3
 800d63c:	f010 fd2c 	bl	801e098 <lv_malloc>
 800d640:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->width, r_sh);
 800d644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d648:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d650:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800d654:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800d658:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800d65c:	f001 f981 	bl	800e962 <shadow_draw_corner_buf>
#endif /*LV_DRAW_SW_SHADOW_CACHE_SIZE*/

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool simple = dsc->bg_cover;
 800d660:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d664:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d66e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d672:	b2db      	uxtb	r3, r3
 800d674:	2b00      	cmp	r3, #0
 800d676:	bf14      	ite	ne
 800d678:	2301      	movne	r3, #1
 800d67a:	2300      	moveq	r3, #0
 800d67c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_sw_mask_radius_param_t mask_rout_param;
    void * masks[2] = {0};
 800d680:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	605a      	str	r2, [r3, #4]
    if(!simple) {
 800d68a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800d68e:	f083 0301 	eor.w	r3, r3, #1
 800d692:	b2db      	uxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <lv_draw_sw_box_shadow+0x318>
        lv_draw_sw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 800d698:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800d69c:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d6a6:	f004 f9e1 	bl	8011a6c <lv_draw_sw_mask_radius_init>
        masks[0] = &mask_rout_param;
 800d6aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d6ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    lv_opa_t * mask_buf = lv_malloc(lv_area_get_width(&shadow_area));
 800d6b0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff fe41 	bl	800d33c <lv_area_get_width>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f010 fceb 	bl	801e098 <lv_malloc>
 800d6c2:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    lv_opa_t * sh_buf_tmp;
    int32_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memzero(&blend_dsc, sizeof(blend_dsc));
 800d6c6:	f107 0310 	add.w	r3, r7, #16
 800d6ca:	212c      	movs	r1, #44	@ 0x2c
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff fe55 	bl	800d37c <lv_memzero>
    blend_dsc.blend_area = &blend_area;
 800d6d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d6da:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d6de:	601a      	str	r2, [r3, #0]
    blend_dsc.mask_area = &blend_area;
 800d6e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d6e8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d6ec:	621a      	str	r2, [r3, #32]
    blend_dsc.mask_buf = mask_buf;
 800d6ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d6f6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800d6fa:	619a      	str	r2, [r3, #24]
    blend_dsc.color = dsc->color;
 800d6fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d700:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d704:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d708:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800d70c:	6812      	ldr	r2, [r2, #0]
 800d70e:	3315      	adds	r3, #21
 800d710:	3220      	adds	r2, #32
 800d712:	8811      	ldrh	r1, [r2, #0]
 800d714:	7892      	ldrb	r2, [r2, #2]
 800d716:	8019      	strh	r1, [r3, #0]
 800d718:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = dsc->opa;
 800d71a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d71e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800d728:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d72c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d730:	751a      	strb	r2, [r3, #20]

    int32_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 800d732:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 800d736:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff fdfe 	bl	800d33c <lv_area_get_width>
 800d740:	4603      	mov	r3, r0
 800d742:	0fda      	lsrs	r2, r3, #31
 800d744:	4413      	add	r3, r2
 800d746:	105b      	asrs	r3, r3, #1
 800d748:	4423      	add	r3, r4
 800d74a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    int32_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800d74e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	@ 0xac
 800d752:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fe00 	bl	800d35c <lv_area_get_height>
 800d75c:	4603      	mov	r3, r0
 800d75e:	0fda      	lsrs	r2, r3, #31
 800d760:	4413      	add	r3, r2
 800d762:	105b      	asrs	r3, r3, #1
 800d764:	4423      	add	r3, r4
 800d766:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 800d76a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d76e:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800d770:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	3301      	adds	r3, #1
 800d77c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.y1 = shadow_area.y1;
 800d77e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d782:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800d784:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d78c:	4413      	add	r3, r2
 800d78e:	3b01      	subs	r3, #1
 800d790:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800d792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d798:	4293      	cmp	r3, r2
 800d79a:	bfb8      	it	lt
 800d79c:	4613      	movlt	r3, r2
 800d79e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800d7a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	bfa8      	it	ge
 800d7aa:	4613      	movge	r3, r2
 800d7ac:	65bb      	str	r3, [r7, #88]	@ 0x58

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800d7ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	689a      	ldr	r2, [r3, #8]
 800d7ba:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800d7be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f00c ffae 	bl	801a724 <_lv_area_intersect>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 80c1 	beq.w	800d952 <lv_draw_sw_box_shadow+0x5ba>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800d7d0:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800d7d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d7d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f00d f8c5 	bl	801a96c <_lv_area_is_in>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f083 0301 	eor.w	r3, r3, #1
 800d7e8:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 80b1 	beq.w	800d952 <lv_draw_sw_box_shadow+0x5ba>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800d7f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff fda1 	bl	800d33c <lv_area_get_width>
 800d7fa:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
        sh_buf_tmp = sh_buf;
 800d7fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d802:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 800d806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d812:	fb02 f303 	mul.w	r3, r2, r3
 800d816:	461a      	mov	r2, r3
 800d818:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d81c:	4413      	add	r3, r2
 800d81e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800d822:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d824:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d82c:	1acb      	subs	r3, r1, r3
 800d82e:	3301      	adds	r3, #1
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	461a      	mov	r2, r3
 800d834:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d838:	4413      	add	r3, r2
 800d83a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800d83e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00f      	beq.n	800d866 <lv_draw_sw_box_shadow+0x4ce>
 800d846:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800d84a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d84e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d852:	4618      	mov	r0, r3
 800d854:	f00d f91e 	bl	801aa94 <_lv_area_is_out>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d003      	beq.n	800d866 <lv_draw_sw_box_shadow+0x4ce>
 800d85e:	2301      	movs	r3, #1
 800d860:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800d864:	e003      	b.n	800d86e <lv_draw_sw_box_shadow+0x4d6>
        else simple_sub = simple;
 800d866:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800d86a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        if(w > 0) {
 800d86e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d872:	2b00      	cmp	r3, #0
 800d874:	dd6d      	ble.n	800d952 <lv_draw_sw_box_shadow+0x5ba>
            blend_dsc.mask_buf = mask_buf;
 800d876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d87a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d87e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800d882:	619a      	str	r2, [r3, #24]
            blend_area.x1 = clip_area_sub.x1;
 800d884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d886:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800d888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d88a:	657b      	str	r3, [r7, #84]	@ 0x54
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800d88c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d890:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d894:	2202      	movs	r2, #2
 800d896:	771a      	strb	r2, [r3, #28]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d89a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800d89e:	e053      	b.n	800d948 <lv_draw_sw_box_shadow+0x5b0>
                blend_area.y1 = y;
 800d8a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d8a4:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800d8a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d8aa:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800d8ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800d8b0:	f083 0301 	eor.w	r3, r3, #1
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d029      	beq.n	800d90e <lv_draw_sw_box_shadow+0x576>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800d8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8be:	461a      	mov	r2, r3
 800d8c0:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800d8c4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800d8c8:	f00f fa2c 	bl	801cd24 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800d8cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d8ce:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800d8d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d8dc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800d8e0:	f003 fe4e 	bl	8011580 <lv_draw_sw_mask_apply>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8f0:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800d8f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8f6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8fa:	7f1b      	ldrb	r3, [r3, #28]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d10d      	bne.n	800d91c <lv_draw_sw_box_shadow+0x584>
 800d900:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d904:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d908:	2202      	movs	r2, #2
 800d90a:	771a      	strb	r2, [r3, #28]
 800d90c:	e006      	b.n	800d91c <lv_draw_sw_box_shadow+0x584>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 800d90e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d912:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d916:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800d91a:	619a      	str	r2, [r3, #24]
                }
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800d91c:	f107 0210 	add.w	r2, r7, #16
 800d920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d924:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d928:	4611      	mov	r1, r2
 800d92a:	6818      	ldr	r0, [r3, #0]
 800d92c:	f7fa f9fc 	bl	8007d28 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800d930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d934:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800d938:	4413      	add	r3, r2
 800d93a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800d93e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d942:	3301      	adds	r3, #1
 800d944:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800d948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d94a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800d94e:	429a      	cmp	r2, r3
 800d950:	dda6      	ble.n	800d8a0 <lv_draw_sw_box_shadow+0x508>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 800d952:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d956:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800d958:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d95c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	3301      	adds	r3, #1
 800d964:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800d966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	3301      	adds	r3, #1
 800d972:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y2;
 800d974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d978:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800d97a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d980:	4293      	cmp	r3, r2
 800d982:	bfb8      	it	lt
 800d984:	4613      	movlt	r3, r2
 800d986:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800d988:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d98c:	1c5a      	adds	r2, r3, #1
 800d98e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d990:	4293      	cmp	r3, r2
 800d992:	bfb8      	it	lt
 800d994:	4613      	movlt	r3, r2
 800d996:	653b      	str	r3, [r7, #80]	@ 0x50

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800d998:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d99c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	689a      	ldr	r2, [r3, #8]
 800d9a4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800d9a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f00c feb9 	bl	801a724 <_lv_area_intersect>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 80c0 	beq.w	800db3a <lv_draw_sw_box_shadow+0x7a2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800d9ba:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800d9be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d9c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f00c ffd0 	bl	801a96c <_lv_area_is_in>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	f083 0301 	eor.w	r3, r3, #1
 800d9d2:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 80b0 	beq.w	800db3a <lv_draw_sw_box_shadow+0x7a2>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800d9da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7ff fcac 	bl	800d33c <lv_area_get_width>
 800d9e4:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        sh_buf_tmp = sh_buf;
 800d9e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d9ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800d9f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9f4:	1ad3      	subs	r3, r2, r3
 800d9f6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800d9fa:	fb02 f303 	mul.w	r3, r2, r3
 800d9fe:	461a      	mov	r2, r3
 800da00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800da04:	4413      	add	r3, r2
 800da06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800da0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da0c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800da10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da14:	1acb      	subs	r3, r1, r3
 800da16:	3301      	adds	r3, #1
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	461a      	mov	r2, r3
 800da1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800da20:	4413      	add	r3, r2
 800da22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800da26:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00f      	beq.n	800da4e <lv_draw_sw_box_shadow+0x6b6>
 800da2e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800da32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800da36:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800da3a:	4618      	mov	r0, r3
 800da3c:	f00d f82a 	bl	801aa94 <_lv_area_is_out>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <lv_draw_sw_box_shadow+0x6b6>
 800da46:	2301      	movs	r3, #1
 800da48:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800da4c:	e003      	b.n	800da56 <lv_draw_sw_box_shadow+0x6be>
        else simple_sub = simple;
 800da4e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800da52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

        if(w > 0) {
 800da56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	dd6d      	ble.n	800db3a <lv_draw_sw_box_shadow+0x7a2>
            blend_dsc.mask_buf = mask_buf;
 800da5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800da66:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800da6a:	619a      	str	r2, [r3, #24]
            blend_area.x1 = clip_area_sub.x1;
 800da6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800da70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da72:	657b      	str	r3, [r7, #84]	@ 0x54
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800da74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800da7c:	2202      	movs	r2, #2
 800da7e:	771a      	strb	r2, [r3, #28]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800da80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800da86:	e053      	b.n	800db30 <lv_draw_sw_box_shadow+0x798>
                blend_area.y1 = y;
 800da88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da8c:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800da8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da92:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800da94:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800da98:	f083 0301 	eor.w	r3, r3, #1
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d029      	beq.n	800daf6 <lv_draw_sw_box_shadow+0x75e>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800daa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daa6:	461a      	mov	r2, r3
 800daa8:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800daac:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800dab0:	f00f f938 	bl	801cd24 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800dab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dab6:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800daba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dac4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800dac8:	f003 fd5a 	bl	8011580 <lv_draw_sw_mask_apply>
 800dacc:	4603      	mov	r3, r0
 800dace:	461a      	mov	r2, r3
 800dad0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dad4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dad8:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800dada:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dade:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dae2:	7f1b      	ldrb	r3, [r3, #28]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d10d      	bne.n	800db04 <lv_draw_sw_box_shadow+0x76c>
 800dae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800daf0:	2202      	movs	r2, #2
 800daf2:	771a      	strb	r2, [r3, #28]
 800daf4:	e006      	b.n	800db04 <lv_draw_sw_box_shadow+0x76c>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 800daf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dafa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dafe:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800db02:	619a      	str	r2, [r3, #24]
                }
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800db04:	f107 0210 	add.w	r2, r7, #16
 800db08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800db10:	4611      	mov	r1, r2
 800db12:	6818      	ldr	r0, [r3, #0]
 800db14:	f7fa f908 	bl	8007d28 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800db18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db1c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800db20:	4413      	add	r3, r2
 800db22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800db26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db2a:	3b01      	subs	r3, #1
 800db2c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800db30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800db36:	429a      	cmp	r2, r3
 800db38:	daa6      	bge.n	800da88 <lv_draw_sw_box_shadow+0x6f0>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 800db3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800db3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db42:	4413      	add	r3, r2
 800db44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x2 - corner_size;
 800db46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800db4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y1;
 800db52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db56:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800db58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800db5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db60:	4413      	add	r3, r2
 800db62:	3b01      	subs	r3, #1
 800db64:	65bb      	str	r3, [r7, #88]	@ 0x58
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800db66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db6c:	4293      	cmp	r3, r2
 800db6e:	bfa8      	it	ge
 800db70:	4613      	movge	r3, r2
 800db72:	65bb      	str	r3, [r7, #88]	@ 0x58

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800db74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689a      	ldr	r2, [r3, #8]
 800db80:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800db84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800db88:	4618      	mov	r0, r3
 800db8a:	f00c fdcb 	bl	801a724 <_lv_area_intersect>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 80db 	beq.w	800dd4c <lv_draw_sw_box_shadow+0x9b4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800db96:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800db9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800db9e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dba2:	4618      	mov	r0, r3
 800dba4:	f00c fee2 	bl	801a96c <_lv_area_is_in>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	f083 0301 	eor.w	r3, r3, #1
 800dbae:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f000 80cb 	beq.w	800dd4c <lv_draw_sw_box_shadow+0x9b4>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800dbb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff fbbe 	bl	800d33c <lv_area_get_width>
 800dbc0:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        sh_buf_tmp = sh_buf;
 800dbc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dbc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800dbcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800dbd6:	fb02 f303 	mul.w	r3, r2, r3
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800dbe6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00f      	beq.n	800dc0e <lv_draw_sw_box_shadow+0x876>
 800dbee:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800dbf2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dbf6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f00c ff4a 	bl	801aa94 <_lv_area_is_out>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d003      	beq.n	800dc0e <lv_draw_sw_box_shadow+0x876>
 800dc06:	2301      	movs	r3, #1
 800dc08:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800dc0c:	e003      	b.n	800dc16 <lv_draw_sw_box_shadow+0x87e>
        else simple_sub = simple;
 800dc0e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800dc12:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

        if(w > 0) {
 800dc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f340 8096 	ble.w	800dd4c <lv_draw_sw_box_shadow+0x9b4>
            if(!simple_sub) {
 800dc20:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dc24:	f083 0301 	eor.w	r3, r3, #1
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d007      	beq.n	800dc3e <lv_draw_sw_box_shadow+0x8a6>
                blend_dsc.mask_buf = mask_buf;
 800dc2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dc36:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800dc3a:	619a      	str	r2, [r3, #24]
 800dc3c:	e005      	b.n	800dc4a <lv_draw_sw_box_shadow+0x8b2>
            }
            else {
                blend_dsc.mask_buf = NULL;
 800dc3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dc46:	2200      	movs	r2, #0
 800dc48:	619a      	str	r2, [r3, #24]
            }
            blend_area.x1 = clip_area_sub.x1;
 800dc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800dc4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc50:	657b      	str	r3, [r7, #84]	@ 0x54

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800dc52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800dc58:	e073      	b.n	800dd42 <lv_draw_sw_box_shadow+0x9aa>
                blend_area.y1 = y;
 800dc5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc5e:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800dc60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc64:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800dc66:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dc6a:	f083 0301 	eor.w	r3, r3, #1
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d034      	beq.n	800dcde <lv_draw_sw_box_shadow+0x946>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 800dc74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800dc7e:	4619      	mov	r1, r3
 800dc80:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800dc84:	f00f fa6b 	bl	801d15e <lv_memset>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800dc88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dc8a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800dc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc98:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800dc9c:	f003 fc70 	bl	8011580 <lv_draw_sw_mask_apply>
 800dca0:	4603      	mov	r3, r0
 800dca2:	461a      	mov	r2, r3
 800dca4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dca8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dcac:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800dcae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dcb6:	7f1b      	ldrb	r3, [r3, #28]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d105      	bne.n	800dcc8 <lv_draw_sw_box_shadow+0x930>
 800dcbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcc0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	771a      	strb	r2, [r3, #28]
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800dcc8:	f107 0210 	add.w	r2, r7, #16
 800dccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	f7fa f826 	bl	8007d28 <lv_draw_sw_blend>
 800dcdc:	e025      	b.n	800dd2a <lv_draw_sw_box_shadow+0x992>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : LV_OPA_MIX2(sh_buf_tmp[0], dsc->opa);
 800dcde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dce2:	2bff      	cmp	r3, #255	@ 0xff
 800dce4:	d103      	bne.n	800dcee <lv_draw_sw_box_shadow+0x956>
 800dce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	e00e      	b.n	800dd0c <lv_draw_sw_box_shadow+0x974>
 800dcee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dd04:	fb02 f303 	mul.w	r3, r2, r3
 800dd08:	121b      	asrs	r3, r3, #8
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd10:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800dd14:	7513      	strb	r3, [r2, #20]
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800dd16:	f107 0210 	add.w	r2, r7, #16
 800dd1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd1e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800dd22:	4611      	mov	r1, r2
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	f7f9 ffff 	bl	8007d28 <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 800dd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd2e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800dd32:	4413      	add	r3, r2
 800dd34:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800dd38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800dd42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd44:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	dd86      	ble.n	800dc5a <lv_draw_sw_box_shadow+0x8c2>
            }
        }
    }
    blend_dsc.opa = dsc->opa;    /*Restore*/
 800dd4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd50:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800dd5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dd62:	751a      	strb	r2, [r3, #20]

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 800dd64:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd6c:	4413      	add	r3, r2
 800dd6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x2 - corner_size;
 800dd70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800dd7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	3301      	adds	r3, #1
 800dd88:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y2;
 800dd8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800dd90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	bfb8      	it	lt
 800dd9c:	4613      	movlt	r3, r2
 800dd9e:	653b      	str	r3, [r7, #80]	@ 0x50

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800dda0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dda4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	689a      	ldr	r2, [r3, #8]
 800ddac:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800ddb0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f00c fcb5 	bl	801a724 <_lv_area_intersect>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 80f4 	beq.w	800dfaa <lv_draw_sw_box_shadow+0xc12>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800ddc2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800ddc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ddca:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f00c fdcc 	bl	801a96c <_lv_area_is_in>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	f083 0301 	eor.w	r3, r3, #1
 800ddda:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 80e4 	beq.w	800dfaa <lv_draw_sw_box_shadow+0xc12>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800dde2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff faa8 	bl	800d33c <lv_area_get_width>
 800ddec:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        sh_buf_tmp = sh_buf;
 800ddf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800ddf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ddfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800de02:	fb02 f303 	mul.w	r3, r2, r3
 800de06:	461a      	mov	r2, r3
 800de08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800de0c:	4413      	add	r3, r2
 800de0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        if(w > 0) {
 800de12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de16:	2b00      	cmp	r3, #0
 800de18:	f340 80c7 	ble.w	800dfaa <lv_draw_sw_box_shadow+0xc12>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800de1c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00f      	beq.n	800de44 <lv_draw_sw_box_shadow+0xaac>
 800de24:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800de28:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800de2c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800de30:	4618      	mov	r0, r3
 800de32:	f00c fe2f 	bl	801aa94 <_lv_area_is_out>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <lv_draw_sw_box_shadow+0xaac>
 800de3c:	2301      	movs	r3, #1
 800de3e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800de42:	e003      	b.n	800de4c <lv_draw_sw_box_shadow+0xab4>
            else simple_sub = simple;
 800de44:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800de48:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

            if(!simple_sub) {
 800de4c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800de50:	f083 0301 	eor.w	r3, r3, #1
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d007      	beq.n	800de6a <lv_draw_sw_box_shadow+0xad2>
                blend_dsc.mask_buf = mask_buf;
 800de5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de62:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800de66:	619a      	str	r2, [r3, #24]
 800de68:	e005      	b.n	800de76 <lv_draw_sw_box_shadow+0xade>
            }
            else {
                blend_dsc.mask_buf = NULL;
 800de6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800de72:	2200      	movs	r2, #0
 800de74:	619a      	str	r2, [r3, #24]
            }
            blend_area.x1 = clip_area_sub.x1;
 800de76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de78:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800de7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de7c:	657b      	str	r3, [r7, #84]	@ 0x54

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800de7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800de84:	e08b      	b.n	800df9e <lv_draw_sw_box_shadow+0xc06>
                blend_area.y1 = y;
 800de86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de8a:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800de8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de90:	65bb      	str	r3, [r7, #88]	@ 0x58

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800de92:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00f      	beq.n	800deba <lv_draw_sw_box_shadow+0xb22>
 800de9a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800de9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dea2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dea6:	4618      	mov	r0, r3
 800dea8:	f00c fdf4 	bl	801aa94 <_lv_area_is_out>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d003      	beq.n	800deba <lv_draw_sw_box_shadow+0xb22>
 800deb2:	2301      	movs	r3, #1
 800deb4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800deb8:	e003      	b.n	800dec2 <lv_draw_sw_box_shadow+0xb2a>
                else simple_sub = simple;
 800deba:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800debe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

                if(!simple_sub) {
 800dec2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800dec6:	f083 0301 	eor.w	r3, r3, #1
 800deca:	b2db      	uxtb	r3, r3
 800decc:	2b00      	cmp	r3, #0
 800dece:	d034      	beq.n	800df3a <lv_draw_sw_box_shadow+0xba2>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 800ded0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800deda:	4619      	mov	r1, r3
 800dedc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800dee0:	f00f f93d 	bl	801d15e <lv_memset>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800dee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dee6:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800deea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800def4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800def8:	f003 fb42 	bl	8011580 <lv_draw_sw_mask_apply>
 800defc:	4603      	mov	r3, r0
 800defe:	461a      	mov	r2, r3
 800df00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df04:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df08:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800df0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df0e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df12:	7f1b      	ldrb	r3, [r3, #28]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d105      	bne.n	800df24 <lv_draw_sw_box_shadow+0xb8c>
 800df18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df1c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800df20:	2202      	movs	r2, #2
 800df22:	771a      	strb	r2, [r3, #28]
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800df24:	f107 0210 	add.w	r2, r7, #16
 800df28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800df30:	4611      	mov	r1, r2
 800df32:	6818      	ldr	r0, [r3, #0]
 800df34:	f7f9 fef8 	bl	8007d28 <lv_draw_sw_blend>
 800df38:	e025      	b.n	800df86 <lv_draw_sw_box_shadow+0xbee>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->opa) >> 8;
 800df3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800df3e:	2bff      	cmp	r3, #255	@ 0xff
 800df40:	d103      	bne.n	800df4a <lv_draw_sw_box_shadow+0xbb2>
 800df42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	e00e      	b.n	800df68 <lv_draw_sw_box_shadow+0xbd0>
 800df4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	461a      	mov	r2, r3
 800df52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df60:	fb02 f303 	mul.w	r3, r2, r3
 800df64:	121b      	asrs	r3, r3, #8
 800df66:	b2db      	uxtb	r3, r3
 800df68:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df6c:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800df70:	7513      	strb	r3, [r2, #20]
                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 800df72:	f107 0210 	add.w	r2, r7, #16
 800df76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800df7e:	4611      	mov	r1, r2
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	f7f9 fed1 	bl	8007d28 <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 800df86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df8a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800df8e:	4413      	add	r3, r2
 800df90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800df94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df98:	3b01      	subs	r3, #1
 800df9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800df9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfa0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	f6bf af6e 	bge.w	800de86 <lv_draw_sw_box_shadow+0xaee>
            }
        }
    }

    blend_dsc.opa = dsc->opa;    /*Restore*/
 800dfaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dfae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800dfb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dfbc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800dfc0:	751a      	strb	r2, [r3, #20]

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800dfc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	3301      	adds	r3, #1
 800dfce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x2;
 800dfd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dfd4:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y1 + corner_size;
 800dfd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800dfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfde:	4413      	add	r3, r2
 800dfe0:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y2 - corner_size;
 800dfe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dfe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800dfee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dff0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800dff4:	429a      	cmp	r2, r3
 800dff6:	db01      	blt.n	800dffc <lv_draw_sw_box_shadow+0xc64>
 800dff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dffa:	e002      	b.n	800e002 <lv_draw_sw_box_shadow+0xc6a>
 800dffc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e000:	3301      	adds	r3, #1
 800e002:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800e004:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e00a:	4293      	cmp	r3, r2
 800e00c:	bfb8      	it	lt
 800e00e:	4613      	movlt	r3, r2
 800e010:	65bb      	str	r3, [r7, #88]	@ 0x58
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800e012:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e018:	4293      	cmp	r3, r2
 800e01a:	bfb8      	it	lt
 800e01c:	4613      	movlt	r3, r2
 800e01e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e020:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e024:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	689a      	ldr	r2, [r3, #8]
 800e02c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800e030:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e034:	4618      	mov	r0, r3
 800e036:	f00c fb75 	bl	801a724 <_lv_area_intersect>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f000 80b8 	beq.w	800e1b2 <lv_draw_sw_box_shadow+0xe1a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e042:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e046:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e04a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e04e:	4618      	mov	r0, r3
 800e050:	f00c fc8c 	bl	801a96c <_lv_area_is_in>
 800e054:	4603      	mov	r3, r0
 800e056:	f083 0301 	eor.w	r3, r3, #1
 800e05a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 80a8 	beq.w	800e1b2 <lv_draw_sw_box_shadow+0xe1a>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800e062:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e066:	4618      	mov	r0, r3
 800e068:	f7ff f968 	bl	800d33c <lv_area_get_width>
 800e06c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        sh_buf_tmp = sh_buf;
 800e070:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e074:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800e078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e07c:	3b01      	subs	r3, #1
 800e07e:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e082:	fb02 f303 	mul.w	r3, r2, r3
 800e086:	461a      	mov	r2, r3
 800e088:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e08c:	4413      	add	r3, r2
 800e08e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800e092:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e094:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e09c:	1acb      	subs	r3, r1, r3
 800e09e:	3301      	adds	r3, #1
 800e0a0:	1ad3      	subs	r3, r2, r3
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e0ae:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00f      	beq.n	800e0d6 <lv_draw_sw_box_shadow+0xd3e>
 800e0b6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e0ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e0be:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f00c fce6 	bl	801aa94 <_lv_area_is_out>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d003      	beq.n	800e0d6 <lv_draw_sw_box_shadow+0xd3e>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800e0d4:	e003      	b.n	800e0de <lv_draw_sw_box_shadow+0xd46>
        else simple_sub = simple;
 800e0d6:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e0da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 800e0de:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d002      	beq.n	800e0ec <lv_draw_sw_box_shadow+0xd54>
 800e0e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e0ea:	e001      	b.n	800e0f0 <lv_draw_sw_box_shadow+0xd58>
 800e0ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e0f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0f4:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800e0f8:	6193      	str	r3, [r2, #24]

        if(w > 0) {
 800e0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	dd57      	ble.n	800e1b2 <lv_draw_sw_box_shadow+0xe1a>
            blend_area.x1 = clip_area_sub.x1;
 800e102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e104:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800e106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e108:	657b      	str	r3, [r7, #84]	@ 0x54
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e10a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e10e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e112:	2202      	movs	r2, #2
 800e114:	771a      	strb	r2, [r3, #28]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e118:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e11c:	e044      	b.n	800e1a8 <lv_draw_sw_box_shadow+0xe10>
                blend_area.y1 = y;
 800e11e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e122:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800e124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e128:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800e12a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e12e:	f083 0301 	eor.w	r3, r3, #1
 800e132:	b2db      	uxtb	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	d028      	beq.n	800e18a <lv_draw_sw_box_shadow+0xdf2>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 800e138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e13c:	461a      	mov	r2, r3
 800e13e:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800e142:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800e146:	f00e fded 	bl	801cd24 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800e14a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e14c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800e150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e15a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e15e:	f003 fa0f 	bl	8011580 <lv_draw_sw_mask_apply>
 800e162:	4603      	mov	r3, r0
 800e164:	461a      	mov	r2, r3
 800e166:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e16a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e16e:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800e170:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e174:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e178:	7f1b      	ldrb	r3, [r3, #28]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d105      	bne.n	800e18a <lv_draw_sw_box_shadow+0xdf2>
 800e17e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e182:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e186:	2202      	movs	r2, #2
 800e188:	771a      	strb	r2, [r3, #28]
                }
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800e18a:	f107 0210 	add.w	r2, r7, #16
 800e18e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e192:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e196:	4611      	mov	r1, r2
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	f7f9 fdc5 	bl	8007d28 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e19e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e1a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	ddb5      	ble.n	800e11e <lv_draw_sw_box_shadow+0xd86>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 800e1b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e1b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    for(y = 0; y < corner_size; y++) {
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e1c0:	e044      	b.n	800e24c <lv_draw_sw_box_shadow+0xeb4>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 800e1c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e1c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 800e1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        for(x = 0; x < corner_size / 2; x++) {
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800e1e0:	e01e      	b.n	800e220 <lv_draw_sw_box_shadow+0xe88>
            lv_opa_t tmp = *start;
 800e1e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
            *start = *end;
 800e1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e1f6:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 800e1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1fc:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 800e200:	701a      	strb	r2, [r3, #0]

            start++;
 800e202:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800e206:	3301      	adds	r3, #1
 800e208:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            end--;
 800e20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e210:	3b01      	subs	r3, #1
 800e212:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        for(x = 0; x < corner_size / 2; x++) {
 800e216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e21a:	3301      	adds	r3, #1
 800e21c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800e220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e224:	0fda      	lsrs	r2, r3, #31
 800e226:	4413      	add	r3, r2
 800e228:	105b      	asrs	r3, r3, #1
 800e22a:	461a      	mov	r2, r3
 800e22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e230:	4293      	cmp	r3, r2
 800e232:	dbd6      	blt.n	800e1e2 <lv_draw_sw_box_shadow+0xe4a>
        }
        sh_buf_tmp += corner_size;
 800e234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e238:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e23c:	4413      	add	r3, r2
 800e23e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    for(y = 0; y < corner_size; y++) {
 800e242:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e246:	3301      	adds	r3, #1
 800e248:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e24c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e254:	429a      	cmp	r2, r3
 800e256:	dbb4      	blt.n	800e1c2 <lv_draw_sw_box_shadow+0xe2a>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 800e258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e25c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800e25e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e266:	4413      	add	r3, r2
 800e268:	3b01      	subs	r3, #1
 800e26a:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y1 + corner_size;
 800e26c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e274:	4413      	add	r3, r2
 800e276:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y2 - corner_size;
 800e278:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800e284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e286:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800e28a:	429a      	cmp	r2, r3
 800e28c:	db01      	blt.n	800e292 <lv_draw_sw_box_shadow+0xefa>
 800e28e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e290:	e002      	b.n	800e298 <lv_draw_sw_box_shadow+0xf00>
 800e292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e296:	3301      	adds	r3, #1
 800e298:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800e29a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e29c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	bfb8      	it	lt
 800e2a4:	4613      	movlt	r3, r2
 800e2a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800e2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2ac:	1e5a      	subs	r2, r3, #1
 800e2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	bfa8      	it	ge
 800e2b4:	4613      	movge	r3, r2
 800e2b6:	657b      	str	r3, [r7, #84]	@ 0x54

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e2b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e2bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	689a      	ldr	r2, [r3, #8]
 800e2c4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800e2c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f00c fa29 	bl	801a724 <_lv_area_intersect>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80b3 	beq.w	800e440 <lv_draw_sw_box_shadow+0x10a8>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e2da:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e2de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e2e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f00c fb40 	bl	801a96c <_lv_area_is_in>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	f083 0301 	eor.w	r3, r3, #1
 800e2f2:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f000 80a3 	beq.w	800e440 <lv_draw_sw_box_shadow+0x10a8>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800e2fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7ff f81c 	bl	800d33c <lv_area_get_width>
 800e304:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        sh_buf_tmp = sh_buf;
 800e308:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e30c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800e310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e314:	3b01      	subs	r3, #1
 800e316:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e31a:	fb02 f303 	mul.w	r3, r2, r3
 800e31e:	461a      	mov	r2, r3
 800e320:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e324:	4413      	add	r3, r2
 800e326:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800e32a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e32c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	461a      	mov	r2, r3
 800e332:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e336:	4413      	add	r3, r2
 800e338:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e33c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00f      	beq.n	800e364 <lv_draw_sw_box_shadow+0xfcc>
 800e344:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e348:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e34c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e350:	4618      	mov	r0, r3
 800e352:	f00c fb9f 	bl	801aa94 <_lv_area_is_out>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <lv_draw_sw_box_shadow+0xfcc>
 800e35c:	2301      	movs	r3, #1
 800e35e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800e362:	e003      	b.n	800e36c <lv_draw_sw_box_shadow+0xfd4>
        else simple_sub = simple;
 800e364:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e368:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 800e36c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <lv_draw_sw_box_shadow+0xfe2>
 800e374:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e378:	e001      	b.n	800e37e <lv_draw_sw_box_shadow+0xfe6>
 800e37a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e37e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e382:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800e386:	6193      	str	r3, [r2, #24]
        if(w > 0) {
 800e388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dd57      	ble.n	800e440 <lv_draw_sw_box_shadow+0x10a8>
            blend_area.x1 = clip_area_sub.x1;
 800e390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e392:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800e394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e396:	657b      	str	r3, [r7, #84]	@ 0x54
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e398:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e39c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e3a0:	2202      	movs	r2, #2
 800e3a2:	771a      	strb	r2, [r3, #28]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e3a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e3aa:	e044      	b.n	800e436 <lv_draw_sw_box_shadow+0x109e>
                blend_area.y1 = y;
 800e3ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e3b0:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800e3b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e3b6:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800e3b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e3bc:	f083 0301 	eor.w	r3, r3, #1
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d028      	beq.n	800e418 <lv_draw_sw_box_shadow+0x1080>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 800e3c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800e3d0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800e3d4:	f00e fca6 	bl	801cd24 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800e3d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e3da:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800e3de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e3e8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e3ec:	f003 f8c8 	bl	8011580 <lv_draw_sw_mask_apply>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e3f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e3fc:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800e3fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e402:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e406:	7f1b      	ldrb	r3, [r3, #28]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d105      	bne.n	800e418 <lv_draw_sw_box_shadow+0x1080>
 800e40c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e410:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e414:	2202      	movs	r2, #2
 800e416:	771a      	strb	r2, [r3, #28]
                }

                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800e418:	f107 0210 	add.w	r2, r7, #16
 800e41c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e420:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e424:	4611      	mov	r1, r2
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	f7f9 fc7e 	bl	8007d28 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e42c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e430:	3301      	adds	r3, #1
 800e432:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e438:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e43c:	429a      	cmp	r2, r3
 800e43e:	ddb5      	ble.n	800e3ac <lv_draw_sw_box_shadow+0x1014>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 800e440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e444:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800e446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e44e:	4413      	add	r3, r2
 800e450:	3b01      	subs	r3, #1
 800e452:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y1;
 800e454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e458:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800e45a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e462:	4413      	add	r3, r2
 800e464:	3b01      	subs	r3, #1
 800e466:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800e468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e46c:	1e5a      	subs	r2, r3, #1
 800e46e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e470:	4293      	cmp	r3, r2
 800e472:	bfa8      	it	ge
 800e474:	4613      	movge	r3, r2
 800e476:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800e478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e47a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e47e:	4293      	cmp	r3, r2
 800e480:	bfa8      	it	ge
 800e482:	4613      	movge	r3, r2
 800e484:	65bb      	str	r3, [r7, #88]	@ 0x58

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e48a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	689a      	ldr	r2, [r3, #8]
 800e492:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800e496:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e49a:	4618      	mov	r0, r3
 800e49c:	f00c f942 	bl	801a724 <_lv_area_intersect>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 80bb 	beq.w	800e61e <lv_draw_sw_box_shadow+0x1286>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e4a8:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e4ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e4b0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f00c fa59 	bl	801a96c <_lv_area_is_in>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	f083 0301 	eor.w	r3, r3, #1
 800e4c0:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f000 80ab 	beq.w	800e61e <lv_draw_sw_box_shadow+0x1286>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800e4c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe ff35 	bl	800d33c <lv_area_get_width>
 800e4d2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        sh_buf_tmp = sh_buf;
 800e4d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e4da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800e4de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e4e8:	fb02 f303 	mul.w	r3, r2, r3
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800e4f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e4fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	461a      	mov	r2, r3
 800e500:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e504:	4413      	add	r3, r2
 800e506:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e50a:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00f      	beq.n	800e532 <lv_draw_sw_box_shadow+0x119a>
 800e512:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e516:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e51a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e51e:	4618      	mov	r0, r3
 800e520:	f00c fab8 	bl	801aa94 <_lv_area_is_out>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d003      	beq.n	800e532 <lv_draw_sw_box_shadow+0x119a>
 800e52a:	2301      	movs	r3, #1
 800e52c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800e530:	e003      	b.n	800e53a <lv_draw_sw_box_shadow+0x11a2>
        else simple_sub = simple;
 800e532:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e536:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        blend_dsc.mask_buf = mask_buf;
 800e53a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e53e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e542:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800e546:	619a      	str	r2, [r3, #24]

        if(w > 0) {
 800e548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	dd66      	ble.n	800e61e <lv_draw_sw_box_shadow+0x1286>
            blend_area.x1 = clip_area_sub.x1;
 800e550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e552:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800e554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e556:	657b      	str	r3, [r7, #84]	@ 0x54
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e55c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e560:	2202      	movs	r2, #2
 800e562:	771a      	strb	r2, [r3, #28]
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e566:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e56a:	e053      	b.n	800e614 <lv_draw_sw_box_shadow+0x127c>
                blend_area.y1 = y;
 800e56c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e570:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800e572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e576:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800e578:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e57c:	f083 0301 	eor.w	r3, r3, #1
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d029      	beq.n	800e5da <lv_draw_sw_box_shadow+0x1242>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800e586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e58a:	461a      	mov	r2, r3
 800e58c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800e590:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800e594:	f00e fbc6 	bl	801cd24 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800e598:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e59a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800e59e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e5a8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e5ac:	f002 ffe8 	bl	8011580 <lv_draw_sw_mask_apply>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e5bc:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800e5be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e5c6:	7f1b      	ldrb	r3, [r3, #28]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d10d      	bne.n	800e5e8 <lv_draw_sw_box_shadow+0x1250>
 800e5cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	771a      	strb	r2, [r3, #28]
 800e5d8:	e006      	b.n	800e5e8 <lv_draw_sw_box_shadow+0x1250>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 800e5da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e5e2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e5e6:	619a      	str	r2, [r3, #24]
                }

                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800e5e8:	f107 0210 	add.w	r2, r7, #16
 800e5ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	6818      	ldr	r0, [r3, #0]
 800e5f8:	f7f9 fb96 	bl	8007d28 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800e5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e600:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e604:	4413      	add	r3, r2
 800e606:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e60a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e60e:	3301      	adds	r3, #1
 800e610:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e616:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e61a:	429a      	cmp	r2, r3
 800e61c:	dda6      	ble.n	800e56c <lv_draw_sw_box_shadow+0x11d4>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 800e61e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e622:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800e624:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e62c:	4413      	add	r3, r2
 800e62e:	3b01      	subs	r3, #1
 800e630:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800e632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	3301      	adds	r3, #1
 800e63e:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y2;
 800e640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e644:	65bb      	str	r3, [r7, #88]	@ 0x58
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800e646:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e64a:	1c5a      	adds	r2, r3, #1
 800e64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e64e:	4293      	cmp	r3, r2
 800e650:	bfb8      	it	lt
 800e652:	4613      	movlt	r3, r2
 800e654:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800e656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e65a:	1e5a      	subs	r2, r3, #1
 800e65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e65e:	4293      	cmp	r3, r2
 800e660:	bfa8      	it	ge
 800e662:	4613      	movge	r3, r2
 800e664:	657b      	str	r3, [r7, #84]	@ 0x54

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e66a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	689a      	ldr	r2, [r3, #8]
 800e672:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800e676:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e67a:	4618      	mov	r0, r3
 800e67c:	f00c f852 	bl	801a724 <_lv_area_intersect>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 80bb 	beq.w	800e7fe <lv_draw_sw_box_shadow+0x1466>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e688:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e68c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e690:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e694:	4618      	mov	r0, r3
 800e696:	f00c f969 	bl	801a96c <_lv_area_is_in>
 800e69a:	4603      	mov	r3, r0
 800e69c:	f083 0301 	eor.w	r3, r3, #1
 800e6a0:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f000 80ab 	beq.w	800e7fe <lv_draw_sw_box_shadow+0x1466>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800e6a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fe fe45 	bl	800d33c <lv_area_get_width>
 800e6b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
        sh_buf_tmp = sh_buf;
 800e6b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e6ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800e6be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e6c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e6c8:	fb02 f303 	mul.w	r3, r2, r3
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800e6d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e6da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6dc:	1ad3      	subs	r3, r2, r3
 800e6de:	461a      	mov	r2, r3
 800e6e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e6e4:	4413      	add	r3, r2
 800e6e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e6ea:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00f      	beq.n	800e712 <lv_draw_sw_box_shadow+0x137a>
 800e6f2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e6f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e6fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e6fe:	4618      	mov	r0, r3
 800e700:	f00c f9c8 	bl	801aa94 <_lv_area_is_out>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <lv_draw_sw_box_shadow+0x137a>
 800e70a:	2301      	movs	r3, #1
 800e70c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
 800e710:	e003      	b.n	800e71a <lv_draw_sw_box_shadow+0x1382>
        else simple_sub = simple;
 800e712:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e716:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        blend_dsc.mask_buf = mask_buf;
 800e71a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e71e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e722:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800e726:	619a      	str	r2, [r3, #24]
        if(w > 0) {
 800e728:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	dd66      	ble.n	800e7fe <lv_draw_sw_box_shadow+0x1466>
            blend_area.x1 = clip_area_sub.x1;
 800e730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e732:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800e734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e736:	657b      	str	r3, [r7, #84]	@ 0x54
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e738:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e73c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e740:	2202      	movs	r2, #2
 800e742:	771a      	strb	r2, [r3, #28]
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800e744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e746:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e74a:	e053      	b.n	800e7f4 <lv_draw_sw_box_shadow+0x145c>
                blend_area.y1 = y;
 800e74c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e750:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800e752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e756:	65bb      	str	r3, [r7, #88]	@ 0x58

                if(!simple_sub) {
 800e758:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e75c:	f083 0301 	eor.w	r3, r3, #1
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	d029      	beq.n	800e7ba <lv_draw_sw_box_shadow+0x1422>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800e766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e76a:	461a      	mov	r2, r3
 800e76c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800e770:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800e774:	f00e fad6 	bl	801cd24 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800e778:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e77a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800e77e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e788:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e78c:	f002 fef8 	bl	8011580 <lv_draw_sw_mask_apply>
 800e790:	4603      	mov	r3, r0
 800e792:	461a      	mov	r2, r3
 800e794:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e798:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e79c:	771a      	strb	r2, [r3, #28]
                    if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800e79e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e7a6:	7f1b      	ldrb	r3, [r3, #28]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d10d      	bne.n	800e7c8 <lv_draw_sw_box_shadow+0x1430>
 800e7ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e7b4:	2202      	movs	r2, #2
 800e7b6:	771a      	strb	r2, [r3, #28]
 800e7b8:	e006      	b.n	800e7c8 <lv_draw_sw_box_shadow+0x1430>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 800e7ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e7c2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e7c6:	619a      	str	r2, [r3, #24]
                }
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800e7c8:	f107 0210 	add.w	r2, r7, #16
 800e7cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	6818      	ldr	r0, [r3, #0]
 800e7d8:	f7f9 faa6 	bl	8007d28 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800e7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7e0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e7e4:	4413      	add	r3, r2
 800e7e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800e7ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e7ee:	3b01      	subs	r3, #1
 800e7f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	daa6      	bge.n	800e74c <lv_draw_sw_box_shadow+0x13b4>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 800e7fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e806:	4413      	add	r3, r2
 800e808:	64fb      	str	r3, [r7, #76]	@ 0x4c
    blend_area.x2 = shadow_area.x2 - corner_size;
 800e80a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	657b      	str	r3, [r7, #84]	@ 0x54
    blend_area.y1 = shadow_area.y1 + corner_size;
 800e816:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e81e:	4413      	add	r3, r2
 800e820:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = shadow_area.y2 - corner_size;
 800e822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e82a:	1ad3      	subs	r3, r2, r3
 800e82c:	65bb      	str	r3, [r7, #88]	@ 0x58
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800e82e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e830:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800e834:	429a      	cmp	r2, r3
 800e836:	db01      	blt.n	800e83c <lv_draw_sw_box_shadow+0x14a4>
 800e838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e83a:	e002      	b.n	800e842 <lv_draw_sw_box_shadow+0x14aa>
 800e83c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e840:	3301      	adds	r3, #1
 800e842:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800e844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e846:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e84a:	4293      	cmp	r3, r2
 800e84c:	bfb8      	it	lt
 800e84e:	4613      	movlt	r3, r2
 800e850:	65bb      	str	r3, [r7, #88]	@ 0x58
    blend_dsc.mask_buf = mask_buf;
 800e852:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e856:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e85a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800e85e:	619a      	str	r2, [r3, #24]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e860:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e864:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	689a      	ldr	r2, [r3, #8]
 800e86c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800e870:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e874:	4618      	mov	r0, r3
 800e876:	f00b ff55 	bl	801a724 <_lv_area_intersect>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d056      	beq.n	800e92e <lv_draw_sw_box_shadow+0x1596>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e880:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800e884:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e888:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e88c:	4618      	mov	r0, r3
 800e88e:	f00c f86d 	bl	801a96c <_lv_area_is_in>
 800e892:	4603      	mov	r3, r0
 800e894:	f083 0301 	eor.w	r3, r3, #1
 800e898:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_unit->clip_area) &&
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d047      	beq.n	800e92e <lv_draw_sw_box_shadow+0x1596>
        int32_t w = lv_area_get_width(&clip_area_sub);
 800e89e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fe fd4a 	bl	800d33c <lv_area_get_width>
 800e8a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if(w > 0) {
 800e8ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	dd3c      	ble.n	800e92e <lv_draw_sw_box_shadow+0x1596>
            blend_area.x1 = clip_area_sub.x1;
 800e8b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            blend_area.x2 = clip_area_sub.x2;
 800e8b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8ba:	657b      	str	r3, [r7, #84]	@ 0x54
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e8c2:	e02f      	b.n	800e924 <lv_draw_sw_box_shadow+0x158c>
                blend_area.y1 = y;
 800e8c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e8c8:	653b      	str	r3, [r7, #80]	@ 0x50
                blend_area.y2 = y;
 800e8ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e8ce:	65bb      	str	r3, [r7, #88]	@ 0x58

                lv_memset(mask_buf, 0xff, w);
 800e8d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	21ff      	movs	r1, #255	@ 0xff
 800e8d8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800e8dc:	f00e fc3f 	bl	801d15e <lv_memset>
                blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, clip_area_sub.x1, y, w);
 800e8e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e8e2:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800e8e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e8f0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 800e8f4:	f002 fe44 	bl	8011580 <lv_draw_sw_mask_apply>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e900:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e904:	771a      	strb	r2, [r3, #28]
                lv_draw_sw_blend(draw_unit, &blend_dsc);
 800e906:	f107 0210 	add.w	r2, r7, #16
 800e90a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e90e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e912:	4611      	mov	r1, r2
 800e914:	6818      	ldr	r0, [r3, #0]
 800e916:	f7f9 fa07 	bl	8007d28 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e91a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e91e:	3301      	adds	r3, #1
 800e920:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800e924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e926:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e92a:	429a      	cmp	r2, r3
 800e92c:	ddca      	ble.n	800e8c4 <lv_draw_sw_box_shadow+0x152c>
            }
        }
    }

    if(!simple) {
 800e92e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 800e932:	f083 0301 	eor.w	r3, r3, #1
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d004      	beq.n	800e946 <lv_draw_sw_box_shadow+0x15ae>
        lv_draw_sw_mask_free_param(&mask_rout_param);
 800e93c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e940:	4618      	mov	r0, r3
 800e942:	f002 fe5f 	bl	8011604 <lv_draw_sw_mask_free_param>
    }
    lv_free(sh_buf);
 800e946:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 800e94a:	f00f fbdd 	bl	801e108 <lv_free>
    lv_free(mask_buf);
 800e94e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800e952:	f00f fbd9 	bl	801e108 <lv_free>
 800e956:	e000      	b.n	800e95a <lv_draw_sw_box_shadow+0x15c2>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_unit->clip_area)) return;
 800e958:	bf00      	nop
}
 800e95a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd90      	pop	{r4, r7, pc}

0800e962 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
static void LV_ATTRIBUTE_FAST_MEM shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, int32_t sw,
                                                         int32_t r)
{
 800e962:	b590      	push	{r4, r7, lr}
 800e964:	b0a1      	sub	sp, #132	@ 0x84
 800e966:	af02      	add	r7, sp, #8
 800e968:	60f8      	str	r0, [r7, #12]
 800e96a:	60b9      	str	r1, [r7, #8]
 800e96c:	607a      	str	r2, [r7, #4]
 800e96e:	603b      	str	r3, [r7, #0]
    int32_t sw_ori = sw;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t size = sw_ori  + r;
 800e974:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	4413      	add	r3, r2
 800e97a:	65bb      	str	r3, [r7, #88]	@ 0x58

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 800e97c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e980:	68f9      	ldr	r1, [r7, #12]
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe fcbf 	bl	800d306 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	0fda      	lsrs	r2, r3, #31
 800e98c:	4413      	add	r3, r2
 800e98e:	105b      	asrs	r3, r3, #1
 800e990:	461a      	mov	r2, r3
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	4413      	add	r3, r2
 800e996:	3b01      	subs	r3, #1
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	f002 0201 	and.w	r2, r2, #1
 800e99e:	2a00      	cmp	r2, #0
 800e9a0:	bf0c      	ite	eq
 800e9a2:	2201      	moveq	r2, #1
 800e9a4:	2200      	movne	r2, #0
 800e9a6:	b2d2      	uxtb	r2, r2
 800e9a8:	1a9b      	subs	r3, r3, r2
 800e9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sh_area.y1 = sw / 2 + 1;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	0fda      	lsrs	r2, r3, #31
 800e9b0:	4413      	add	r3, r2
 800e9b2:	105b      	asrs	r3, r3, #1
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	63bb      	str	r3, [r7, #56]	@ 0x38

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800e9b8:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f7fe fcbe 	bl	800d33c <lv_area_get_width>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	1ae3      	subs	r3, r4, r3
 800e9c4:	637b      	str	r3, [r7, #52]	@ 0x34
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800e9c6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f7fe fcc7 	bl	800d35c <lv_area_get_height>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	4423      	add	r3, r4
 800e9d2:	643b      	str	r3, [r7, #64]	@ 0x40

    lv_draw_sw_mask_radius_param_t mask_param;
    lv_draw_sw_mask_radius_init(&mask_param, &sh_area, r, false);
 800e9d4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800e9d8:	f107 0010 	add.w	r0, r7, #16
 800e9dc:	2300      	movs	r3, #0
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	f003 f844 	bl	8011a6c <lv_draw_sw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 800e9e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d102      	bne.n	800e9f0 <shadow_draw_corner_buf+0x8e>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	607b      	str	r3, [r7, #4]
 800e9ee:	e002      	b.n	800e9f6 <shadow_draw_corner_buf+0x94>
    else sw = sw_ori >> 1;
 800e9f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9f2:	105b      	asrs	r3, r3, #1
 800e9f4:	607b      	str	r3, [r7, #4]
#endif /*SHADOW_ENHANCE*/

    int32_t y;
    lv_opa_t * mask_line = lv_malloc(size);
 800e9f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f00f fb4d 	bl	801e098 <lv_malloc>
 800e9fe:	6578      	str	r0, [r7, #84]	@ 0x54
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	673b      	str	r3, [r7, #112]	@ 0x70
    for(y = 0; y < size; y++) {
 800ea04:	2300      	movs	r3, #0
 800ea06:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea08:	e05e      	b.n	800eac8 <shadow_draw_corner_buf+0x166>
        lv_memset(mask_line, 0xff, size);
 800ea0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	21ff      	movs	r1, #255	@ 0xff
 800ea10:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ea12:	f00e fba4 	bl	801d15e <lv_memset>
        lv_draw_sw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800ea16:	693c      	ldr	r4, [r7, #16]
 800ea18:	f107 0310 	add.w	r3, r7, #16
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea20:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ea22:	2100      	movs	r1, #0
 800ea24:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ea26:	47a0      	blx	r4
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if(mask_res == LV_DRAW_SW_MASK_RES_TRANSP) {
 800ea2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d106      	bne.n	800ea44 <shadow_draw_corner_buf+0xe2>
            lv_memzero(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800ea36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800ea3e:	f7fe fc9d 	bl	800d37c <lv_memzero>
 800ea42:	e039      	b.n	800eab8 <shadow_draw_corner_buf+0x156>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800ea44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	019a      	lsls	r2, r3, #6
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ea54:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 800ea56:	2301      	movs	r3, #1
 800ea58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ea5a:	e029      	b.n	800eab0 <shadow_draw_corner_buf+0x14e>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800ea5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea60:	4413      	add	r3, r2
 800ea62:	781a      	ldrb	r2, [r3, #0]
 800ea64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea66:	3b01      	subs	r3, #1
 800ea68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea6a:	440b      	add	r3, r1
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d10d      	bne.n	800ea8e <shadow_draw_corner_buf+0x12c>
 800ea72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea74:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea7e:	441a      	add	r2, r3
 800ea80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ea86:	440b      	add	r3, r1
 800ea88:	8812      	ldrh	r2, [r2, #0]
 800ea8a:	801a      	strh	r2, [r3, #0]
 800ea8c:	e00d      	b.n	800eaaa <shadow_draw_corner_buf+0x148>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800ea8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ea90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea92:	4413      	add	r3, r2
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	019a      	lsls	r2, r3, #6
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	fb92 f1f3 	sdiv	r1, r2, r3
 800ea9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaa0:	005b      	lsls	r3, r3, #1
 800eaa2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eaa4:	4413      	add	r3, r2
 800eaa6:	b28a      	uxth	r2, r1
 800eaa8:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 800eaaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eaac:	3301      	adds	r3, #1
 800eaae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eab0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eab4:	429a      	cmp	r2, r3
 800eab6:	dbd1      	blt.n	800ea5c <shadow_draw_corner_buf+0xfa>
            }
        }

        sh_ups_tmp_buf += size;
 800eab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eabe:	4413      	add	r3, r2
 800eac0:	673b      	str	r3, [r7, #112]	@ 0x70
    for(y = 0; y < size; y++) {
 800eac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eac4:	3301      	adds	r3, #1
 800eac6:	677b      	str	r3, [r7, #116]	@ 0x74
 800eac8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800eaca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eacc:	429a      	cmp	r2, r3
 800eace:	db9c      	blt.n	800ea0a <shadow_draw_corner_buf+0xa8>
    }
    lv_free(mask_line);
 800ead0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ead2:	f00f fb19 	bl	801e108 <lv_free>

    lv_draw_sw_mask_free_param(&mask_param);
 800ead6:	f107 0310 	add.w	r3, r7, #16
 800eada:	4618      	mov	r0, r3
 800eadc:	f002 fd92 	bl	8011604 <lv_draw_sw_mask_free_param>

    if(sw == 1) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d11a      	bne.n	800eb1c <shadow_draw_corner_buf+0x1ba>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	64bb      	str	r3, [r7, #72]	@ 0x48
        for(i = 0; i < size * size; i++) {
 800eaea:	2300      	movs	r3, #0
 800eaec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eaee:	e00e      	b.n	800eb0e <shadow_draw_corner_buf+0x1ac>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800eaf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eaf2:	005b      	lsls	r3, r3, #1
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	099b      	lsrs	r3, r3, #6
 800eafc:	b299      	uxth	r1, r3
 800eafe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb02:	4413      	add	r3, r2
 800eb04:	b2ca      	uxtb	r2, r1
 800eb06:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 800eb08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb10:	fb03 f303 	mul.w	r3, r3, r3
 800eb14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800eb16:	429a      	cmp	r2, r3
 800eb18:	dbea      	blt.n	800eaf0 <shadow_draw_corner_buf+0x18e>
        }
        return;
 800eb1a:	e064      	b.n	800ebe6 <shadow_draw_corner_buf+0x284>
    }

    shadow_blur_corner(size, sw, sh_buf);
 800eb1c:	68ba      	ldr	r2, [r7, #8]
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eb22:	f000 f863 	bl	800ebec <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 800eb26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb28:	f003 0301 	and.w	r3, r3, #1
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	4413      	add	r3, r2
 800eb30:	607b      	str	r3, [r7, #4]
    if(sw > 1) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	dd3e      	ble.n	800ebb6 <shadow_draw_corner_buf+0x254>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 800eb38:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	fb92 f3f3 	sdiv	r3, r2, r3
 800eb42:	653b      	str	r3, [r7, #80]	@ 0x50
        for(i = 0; i < (uint32_t)size * size; i++) {
 800eb44:	2300      	movs	r3, #0
 800eb46:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb48:	e029      	b.n	800eb9e <shadow_draw_corner_buf+0x23c>
            if(sh_buf[i] == 0) continue;
 800eb4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb4c:	005b      	lsls	r3, r3, #1
 800eb4e:	68ba      	ldr	r2, [r7, #8]
 800eb50:	4413      	add	r3, r2
 800eb52:	881b      	ldrh	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d01e      	beq.n	800eb96 <shadow_draw_corner_buf+0x234>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800eb58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	4413      	add	r3, r2
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	2bff      	cmp	r3, #255	@ 0xff
 800eb64:	d107      	bne.n	800eb76 <shadow_draw_corner_buf+0x214>
 800eb66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eb70:	b292      	uxth	r2, r2
 800eb72:	801a      	strh	r2, [r3, #0]
 800eb74:	e010      	b.n	800eb98 <shadow_draw_corner_buf+0x236>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800eb76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	881b      	ldrh	r3, [r3, #0]
 800eb80:	019a      	lsls	r2, r3, #6
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	fb92 f1f3 	sdiv	r1, r2, r3
 800eb88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	4413      	add	r3, r2
 800eb90:	b28a      	uxth	r2, r1
 800eb92:	801a      	strh	r2, [r3, #0]
 800eb94:	e000      	b.n	800eb98 <shadow_draw_corner_buf+0x236>
            if(sh_buf[i] == 0) continue;
 800eb96:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 800eb98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eba2:	fb02 f303 	mul.w	r3, r2, r3
 800eba6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d3ce      	bcc.n	800eb4a <shadow_draw_corner_buf+0x1e8>
        }

        shadow_blur_corner(size, sw, sh_buf);
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	6879      	ldr	r1, [r7, #4]
 800ebb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ebb2:	f000 f81b 	bl	800ebec <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for(x = 0; x < size * size; x++) {
 800ebba:	2300      	movs	r3, #0
 800ebbc:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebbe:	e00c      	b.n	800ebda <shadow_draw_corner_buf+0x278>
        res_buf[x] = sh_buf[x];
 800ebc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	8819      	ldrh	r1, [r3, #0]
 800ebca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ebce:	4413      	add	r3, r2
 800ebd0:	b2ca      	uxtb	r2, r1
 800ebd2:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 800ebd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebdc:	fb03 f303 	mul.w	r3, r3, r3
 800ebe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	dbec      	blt.n	800ebc0 <shadow_draw_corner_buf+0x25e>
    }
#endif

}
 800ebe6:	377c      	adds	r7, #124	@ 0x7c
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd90      	pop	{r4, r7, pc}

0800ebec <shadow_blur_corner>:

static void LV_ATTRIBUTE_FAST_MEM shadow_blur_corner(int32_t size, int32_t sw, uint16_t * sh_ups_buf)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b094      	sub	sp, #80	@ 0x50
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
    int32_t s_left = sw >> 1;
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	105b      	asrs	r3, r3, #1
 800ebfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t s_right = (sw >> 1);
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	105b      	asrs	r3, r3, #1
 800ec02:	623b      	str	r3, [r7, #32]
    if((sw & 1) == 0) s_left--;
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d102      	bne.n	800ec14 <shadow_blur_corner+0x28>
 800ec0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec10:	3b01      	subs	r3, #1
 800ec12:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_malloc(size * sizeof(uint16_t));
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	005b      	lsls	r3, r3, #1
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f00f fa3d 	bl	801e098 <lv_malloc>
 800ec1e:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	643b      	str	r3, [r7, #64]	@ 0x40

    for(y = 0; y < size; y++) {
 800ec24:	2300      	movs	r3, #0
 800ec26:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec28:	e058      	b.n	800ecdc <shadow_blur_corner+0xf0>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ec30:	3b01      	subs	r3, #1
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec36:	4413      	add	r3, r2
 800ec38:	881b      	ldrh	r3, [r3, #0]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	fb02 f303 	mul.w	r3, r2, r3
 800ec42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(x = size - 1; x >= 0; x--) {
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	3b01      	subs	r3, #1
 800ec48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec4a:	e035      	b.n	800ecb8 <shadow_blur_corner+0xcc>
            sh_ups_blur_buf[x] = v;
 800ec4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec4e:	005b      	lsls	r3, r3, #1
 800ec50:	69fa      	ldr	r2, [r7, #28]
 800ec52:	4413      	add	r3, r2
 800ec54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec56:	b292      	uxth	r2, r2
 800ec58:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	63bb      	str	r3, [r7, #56]	@ 0x38
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800ec5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	4413      	add	r3, r2
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	dd07      	ble.n	800ec7a <shadow_blur_corner+0x8e>
 800ec6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	4413      	add	r3, r2
 800ec70:	005b      	lsls	r3, r3, #1
 800ec72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec74:	4413      	add	r3, r2
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	63bb      	str	r3, [r7, #56]	@ 0x38
            v -= right_val;
 800ec7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800ec82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc03      	bgt.n	800ec94 <shadow_blur_corner+0xa8>
 800ec8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec92:	e00a      	b.n	800ecaa <shadow_blur_corner+0xbe>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800ec94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eca4:	4413      	add	r3, r2
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	637b      	str	r3, [r7, #52]	@ 0x34
            v += left_val;
 800ecaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ecac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecae:	4413      	add	r3, r2
 800ecb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(x = size - 1; x >= 0; x--) {
 800ecb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ecb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	dac6      	bge.n	800ec4c <shadow_blur_corner+0x60>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	69f9      	ldr	r1, [r7, #28]
 800ecc6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800ecc8:	f00e f82c 	bl	801cd24 <lv_memcpy>
        sh_ups_tmp_buf += size;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecd2:	4413      	add	r3, r2
 800ecd4:	643b      	str	r3, [r7, #64]	@ 0x40
    for(y = 0; y < size; y++) {
 800ecd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecd8:	3301      	adds	r3, #1
 800ecda:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	dba2      	blt.n	800ec2a <shadow_blur_corner+0x3e>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 800ece4:	f44f 537f 	mov.w	r3, #16320	@ 0x3fc0
 800ece8:	61bb      	str	r3, [r7, #24]
    uint32_t max_v_div = max_v / sw;
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	69ba      	ldr	r2, [r7, #24]
 800ecee:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecf2:	617b      	str	r3, [r7, #20]
    for(i = 0; i < (uint32_t)size * size; i++) {
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ecf8:	e02b      	b.n	800ed52 <shadow_blur_corner+0x166>
        if(sh_ups_buf[i] == 0) continue;
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecfc:	005b      	lsls	r3, r3, #1
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	4413      	add	r3, r2
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d020      	beq.n	800ed4a <shadow_blur_corner+0x15e>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 800ed08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	4413      	add	r3, r2
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	461a      	mov	r2, r3
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d107      	bne.n	800ed2a <shadow_blur_corner+0x13e>
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	4413      	add	r3, r2
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	b292      	uxth	r2, r2
 800ed26:	801a      	strh	r2, [r3, #0]
 800ed28:	e010      	b.n	800ed4c <shadow_blur_corner+0x160>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	4413      	add	r3, r2
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	461a      	mov	r2, r3
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	fb92 f1f3 	sdiv	r1, r2, r3
 800ed3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed3e:	005b      	lsls	r3, r3, #1
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	4413      	add	r3, r2
 800ed44:	b28a      	uxth	r2, r1
 800ed46:	801a      	strh	r2, [r3, #0]
 800ed48:	e000      	b.n	800ed4c <shadow_blur_corner+0x160>
        if(sh_ups_buf[i] == 0) continue;
 800ed4a:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4e:	3301      	adds	r3, #1
 800ed50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	fb02 f303 	mul.w	r3, r2, r3
 800ed5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d3cc      	bcc.n	800ecfa <shadow_blur_corner+0x10e>
    }

    for(x = 0; x < size; x++) {
 800ed60:	2300      	movs	r3, #0
 800ed62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed64:	e086      	b.n	800ee74 <shadow_blur_corner+0x288>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800ed66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed68:	005b      	lsls	r3, r3, #1
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	643b      	str	r3, [r7, #64]	@ 0x40
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800ed70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	461a      	mov	r2, r3
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	fb02 f303 	mul.w	r3, r2, r3
 800ed7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ed7e:	2300      	movs	r3, #0
 800ed80:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed82:	e055      	b.n	800ee30 <shadow_blur_corner+0x244>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800ed84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	db03      	blt.n	800ed92 <shadow_blur_corner+0x1a6>
 800ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8c:	119b      	asrs	r3, r3, #6
 800ed8e:	b299      	uxth	r1, r3
 800ed90:	e000      	b.n	800ed94 <shadow_blur_corner+0x1a8>
 800ed92:	2100      	movs	r1, #0
 800ed94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed96:	005b      	lsls	r3, r3, #1
 800ed98:	69fa      	ldr	r2, [r7, #28]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	460a      	mov	r2, r1
 800ed9e:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800eda0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eda2:	6a3b      	ldr	r3, [r7, #32]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	dc03      	bgt.n	800edb2 <shadow_blur_corner+0x1c6>
 800edaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edac:	881b      	ldrh	r3, [r3, #0]
 800edae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edb0:	e00c      	b.n	800edcc <shadow_blur_corner+0x1e0>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800edb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edb4:	6a3b      	ldr	r3, [r7, #32]
 800edb6:	1ad3      	subs	r3, r2, r3
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	fb03 f202 	mul.w	r2, r3, r2
 800edbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edc0:	4413      	add	r3, r2
 800edc2:	005b      	lsls	r3, r3, #1
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	4413      	add	r3, r2
 800edc8:	881b      	ldrh	r3, [r3, #0]
 800edca:	62bb      	str	r3, [r7, #40]	@ 0x28
            v -= top_val;
 800edcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800edce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800edd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edd8:	4413      	add	r3, r2
 800edda:	3301      	adds	r3, #1
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	429a      	cmp	r2, r3
 800ede0:	dd0e      	ble.n	800ee00 <shadow_blur_corner+0x214>
 800ede2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ede4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ede6:	4413      	add	r3, r2
 800ede8:	3301      	adds	r3, #1
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	fb03 f202 	mul.w	r2, r3, r2
 800edf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edf2:	4413      	add	r3, r2
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	4413      	add	r3, r2
 800edfa:	881b      	ldrh	r3, [r3, #0]
 800edfc:	627b      	str	r3, [r7, #36]	@ 0x24
 800edfe:	e00b      	b.n	800ee18 <shadow_blur_corner+0x22c>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	3b01      	subs	r3, #1
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	fb03 f202 	mul.w	r2, r3, r2
 800ee0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee0c:	4413      	add	r3, r2
 800ee0e:	005b      	lsls	r3, r3, #1
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	4413      	add	r3, r2
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	627b      	str	r3, [r7, #36]	@ 0x24
            v += bottom_val;
 800ee18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1c:	4413      	add	r3, r2
 800ee1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800ee20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee22:	3301      	adds	r3, #1
 800ee24:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee2c:	4413      	add	r3, r2
 800ee2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	dba5      	blt.n	800ed84 <shadow_blur_corner+0x198>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800ee38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee3a:	005b      	lsls	r3, r3, #1
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	4413      	add	r3, r2
 800ee40:	643b      	str	r3, [r7, #64]	@ 0x40
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800ee42:	2300      	movs	r3, #0
 800ee44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee46:	e00e      	b.n	800ee66 <shadow_blur_corner+0x27a>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800ee48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	69fa      	ldr	r2, [r7, #28]
 800ee4e:	4413      	add	r3, r2
 800ee50:	881a      	ldrh	r2, [r3, #0]
 800ee52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee54:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800ee56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee58:	3301      	adds	r3, #1
 800ee5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee62:	4413      	add	r3, r2
 800ee64:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	dbec      	blt.n	800ee48 <shadow_blur_corner+0x25c>
    for(x = 0; x < size; x++) {
 800ee6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee70:	3301      	adds	r3, #1
 800ee72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	f6ff af74 	blt.w	800ed66 <shadow_blur_corner+0x17a>
        }
    }

    lv_free(sh_ups_blur_buf);
 800ee7e:	69f8      	ldr	r0, [r7, #28]
 800ee80:	f00f f942 	bl	801e108 <lv_free>
}
 800ee84:	bf00      	nop
 800ee86:	3750      	adds	r7, #80	@ 0x50
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <lv_area_copy>:
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	685a      	ldr	r2, [r3, #4]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	689a      	ldr	r2, [r3, #8]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	68da      	ldr	r2, [r3, #12]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	60da      	str	r2, [r3, #12]
}
 800eeb6:	bf00      	nop
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <lv_area_get_width>:
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	3301      	adds	r3, #1
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <lv_area_get_height>:
{
 800eee2:	b480      	push	{r7}
 800eee4:	b083      	sub	sp, #12
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68da      	ldr	r2, [r3, #12]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	3301      	adds	r3, #1
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <lv_draw_sw_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_fill(lv_draw_unit_t * draw_unit, const lv_draw_fill_dsc_t * dsc, const lv_area_t * coords)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b0bc      	sub	sp, #240	@ 0xf0
 800ef06:	af02      	add	r7, sp, #8
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	607a      	str	r2, [r7, #4]
    if(dsc->opa <= LV_OPA_MIN) return;
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef14:	2b02      	cmp	r3, #2
 800ef16:	f240 82fd 	bls.w	800f514 <lv_draw_sw_fill+0x612>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 800ef1a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ef1e:	6879      	ldr	r1, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7ff ffb3 	bl	800ee8c <lv_area_copy>

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_unit->clip_area)) return;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	689a      	ldr	r2, [r3, #8]
 800ef2a:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800ef2e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ef32:	4618      	mov	r0, r3
 800ef34:	f00b fbf6 	bl	801a724 <_lv_area_intersect>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	f083 0301 	eor.w	r3, r3, #1
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f040 82e9 	bne.w	800f518 <lv_draw_sw_fill+0x616>

    lv_grad_dir_t grad_dir = dsc->grad.dir;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ef4c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->color : dsc->grad.stops[0].color;
 800ef56:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d108      	bne.n	800ef70 <lv_draw_sw_fill+0x6e>
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800ef64:	3221      	adds	r2, #33	@ 0x21
 800ef66:	8811      	ldrh	r1, [r2, #0]
 800ef68:	7892      	ldrb	r2, [r2, #2]
 800ef6a:	8019      	strh	r1, [r3, #0]
 800ef6c:	709a      	strb	r2, [r3, #2]
 800ef6e:	e009      	b.n	800ef84 <lv_draw_sw_fill+0x82>
 800ef70:	68ba      	ldr	r2, [r7, #8]
 800ef72:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800ef76:	3224      	adds	r2, #36	@ 0x24
 800ef78:	6812      	ldr	r2, [r2, #0]
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	8019      	strh	r1, [r3, #0]
 800ef7e:	3302      	adds	r3, #2
 800ef80:	0c12      	lsrs	r2, r2, #16
 800ef82:	701a      	strb	r2, [r3, #0]

    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800ef84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800ef88:	222c      	movs	r2, #44	@ 0x2c
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f00f f951 	bl	801e234 <memset>
    blend_dsc.color = bg_color;
 800ef92:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 800ef96:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800ef9a:	8811      	ldrh	r1, [r2, #0]
 800ef9c:	7892      	ldrb	r2, [r2, #2]
 800ef9e:	8019      	strh	r1, [r3, #0]
 800efa0:	709a      	strb	r2, [r3, #2]

    /*Most simple case: just a plain rectangle*/
    if(dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	69db      	ldr	r3, [r3, #28]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d112      	bne.n	800efd0 <lv_draw_sw_fill+0xce>
 800efaa:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10e      	bne.n	800efd0 <lv_draw_sw_fill+0xce>
        blend_dsc.blend_area = &bg_coords;
 800efb2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800efb6:	653b      	str	r3, [r7, #80]	@ 0x50
        blend_dsc.opa = dsc->opa;
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efbe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800efc2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800efc6:	4619      	mov	r1, r3
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f7f8 fead 	bl	8007d28 <lv_draw_sw_blend>
        return;
 800efce:	e2a4      	b.n	800f51a <lv_draw_sw_fill+0x618>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_SW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_SW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->opa;
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efd6:	2bfc      	cmp	r3, #252	@ 0xfc
 800efd8:	d803      	bhi.n	800efe2 <lv_draw_sw_fill+0xe0>
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efe0:	e000      	b.n	800efe4 <lv_draw_sw_fill+0xe2>
 800efe2:	23ff      	movs	r3, #255	@ 0xff
 800efe4:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6

    /*Get the real radius. Can't be larger than the half of the shortest side */
    int32_t coords_bg_w = lv_area_get_width(&bg_coords);
 800efe8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800efec:	4618      	mov	r0, r3
 800efee:	f7ff ff68 	bl	800eec2 <lv_area_get_width>
 800eff2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
    int32_t coords_bg_h = lv_area_get_height(&bg_coords);
 800eff6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff ff71 	bl	800eee2 <lv_area_get_height>
 800f000:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 800f004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800f008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f00c:	4293      	cmp	r3, r2
 800f00e:	bfa8      	it	ge
 800f010:	4613      	movge	r3, r2
 800f012:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 800f016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f01a:	105a      	asrs	r2, r3, #1
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	4293      	cmp	r3, r2
 800f022:	bfa8      	it	ge
 800f024:	4613      	movge	r3, r2
 800f026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    /*Add a radius mask if there is a radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 800f02a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff ff47 	bl	800eec2 <lv_area_get_width>
 800f034:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
    lv_opa_t * mask_buf = NULL;
 800f038:	2300      	movs	r3, #0
 800f03a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    lv_draw_sw_mask_radius_param_t mask_rout_param;
    void * mask_list[2] = {NULL, NULL};
 800f03e:	2300      	movs	r3, #0
 800f040:	627b      	str	r3, [r7, #36]	@ 0x24
 800f042:	2300      	movs	r3, #0
 800f044:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(rout > 0) {
 800f046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	dd12      	ble.n	800f074 <lv_draw_sw_fill+0x172>
        mask_buf = lv_malloc(clipped_w);
 800f04e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f052:	4618      	mov	r0, r3
 800f054:	f00f f820 	bl	801e098 <lv_malloc>
 800f058:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        lv_draw_sw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 800f05c:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800f060:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800f064:	2300      	movs	r3, #0
 800f066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f06a:	f002 fcff 	bl	8011a6c <lv_draw_sw_mask_radius_init>
        mask_list[0] = &mask_rout_param;
 800f06e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f072:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 800f074:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f078:	617b      	str	r3, [r7, #20]
    blend_area.x2 = clipped_coords.x2;
 800f07a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f07e:	61fb      	str	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 800f080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f084:	66bb      	str	r3, [r7, #104]	@ 0x68
    blend_dsc.blend_area = &blend_area;
 800f086:	f107 0314 	add.w	r3, r7, #20
 800f08a:	653b      	str	r3, [r7, #80]	@ 0x50
    blend_dsc.mask_area = &blend_area;
 800f08c:	f107 0314 	add.w	r3, r7, #20
 800f090:	673b      	str	r3, [r7, #112]	@ 0x70
    blend_dsc.opa = LV_OPA_COVER;
 800f092:	23ff      	movs	r3, #255	@ 0xff
 800f094:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->grad, coords_bg_w, coords_bg_h);
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	3324      	adds	r3, #36	@ 0x24
 800f09c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800f0a0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 faac 	bl	800f602 <lv_gradient_get>
 800f0aa:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    lv_opa_t * grad_opa_map = NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 800f0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d04a      	beq.n	800f152 <lv_draw_sw_fill+0x250>
 800f0bc:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d146      	bne.n	800f152 <lv_draw_sw_fill+0x250>
        blend_dsc.src_area = &blend_area;
 800f0c4:	f107 0314 	add.w	r3, r7, #20
 800f0c8:	663b      	str	r3, [r7, #96]	@ 0x60
        blend_dsc.src_buf = grad->color_map + clipped_coords.x1 - bg_coords.x1;
 800f0ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0ce:	6819      	ldr	r1, [r3, #0]
 800f0d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f0da:	1ad2      	subs	r2, r2, r3
 800f0dc:	4613      	mov	r3, r2
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	4413      	add	r3, r2
 800f0e2:	440b      	add	r3, r1
 800f0e4:	657b      	str	r3, [r7, #84]	@ 0x54
        bool transp = false;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        uint32_t s;
        for(s = 0; s < dsc->grad.stops_count; s++) {
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0f2:	e013      	b.n	800f11c <lv_draw_sw_fill+0x21a>
            if(dsc->grad.stops[s].opa != LV_OPA_COVER) {
 800f0f4:	68b9      	ldr	r1, [r7, #8]
 800f0f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	4413      	add	r3, r2
 800f100:	440b      	add	r3, r1
 800f102:	3327      	adds	r3, #39	@ 0x27
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2bff      	cmp	r3, #255	@ 0xff
 800f108:	d003      	beq.n	800f112 <lv_draw_sw_fill+0x210>
                transp = true;
 800f10a:	2301      	movs	r3, #1
 800f10c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
                break;
 800f110:	e00c      	b.n	800f12c <lv_draw_sw_fill+0x22a>
        for(s = 0; s < dsc->grad.stops_count; s++) {
 800f112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f116:	3301      	adds	r3, #1
 800f118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f122:	461a      	mov	r2, r3
 800f124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f128:	4293      	cmp	r3, r2
 800f12a:	d3e3      	bcc.n	800f0f4 <lv_draw_sw_fill+0x1f2>
            }
        }

        if(transp) grad_opa_map = grad->opa_map + clipped_coords.x1 - bg_coords.x1;
 800f12c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00b      	beq.n	800f14c <lv_draw_sw_fill+0x24a>
 800f134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f13e:	4619      	mov	r1, r3
 800f140:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f144:	1acb      	subs	r3, r1, r3
 800f146:	4413      	add	r3, r2
 800f148:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

        blend_dsc.src_color_format = LV_COLOR_FORMAT_RGB888;
 800f14c:	230f      	movs	r3, #15
 800f14e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    }

    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 800f152:	2300      	movs	r3, #0
 800f154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f158:	e12b      	b.n	800f3b2 <lv_draw_sw_fill+0x4b0>
        int32_t top_y = bg_coords.y1 + h;
 800f15a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f15e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f162:	4413      	add	r3, r2
 800f164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        int32_t bottom_y = bg_coords.y2 - h;
 800f168:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800f176:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f17a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800f17e:	429a      	cmp	r2, r3
 800f180:	da06      	bge.n	800f190 <lv_draw_sw_fill+0x28e>
 800f182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f186:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800f18a:	429a      	cmp	r2, r3
 800f18c:	f300 810b 	bgt.w	800f3a6 <lv_draw_sw_fill+0x4a4>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 800f190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f194:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800f198:	4619      	mov	r1, r3
 800f19a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800f19e:	f00d ffde 	bl	801d15e <lv_memset>
        blend_dsc.mask_res = lv_draw_sw_mask_apply(mask_list, mask_buf, blend_area.x1, top_y, clipped_w);
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f1a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1b2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800f1b6:	f002 f9e3 	bl	8011580 <lv_draw_sw_mask_apply>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800f1c0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d102      	bne.n	800f1ce <lv_draw_sw_fill+0x2cc>
 800f1c8:	2302      	movs	r3, #2
 800f1ca:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

        bool hor_grad_processed = false;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        if(top_y >= clipped_coords.y1) {
 800f1d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f1d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	db6b      	blt.n	800f2b8 <lv_draw_sw_fill+0x3b6>
            blend_area.y1 = top_y;
 800f1e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1e4:	61bb      	str	r3, [r7, #24]
            blend_area.y2 = top_y;
 800f1e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1ea:	623b      	str	r3, [r7, #32]

            if(grad_dir == LV_GRAD_DIR_VER) {
 800f1ec:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d11f      	bne.n	800f234 <lv_draw_sw_fill+0x332>
                blend_dsc.color = grad->color_map[top_y - bg_coords.y1];
 800f1f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f1fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f202:	1acb      	subs	r3, r1, r3
 800f204:	4619      	mov	r1, r3
 800f206:	460b      	mov	r3, r1
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	440b      	add	r3, r1
 800f20c:	441a      	add	r2, r3
 800f20e:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 800f212:	8811      	ldrh	r1, [r2, #0]
 800f214:	7892      	ldrb	r2, [r2, #2]
 800f216:	8019      	strh	r1, [r3, #0]
 800f218:	709a      	strb	r2, [r3, #2]
                blend_dsc.opa = grad->opa_map[top_y - bg_coords.y1];
 800f21a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f224:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f228:	1a8a      	subs	r2, r1, r2
 800f22a:	4413      	add	r3, r2
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800f232:	e03b      	b.n	800f2ac <lv_draw_sw_fill+0x3aa>
            }
            else if(grad_dir == LV_GRAD_DIR_HOR) {
 800f234:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f238:	2b02      	cmp	r3, #2
 800f23a:	d137      	bne.n	800f2ac <lv_draw_sw_fill+0x3aa>
                hor_grad_processed = true;
 800f23c:	2301      	movs	r3, #1
 800f23e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
                if(grad_opa_map) {
 800f242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f246:	2b00      	cmp	r3, #0
 800f248:	d030      	beq.n	800f2ac <lv_draw_sw_fill+0x3aa>
                    int32_t i;
                    for(i = 0; i < clipped_w; i++) {
 800f24a:	2300      	movs	r3, #0
 800f24c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f250:	e023      	b.n	800f29a <lv_draw_sw_fill+0x398>
                        if(grad_opa_map[i] < LV_OPA_MAX) mask_buf[i] = (mask_buf[i] * grad_opa_map[i]) >> 8;
 800f252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f25a:	4413      	add	r3, r2
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	2bfc      	cmp	r3, #252	@ 0xfc
 800f260:	d816      	bhi.n	800f290 <lv_draw_sw_fill+0x38e>
 800f262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f26a:	4413      	add	r3, r2
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	4619      	mov	r1, r3
 800f270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f274:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f278:	4413      	add	r3, r2
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	fb01 f303 	mul.w	r3, r1, r3
 800f280:	1219      	asrs	r1, r3, #8
 800f282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f286:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f28a:	4413      	add	r3, r2
 800f28c:	b2ca      	uxtb	r2, r1
 800f28e:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < clipped_w; i++) {
 800f290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f294:	3301      	adds	r3, #1
 800f296:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f29a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800f29e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	dbd5      	blt.n	800f252 <lv_draw_sw_fill+0x350>
                    }
                    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800f2a6:	2302      	movs	r3, #2
 800f2a8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                }
            }
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 800f2ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7f8 fd38 	bl	8007d28 <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 800f2b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f2bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	dc71      	bgt.n	800f3a8 <lv_draw_sw_fill+0x4a6>
            blend_area.y1 = bottom_y;
 800f2c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2c8:	61bb      	str	r3, [r7, #24]
            blend_area.y2 = bottom_y;
 800f2ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2ce:	623b      	str	r3, [r7, #32]

            if(grad_dir == LV_GRAD_DIR_VER) {
 800f2d0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d11f      	bne.n	800f318 <lv_draw_sw_fill+0x416>
                blend_dsc.color = grad->color_map[bottom_y - bg_coords.y1];
 800f2d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f2e2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800f2e6:	1acb      	subs	r3, r1, r3
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	005b      	lsls	r3, r3, #1
 800f2ee:	440b      	add	r3, r1
 800f2f0:	441a      	add	r2, r3
 800f2f2:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 800f2f6:	8811      	ldrh	r1, [r2, #0]
 800f2f8:	7892      	ldrb	r2, [r2, #2]
 800f2fa:	8019      	strh	r1, [r3, #0]
 800f2fc:	709a      	strb	r2, [r3, #2]
                blend_dsc.opa = grad->opa_map[bottom_y - bg_coords.y1];
 800f2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f308:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800f30c:	1a8a      	subs	r2, r1, r2
 800f30e:	4413      	add	r3, r2
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800f316:	e03f      	b.n	800f398 <lv_draw_sw_fill+0x496>
            }
            else if(hor_grad_processed == false && grad_dir == LV_GRAD_DIR_HOR) {
 800f318:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800f31c:	f083 0301 	eor.w	r3, r3, #1
 800f320:	b2db      	uxtb	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d038      	beq.n	800f398 <lv_draw_sw_fill+0x496>
 800f326:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d134      	bne.n	800f398 <lv_draw_sw_fill+0x496>
                if(grad_opa_map) {
 800f32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f332:	2b00      	cmp	r3, #0
 800f334:	d030      	beq.n	800f398 <lv_draw_sw_fill+0x496>
                    int32_t i;
                    for(i = 0; i < clipped_w; i++) {
 800f336:	2300      	movs	r3, #0
 800f338:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f33c:	e023      	b.n	800f386 <lv_draw_sw_fill+0x484>
                        if(grad_opa_map[i] < LV_OPA_MAX) mask_buf[i] = (mask_buf[i] * grad_opa_map[i]) >> 8;
 800f33e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f342:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f346:	4413      	add	r3, r2
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	2bfc      	cmp	r3, #252	@ 0xfc
 800f34c:	d816      	bhi.n	800f37c <lv_draw_sw_fill+0x47a>
 800f34e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f356:	4413      	add	r3, r2
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	4619      	mov	r1, r3
 800f35c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f364:	4413      	add	r3, r2
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	fb01 f303 	mul.w	r3, r1, r3
 800f36c:	1219      	asrs	r1, r3, #8
 800f36e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f372:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f376:	4413      	add	r3, r2
 800f378:	b2ca      	uxtb	r2, r1
 800f37a:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < clipped_w; i++) {
 800f37c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f380:	3301      	adds	r3, #1
 800f382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f38a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f38e:	429a      	cmp	r2, r3
 800f390:	dbd5      	blt.n	800f33e <lv_draw_sw_fill+0x43c>
                    }
                    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800f392:	2302      	movs	r3, #2
 800f394:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                }
            }
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 800f398:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f39c:	4619      	mov	r1, r3
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f7f8 fcc2 	bl	8007d28 <lv_draw_sw_blend>
 800f3a4:	e000      	b.n	800f3a8 <lv_draw_sw_fill+0x4a6>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800f3a6:	bf00      	nop
    for(h = 0; h < rout; h++) {
 800f3a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f3b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f3b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	f6ff aecd 	blt.w	800f15a <lv_draw_sw_fill+0x258>
    }

    /* Draw the center of the rectangle.*/

    /*If no gradient, the center is a simple rectangle*/
    if(grad_dir == LV_GRAD_DIR_NONE) {
 800f3c0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d118      	bne.n	800f3fa <lv_draw_sw_fill+0x4f8>
        blend_area.y1 = bg_coords.y1 + rout;
 800f3c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f3cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3d0:	4413      	add	r3, r2
 800f3d2:	61bb      	str	r3, [r7, #24]
        blend_area.y2 = bg_coords.y2 - rout;
 800f3d4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f3d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	623b      	str	r3, [r7, #32]
        blend_dsc.opa = opa;
 800f3e0:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800f3e4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        blend_dsc.mask_buf = NULL;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	66bb      	str	r3, [r7, #104]	@ 0x68
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800f3ec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f7f8 fc98 	bl	8007d28 <lv_draw_sw_blend>
 800f3f8:	e076      	b.n	800f4e8 <lv_draw_sw_fill+0x5e6>
    }
    /*With gradient draw line by line*/
    else {
        blend_dsc.opa = opa;
 800f3fa:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800f3fe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        if(grad_dir == LV_GRAD_DIR_VER) {
 800f402:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f406:	2b01      	cmp	r3, #1
 800f408:	d103      	bne.n	800f412 <lv_draw_sw_fill+0x510>
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_FULL_COVER;
 800f40a:	2301      	movs	r3, #1
 800f40c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800f410:	e009      	b.n	800f426 <lv_draw_sw_fill+0x524>
        }
        else if(grad_dir == LV_GRAD_DIR_HOR) {
 800f412:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f416:	2b02      	cmp	r3, #2
 800f418:	d105      	bne.n	800f426 <lv_draw_sw_fill+0x524>
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800f41a:	2302      	movs	r3, #2
 800f41c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            blend_dsc.mask_buf = grad_opa_map;
 800f420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f424:	66bb      	str	r3, [r7, #104]	@ 0x68
        }

        int32_t h_end = bg_coords.y2 - rout;
 800f426:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f42a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800f434:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f438:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f43c:	4413      	add	r3, r2
 800f43e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f442:	e04b      	b.n	800f4dc <lv_draw_sw_fill+0x5da>
            blend_area.y1 = h;
 800f444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f448:	61bb      	str	r3, [r7, #24]
            blend_area.y2 = h;
 800f44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f44e:	623b      	str	r3, [r7, #32]

            if(grad_dir == LV_GRAD_DIR_VER) {
 800f450:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800f454:	2b01      	cmp	r3, #1
 800f456:	d136      	bne.n	800f4c6 <lv_draw_sw_fill+0x5c4>
                blend_dsc.color = grad->color_map[h - bg_coords.y1];
 800f458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f462:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800f466:	1acb      	subs	r3, r1, r3
 800f468:	4619      	mov	r1, r3
 800f46a:	460b      	mov	r3, r1
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	440b      	add	r3, r1
 800f470:	441a      	add	r2, r3
 800f472:	f107 0365 	add.w	r3, r7, #101	@ 0x65
 800f476:	8811      	ldrh	r1, [r2, #0]
 800f478:	7892      	ldrb	r2, [r2, #2]
 800f47a:	8019      	strh	r1, [r3, #0]
 800f47c:	709a      	strb	r2, [r3, #2]
                if(opa >= LV_OPA_MAX) blend_dsc.opa = grad->opa_map[h - bg_coords.y1];
 800f47e:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800f482:	2bfc      	cmp	r3, #252	@ 0xfc
 800f484:	d90c      	bls.n	800f4a0 <lv_draw_sw_fill+0x59e>
 800f486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f490:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800f494:	1a8a      	subs	r2, r1, r2
 800f496:	4413      	add	r3, r2
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 800f49e:	e012      	b.n	800f4c6 <lv_draw_sw_fill+0x5c4>
                else blend_dsc.opa = LV_OPA_MIX2(grad->opa_map[h - bg_coords.y1], opa);
 800f4a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f4aa:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800f4ae:	1a8a      	subs	r2, r1, r2
 800f4b0:	4413      	add	r3, r2
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	f897 30c6 	ldrb.w	r3, [r7, #198]	@ 0xc6
 800f4ba:	fb02 f303 	mul.w	r3, r2, r3
 800f4be:	121b      	asrs	r3, r3, #8
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            }
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 800f4c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f7f8 fc2b 	bl	8007d28 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800f4d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f4dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f4e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	ddad      	ble.n	800f444 <lv_draw_sw_fill+0x542>
        }
    }

    if(mask_buf) {
 800f4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d008      	beq.n	800f502 <lv_draw_sw_fill+0x600>
        lv_free(mask_buf);
 800f4f0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800f4f4:	f00e fe08 	bl	801e108 <lv_free>
        lv_draw_sw_mask_free_param(&mask_rout_param);
 800f4f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f002 f881 	bl	8011604 <lv_draw_sw_mask_free_param>
    }
    if(grad) {
 800f502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f506:	2b00      	cmp	r3, #0
 800f508:	d007      	beq.n	800f51a <lv_draw_sw_fill+0x618>
        lv_gradient_cleanup(grad);
 800f50a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800f50e:	f000 f9fb 	bl	800f908 <lv_gradient_cleanup>
 800f512:	e002      	b.n	800f51a <lv_draw_sw_fill+0x618>
    if(dsc->opa <= LV_OPA_MIN) return;
 800f514:	bf00      	nop
 800f516:	e000      	b.n	800f51a <lv_draw_sw_fill+0x618>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_unit->clip_area)) return;
 800f518:	bf00      	nop
    }

#endif
}
 800f51a:	37e8      	adds	r7, #232	@ 0xe8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <lv_color_make>:
 * @param g     the green channel (0..255)
 * @param b     the blue channel (0..255)
 * @return      the color
 */
static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	4603      	mov	r3, r0
 800f528:	71fb      	strb	r3, [r7, #7]
 800f52a:	460b      	mov	r3, r1
 800f52c:	71bb      	strb	r3, [r7, #6]
 800f52e:	4613      	mov	r3, r2
 800f530:	717b      	strb	r3, [r7, #5]
    lv_color_t ret;
    ret.red = r;
 800f532:	79fb      	ldrb	r3, [r7, #7]
 800f534:	72bb      	strb	r3, [r7, #10]
    ret.green = g;
 800f536:	79bb      	ldrb	r3, [r7, #6]
 800f538:	727b      	strb	r3, [r7, #9]
    ret.blue = b;
 800f53a:	797b      	ldrb	r3, [r7, #5]
 800f53c:	723b      	strb	r3, [r7, #8]
    return ret;
 800f53e:	f107 030c 	add.w	r3, r7, #12
 800f542:	f107 0208 	add.w	r2, r7, #8
 800f546:	6812      	ldr	r2, [r2, #0]
 800f548:	4611      	mov	r1, r2
 800f54a:	8019      	strh	r1, [r3, #0]
 800f54c:	3302      	adds	r3, #2
 800f54e:	0c12      	lsrs	r2, r2, #16
 800f550:	701a      	strb	r2, [r3, #0]
 800f552:	2300      	movs	r3, #0
 800f554:	7b3a      	ldrb	r2, [r7, #12]
 800f556:	f362 0307 	bfi	r3, r2, #0, #8
 800f55a:	7b7a      	ldrb	r2, [r7, #13]
 800f55c:	f362 230f 	bfi	r3, r2, #8, #8
 800f560:	7bba      	ldrb	r2, [r7, #14]
 800f562:	f362 4317 	bfi	r3, r2, #16, #8
}
 800f566:	4618      	mov	r0, r3
 800f568:	3714      	adds	r7, #20
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <allocate_item>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, int32_t w, int32_t h)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b088      	sub	sp, #32
 800f576:	af00      	add	r7, sp, #0
 800f578:	60f8      	str	r0, [r7, #12]
 800f57a:	60b9      	str	r1, [r7, #8]
 800f57c:	607a      	str	r2, [r7, #4]
    int32_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	7adb      	ldrb	r3, [r3, #11]
 800f582:	f003 0307 	and.w	r3, r3, #7
 800f586:	b2db      	uxtb	r3, r3
 800f588:	2b02      	cmp	r3, #2
 800f58a:	d101      	bne.n	800f590 <allocate_item+0x1e>
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	e000      	b.n	800f592 <allocate_item+0x20>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	61fb      	str	r3, [r7, #28]

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(size * sizeof(lv_color_t)) + ALIGN(size * sizeof(lv_opa_t));
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	1c5a      	adds	r2, r3, #1
 800f598:	4613      	mov	r3, r2
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	4413      	add	r3, r2
 800f59e:	f023 0203 	bic.w	r2, r3, #3
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	3303      	adds	r3, #3
 800f5a6:	f023 0303 	bic.w	r3, r3, #3
 800f5aa:	4413      	add	r3, r2
 800f5ac:	330c      	adds	r3, #12
 800f5ae:	61bb      	str	r3, [r7, #24]
    lv_grad_t * item  = lv_malloc(req_size);
 800f5b0:	69b8      	ldr	r0, [r7, #24]
 800f5b2:	f00e fd71 	bl	801e098 <lv_malloc>
 800f5b6:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(item);
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <allocate_item+0x50>
 800f5be:	bf00      	nop
 800f5c0:	e7fd      	b.n	800f5be <allocate_item+0x4c>
    if(item == NULL) return NULL;
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d101      	bne.n	800f5cc <allocate_item+0x5a>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	e016      	b.n	800f5fa <allocate_item+0x88>

    uint8_t * p = (uint8_t *)item;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	613b      	str	r3, [r7, #16]
    item->color_map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	f103 020c 	add.w	r2, r3, #12
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	601a      	str	r2, [r3, #0]
    item->opa_map = (lv_opa_t *)(p + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_color_t)));
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	4613      	mov	r3, r2
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	4413      	add	r3, r2
 800f5e4:	f023 0303 	bic.w	r3, r3, #3
 800f5e8:	330c      	adds	r3, #12
 800f5ea:	693a      	ldr	r2, [r7, #16]
 800f5ec:	441a      	add	r2, r3
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	605a      	str	r2, [r3, #4]
    item->size = size;
 800f5f2:	69fa      	ldr	r2, [r7, #28]
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	609a      	str	r2, [r3, #8]
    return item;
 800f5f8:	697b      	ldr	r3, [r7, #20]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3720      	adds	r7, #32
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <lv_gradient_get>:
/**********************
 *     FUNCTIONS
 **********************/

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, int32_t w, int32_t h)
{
 800f602:	b590      	push	{r4, r7, lr}
 800f604:	b089      	sub	sp, #36	@ 0x24
 800f606:	af02      	add	r7, sp, #8
 800f608:	60f8      	str	r0, [r7, #12]
 800f60a:	60b9      	str	r1, [r7, #8]
 800f60c:	607a      	str	r2, [r7, #4]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	7adb      	ldrb	r3, [r3, #11]
 800f612:	f003 0307 	and.w	r3, r3, #7
 800f616:	b2db      	uxtb	r3, r3
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d101      	bne.n	800f620 <lv_gradient_get+0x1e>
 800f61c:	2300      	movs	r3, #0
 800f61e:	e02c      	b.n	800f67a <lv_gradient_get+0x78>

    /* Step 1: Search cache for the given key */
    lv_grad_t * item = allocate_item(g, w, h);
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	68b9      	ldr	r1, [r7, #8]
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f7ff ffa4 	bl	800f572 <allocate_item>
 800f62a:	6138      	str	r0, [r7, #16]
    if(item == NULL) {
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <lv_gradient_get+0x34>
        LV_LOG_WARN("Failed to allocate item for the gradient");
        return item;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	e021      	b.n	800f67a <lv_gradient_get+0x78>
    }

    /* Step 3: Fill it with the gradient, as expected */
    uint32_t i;
    for(i = 0; i < item->size; i++) {
 800f636:	2300      	movs	r3, #0
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	e018      	b.n	800f66e <lv_gradient_get+0x6c>
        lv_gradient_color_calculate(g, item->size, i, &item->color_map[i], &item->opa_map[i]);
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	461c      	mov	r4, r3
 800f642:	6978      	ldr	r0, [r7, #20]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	6819      	ldr	r1, [r3, #0]
 800f648:	697a      	ldr	r2, [r7, #20]
 800f64a:	4613      	mov	r3, r2
 800f64c:	005b      	lsls	r3, r3, #1
 800f64e:	4413      	add	r3, r2
 800f650:	4419      	add	r1, r3
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	685a      	ldr	r2, [r3, #4]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	4413      	add	r3, r2
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	460b      	mov	r3, r1
 800f65e:	4602      	mov	r2, r0
 800f660:	4621      	mov	r1, r4
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f000 f80d 	bl	800f682 <lv_gradient_color_calculate>
    for(i = 0; i < item->size; i++) {
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	3301      	adds	r3, #1
 800f66c:	617b      	str	r3, [r7, #20]
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	697a      	ldr	r2, [r7, #20]
 800f674:	429a      	cmp	r2, r3
 800f676:	d3e1      	bcc.n	800f63c <lv_gradient_get+0x3a>
    }
    return item;
 800f678:	693b      	ldr	r3, [r7, #16]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	371c      	adds	r7, #28
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd90      	pop	{r4, r7, pc}

0800f682 <lv_gradient_color_calculate>:

void LV_ATTRIBUTE_FAST_MEM lv_gradient_color_calculate(const lv_grad_dsc_t * dsc, int32_t range,
                                                       int32_t frac, lv_grad_color_t * color_out, lv_opa_t * opa_out)
{
 800f682:	b590      	push	{r4, r7, lr}
 800f684:	b08f      	sub	sp, #60	@ 0x3c
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	60b9      	str	r1, [r7, #8]
 800f68c:	607a      	str	r2, [r7, #4]
 800f68e:	603b      	str	r3, [r7, #0]
    lv_grad_color_t tmp;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	791b      	ldrb	r3, [r3, #4]
 800f694:	461a      	mov	r2, r3
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	fb02 f303 	mul.w	r3, r2, r3
 800f69c:	121b      	asrs	r3, r3, #8
 800f69e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if(frac <= min) {
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	dc13      	bgt.n	800f6d0 <lv_gradient_color_calculate+0x4e>
        GRAD_CONV(tmp, dsc->stops[0].color);
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	f107 0318 	add.w	r3, r7, #24
 800f6ae:	8811      	ldrh	r1, [r2, #0]
 800f6b0:	7892      	ldrb	r2, [r2, #2]
 800f6b2:	8019      	strh	r1, [r3, #0]
 800f6b4:	709a      	strb	r2, [r3, #2]
        *color_out = tmp;
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	f107 0318 	add.w	r3, r7, #24
 800f6be:	8819      	ldrh	r1, [r3, #0]
 800f6c0:	789b      	ldrb	r3, [r3, #2]
 800f6c2:	8011      	strh	r1, [r2, #0]
 800f6c4:	7093      	strb	r3, [r2, #2]
        *opa_out = dsc->stops[0].opa;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	78da      	ldrb	r2, [r3, #3]
 800f6ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6cc:	701a      	strb	r2, [r3, #0]
        return;
 800f6ce:	e118      	b.n	800f902 <lv_gradient_color_calculate+0x280>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	7a9b      	ldrb	r3, [r3, #10]
 800f6d4:	1e5a      	subs	r2, r3, #1
 800f6d6:	68f9      	ldr	r1, [r7, #12]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	4413      	add	r3, r2
 800f6de:	440b      	add	r3, r1
 800f6e0:	3304      	adds	r3, #4
 800f6e2:	781b      	ldrb	r3, [r3, #0]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	fb02 f303 	mul.w	r3, r2, r3
 800f6ec:	121b      	asrs	r3, r3, #8
 800f6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(frac >= max) {
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	db22      	blt.n	800f73e <lv_gradient_color_calculate+0xbc>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	7a9b      	ldrb	r3, [r3, #10]
 800f6fc:	1e5a      	subs	r2, r3, #1
 800f6fe:	68f9      	ldr	r1, [r7, #12]
 800f700:	4613      	mov	r3, r2
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	18ca      	adds	r2, r1, r3
 800f708:	f107 0318 	add.w	r3, r7, #24
 800f70c:	8811      	ldrh	r1, [r2, #0]
 800f70e:	7892      	ldrb	r2, [r2, #2]
 800f710:	8019      	strh	r1, [r3, #0]
 800f712:	709a      	strb	r2, [r3, #2]
        *color_out = tmp;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	461a      	mov	r2, r3
 800f718:	f107 0318 	add.w	r3, r7, #24
 800f71c:	8819      	ldrh	r1, [r3, #0]
 800f71e:	789b      	ldrb	r3, [r3, #2]
 800f720:	8011      	strh	r1, [r2, #0]
 800f722:	7093      	strb	r3, [r2, #2]
        *opa_out = dsc->stops[dsc->stops_count - 1].opa;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	7a9b      	ldrb	r3, [r3, #10]
 800f728:	1e5a      	subs	r2, r3, #1
 800f72a:	68f9      	ldr	r1, [r7, #12]
 800f72c:	4613      	mov	r3, r2
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	4413      	add	r3, r2
 800f732:	440b      	add	r3, r1
 800f734:	3303      	adds	r3, #3
 800f736:	781a      	ldrb	r2, [r3, #0]
 800f738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f73a:	701a      	strb	r2, [r3, #0]
        return;
 800f73c:	e0e1      	b.n	800f902 <lv_gradient_color_calculate+0x280>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t found_i = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	637b      	str	r3, [r7, #52]	@ 0x34
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 800f746:	2301      	movs	r3, #1
 800f748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f74c:	e01b      	b.n	800f786 <lv_gradient_color_calculate+0x104>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 800f74e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f752:	68f9      	ldr	r1, [r7, #12]
 800f754:	4613      	mov	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4413      	add	r3, r2
 800f75a:	440b      	add	r3, r1
 800f75c:	3304      	adds	r3, #4
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	461a      	mov	r2, r3
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	fb02 f303 	mul.w	r3, r2, r3
 800f768:	121b      	asrs	r3, r3, #8
 800f76a:	623b      	str	r3, [r7, #32]
        if(frac <= cur) {
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	6a3b      	ldr	r3, [r7, #32]
 800f770:	429a      	cmp	r2, r3
 800f772:	dc03      	bgt.n	800f77c <lv_gradient_color_calculate+0xfa>
            found_i = i;
 800f774:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f778:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f77a:	e00a      	b.n	800f792 <lv_gradient_color_calculate+0x110>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 800f77c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f780:	3301      	adds	r3, #1
 800f782:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	7a9b      	ldrb	r3, [r3, #10]
 800f78a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f78e:	429a      	cmp	r2, r3
 800f790:	d3dd      	bcc.n	800f74e <lv_gradient_color_calculate+0xcc>
        }
    }

    LV_ASSERT(found_i != 0);
 800f792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <lv_gradient_color_calculate+0x11a>
 800f798:	bf00      	nop
 800f79a:	e7fd      	b.n	800f798 <lv_gradient_color_calculate+0x116>

    lv_color_t one, two;
    one = dsc->stops[found_i - 1].color;
 800f79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f79e:	1e5a      	subs	r2, r3, #1
 800f7a0:	68f9      	ldr	r1, [r7, #12]
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	4413      	add	r3, r2
 800f7a8:	18ca      	adds	r2, r1, r3
 800f7aa:	f107 0314 	add.w	r3, r7, #20
 800f7ae:	8811      	ldrh	r1, [r2, #0]
 800f7b0:	7892      	ldrb	r2, [r2, #2]
 800f7b2:	8019      	strh	r1, [r3, #0]
 800f7b4:	709a      	strb	r2, [r3, #2]
    two = dsc->stops[found_i].color;
 800f7b6:	68f9      	ldr	r1, [r7, #12]
 800f7b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4413      	add	r3, r2
 800f7c0:	18ca      	adds	r2, r1, r3
 800f7c2:	f107 0310 	add.w	r3, r7, #16
 800f7c6:	8811      	ldrh	r1, [r2, #0]
 800f7c8:	7892      	ldrb	r2, [r2, #2]
 800f7ca:	8019      	strh	r1, [r3, #0]
 800f7cc:	709a      	strb	r2, [r3, #2]
    min = (dsc->stops[found_i - 1].frac * range) >> 8;
 800f7ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7d0:	1e5a      	subs	r2, r3, #1
 800f7d2:	68f9      	ldr	r1, [r7, #12]
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4413      	add	r3, r2
 800f7da:	440b      	add	r3, r1
 800f7dc:	3304      	adds	r3, #4
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	fb02 f303 	mul.w	r3, r2, r3
 800f7e8:	121b      	asrs	r3, r3, #8
 800f7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    max = (dsc->stops[found_i].frac * range) >> 8;
 800f7ec:	68f9      	ldr	r1, [r7, #12]
 800f7ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4413      	add	r3, r2
 800f7f6:	440b      	add	r3, r1
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	fb02 f303 	mul.w	r3, r2, r3
 800f804:	121b      	asrs	r3, r3, #8
 800f806:	62bb      	str	r3, [r7, #40]	@ 0x28
    d = max - min;
 800f808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80c:	1ad3      	subs	r3, r2, r3
 800f80e:	627b      	str	r3, [r7, #36]	@ 0x24

    /*Then interpolate*/
    frac -= min;
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	607b      	str	r3, [r7, #4]
    lv_opa_t mix = (frac * 255) / d;
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	4613      	mov	r3, r2
 800f81c:	021b      	lsls	r3, r3, #8
 800f81e:	1a9a      	subs	r2, r3, r2
 800f820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f822:	fb92 f3f3 	sdiv	r3, r2, r3
 800f826:	77fb      	strb	r3, [r7, #31]
    lv_opa_t imix = 255 - mix;
 800f828:	7ffb      	ldrb	r3, [r7, #31]
 800f82a:	43db      	mvns	r3, r3
 800f82c:	77bb      	strb	r3, [r7, #30]

    *color_out = GRAD_CM(LV_UDIV255(two.red * mix   + one.red * imix),
 800f82e:	7cbb      	ldrb	r3, [r7, #18]
 800f830:	461a      	mov	r2, r3
 800f832:	7ffb      	ldrb	r3, [r7, #31]
 800f834:	fb03 f202 	mul.w	r2, r3, r2
 800f838:	7dbb      	ldrb	r3, [r7, #22]
 800f83a:	4619      	mov	r1, r3
 800f83c:	7fbb      	ldrb	r3, [r7, #30]
 800f83e:	fb01 f303 	mul.w	r3, r1, r3
 800f842:	4413      	add	r3, r2
 800f844:	461a      	mov	r2, r3
 800f846:	4613      	mov	r3, r2
 800f848:	021b      	lsls	r3, r3, #8
 800f84a:	4413      	add	r3, r2
 800f84c:	01db      	lsls	r3, r3, #7
 800f84e:	4413      	add	r3, r2
 800f850:	0ddb      	lsrs	r3, r3, #23
 800f852:	b2d8      	uxtb	r0, r3
 800f854:	7c7b      	ldrb	r3, [r7, #17]
 800f856:	461a      	mov	r2, r3
 800f858:	7ffb      	ldrb	r3, [r7, #31]
 800f85a:	fb03 f202 	mul.w	r2, r3, r2
 800f85e:	7d7b      	ldrb	r3, [r7, #21]
 800f860:	4619      	mov	r1, r3
 800f862:	7fbb      	ldrb	r3, [r7, #30]
 800f864:	fb01 f303 	mul.w	r3, r1, r3
 800f868:	4413      	add	r3, r2
 800f86a:	461a      	mov	r2, r3
 800f86c:	4613      	mov	r3, r2
 800f86e:	021b      	lsls	r3, r3, #8
 800f870:	4413      	add	r3, r2
 800f872:	01db      	lsls	r3, r3, #7
 800f874:	4413      	add	r3, r2
 800f876:	0ddb      	lsrs	r3, r3, #23
 800f878:	b2d9      	uxtb	r1, r3
 800f87a:	7c3b      	ldrb	r3, [r7, #16]
 800f87c:	461a      	mov	r2, r3
 800f87e:	7ffb      	ldrb	r3, [r7, #31]
 800f880:	fb03 f202 	mul.w	r2, r3, r2
 800f884:	7d3b      	ldrb	r3, [r7, #20]
 800f886:	461c      	mov	r4, r3
 800f888:	7fbb      	ldrb	r3, [r7, #30]
 800f88a:	fb04 f303 	mul.w	r3, r4, r3
 800f88e:	4413      	add	r3, r2
 800f890:	461a      	mov	r2, r3
 800f892:	4613      	mov	r3, r2
 800f894:	021b      	lsls	r3, r3, #8
 800f896:	4413      	add	r3, r2
 800f898:	01db      	lsls	r3, r3, #7
 800f89a:	4413      	add	r3, r2
 800f89c:	0ddb      	lsrs	r3, r3, #23
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	f7ff fe3d 	bl	800f520 <lv_color_make>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	7019      	strb	r1, [r3, #0]
 800f8ae:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f8b2:	7059      	strb	r1, [r3, #1]
 800f8b4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800f8b8:	709a      	strb	r2, [r3, #2]
                         LV_UDIV255(two.green * mix + one.green * imix),
                         LV_UDIV255(two.blue * mix  + one.blue * imix));

    *opa_out = LV_UDIV255(dsc->stops[found_i].opa * mix   + dsc->stops[found_i - 1].opa * imix);
 800f8ba:	68f9      	ldr	r1, [r7, #12]
 800f8bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8be:	4613      	mov	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	4413      	add	r3, r2
 800f8c4:	440b      	add	r3, r1
 800f8c6:	3303      	adds	r3, #3
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	7ffb      	ldrb	r3, [r7, #31]
 800f8ce:	fb03 f102 	mul.w	r1, r3, r2
 800f8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8d4:	1e5a      	subs	r2, r3, #1
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	4413      	add	r3, r2
 800f8de:	4403      	add	r3, r0
 800f8e0:	3303      	adds	r3, #3
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	7fbb      	ldrb	r3, [r7, #30]
 800f8e8:	fb02 f303 	mul.w	r3, r2, r3
 800f8ec:	440b      	add	r3, r1
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	021b      	lsls	r3, r3, #8
 800f8f4:	4413      	add	r3, r2
 800f8f6:	01db      	lsls	r3, r3, #7
 800f8f8:	4413      	add	r3, r2
 800f8fa:	0ddb      	lsrs	r3, r3, #23
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f900:	701a      	strb	r2, [r3, #0]
}
 800f902:	373c      	adds	r7, #60	@ 0x3c
 800f904:	46bd      	mov	sp, r7
 800f906:	bd90      	pop	{r4, r7, pc}

0800f908 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
    lv_free(grad);
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f00e fbf9 	bl	801e108 <lv_free>
}
 800f916:	bf00      	nop
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <lv_area_copy>:
{
 800f91e:	b480      	push	{r7}
 800f920:	b083      	sub	sp, #12
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	685a      	ldr	r2, [r3, #4]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	689a      	ldr	r2, [r3, #8]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	68da      	ldr	r2, [r3, #12]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	60da      	str	r2, [r3, #12]
}
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <lv_area_get_width>:
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689a      	ldr	r2, [r3, #8]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	1ad3      	subs	r3, r2, r3
 800f966:	3301      	adds	r3, #1
}
 800f968:	4618      	mov	r0, r3
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <lv_area_get_height>:
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	68da      	ldr	r2, [r3, #12]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	1ad3      	subs	r3, r2, r3
 800f986:	3301      	adds	r3, #1
}
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <lv_color_format_get_size>:
 * Get the pixel size of a color format in bytes
 * @param src_cf    a color format (`LV_COLOR_FORMAT_...`)
 * @return          the pixel size in bytes
 */
static inline uint8_t lv_color_format_get_size(lv_color_format_t cf)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	71fb      	strb	r3, [r7, #7]
    return (lv_color_format_get_bpp(cf) + 7) >> 3;
 800f99e:	79fb      	ldrb	r3, [r7, #7]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f00b fc85 	bl	801b2b0 <lv_color_format_get_bpp>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	3307      	adds	r3, #7
 800f9aa:	10db      	asrs	r3, r3, #3
 800f9ac:	b2db      	uxtb	r3, r3
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <lv_memzero>:
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b082      	sub	sp, #8
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f00d fbca 	bl	801d15e <lv_memset>
}
 800f9ca:	bf00      	nop
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <lv_draw_sw_layer>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_layer(lv_draw_unit_t * draw_unit, const lv_draw_image_dsc_t * draw_dsc, const lv_area_t * coords)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b0a0      	sub	sp, #128	@ 0x80
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	60f8      	str	r0, [r7, #12]
 800f9da:	60b9      	str	r1, [r7, #8]
 800f9dc:	607a      	str	r2, [r7, #4]
    lv_layer_t * layer_to_draw = (lv_layer_t *)draw_dsc->src;
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	69db      	ldr	r3, [r3, #28]
 800f9e2:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /*It can happen that nothing was draw on a layer and therefore its buffer is not allocated.
     *In this case just return. */
    if(layer_to_draw->draw_buf == NULL) return;
 800f9e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d012      	beq.n	800fa12 <lv_draw_sw_layer+0x40>

    lv_draw_image_dsc_t new_draw_dsc = *draw_dsc;
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	f107 0314 	add.w	r3, r7, #20
 800f9f2:	4611      	mov	r1, r2
 800f9f4:	2268      	movs	r2, #104	@ 0x68
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f00e fc48 	bl	801e28c <memcpy>
    new_draw_dsc.src = layer_to_draw->draw_buf;
 800f9fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	633b      	str	r3, [r7, #48]	@ 0x30
    lv_draw_sw_image(draw_unit, &new_draw_dsc, coords);
 800fa02:	f107 0314 	add.w	r3, r7, #20
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f000 f806 	bl	800fa1c <lv_draw_sw_image>
 800fa10:	e000      	b.n	800fa14 <lv_draw_sw_layer+0x42>
    if(layer_to_draw->draw_buf == NULL) return;
 800fa12:	bf00      	nop
    lv_draw_label_dsc_init(&label_dsc);
    label_dsc.color = lv_color_white();
    label_dsc.text = buf;
    lv_draw_sw_label(draw_unit, &label_dsc, &txt_area);
#endif
}
 800fa14:	3780      	adds	r7, #128	@ 0x80
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
	...

0800fa1c <lv_draw_sw_image>:

void lv_draw_sw_image(lv_draw_unit_t * draw_unit, const lv_draw_image_dsc_t * draw_dsc,
                      const lv_area_t * coords)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
    if(!draw_dsc->tile) {
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800fa2e:	f003 0320 	and.w	r3, r3, #32
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d106      	bne.n	800fa46 <lv_draw_sw_image+0x2a>
        _lv_draw_image_normal_helper(draw_unit, draw_dsc, coords, img_draw_core);
 800fa38:	4b08      	ldr	r3, [pc, #32]	@ (800fa5c <lv_draw_sw_image+0x40>)
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	f7f6 fe29 	bl	8006696 <_lv_draw_image_normal_helper>
    }
    else {
        _lv_draw_image_tiled_helper(draw_unit, draw_dsc, coords, img_draw_core);
    }
}
 800fa44:	e005      	b.n	800fa52 <lv_draw_sw_image+0x36>
        _lv_draw_image_tiled_helper(draw_unit, draw_dsc, coords, img_draw_core);
 800fa46:	4b05      	ldr	r3, [pc, #20]	@ (800fa5c <lv_draw_sw_image+0x40>)
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	68b9      	ldr	r1, [r7, #8]
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7f6 feab 	bl	80067a8 <_lv_draw_image_tiled_helper>
}
 800fa52:	bf00      	nop
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	0800fa61 	.word	0x0800fa61

0800fa60 <img_draw_core>:
 **********************/

static void img_draw_core(lv_draw_unit_t * draw_unit, const lv_draw_image_dsc_t * draw_dsc,
                          const lv_image_decoder_dsc_t * decoder_dsc, lv_draw_image_sup_t * sup,
                          const lv_area_t * img_coords, const lv_area_t * clipped_img_area)
{
 800fa60:	b590      	push	{r4, r7, lr}
 800fa62:	b0d1      	sub	sp, #324	@ 0x144
 800fa64:	af06      	add	r7, sp, #24
 800fa66:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 800fa6a:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800fa6e:	6020      	str	r0, [r4, #0]
 800fa70:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 800fa74:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 800fa78:	6001      	str	r1, [r0, #0]
 800fa7a:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800fa7e:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 800fa82:	600a      	str	r2, [r1, #0]
 800fa84:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800fa88:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800fa8c:	6013      	str	r3, [r2, #0]
    bool transformed = draw_dsc->rotation != 0 || draw_dsc->scale_x != LV_SCALE_NONE ||
 800fa8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fa92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                       draw_dsc->scale_y != LV_SCALE_NONE ? true : false;
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d111      	bne.n	800fac2 <img_draw_core+0x62>
    bool transformed = draw_dsc->rotation != 0 || draw_dsc->scale_x != LV_SCALE_NONE ||
 800fa9e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800faa2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faae:	d108      	bne.n	800fac2 <img_draw_core+0x62>
                       draw_dsc->scale_y != LV_SCALE_NONE ? true : false;
 800fab0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fab4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fabc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fac0:	d001      	beq.n	800fac6 <img_draw_core+0x66>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e000      	b.n	800fac8 <img_draw_core+0x68>
 800fac6:	2300      	movs	r3, #0
    bool transformed = draw_dsc->rotation != 0 || draw_dsc->scale_x != LV_SCALE_NONE ||
 800fac8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800facc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

    bool masked = draw_dsc->bitmap_mask_src != NULL;
 800fad8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fadc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bf14      	ite	ne
 800fae8:	2301      	movne	r3, #1
 800faea:	2300      	moveq	r3, #0
 800faec:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

    lv_draw_sw_blend_dsc_t blend_dsc;
    const lv_draw_buf_t * decoded = decoder_dsc->decoded;
 800faf0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800faf4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	69db      	ldr	r3, [r3, #28]
 800fafc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    const uint8_t * src_buf = decoded->data;
 800fb00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fb04:	691b      	ldr	r3, [r3, #16]
 800fb06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    const lv_image_header_t * header = &decoded->header;
 800fb0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fb0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    uint32_t img_stride = decoded->header.stride;
 800fb12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fb16:	891b      	ldrh	r3, [r3, #8]
 800fb18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    lv_color_format_t cf = decoded->header.cf;
 800fb1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800fb20:	785b      	ldrb	r3, [r3, #1]
 800fb22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb

    lv_memzero(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800fb26:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb2a:	212c      	movs	r1, #44	@ 0x2c
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7ff ff42 	bl	800f9b6 <lv_memzero>
    blend_dsc.opa = draw_dsc->opa;
 800fb32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fb36:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800fb40:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 800fb44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fb48:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800fb52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
    blend_dsc.src_stride = img_stride;
 800fb5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb60:	673b      	str	r3, [r7, #112]	@ 0x70

    if(!transformed && !masked && cf == LV_COLOR_FORMAT_A8) {
 800fb62:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800fb66:	f083 0301 	eor.w	r3, r3, #1
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d04a      	beq.n	800fc06 <img_draw_core+0x1a6>
 800fb70:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800fb74:	f083 0301 	eor.w	r3, r3, #1
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d043      	beq.n	800fc06 <img_draw_core+0x1a6>
 800fb7e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fb82:	2b0e      	cmp	r3, #14
 800fb84:	d13f      	bne.n	800fc06 <img_draw_core+0x1a6>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, img_coords, draw_unit->clip_area)) return;
 800fb86:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fb8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	689a      	ldr	r2, [r3, #8]
 800fb92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800fb96:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f00a fdc2 	bl	801a724 <_lv_area_intersect>
 800fba0:	4603      	mov	r3, r0
 800fba2:	f083 0301 	eor.w	r3, r3, #1
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f040 8558 	bne.w	801065e <img_draw_core+0xbfe>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800fbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        blend_dsc.mask_area = img_coords;
 800fbb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fbba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        blend_dsc.mask_stride = img_stride;
 800fbbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        blend_dsc.src_buf = NULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        blend_dsc.color = draw_dsc->recolor;
 800fbca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fbce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	f107 037d 	add.w	r3, r7, #125	@ 0x7d
 800fbd8:	3248      	adds	r2, #72	@ 0x48
 800fbda:	8811      	ldrh	r1, [r2, #0]
 800fbdc:	7892      	ldrb	r2, [r2, #2]
 800fbde:	8019      	strh	r1, [r3, #0]
 800fbe0:	709a      	strb	r2, [r3, #2]
        blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800fbe2:	2302      	movs	r3, #2
 800fbe4:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

        blend_dsc.blend_area = img_coords;
 800fbe8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fbec:	66bb      	str	r3, [r7, #104]	@ 0x68
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800fbee:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800fbf2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fbf6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	6818      	ldr	r0, [r3, #0]
 800fbfe:	f7f8 f893 	bl	8007d28 <lv_draw_sw_blend>
    if(!transformed && !masked && cf == LV_COLOR_FORMAT_A8) {
 800fc02:	f000 bd2c 	b.w	801065e <img_draw_core+0xbfe>
    }
    else if(!transformed && !masked && cf == LV_COLOR_FORMAT_RGB565A8 && draw_dsc->recolor_opa <= LV_OPA_MIN) {
 800fc06:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800fc0a:	f083 0301 	eor.w	r3, r3, #1
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d05b      	beq.n	800fccc <img_draw_core+0x26c>
 800fc14:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800fc18:	f083 0301 	eor.w	r3, r3, #1
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d054      	beq.n	800fccc <img_draw_core+0x26c>
 800fc22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fc26:	2b14      	cmp	r3, #20
 800fc28:	d150      	bne.n	800fccc <img_draw_core+0x26c>
 800fc2a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fc2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800fc38:	2b02      	cmp	r3, #2
 800fc3a:	d847      	bhi.n	800fccc <img_draw_core+0x26c>
        int32_t src_h = lv_area_get_height(img_coords);
 800fc3c:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800fc40:	f7ff fe98 	bl	800f974 <lv_area_get_height>
 800fc44:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        int32_t src_w = lv_area_get_width(img_coords);
 800fc48:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800fc4c:	f7ff fe82 	bl	800f954 <lv_area_get_width>
 800fc50:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
        blend_dsc.src_area = img_coords;
 800fc54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fc58:	67bb      	str	r3, [r7, #120]	@ 0x78
        blend_dsc.src_buf = src_buf;
 800fc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800fc60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        blend_dsc.mask_buf += img_stride * src_w / header->w * src_h;
 800fc68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fc6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800fc70:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800fc74:	fb01 f303 	mul.w	r3, r1, r3
 800fc78:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800fc7c:	8889      	ldrh	r1, [r1, #4]
 800fc7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc82:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800fc86:	fb01 f303 	mul.w	r3, r1, r3
 800fc8a:	4413      	add	r3, r2
 800fc8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        /**
         * Note, for RGB565A8, lacking of stride parameter, we always use
         * always half of RGB map stride as alpha map stride. The image should
         * be generated in this way too.
         */
        blend_dsc.mask_stride = img_stride / 2;
 800fc90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc94:	085b      	lsrs	r3, r3, #1
 800fc96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        blend_dsc.blend_area = img_coords;
 800fc9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fc9e:	66bb      	str	r3, [r7, #104]	@ 0x68
        blend_dsc.mask_area = img_coords;
 800fca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800fca8:	2302      	movs	r3, #2
 800fcaa:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        blend_dsc.src_color_format = LV_COLOR_FORMAT_RGB565;
 800fcae:	2312      	movs	r3, #18
 800fcb0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800fcb4:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800fcb8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fcbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	6818      	ldr	r0, [r3, #0]
 800fcc4:	f7f8 f830 	bl	8007d28 <lv_draw_sw_blend>
    else if(!transformed && !masked && cf == LV_COLOR_FORMAT_RGB565A8 && draw_dsc->recolor_opa <= LV_OPA_MIN) {
 800fcc8:	f000 bcc9 	b.w	801065e <img_draw_core+0xbfe>
    }
    /*The simplest case just copy the pixels into the draw_buf. Blending will convert the colors if needed*/
    else if(!transformed && !masked && draw_dsc->recolor_opa <= LV_OPA_MIN) {
 800fccc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800fcd0:	f083 0301 	eor.w	r3, r3, #1
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d028      	beq.n	800fd2c <img_draw_core+0x2cc>
 800fcda:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800fcde:	f083 0301 	eor.w	r3, r3, #1
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d021      	beq.n	800fd2c <img_draw_core+0x2cc>
 800fce8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fcec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	d818      	bhi.n	800fd2c <img_draw_core+0x2cc>
        blend_dsc.src_area = img_coords;
 800fcfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fcfe:	67bb      	str	r3, [r7, #120]	@ 0x78
        blend_dsc.src_buf = src_buf;
 800fd00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd04:	66fb      	str	r3, [r7, #108]	@ 0x6c
        blend_dsc.blend_area = img_coords;
 800fd06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fd0a:	66bb      	str	r3, [r7, #104]	@ 0x68
        blend_dsc.src_color_format = cf;
 800fd0c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fd10:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800fd14:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800fd18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fd1c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fd20:	4611      	mov	r1, r2
 800fd22:	6818      	ldr	r0, [r3, #0]
 800fd24:	f7f8 f800 	bl	8007d28 <lv_draw_sw_blend>
 800fd28:	f000 bc99 	b.w	801065e <img_draw_core+0xbfe>
    }
    /*Handle masked RGB565, RGB888, XRGB888, or ARGB8888 images*/
    else if(!transformed && masked && draw_dsc->recolor_opa <= LV_OPA_MIN) {
 800fd2c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800fd30:	f083 0301 	eor.w	r3, r3, #1
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d077      	beq.n	800fe2a <img_draw_core+0x3ca>
 800fd3a:	f897 30ee 	ldrb.w	r3, [r7, #238]	@ 0xee
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d073      	beq.n	800fe2a <img_draw_core+0x3ca>
 800fd42:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fd46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800fd50:	2b02      	cmp	r3, #2
 800fd52:	d86a      	bhi.n	800fe2a <img_draw_core+0x3ca>
        blend_dsc.src_area = img_coords;
 800fd54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fd58:	67bb      	str	r3, [r7, #120]	@ 0x78
        blend_dsc.src_buf = src_buf;
 800fd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        blend_dsc.blend_area = img_coords;
 800fd60:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fd64:	66bb      	str	r3, [r7, #104]	@ 0x68
        blend_dsc.src_color_format = cf;
 800fd66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fd6a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        blend_dsc.mask_buf = draw_dsc->bitmap_mask_src->data;
 800fd6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fd72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        blend_dsc.mask_stride = draw_dsc->bitmap_mask_src->header.stride;
 800fd80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fd84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd8c:	891b      	ldrh	r3, [r3, #8]
 800fd8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        const lv_area_t * original_area;
        if(lv_area_get_width(&draw_dsc->original_area) < 0) original_area = img_coords;
 800fd92:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fd96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	3354      	adds	r3, #84	@ 0x54
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7ff fdd8 	bl	800f954 <lv_area_get_width>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	da04      	bge.n	800fdb4 <img_draw_core+0x354>
 800fdaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fdae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800fdb2:	e007      	b.n	800fdc4 <img_draw_core+0x364>
        else original_area = &draw_dsc->original_area;
 800fdb4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fdb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3354      	adds	r3, #84	@ 0x54
 800fdc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

        lv_area_t a = {0, 0, draw_dsc->bitmap_mask_src->header.w - 1, draw_dsc->bitmap_mask_src->header.h - 1};
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fdc8:	2300      	movs	r3, #0
 800fdca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fdcc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fdd0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdd8:	889b      	ldrh	r3, [r3, #4]
 800fdda:	3b01      	subs	r3, #1
 800fddc:	653b      	str	r3, [r7, #80]	@ 0x50
 800fdde:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fde2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdea:	88db      	ldrh	r3, [r3, #6]
 800fdec:	3b01      	subs	r3, #1
 800fdee:	657b      	str	r3, [r7, #84]	@ 0x54
        lv_area_align(original_area, &a, LV_ALIGN_CENTER, 0, 0);
 800fdf0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	2209      	movs	r2, #9
 800fdfc:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 800fe00:	f00a fec6 	bl	801ab90 <lv_area_align>
        blend_dsc.mask_area = &a;
 800fe04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fe08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 800fe12:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800fe16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800fe1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800fe1e:	4611      	mov	r1, r2
 800fe20:	6818      	ldr	r0, [r3, #0]
 800fe22:	f7f7 ff81 	bl	8007d28 <lv_draw_sw_blend>
    else if(!transformed && masked && draw_dsc->recolor_opa <= LV_OPA_MIN) {
 800fe26:	f000 bc1a 	b.w	801065e <img_draw_core+0xbfe>
                                                  clipped_img_area, /* blend area */
                                                  draw_unit,        /* target buffer, buffer width, buffer height, buffer stride */
                                                  draw_dsc)) {      /* opa, recolour_opa and colour */
        /*In the other cases every pixel need to be checked one-by-one*/

        lv_area_t blend_area = *clipped_img_area;
 800fe2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800fe2e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800fe32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        blend_dsc.blend_area = &blend_area;
 800fe38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fe3c:	66bb      	str	r3, [r7, #104]	@ 0x68

        int32_t src_w = lv_area_get_width(img_coords);
 800fe3e:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800fe42:	f7ff fd87 	bl	800f954 <lv_area_get_width>
 800fe46:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        int32_t src_h = lv_area_get_height(img_coords);
 800fe4a:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 800fe4e:	f7ff fd91 	bl	800f974 <lv_area_get_height>
 800fe52:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
        int32_t blend_w = lv_area_get_width(&blend_area);
 800fe56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fd7a 	bl	800f954 <lv_area_get_width>
 800fe60:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        int32_t blend_h = lv_area_get_height(&blend_area);
 800fe64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7ff fd83 	bl	800f974 <lv_area_get_height>
 800fe6e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

        lv_color_format_t cf_final = cf;
 800fe72:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fe76:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
        if(transformed) {
 800fe7a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d012      	beq.n	800fea8 <img_draw_core+0x448>
            if(cf == LV_COLOR_FORMAT_RGB888 || cf == LV_COLOR_FORMAT_XRGB8888) cf_final = LV_COLOR_FORMAT_ARGB8888;
 800fe82:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fe86:	2b0f      	cmp	r3, #15
 800fe88:	d003      	beq.n	800fe92 <img_draw_core+0x432>
 800fe8a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fe8e:	2b11      	cmp	r3, #17
 800fe90:	d103      	bne.n	800fe9a <img_draw_core+0x43a>
 800fe92:	2310      	movs	r3, #16
 800fe94:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
 800fe98:	e006      	b.n	800fea8 <img_draw_core+0x448>
            else if(cf == LV_COLOR_FORMAT_RGB565) cf_final = LV_COLOR_FORMAT_RGB565A8;
 800fe9a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800fe9e:	2b12      	cmp	r3, #18
 800fea0:	d102      	bne.n	800fea8 <img_draw_core+0x448>
 800fea2:	2314      	movs	r3, #20
 800fea4:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
        }

        uint8_t * tmp_buf;
        uint32_t px_size = lv_color_format_get_size(cf_final);
 800fea8:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fd71 	bl	800f994 <lv_color_format_get_size>
 800feb2:	4603      	mov	r3, r0
 800feb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        int32_t buf_h;
        if(cf_final == LV_COLOR_FORMAT_RGB565A8) {
 800feb8:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800febc:	2b14      	cmp	r3, #20
 800febe:	d138      	bne.n	800ff32 <img_draw_core+0x4d2>
            uint32_t buf_stride = blend_w * 3;
 800fec0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fec4:	4613      	mov	r3, r2
 800fec6:	005b      	lsls	r3, r3, #1
 800fec8:	4413      	add	r3, r2
 800feca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            buf_h = MAX_BUF_SIZE / buf_stride;
 800fece:	f7f5 fb09 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 800fed2:	4603      	mov	r3, r0
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f5 fb2b 	bl	8005530 <lv_display_get_horizontal_resolution>
 800feda:	4604      	mov	r4, r0
 800fedc:	f7f5 fb02 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 800fee0:	4603      	mov	r3, r0
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f5 fb7d 	bl	80055e2 <lv_display_get_color_format>
 800fee8:	4603      	mov	r3, r0
 800feea:	4618      	mov	r0, r3
 800feec:	f7ff fd52 	bl	800f994 <lv_color_format_get_size>
 800fef0:	4603      	mov	r3, r0
 800fef2:	fb04 f303 	mul.w	r3, r4, r3
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	461a      	mov	r2, r3
 800fefa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fefe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            if(buf_h > blend_h) buf_h = blend_h;
 800ff06:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ff0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	dd03      	ble.n	800ff1a <img_draw_core+0x4ba>
 800ff12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ff16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            tmp_buf = lv_malloc(buf_stride * buf_h);
 800ff1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ff1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff22:	fb02 f303 	mul.w	r3, r2, r3
 800ff26:	4618      	mov	r0, r3
 800ff28:	f00e f8b6 	bl	801e098 <lv_malloc>
 800ff2c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff30:	e03d      	b.n	800ffae <img_draw_core+0x54e>
        }
        else {
            uint32_t buf_stride = blend_w * lv_color_format_get_size(cf_final);
 800ff32:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff fd2c 	bl	800f994 <lv_color_format_get_size>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	461a      	mov	r2, r3
 800ff40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ff44:	fb02 f303 	mul.w	r3, r2, r3
 800ff48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            buf_h = MAX_BUF_SIZE / buf_stride;
 800ff4c:	f7f5 faca 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 800ff50:	4603      	mov	r3, r0
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7f5 faec 	bl	8005530 <lv_display_get_horizontal_resolution>
 800ff58:	4604      	mov	r4, r0
 800ff5a:	f7f5 fac3 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7f5 fb3e 	bl	80055e2 <lv_display_get_color_format>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7ff fd13 	bl	800f994 <lv_color_format_get_size>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	fb04 f303 	mul.w	r3, r4, r3
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	461a      	mov	r2, r3
 800ff78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ff7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            if(buf_h > blend_h) buf_h = blend_h;
 800ff84:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800ff88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	dd03      	ble.n	800ff98 <img_draw_core+0x538>
 800ff90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ff94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            tmp_buf = lv_malloc(buf_stride * buf_h);
 800ff98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ff9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ffa0:	fb02 f303 	mul.w	r3, r2, r3
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f00e f877 	bl	801e098 <lv_malloc>
 800ffaa:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
        }
        LV_ASSERT_MALLOC(tmp_buf);
 800ffae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <img_draw_core+0x55a>
 800ffb6:	bf00      	nop
 800ffb8:	e7fd      	b.n	800ffb6 <img_draw_core+0x556>

        blend_dsc.src_buf = tmp_buf;
 800ffba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
        blend_dsc.src_color_format = cf_final;
 800ffc0:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800ffc4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
        int32_t y_last = blend_area.y2;
 800ffc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800ffce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ffd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ffd4:	4413      	add	r3, r2
 800ffd6:	3b01      	subs	r3, #1
 800ffd8:	647b      	str	r3, [r7, #68]	@ 0x44

        blend_dsc.src_area = &blend_area;
 800ffda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ffde:	67bb      	str	r3, [r7, #120]	@ 0x78
        if(cf_final == LV_COLOR_FORMAT_RGB565A8) {
 800ffe0:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800ffe4:	2b14      	cmp	r3, #20
 800ffe6:	d11f      	bne.n	8010028 <img_draw_core+0x5c8>
            /*RGB565A8 images will blended as RGB565 + mask
             *Therefore the stride can be different. */
            blend_dsc.src_stride = blend_w * 2;
 800ffe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ffec:	005b      	lsls	r3, r3, #1
 800ffee:	673b      	str	r3, [r7, #112]	@ 0x70
            blend_dsc.mask_buf =  tmp_buf + blend_w * 2 * buf_h;
 800fff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800fff4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800fff8:	fb02 f303 	mul.w	r3, r2, r3
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	461a      	mov	r2, r3
 8010000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010004:	4413      	add	r3, r2
 8010006:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            blend_dsc.mask_stride = blend_w;
 801000a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801000e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            blend_dsc.mask_area = &blend_area;
 8010012:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010016:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 801001a:	2302      	movs	r3, #2
 801001c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            blend_dsc.src_color_format = LV_COLOR_FORMAT_RGB565;
 8010020:	2312      	movs	r3, #18
 8010022:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8010026:	e310      	b.n	801064a <img_draw_core+0xbea>
        }
        else if(cf_final == LV_COLOR_FORMAT_A8) {
 8010028:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 801002c:	2b0e      	cmp	r3, #14
 801002e:	d11c      	bne.n	801006a <img_draw_core+0x60a>
            blend_dsc.mask_buf = blend_dsc.src_buf;
 8010030:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            blend_dsc.mask_stride = blend_w;
 8010036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801003a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            blend_dsc.mask_area = &blend_area;
 801003e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 8010046:	2302      	movs	r3, #2
 8010048:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            blend_dsc.color = draw_dsc->recolor;
 801004c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010050:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	f107 037d 	add.w	r3, r7, #125	@ 0x7d
 801005a:	3248      	adds	r2, #72	@ 0x48
 801005c:	8811      	ldrh	r1, [r2, #0]
 801005e:	7892      	ldrb	r2, [r2, #2]
 8010060:	8019      	strh	r1, [r3, #0]
 8010062:	709a      	strb	r2, [r3, #2]
            blend_dsc.src_buf = NULL;
 8010064:	2300      	movs	r3, #0
 8010066:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010068:	e2ef      	b.n	801064a <img_draw_core+0xbea>
        }
        else {
            blend_dsc.src_stride = blend_w * lv_color_format_get_size(cf_final);
 801006a:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff fc90 	bl	800f994 <lv_color_format_get_size>
 8010074:	4603      	mov	r3, r0
 8010076:	461a      	mov	r2, r3
 8010078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801007c:	fb02 f303 	mul.w	r3, r2, r3
 8010080:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        while(blend_area.y1 <= y_last) {
 8010082:	e2e2      	b.n	801064a <img_draw_core+0xbea>
            /*Apply transformations if any or separate the channels*/
            lv_area_t relative_area;
            lv_area_copy(&relative_area, &blend_area);
 8010084:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8010088:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801008c:	4611      	mov	r1, r2
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff fc45 	bl	800f91e <lv_area_copy>
            lv_area_move(&relative_area, -img_coords->x1, -img_coords->y1);
 8010094:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4259      	negs	r1, r3
 801009c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	425a      	negs	r2, r3
 80100a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80100a8:	4618      	mov	r0, r3
 80100aa:	f00a fb17 	bl	801a6dc <lv_area_move>
            if(transformed) {
 80100ae:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d025      	beq.n	8010102 <img_draw_core+0x6a2>
                lv_draw_sw_transform(draw_unit, &relative_area, src_buf, src_w, src_h, img_stride,
 80100b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100ba:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80100be:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80100c2:	f5a2 708e 	sub.w	r0, r2, #284	@ 0x11c
 80100c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80100ca:	9205      	str	r2, [sp, #20]
 80100cc:	f897 20db 	ldrb.w	r2, [r7, #219]	@ 0xdb
 80100d0:	9204      	str	r2, [sp, #16]
 80100d2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80100d6:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80100da:	6812      	ldr	r2, [r2, #0]
 80100dc:	9203      	str	r2, [sp, #12]
 80100de:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80100e2:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 80100e6:	6812      	ldr	r2, [r2, #0]
 80100e8:	9202      	str	r2, [sp, #8]
 80100ea:	9301      	str	r3, [sp, #4]
 80100ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80100f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80100fa:	6800      	ldr	r0, [r0, #0]
 80100fc:	f003 fc5c 	bl	80139b8 <lv_draw_sw_transform>
 8010100:	e0e8      	b.n	80102d4 <img_draw_core+0x874>
                                     draw_dsc, sup, cf, tmp_buf);
            }
            else if(draw_dsc->recolor_opa >= LV_OPA_MIN) {
 8010102:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010106:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8010110:	2b01      	cmp	r3, #1
 8010112:	f240 80df 	bls.w	80102d4 <img_draw_core+0x874>
                int32_t h = lv_area_get_height(&relative_area);
 8010116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff fc2a 	bl	800f974 <lv_area_get_height>
 8010120:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                if(cf_final == LV_COLOR_FORMAT_RGB565A8) {
 8010124:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8010128:	2b14      	cmp	r3, #20
 801012a:	f040 8083 	bne.w	8010234 <img_draw_core+0x7d4>
                    uint32_t stride_px = img_stride / 2;
 801012e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010132:	085b      	lsrs	r3, r3, #1
 8010134:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    const uint8_t * rgb_src_buf = src_buf + stride_px * 2 * relative_area.y1 + relative_area.x1 * 2;
 8010138:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801013c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	461a      	mov	r2, r3
 8010144:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010148:	fb02 f303 	mul.w	r3, r2, r3
 801014c:	005b      	lsls	r3, r3, #1
 801014e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8010152:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8010156:	6812      	ldr	r2, [r2, #0]
 8010158:	0052      	lsls	r2, r2, #1
 801015a:	4413      	add	r3, r2
 801015c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010160:	4413      	add	r3, r2
 8010162:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                    const uint8_t * a_src_buf = src_buf + stride_px * 2 * src_h + stride_px * relative_area.y1 +
 8010166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801016a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801016e:	fb02 f303 	mul.w	r3, r2, r3
 8010172:	005a      	lsls	r2, r3, #1
 8010174:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010178:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	4619      	mov	r1, r3
 8010180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010184:	fb01 f303 	mul.w	r3, r1, r3
 8010188:	4413      	add	r3, r2
                                                relative_area.x1;
 801018a:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801018e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8010192:	6812      	ldr	r2, [r2, #0]
                    const uint8_t * a_src_buf = src_buf + stride_px * 2 * src_h + stride_px * relative_area.y1 +
 8010194:	4413      	add	r3, r2
 8010196:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801019a:	4413      	add	r3, r2
 801019c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                    uint8_t * rgb_dest_buf = tmp_buf;
 80101a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80101a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                    uint8_t * a_dest_buf = (uint8_t *)blend_dsc.mask_buf;
 80101a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80101ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                    int32_t i;
                    for(i = 0; i < h; i++) {
 80101b0:	2300      	movs	r3, #0
 80101b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80101b6:	e036      	b.n	8010226 <img_draw_core+0x7c6>
                        lv_memcpy(rgb_dest_buf, rgb_src_buf, blend_w * 2);
 80101b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80101bc:	005b      	lsls	r3, r3, #1
 80101be:	461a      	mov	r2, r3
 80101c0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80101c4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80101c8:	f00c fdac 	bl	801cd24 <lv_memcpy>
                        lv_memcpy(a_dest_buf, a_src_buf, blend_w);
 80101cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80101d0:	461a      	mov	r2, r3
 80101d2:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80101d6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80101da:	f00c fda3 	bl	801cd24 <lv_memcpy>
                        rgb_src_buf += stride_px * 2;
 80101de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80101e8:	4413      	add	r3, r2
 80101ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                        a_src_buf += stride_px;
 80101ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80101f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80101f6:	4413      	add	r3, r2
 80101f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                        rgb_dest_buf +=  blend_w * 2;
 80101fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	461a      	mov	r2, r3
 8010204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8010208:	4413      	add	r3, r2
 801020a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                        a_dest_buf += blend_w;
 801020e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010212:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8010216:	4413      	add	r3, r2
 8010218:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                    for(i = 0; i < h; i++) {
 801021c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010220:	3301      	adds	r3, #1
 8010222:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010226:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801022a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801022e:	429a      	cmp	r2, r3
 8010230:	dbc2      	blt.n	80101b8 <img_draw_core+0x758>
 8010232:	e04f      	b.n	80102d4 <img_draw_core+0x874>
                    }
                }
                else if(cf_final != LV_COLOR_FORMAT_A8) {
 8010234:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8010238:	2b0e      	cmp	r3, #14
 801023a:	d04b      	beq.n	80102d4 <img_draw_core+0x874>
                    const uint8_t * src_buf_tmp = src_buf + img_stride * relative_area.y1 + relative_area.x1 * px_size;
 801023c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010240:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	461a      	mov	r2, r3
 8010248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801024c:	fb03 f202 	mul.w	r2, r3, r2
 8010250:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010254:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4619      	mov	r1, r3
 801025c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010260:	fb01 f303 	mul.w	r3, r1, r3
 8010264:	4413      	add	r3, r2
 8010266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801026a:	4413      	add	r3, r2
 801026c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                    uint8_t * dest_buf_tmp = tmp_buf;
 8010270:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010274:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                    int32_t i;
                    for(i = 0; i < h; i++) {
 8010278:	2300      	movs	r3, #0
 801027a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801027e:	e023      	b.n	80102c8 <img_draw_core+0x868>
                        lv_memcpy(dest_buf_tmp, src_buf_tmp, blend_w * px_size);
 8010280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010284:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8010288:	fb02 f303 	mul.w	r3, r2, r3
 801028c:	461a      	mov	r2, r3
 801028e:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8010292:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8010296:	f00c fd45 	bl	801cd24 <lv_memcpy>
                        dest_buf_tmp += blend_w * px_size;
 801029a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801029e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80102a2:	fb02 f303 	mul.w	r3, r2, r3
 80102a6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80102aa:	4413      	add	r3, r2
 80102ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                        src_buf_tmp += img_stride;
 80102b0:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80102b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102b8:	4413      	add	r3, r2
 80102ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                    for(i = 0; i < h; i++) {
 80102be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80102c2:	3301      	adds	r3, #1
 80102c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80102c8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80102cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80102d0:	429a      	cmp	r2, r3
 80102d2:	dbd5      	blt.n	8010280 <img_draw_core+0x820>
                    }
                }
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 80102d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80102d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	f240 8181 	bls.w	80105ea <img_draw_core+0xb8a>
                lv_color_t color = draw_dsc->recolor;
 80102e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80102ec:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 80102f0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80102f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	460b      	mov	r3, r1
 80102fc:	3248      	adds	r2, #72	@ 0x48
 80102fe:	6812      	ldr	r2, [r2, #0]
 8010300:	4611      	mov	r1, r2
 8010302:	8019      	strh	r1, [r3, #0]
 8010304:	3302      	adds	r3, #2
 8010306:	0c12      	lsrs	r2, r2, #16
 8010308:	701a      	strb	r2, [r3, #0]
                lv_opa_t mix = draw_dsc->recolor_opa;
 801030a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801030e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8010318:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                lv_opa_t mix_inv = 255 - mix;
 801031c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8010320:	43db      	mvns	r3, r3
 8010322:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
                if(cf_final == LV_COLOR_FORMAT_RGB565A8 || cf_final == LV_COLOR_FORMAT_RGB565) {
 8010326:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 801032a:	2b14      	cmp	r3, #20
 801032c:	d004      	beq.n	8010338 <img_draw_core+0x8d8>
 801032e:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8010332:	2b12      	cmp	r3, #18
 8010334:	f040 80af 	bne.w	8010496 <img_draw_core+0xa36>
                    if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_RECOLOR(tmp_buf, blend_area, color, mix)) {
                        uint16_t c_mult[3];
                        c_mult[0] = (color.blue >> 3) * mix;
 8010338:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801033c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	08db      	lsrs	r3, r3, #3
 8010344:	b2db      	uxtb	r3, r3
 8010346:	461a      	mov	r2, r3
 8010348:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 801034c:	b29b      	uxth	r3, r3
 801034e:	fb12 f303 	smulbb	r3, r2, r3
 8010352:	b29a      	uxth	r2, r3
 8010354:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010358:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801035c:	801a      	strh	r2, [r3, #0]
                        c_mult[1] = (color.green >> 2) * mix;
 801035e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010366:	785b      	ldrb	r3, [r3, #1]
 8010368:	089b      	lsrs	r3, r3, #2
 801036a:	b2db      	uxtb	r3, r3
 801036c:	461a      	mov	r2, r3
 801036e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8010372:	b29b      	uxth	r3, r3
 8010374:	fb12 f303 	smulbb	r3, r2, r3
 8010378:	b29a      	uxth	r2, r3
 801037a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801037e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010382:	805a      	strh	r2, [r3, #2]
                        c_mult[2] = (color.red >> 3) * mix;
 8010384:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801038c:	789b      	ldrb	r3, [r3, #2]
 801038e:	08db      	lsrs	r3, r3, #3
 8010390:	b2db      	uxtb	r3, r3
 8010392:	461a      	mov	r2, r3
 8010394:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8010398:	b29b      	uxth	r3, r3
 801039a:	fb12 f303 	smulbb	r3, r2, r3
 801039e:	b29a      	uxth	r2, r3
 80103a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80103a8:	809a      	strh	r2, [r3, #4]
                        uint16_t * buf16 = (uint16_t *)tmp_buf;
 80103aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80103ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                        int32_t i;
                        int32_t size = lv_area_get_size(&blend_area);
 80103b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80103b6:	4618      	mov	r0, r3
 80103b8:	f00a f951 	bl	801a65e <lv_area_get_size>
 80103bc:	4603      	mov	r3, r0
 80103be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                        for(i = 0; i < size; i++) {
 80103c2:	2300      	movs	r3, #0
 80103c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80103c8:	e05e      	b.n	8010488 <img_draw_core+0xa28>
                            buf16[i] = (((c_mult[2] + ((buf16[i] >> 11) & 0x1F) * mix_inv) << 3) & 0xF800) +
 80103ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80103d2:	889b      	ldrh	r3, [r3, #4]
 80103d4:	4619      	mov	r1, r3
 80103d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80103e0:	4413      	add	r3, r2
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	0adb      	lsrs	r3, r3, #11
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	f003 031f 	and.w	r3, r3, #31
 80103ec:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 80103f0:	fb02 f303 	mul.w	r3, r2, r3
 80103f4:	440b      	add	r3, r1
 80103f6:	00db      	lsls	r3, r3, #3
 80103f8:	b21b      	sxth	r3, r3
 80103fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80103fe:	f023 0307 	bic.w	r3, r3, #7
 8010402:	b21a      	sxth	r2, r3
                                       (((c_mult[1] + ((buf16[i] >> 5) & 0x3F) * mix_inv) >> 3) & 0x07E0) +
 8010404:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010408:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801040c:	885b      	ldrh	r3, [r3, #2]
 801040e:	4618      	mov	r0, r3
 8010410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010414:	005b      	lsls	r3, r3, #1
 8010416:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801041a:	440b      	add	r3, r1
 801041c:	881b      	ldrh	r3, [r3, #0]
 801041e:	095b      	lsrs	r3, r3, #5
 8010420:	b29b      	uxth	r3, r3
 8010422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010426:	f897 10a6 	ldrb.w	r1, [r7, #166]	@ 0xa6
 801042a:	fb01 f303 	mul.w	r3, r1, r3
 801042e:	4403      	add	r3, r0
 8010430:	10db      	asrs	r3, r3, #3
 8010432:	b21b      	sxth	r3, r3
 8010434:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010438:	b21b      	sxth	r3, r3
                            buf16[i] = (((c_mult[2] + ((buf16[i] >> 11) & 0x1F) * mix_inv) << 3) & 0xF800) +
 801043a:	4313      	orrs	r3, r2
 801043c:	b21b      	sxth	r3, r3
 801043e:	b299      	uxth	r1, r3
                                       ((c_mult[0] + (buf16[i] & 0x1F) * mix_inv) >> 8);
 8010440:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010448:	881b      	ldrh	r3, [r3, #0]
 801044a:	4618      	mov	r0, r3
 801044c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010450:	005b      	lsls	r3, r3, #1
 8010452:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010456:	4413      	add	r3, r2
 8010458:	881b      	ldrh	r3, [r3, #0]
 801045a:	f003 031f 	and.w	r3, r3, #31
 801045e:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8010462:	fb02 f303 	mul.w	r3, r2, r3
 8010466:	4403      	add	r3, r0
 8010468:	121b      	asrs	r3, r3, #8
                                       (((c_mult[1] + ((buf16[i] >> 5) & 0x3F) * mix_inv) >> 3) & 0x07E0) +
 801046a:	b29a      	uxth	r2, r3
                            buf16[i] = (((c_mult[2] + ((buf16[i] >> 11) & 0x1F) * mix_inv) << 3) & 0xF800) +
 801046c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010470:	005b      	lsls	r3, r3, #1
 8010472:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8010476:	4403      	add	r3, r0
                                       (((c_mult[1] + ((buf16[i] >> 5) & 0x3F) * mix_inv) >> 3) & 0x07E0) +
 8010478:	440a      	add	r2, r1
 801047a:	b292      	uxth	r2, r2
                            buf16[i] = (((c_mult[2] + ((buf16[i] >> 11) & 0x1F) * mix_inv) << 3) & 0xF800) +
 801047c:	801a      	strh	r2, [r3, #0]
                        for(i = 0; i < size; i++) {
 801047e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010482:	3301      	adds	r3, #1
 8010484:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010488:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801048c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010490:	429a      	cmp	r2, r3
 8010492:	db9a      	blt.n	80103ca <img_draw_core+0x96a>
                    if(LV_RESULT_INVALID == LV_DRAW_SW_RGB565_RECOLOR(tmp_buf, blend_area, color, mix)) {
 8010494:	e0a9      	b.n	80105ea <img_draw_core+0xb8a>
                        }
                    }
                }
                else  if(cf_final != LV_COLOR_FORMAT_A8) {
 8010496:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 801049a:	2b0e      	cmp	r3, #14
 801049c:	f000 80a5 	beq.w	80105ea <img_draw_core+0xb8a>
                    if(LV_RESULT_INVALID == LV_DRAW_SW_RGB888_RECOLOR(tmp_buf, blend_area, color, mix, cf_final)) {
                        uint32_t size = lv_area_get_size(&blend_area);
 80104a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80104a4:	4618      	mov	r0, r3
 80104a6:	f00a f8da 	bl	801a65e <lv_area_get_size>
 80104aa:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                        uint32_t i;
                        uint16_t c_mult[3];
                        c_mult[0] = color.blue * mix;
 80104ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	461a      	mov	r2, r3
 80104ba:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80104be:	b29b      	uxth	r3, r3
 80104c0:	fb12 f303 	smulbb	r3, r2, r3
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80104ce:	801a      	strh	r2, [r3, #0]
                        c_mult[1] = color.green * mix;
 80104d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80104d8:	785b      	ldrb	r3, [r3, #1]
 80104da:	461a      	mov	r2, r3
 80104dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	fb12 f303 	smulbb	r3, r2, r3
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80104f0:	805a      	strh	r2, [r3, #2]
                        c_mult[2] = color.red * mix;
 80104f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80104fa:	789b      	ldrb	r3, [r3, #2]
 80104fc:	461a      	mov	r2, r3
 80104fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8010502:	b29b      	uxth	r3, r3
 8010504:	fb12 f303 	smulbb	r3, r2, r3
 8010508:	b29a      	uxth	r2, r3
 801050a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801050e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010512:	809a      	strh	r2, [r3, #4]
                        uint8_t * tmp_buf_2 = tmp_buf;
 8010514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                        for(i = 0; i < size * px_size; i += px_size) {
 801051c:	2300      	movs	r3, #0
 801051e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010522:	e058      	b.n	80105d6 <img_draw_core+0xb76>
                            tmp_buf_2[i + 0] = (c_mult[0] + (tmp_buf_2[i + 0] * mix_inv)) >> 8;
 8010524:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010528:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	4619      	mov	r1, r3
 8010530:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8010534:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010538:	4413      	add	r3, r2
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	461a      	mov	r2, r3
 801053e:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8010542:	fb02 f303 	mul.w	r3, r2, r3
 8010546:	440b      	add	r3, r1
 8010548:	1219      	asrs	r1, r3, #8
 801054a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801054e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010552:	4413      	add	r3, r2
 8010554:	b2ca      	uxtb	r2, r1
 8010556:	701a      	strb	r2, [r3, #0]
                            tmp_buf_2[i + 1] = (c_mult[1] + (tmp_buf_2[i + 1] * mix_inv)) >> 8;
 8010558:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801055c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010560:	885b      	ldrh	r3, [r3, #2]
 8010562:	4619      	mov	r1, r3
 8010564:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010568:	3301      	adds	r3, #1
 801056a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801056e:	4413      	add	r3, r2
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	461a      	mov	r2, r3
 8010574:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8010578:	fb02 f303 	mul.w	r3, r2, r3
 801057c:	440b      	add	r3, r1
 801057e:	1219      	asrs	r1, r3, #8
 8010580:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010584:	3301      	adds	r3, #1
 8010586:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801058a:	4413      	add	r3, r2
 801058c:	b2ca      	uxtb	r2, r1
 801058e:	701a      	strb	r2, [r3, #0]
                            tmp_buf_2[i + 2] = (c_mult[2] + (tmp_buf_2[i + 2] * mix_inv)) >> 8;
 8010590:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010594:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010598:	889b      	ldrh	r3, [r3, #4]
 801059a:	4619      	mov	r1, r3
 801059c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80105a0:	3302      	adds	r3, #2
 80105a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	461a      	mov	r2, r3
 80105ac:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80105b0:	fb02 f303 	mul.w	r3, r2, r3
 80105b4:	440b      	add	r3, r1
 80105b6:	1219      	asrs	r1, r3, #8
 80105b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80105bc:	3302      	adds	r3, #2
 80105be:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80105c2:	4413      	add	r3, r2
 80105c4:	b2ca      	uxtb	r2, r1
 80105c6:	701a      	strb	r2, [r3, #0]
                        for(i = 0; i < size * px_size; i += px_size) {
 80105c8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80105cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80105d0:	4413      	add	r3, r2
 80105d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80105d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80105da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80105de:	fb02 f303 	mul.w	r3, r2, r3
 80105e2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d39c      	bcc.n	8010524 <img_draw_core+0xac4>
                    }
                }
            }

            /*Blend*/
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 80105ea:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80105ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80105f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80105f6:	4611      	mov	r1, r2
 80105f8:	6818      	ldr	r0, [r3, #0]
 80105fa:	f7f7 fb95 	bl	8007d28 <lv_draw_sw_blend>

            /*Go to the next area*/
            blend_area.y1 = blend_area.y2 + 1;
 80105fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010600:	3301      	adds	r3, #1
 8010602:	63fb      	str	r3, [r7, #60]	@ 0x3c
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 8010604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010606:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801060a:	4413      	add	r3, r2
 801060c:	3b01      	subs	r3, #1
 801060e:	647b      	str	r3, [r7, #68]	@ 0x44
            if(blend_area.y2 > y_last) {
 8010610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010616:	429a      	cmp	r2, r3
 8010618:	da17      	bge.n	801064a <img_draw_core+0xbea>
                blend_area.y2 = y_last;
 801061a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801061e:	647b      	str	r3, [r7, #68]	@ 0x44
                if(cf_final == LV_COLOR_FORMAT_RGB565A8) {
 8010620:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8010624:	2b14      	cmp	r3, #20
 8010626:	d110      	bne.n	801064a <img_draw_core+0xbea>
                    blend_dsc.mask_buf =  tmp_buf + blend_w * 2 * lv_area_get_height(&blend_area);
 8010628:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801062c:	4618      	mov	r0, r3
 801062e:	f7ff f9a1 	bl	800f974 <lv_area_get_height>
 8010632:	4602      	mov	r2, r0
 8010634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010638:	fb02 f303 	mul.w	r3, r2, r3
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	461a      	mov	r2, r3
 8010640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010644:	4413      	add	r3, r2
 8010646:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        while(blend_area.y1 <= y_last) {
 801064a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801064c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010650:	429a      	cmp	r2, r3
 8010652:	f6bf ad17 	bge.w	8010084 <img_draw_core+0x624>
                }
            }
        }

        lv_free(tmp_buf);
 8010656:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 801065a:	f00d fd55 	bl	801e108 <lv_free>
    }
}
 801065e:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8010662:	46bd      	mov	sp, r7
 8010664:	bd90      	pop	{r4, r7, pc}

08010666 <lv_area_get_width>:
{
 8010666:	b480      	push	{r7}
 8010668:	b083      	sub	sp, #12
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	689a      	ldr	r2, [r3, #8]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	1ad3      	subs	r3, r2, r3
 8010678:	3301      	adds	r3, #1
}
 801067a:	4618      	mov	r0, r3
 801067c:	370c      	adds	r7, #12
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <lv_memzero>:
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b082      	sub	sp, #8
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8010690:	683a      	ldr	r2, [r7, #0]
 8010692:	2100      	movs	r1, #0
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f00c fd62 	bl	801d15e <lv_memset>
}
 801069a:	bf00      	nop
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
	...

080106a4 <lv_draw_sw_label>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_label(lv_draw_unit_t * draw_unit, const lv_draw_label_dsc_t * dsc, const lv_area_t * coords)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
    if(dsc->opa <= LV_OPA_MIN) return;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80106b6:	2b02      	cmp	r3, #2
 80106b8:	d906      	bls.n	80106c8 <lv_draw_sw_label+0x24>

    LV_PROFILER_BEGIN;
    lv_draw_label_iterate_characters(draw_unit, dsc, coords, draw_letter_cb);
 80106ba:	4b05      	ldr	r3, [pc, #20]	@ (80106d0 <lv_draw_sw_label+0x2c>)
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	68b9      	ldr	r1, [r7, #8]
 80106c0:	68f8      	ldr	r0, [r7, #12]
 80106c2:	f7f6 fb0d 	bl	8006ce0 <lv_draw_label_iterate_characters>
 80106c6:	e000      	b.n	80106ca <lv_draw_sw_label+0x26>
    if(dsc->opa <= LV_OPA_MIN) return;
 80106c8:	bf00      	nop
    LV_PROFILER_END;
}
 80106ca:	3710      	adds	r7, #16
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	080106d5 	.word	0x080106d5

080106d4 <draw_letter_cb>:
 *   STATIC FUNCTIONS
 **********************/

static void LV_ATTRIBUTE_FAST_MEM draw_letter_cb(lv_draw_unit_t * draw_unit, lv_draw_glyph_dsc_t * glyph_draw_dsc,
                                                 lv_draw_fill_dsc_t * fill_draw_dsc, const lv_area_t * fill_area)
{
 80106d4:	b590      	push	{r4, r7, lr}
 80106d6:	b095      	sub	sp, #84	@ 0x54
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	607a      	str	r2, [r7, #4]
 80106e0:	603b      	str	r3, [r7, #0]
    if(glyph_draw_dsc) {
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d07c      	beq.n	80107e2 <draw_letter_cb+0x10e>
        switch(glyph_draw_dsc->format) {
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	791b      	ldrb	r3, [r3, #4]
 80106ec:	2b09      	cmp	r3, #9
 80106ee:	d877      	bhi.n	80107e0 <draw_letter_cb+0x10c>
 80106f0:	a201      	add	r2, pc, #4	@ (adr r2, 80106f8 <draw_letter_cb+0x24>)
 80106f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f6:	bf00      	nop
 80106f8:	08010721 	.word	0x08010721
 80106fc:	0801075d 	.word	0x0801075d
 8010700:	0801075d 	.word	0x0801075d
 8010704:	080107e1 	.word	0x080107e1
 8010708:	0801075d 	.word	0x0801075d
 801070c:	080107e1 	.word	0x080107e1
 8010710:	080107e1 	.word	0x080107e1
 8010714:	080107e1 	.word	0x080107e1
 8010718:	0801075d 	.word	0x0801075d
 801071c:	080107e1 	.word	0x080107e1
            case LV_FONT_GLYPH_FORMAT_NONE: {
#if LV_USE_FONT_PLACEHOLDER
                    /* Draw a placeholder rectangle*/
                    lv_draw_border_dsc_t border_draw_dsc;
                    lv_draw_border_dsc_init(&border_draw_dsc);
 8010720:	f107 0310 	add.w	r3, r7, #16
 8010724:	4618      	mov	r0, r3
 8010726:	f7f7 f8b6 	bl	8007896 <lv_draw_border_dsc_init>
                    border_draw_dsc.opa = glyph_draw_dsc->opa;
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	7ddb      	ldrb	r3, [r3, #23]
 801072e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
                    border_draw_dsc.color = glyph_draw_dsc->color;
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010738:	3214      	adds	r2, #20
 801073a:	6812      	ldr	r2, [r2, #0]
 801073c:	4611      	mov	r1, r2
 801073e:	8019      	strh	r1, [r3, #0]
 8010740:	3302      	adds	r3, #2
 8010742:	0c12      	lsrs	r2, r2, #16
 8010744:	701a      	strb	r2, [r3, #0]
                    border_draw_dsc.width = 1;
 8010746:	2301      	movs	r3, #1
 8010748:	637b      	str	r3, [r7, #52]	@ 0x34
                    lv_draw_sw_border(draw_unit, &border_draw_dsc, glyph_draw_dsc->bg_coords);
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	68da      	ldr	r2, [r3, #12]
 801074e:	f107 0310 	add.w	r3, r7, #16
 8010752:	4619      	mov	r1, r3
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f7fc f964 	bl	800ca22 <lv_draw_sw_border>
#endif
                }
                break;
 801075a:	e042      	b.n	80107e2 <draw_letter_cb+0x10e>
            case LV_FONT_GLYPH_FORMAT_A1:
            case LV_FONT_GLYPH_FORMAT_A2:
            case LV_FONT_GLYPH_FORMAT_A4:
            case LV_FONT_GLYPH_FORMAT_A8: {
                    lv_area_t mask_area = *glyph_draw_dsc->letter_coords;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8010764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    mask_area.x2 = mask_area.x1 + lv_draw_buf_width_to_stride(lv_area_get_width(&mask_area), LV_COLOR_FORMAT_A8) - 1;
 801076a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801076c:	461c      	mov	r4, r3
 801076e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010772:	4618      	mov	r0, r3
 8010774:	f7ff ff77 	bl	8010666 <lv_area_get_width>
 8010778:	4603      	mov	r3, r0
 801077a:	210e      	movs	r1, #14
 801077c:	4618      	mov	r0, r3
 801077e:	f7f5 fa3b 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 8010782:	4603      	mov	r3, r0
 8010784:	4423      	add	r3, r4
 8010786:	3b01      	subs	r3, #1
 8010788:	647b      	str	r3, [r7, #68]	@ 0x44
                    lv_draw_sw_blend_dsc_t blend_dsc;
                    lv_memzero(&blend_dsc, sizeof(blend_dsc));
 801078a:	f107 0310 	add.w	r3, r7, #16
 801078e:	212c      	movs	r1, #44	@ 0x2c
 8010790:	4618      	mov	r0, r3
 8010792:	f7ff ff78 	bl	8010686 <lv_memzero>
                    blend_dsc.color = glyph_draw_dsc->color;
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 801079c:	3214      	adds	r2, #20
 801079e:	8811      	ldrh	r1, [r2, #0]
 80107a0:	7892      	ldrb	r2, [r2, #2]
 80107a2:	8019      	strh	r1, [r3, #0]
 80107a4:	709a      	strb	r2, [r3, #2]
                    blend_dsc.opa = glyph_draw_dsc->opa;
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	7ddb      	ldrb	r3, [r3, #23]
 80107aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    lv_draw_buf_t * draw_buf = glyph_draw_dsc->glyph_data;
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    blend_dsc.mask_buf = draw_buf->data;
 80107b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107b6:	691b      	ldr	r3, [r3, #16]
 80107b8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    blend_dsc.mask_area = &mask_area;
 80107ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80107be:	633b      	str	r3, [r7, #48]	@ 0x30
                    blend_dsc.mask_stride = draw_buf->header.stride;
 80107c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107c2:	891b      	ldrh	r3, [r3, #8]
 80107c4:	637b      	str	r3, [r7, #52]	@ 0x34
                    blend_dsc.blend_area = glyph_draw_dsc->letter_coords;
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	613b      	str	r3, [r7, #16]
                    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 80107cc:	2302      	movs	r3, #2
 80107ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

                    lv_draw_sw_blend(draw_unit, &blend_dsc);
 80107d2:	f107 0310 	add.w	r3, r7, #16
 80107d6:	4619      	mov	r1, r3
 80107d8:	68f8      	ldr	r0, [r7, #12]
 80107da:	f7f7 faa5 	bl	8007d28 <lv_draw_sw_blend>
                }
                break;
 80107de:	e000      	b.n	80107e2 <draw_letter_cb+0x10e>
                    lv_draw_sw_image(draw_unit, &img_dsc, glyph_draw_dsc->letter_coords);
#endif
                }
                break;
            default:
                break;
 80107e0:	bf00      	nop
        }

    }

    if(fill_draw_dsc && fill_area) {
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d007      	beq.n	80107f8 <draw_letter_cb+0x124>
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d004      	beq.n	80107f8 <draw_letter_cb+0x124>
        lv_draw_sw_fill(draw_unit, fill_draw_dsc, fill_area);
 80107ee:	683a      	ldr	r2, [r7, #0]
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7fe fb85 	bl	800ef02 <lv_draw_sw_fill>
    }
}
 80107f8:	bf00      	nop
 80107fa:	3754      	adds	r7, #84	@ 0x54
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd90      	pop	{r4, r7, pc}

08010800 <lv_area_get_width>:
{
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	689a      	ldr	r2, [r3, #8]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	3301      	adds	r3, #1
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <lv_point_from_precise>:

void lv_point_transform(lv_point_t * p, int32_t angle, int32_t scale_x, int32_t scale_y, const lv_point_t * pivot,
                        bool zoom_first);

static inline lv_point_t lv_point_from_precise(const lv_point_precise_t * p)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
    lv_point_t point = {
        (int32_t)p->x, (int32_t)p->y
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	681b      	ldr	r3, [r3, #0]
    lv_point_t point = {
 801082e:	60bb      	str	r3, [r7, #8]
        (int32_t)p->x, (int32_t)p->y
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	685b      	ldr	r3, [r3, #4]
    lv_point_t point = {
 8010834:	60fb      	str	r3, [r7, #12]
    };

    return point;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	461a      	mov	r2, r3
 801083a:	f107 0308 	add.w	r3, r7, #8
 801083e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010842:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	3714      	adds	r7, #20
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr

08010852 <lv_memzero>:
{
 8010852:	b580      	push	{r7, lr}
 8010854:	b082      	sub	sp, #8
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
 801085a:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	2100      	movs	r1, #0
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f00c fc7c 	bl	801d15e <lv_memset>
}
 8010866:	bf00      	nop
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}

0801086e <lv_draw_sw_line>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_line(lv_draw_unit_t * draw_unit, const lv_draw_line_dsc_t * dsc)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b09a      	sub	sp, #104	@ 0x68
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
 8010876:	6039      	str	r1, [r7, #0]
    if(dsc->width == 0) return;
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801087c:	2b00      	cmp	r3, #0
 801087e:	f000 80ff 	beq.w	8010a80 <lv_draw_sw_line+0x212>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010888:	2b02      	cmp	r3, #2
 801088a:	f240 80fb 	bls.w	8010a84 <lv_draw_sw_line+0x216>

    if(dsc->p1.x == dsc->p2.x && dsc->p1.y == dsc->p2.y) return;
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	69da      	ldr	r2, [r3, #28]
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010896:	429a      	cmp	r2, r3
 8010898:	d106      	bne.n	80108a8 <lv_draw_sw_line+0x3a>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	6a1a      	ldr	r2, [r3, #32]
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108a2:	429a      	cmp	r2, r3
 80108a4:	f000 80f0 	beq.w	8010a88 <lv_draw_sw_line+0x21a>

    lv_area_t clip_line;
    clip_line.x1 = (int32_t)LV_MIN(dsc->p1.x, dsc->p2.x) - dsc->width / 2;
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	69db      	ldr	r3, [r3, #28]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	bfa8      	it	ge
 80108b4:	461a      	movge	r2, r3
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108ba:	0fd9      	lsrs	r1, r3, #31
 80108bc:	440b      	add	r3, r1
 80108be:	105b      	asrs	r3, r3, #1
 80108c0:	425b      	negs	r3, r3
 80108c2:	4413      	add	r3, r2
 80108c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    clip_line.x2 = (int32_t)LV_MAX(dsc->p1.x, dsc->p2.x) + dsc->width / 2;
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	bfb8      	it	lt
 80108d2:	461a      	movlt	r2, r3
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108d8:	0fd9      	lsrs	r1, r3, #31
 80108da:	440b      	add	r3, r1
 80108dc:	105b      	asrs	r3, r3, #1
 80108de:	4413      	add	r3, r2
 80108e0:	657b      	str	r3, [r7, #84]	@ 0x54
    clip_line.y1 = (int32_t)LV_MIN(dsc->p1.y, dsc->p2.y) - dsc->width / 2;
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	6a1b      	ldr	r3, [r3, #32]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	bfa8      	it	ge
 80108ee:	461a      	movge	r2, r3
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108f4:	0fd9      	lsrs	r1, r3, #31
 80108f6:	440b      	add	r3, r1
 80108f8:	105b      	asrs	r3, r3, #1
 80108fa:	425b      	negs	r3, r3
 80108fc:	4413      	add	r3, r2
 80108fe:	653b      	str	r3, [r7, #80]	@ 0x50
    clip_line.y2 = (int32_t)LV_MAX(dsc->p1.y, dsc->p2.y) + dsc->width / 2;
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	6a1b      	ldr	r3, [r3, #32]
 8010908:	429a      	cmp	r2, r3
 801090a:	bfb8      	it	lt
 801090c:	461a      	movlt	r2, r3
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010912:	0fd9      	lsrs	r1, r3, #31
 8010914:	440b      	add	r3, r1
 8010916:	105b      	asrs	r3, r3, #1
 8010918:	4413      	add	r3, r2
 801091a:	65bb      	str	r3, [r7, #88]	@ 0x58

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_unit->clip_area);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	689a      	ldr	r2, [r3, #8]
 8010920:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8010924:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010928:	4618      	mov	r0, r3
 801092a:	f009 fefb 	bl	801a724 <_lv_area_intersect>
 801092e:	4603      	mov	r3, r0
 8010930:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if(!is_common) return;
 8010934:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010938:	f083 0301 	eor.w	r3, r3, #1
 801093c:	b2db      	uxtb	r3, r3
 801093e:	2b00      	cmp	r3, #0
 8010940:	f040 80a4 	bne.w	8010a8c <lv_draw_sw_line+0x21e>

    LV_PROFILER_BEGIN;
    if(dsc->p1.y == dsc->p2.y) draw_line_hor(draw_unit, dsc);
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	6a1a      	ldr	r2, [r3, #32]
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801094c:	429a      	cmp	r2, r3
 801094e:	d104      	bne.n	801095a <lv_draw_sw_line+0xec>
 8010950:	6839      	ldr	r1, [r7, #0]
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 f89e 	bl	8010a94 <draw_line_hor>
 8010958:	e00e      	b.n	8010978 <lv_draw_sw_line+0x10a>
    else if(dsc->p1.x == dsc->p2.x) draw_line_ver(draw_unit, dsc);
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	69da      	ldr	r2, [r3, #28]
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010962:	429a      	cmp	r2, r3
 8010964:	d104      	bne.n	8010970 <lv_draw_sw_line+0x102>
 8010966:	6839      	ldr	r1, [r7, #0]
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f000 f98d 	bl	8010c88 <draw_line_ver>
 801096e:	e003      	b.n	8010978 <lv_draw_sw_line+0x10a>
    else draw_line_skew(draw_unit, dsc);
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 fa62 	bl	8010e3c <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801097e:	f003 0308 	and.w	r3, r3, #8
 8010982:	b2db      	uxtb	r3, r3
 8010984:	2b00      	cmp	r3, #0
 8010986:	d107      	bne.n	8010998 <lv_draw_sw_line+0x12a>
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801098e:	f003 0304 	and.w	r3, r3, #4
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d07a      	beq.n	8010a8e <lv_draw_sw_line+0x220>
        lv_draw_fill_dsc_t cir_dsc;
        lv_draw_fill_dsc_init(&cir_dsc);
 8010998:	f107 030c 	add.w	r3, r7, #12
 801099c:	4618      	mov	r0, r3
 801099e:	f7f6 ff67 	bl	8007870 <lv_draw_fill_dsc_init>
        cir_dsc.color = dsc->color;
 80109a2:	683a      	ldr	r2, [r7, #0]
 80109a4:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80109a8:	322c      	adds	r2, #44	@ 0x2c
 80109aa:	8811      	ldrh	r1, [r2, #0]
 80109ac:	7892      	ldrb	r2, [r2, #2]
 80109ae:	8019      	strh	r1, [r3, #0]
 80109b0:	709a      	strb	r2, [r3, #2]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 80109b2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80109b6:	62bb      	str	r3, [r7, #40]	@ 0x28
        cir_dsc.opa = dsc->opa;
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80109be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        int32_t r = (dsc->width >> 1);
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109c6:	105b      	asrs	r3, r3, #1
 80109c8:	663b      	str	r3, [r7, #96]	@ 0x60
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80109ce:	f003 0301 	and.w	r3, r3, #1
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	bf0c      	ite	eq
 80109d6:	2301      	moveq	r3, #1
 80109d8:	2300      	movne	r3, #0
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        lv_area_t cir_area;

        if(dsc->round_start) {
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80109e4:	f003 0304 	and.w	r3, r3, #4
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d01f      	beq.n	8010a2e <lv_draw_sw_line+0x1c0>
            cir_area.x1 = (int32_t)dsc->p1.x - r;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	69da      	ldr	r2, [r3, #28]
 80109f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            cir_area.y1 = (int32_t)dsc->p1.y - r;
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	6a1a      	ldr	r2, [r3, #32]
 80109fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80109fe:	1ad3      	subs	r3, r2, r3
 8010a00:	643b      	str	r3, [r7, #64]	@ 0x40
            cir_area.x2 = (int32_t)dsc->p1.x + r - r_corr;
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	69da      	ldr	r2, [r3, #28]
 8010a06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a08:	441a      	add	r2, r3
 8010a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a0c:	1ad3      	subs	r3, r2, r3
 8010a0e:	647b      	str	r3, [r7, #68]	@ 0x44
            cir_area.y2 = (int32_t)dsc->p1.y + r - r_corr ;
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	6a1a      	ldr	r2, [r3, #32]
 8010a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a16:	441a      	add	r2, r3
 8010a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a1a:	1ad3      	subs	r3, r2, r3
 8010a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
            lv_draw_sw_fill(draw_unit, &cir_dsc, &cir_area);
 8010a1e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010a22:	f107 030c 	add.w	r3, r7, #12
 8010a26:	4619      	mov	r1, r3
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7fe fa6a 	bl	800ef02 <lv_draw_sw_fill>
        }

        if(dsc->round_end) {
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010a34:	f003 0308 	and.w	r3, r3, #8
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d027      	beq.n	8010a8e <lv_draw_sw_line+0x220>
            cir_area.x1 = (int32_t)dsc->p2.x - r;
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
            cir_area.y1 = (int32_t)dsc->p2.y - r;
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	643b      	str	r3, [r7, #64]	@ 0x40
            cir_area.x2 = (int32_t)dsc->p2.x + r - r_corr;
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a58:	441a      	add	r2, r3
 8010a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	647b      	str	r3, [r7, #68]	@ 0x44
            cir_area.y2 = (int32_t)dsc->p2.y + r - r_corr ;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010a64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a66:	441a      	add	r2, r3
 8010a68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a6a:	1ad3      	subs	r3, r2, r3
 8010a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
            lv_draw_sw_fill(draw_unit, &cir_dsc, &cir_area);
 8010a6e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010a72:	f107 030c 	add.w	r3, r7, #12
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7fe fa42 	bl	800ef02 <lv_draw_sw_fill>
 8010a7e:	e006      	b.n	8010a8e <lv_draw_sw_line+0x220>
    if(dsc->width == 0) return;
 8010a80:	bf00      	nop
 8010a82:	e004      	b.n	8010a8e <lv_draw_sw_line+0x220>
    if(dsc->opa <= LV_OPA_MIN) return;
 8010a84:	bf00      	nop
 8010a86:	e002      	b.n	8010a8e <lv_draw_sw_line+0x220>
    if(dsc->p1.x == dsc->p2.x && dsc->p1.y == dsc->p2.y) return;
 8010a88:	bf00      	nop
 8010a8a:	e000      	b.n	8010a8e <lv_draw_sw_line+0x220>
    if(!is_common) return;
 8010a8c:	bf00      	nop
        }
    }
    LV_PROFILER_END;
}
 8010a8e:	3768      	adds	r7, #104	@ 0x68
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <draw_line_hor>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static void LV_ATTRIBUTE_FAST_MEM draw_line_hor(lv_draw_unit_t * draw_unit, const lv_draw_line_dsc_t * dsc)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b09e      	sub	sp, #120	@ 0x78
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
    int32_t w = dsc->width - 1;
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
    int32_t w_half0 = w >> 1;
 8010aa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010aa8:	105b      	asrs	r3, r3, #1
 8010aaa:	667b      	str	r3, [r7, #100]	@ 0x64
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010aae:	f003 0301 	and.w	r3, r3, #1
 8010ab2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010ab4:	4413      	add	r3, r2
 8010ab6:	663b      	str	r3, [r7, #96]	@ 0x60

    lv_area_t blend_area;
    blend_area.x1 = (int32_t)LV_MIN(dsc->p1.x, dsc->p2.x);
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	69db      	ldr	r3, [r3, #28]
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	bfa8      	it	ge
 8010ac4:	4613      	movge	r3, r2
 8010ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
    blend_area.x2 = (int32_t)LV_MAX(dsc->p1.x, dsc->p2.x)  - 1;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	69db      	ldr	r3, [r3, #28]
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	bfb8      	it	lt
 8010ad4:	4613      	movlt	r3, r2
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	643b      	str	r3, [r7, #64]	@ 0x40
    blend_area.y1 = (int32_t)dsc->p1.y - w_half1;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	6a1a      	ldr	r2, [r3, #32]
 8010ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    blend_area.y2 = (int32_t)dsc->p1.y + w_half0;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	6a1a      	ldr	r2, [r3, #32]
 8010ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010aea:	4413      	add	r3, r2
 8010aec:	647b      	str	r3, [r7, #68]	@ 0x44

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_unit->clip_area);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	689a      	ldr	r2, [r3, #8]
 8010af2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010af6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010afa:	4618      	mov	r0, r3
 8010afc:	f009 fe12 	bl	801a724 <_lv_area_intersect>
 8010b00:	4603      	mov	r3, r0
 8010b02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if(!is_common) return;
 8010b06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010b0a:	f083 0301 	eor.w	r3, r3, #1
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f040 80b5 	bne.w	8010c80 <draw_line_hor+0x1ec>

    bool dashed = dsc->dash_gap && dsc->dash_width;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d005      	beq.n	8010b2a <draw_line_hor+0x96>
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <draw_line_hor+0x96>
 8010b26:	2301      	movs	r3, #1
 8010b28:	e000      	b.n	8010b2c <draw_line_hor+0x98>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8010b30:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8010b34:	f003 0301 	and.w	r3, r3, #1
 8010b38:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memzero(&blend_dsc, sizeof(blend_dsc));
 8010b3c:	f107 030c 	add.w	r3, r7, #12
 8010b40:	212c      	movs	r1, #44	@ 0x2c
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ff fe85 	bl	8010852 <lv_memzero>
    blend_dsc.blend_area = &blend_area;
 8010b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010b4c:	60fb      	str	r3, [r7, #12]
    blend_dsc.color = dsc->color;
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8010b54:	322c      	adds	r2, #44	@ 0x2c
 8010b56:	8811      	ldrh	r1, [r2, #0]
 8010b58:	7892      	ldrb	r2, [r2, #2]
 8010b5a:	8019      	strh	r1, [r3, #0]
 8010b5c:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = dsc->opa;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b64:	f887 3020 	strb.w	r3, [r7, #32]

    /*If there is no mask then simply draw a rectangle*/
    if(!dashed) {
 8010b68:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8010b6c:	f083 0301 	eor.w	r3, r3, #1
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d006      	beq.n	8010b84 <draw_line_hor+0xf0>
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 8010b76:	f107 030c 	add.w	r3, r7, #12
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7f7 f8d3 	bl	8007d28 <lv_draw_sw_blend>
 8010b82:	e07e      	b.n	8010c82 <draw_line_hor+0x1ee>
    }
#if LV_DRAW_SW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 8010b84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7ff fe39 	bl	8010800 <lv_area_get_width>
 8010b8e:	65b8      	str	r0, [r7, #88]	@ 0x58

        int32_t y2 = blend_area.y2;
 8010b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b92:	657b      	str	r3, [r7, #84]	@ 0x54
        blend_area.y2 = blend_area.y1;
 8010b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b96:	647b      	str	r3, [r7, #68]	@ 0x44

        int32_t dash_start = blend_area.x1 % (dsc->dash_gap + dsc->dash_width);
 8010b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9a:	683a      	ldr	r2, [r7, #0]
 8010b9c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010ba2:	440a      	add	r2, r1
 8010ba4:	fb93 f1f2 	sdiv	r1, r3, r2
 8010ba8:	fb01 f202 	mul.w	r2, r1, r2
 8010bac:	1a9b      	subs	r3, r3, r2
 8010bae:	653b      	str	r3, [r7, #80]	@ 0x50

        lv_opa_t * mask_buf = lv_malloc(blend_area_w);
 8010bb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f00d fa70 	bl	801e098 <lv_malloc>
 8010bb8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        blend_dsc.mask_buf = mask_buf;
 8010bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        blend_dsc.mask_area = &blend_area;
 8010bbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 8010bc4:	2302      	movs	r3, #2
 8010bc6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 8010bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8010bce:	e04f      	b.n	8010c70 <draw_line_hor+0x1dc>
            lv_memset(mask_buf, 0xff, blend_area_w);
 8010bd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	21ff      	movs	r1, #255	@ 0xff
 8010bd6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010bd8:	f00c fac1 	bl	801d15e <lv_memset>

            int32_t dash_cnt = dash_start;
 8010bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bde:	673b      	str	r3, [r7, #112]	@ 0x70
            int32_t i;
            for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8010be0:	2300      	movs	r3, #0
 8010be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010be4:	e031      	b.n	8010c4a <draw_line_hor+0x1b6>
                if(dash_cnt <= dsc->dash_width) {
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010bec:	429a      	cmp	r2, r3
 8010bee:	dc13      	bgt.n	8010c18 <draw_line_hor+0x184>
                    int16_t diff = dsc->dash_width - dash_cnt;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
                    i += diff;
 8010c02:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8010c06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c08:	4413      	add	r3, r2
 8010c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    dash_cnt += diff;
 8010c0c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8010c10:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010c12:	4413      	add	r3, r2
 8010c14:	673b      	str	r3, [r7, #112]	@ 0x70
 8010c16:	e00f      	b.n	8010c38 <draw_line_hor+0x1a4>
                }
                else if(dash_cnt > dsc->dash_gap + dsc->dash_width) {
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c20:	4413      	add	r3, r2
 8010c22:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010c24:	429a      	cmp	r2, r3
 8010c26:	dd02      	ble.n	8010c2e <draw_line_hor+0x19a>
                    dash_cnt = 0;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8010c2c:	e004      	b.n	8010c38 <draw_line_hor+0x1a4>
                }
                else {
                    mask_buf[i] = 0x00;
 8010c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010c32:	4413      	add	r3, r2
 8010c34:	2200      	movs	r2, #0
 8010c36:	701a      	strb	r2, [r3, #0]
                }

                blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 8010c38:	2302      	movs	r3, #2
 8010c3a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8010c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c40:	3301      	adds	r3, #1
 8010c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c46:	3301      	adds	r3, #1
 8010c48:	673b      	str	r3, [r7, #112]	@ 0x70
 8010c4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	dbc9      	blt.n	8010be6 <draw_line_hor+0x152>
            }

            lv_draw_sw_blend(draw_unit, &blend_dsc);
 8010c52:	f107 030c 	add.w	r3, r7, #12
 8010c56:	4619      	mov	r1, r3
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7f7 f865 	bl	8007d28 <lv_draw_sw_blend>

            blend_area.y1++;
 8010c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c60:	3301      	adds	r3, #1
 8010c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
            blend_area.y2++;
 8010c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c66:	3301      	adds	r3, #1
 8010c68:	647b      	str	r3, [r7, #68]	@ 0x44
        for(h = blend_area.y1; h <= y2; h++) {
 8010c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010c70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c74:	429a      	cmp	r2, r3
 8010c76:	ddab      	ble.n	8010bd0 <draw_line_hor+0x13c>
        }
        lv_free(mask_buf);
 8010c78:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010c7a:	f00d fa45 	bl	801e108 <lv_free>
 8010c7e:	e000      	b.n	8010c82 <draw_line_hor+0x1ee>
    if(!is_common) return;
 8010c80:	bf00      	nop
    }
#endif /*LV_DRAW_SW_COMPLEX*/
}
 8010c82:	3778      	adds	r7, #120	@ 0x78
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <draw_line_ver>:

static void LV_ATTRIBUTE_FAST_MEM draw_line_ver(lv_draw_unit_t * draw_unit, const lv_draw_line_dsc_t * dsc)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b09c      	sub	sp, #112	@ 0x70
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
    int32_t w = dsc->width - 1;
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c96:	3b01      	subs	r3, #1
 8010c98:	667b      	str	r3, [r7, #100]	@ 0x64
    int32_t w_half0 = w >> 1;
 8010c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c9c:	105b      	asrs	r3, r3, #1
 8010c9e:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ca2:	f003 0301 	and.w	r3, r3, #1
 8010ca6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010ca8:	4413      	add	r3, r2
 8010caa:	65fb      	str	r3, [r7, #92]	@ 0x5c

    lv_area_t blend_area;
    blend_area.x1 = (int32_t)dsc->p1.x - w_half1;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	69da      	ldr	r2, [r3, #28]
 8010cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    blend_area.x2 = (int32_t)dsc->p1.x + w_half0;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	69da      	ldr	r2, [r3, #28]
 8010cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010cbc:	4413      	add	r3, r2
 8010cbe:	643b      	str	r3, [r7, #64]	@ 0x40
    blend_area.y1 = (int32_t)LV_MIN(dsc->p1.y, dsc->p2.y);
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	bfa8      	it	ge
 8010ccc:	4613      	movge	r3, r2
 8010cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    blend_area.y2 = (int32_t)LV_MAX(dsc->p1.y, dsc->p2.y) - 1;
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	6a1b      	ldr	r3, [r3, #32]
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	bfb8      	it	lt
 8010cdc:	4613      	movlt	r3, r2
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	647b      	str	r3, [r7, #68]	@ 0x44

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_unit->clip_area);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	689a      	ldr	r2, [r3, #8]
 8010ce6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010cea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f009 fd18 	bl	801a724 <_lv_area_intersect>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    if(!is_common) return;
 8010cfa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8010cfe:	f083 0301 	eor.w	r3, r3, #1
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f040 8095 	bne.w	8010e34 <draw_line_ver+0x1ac>

    bool dashed = dsc->dash_gap && dsc->dash_width;
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d005      	beq.n	8010d1e <draw_line_ver+0x96>
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d001      	beq.n	8010d1e <draw_line_ver+0x96>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	e000      	b.n	8010d20 <draw_line_ver+0x98>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8010d24:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8010d28:	f003 0301 	and.w	r3, r3, #1
 8010d2c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memzero(&blend_dsc, sizeof(blend_dsc));
 8010d30:	f107 030c 	add.w	r3, r7, #12
 8010d34:	212c      	movs	r1, #44	@ 0x2c
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7ff fd8b 	bl	8010852 <lv_memzero>
    blend_dsc.blend_area = &blend_area;
 8010d3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010d40:	60fb      	str	r3, [r7, #12]
    blend_dsc.color = dsc->color;
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8010d48:	322c      	adds	r2, #44	@ 0x2c
 8010d4a:	8811      	ldrh	r1, [r2, #0]
 8010d4c:	7892      	ldrb	r2, [r2, #2]
 8010d4e:	8019      	strh	r1, [r3, #0]
 8010d50:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = dsc->opa;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d58:	f887 3020 	strb.w	r3, [r7, #32]

    /*If there is no mask then simply draw a rectangle*/
    if(!dashed) {
 8010d5c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8010d60:	f083 0301 	eor.w	r3, r3, #1
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d006      	beq.n	8010d78 <draw_line_ver+0xf0>
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 8010d6a:	f107 030c 	add.w	r3, r7, #12
 8010d6e:	4619      	mov	r1, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7f6 ffd9 	bl	8007d28 <lv_draw_sw_blend>
 8010d76:	e05e      	b.n	8010e36 <draw_line_ver+0x1ae>
    }

#if LV_DRAW_SW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 8010d78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7ff fd3f 	bl	8010800 <lv_area_get_width>
 8010d82:	6578      	str	r0, [r7, #84]	@ 0x54

        int32_t y2 = blend_area.y2;
 8010d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d86:	653b      	str	r3, [r7, #80]	@ 0x50
        blend_area.y2 = blend_area.y1;
 8010d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d8a:	647b      	str	r3, [r7, #68]	@ 0x44

        lv_opa_t * mask_buf = lv_malloc(draw_area_w);
 8010d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f00d f982 	bl	801e098 <lv_malloc>
 8010d94:	64f8      	str	r0, [r7, #76]	@ 0x4c
        blend_dsc.mask_buf = mask_buf;
 8010d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d98:	627b      	str	r3, [r7, #36]	@ 0x24
        blend_dsc.mask_area = &blend_area;
 8010d9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 8010da0:	2302      	movs	r3, #2
 8010da2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        int32_t dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8010da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010da8:	683a      	ldr	r2, [r7, #0]
 8010daa:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8010dac:	683a      	ldr	r2, [r7, #0]
 8010dae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010db0:	440a      	add	r2, r1
 8010db2:	fb93 f1f2 	sdiv	r1, r3, r2
 8010db6:	fb01 f202 	mul.w	r2, r1, r2
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	64bb      	str	r3, [r7, #72]	@ 0x48

        int32_t dash_cnt = dash_start;
 8010dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 8010dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010dc6:	e02d      	b.n	8010e24 <draw_line_ver+0x19c>
            lv_memset(mask_buf, 0xff, draw_area_w);
 8010dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dca:	461a      	mov	r2, r3
 8010dcc:	21ff      	movs	r1, #255	@ 0xff
 8010dce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010dd0:	f00c f9c5 	bl	801d15e <lv_memset>

            if(dash_cnt > dsc->dash_width) {
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	dd03      	ble.n	8010de6 <draw_line_ver+0x15e>
                blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_TRANSP;
 8010dde:	2300      	movs	r3, #0
 8010de0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8010de4:	e002      	b.n	8010dec <draw_line_ver+0x164>
            }
            else {
                blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_FULL_COVER;
 8010de6:	2301      	movs	r3, #1
 8010de8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            }

            if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010df4:	4413      	add	r3, r2
 8010df6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	db01      	blt.n	8010e00 <draw_line_ver+0x178>
                dash_cnt = 0;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            }
            dash_cnt ++;
 8010e00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e02:	3301      	adds	r3, #1
 8010e04:	66fb      	str	r3, [r7, #108]	@ 0x6c

            lv_draw_sw_blend(draw_unit, &blend_dsc);
 8010e06:	f107 030c 	add.w	r3, r7, #12
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7f6 ff8b 	bl	8007d28 <lv_draw_sw_blend>

            blend_area.y1++;
 8010e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e14:	3301      	adds	r3, #1
 8010e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
            blend_area.y2++;
 8010e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	647b      	str	r3, [r7, #68]	@ 0x44
        for(h = blend_area.y1; h <= y2; h++) {
 8010e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010e20:	3301      	adds	r3, #1
 8010e22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010e24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010e26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	ddcd      	ble.n	8010dc8 <draw_line_ver+0x140>
        }
        lv_free(mask_buf);
 8010e2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010e2e:	f00d f96b 	bl	801e108 <lv_free>
 8010e32:	e000      	b.n	8010e36 <draw_line_ver+0x1ae>
    if(!is_common) return;
 8010e34:	bf00      	nop
    }
#endif /*LV_DRAW_SW_COMPLEX*/
}
 8010e36:	3770      	adds	r7, #112	@ 0x70
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <draw_line_skew>:

static void LV_ATTRIBUTE_FAST_MEM draw_line_skew(lv_draw_unit_t * draw_unit, const lv_draw_line_dsc_t * dsc)
{
 8010e3c:	b5b0      	push	{r4, r5, r7, lr}
 8010e3e:	b0e6      	sub	sp, #408	@ 0x198
 8010e40:	af02      	add	r7, sp, #8
 8010e42:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010e46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8010e4a:	6018      	str	r0, [r3, #0]
 8010e4c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010e50:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010e54:	6019      	str	r1, [r3, #0]
#if LV_DRAW_SW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(dsc->p1.y < dsc->p2.y) {
 8010e56:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010e5a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	6a1a      	ldr	r2, [r3, #32]
 8010e62:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010e66:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	da1a      	bge.n	8010ea8 <draw_line_skew+0x6c>
        p1 = lv_point_from_precise(&dsc->p1);
 8010e72:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010e76:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f103 021c 	add.w	r2, r3, #28
 8010e80:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8010e84:	4611      	mov	r1, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff fcca 	bl	8010820 <lv_point_from_precise>
        p2 = lv_point_from_precise(&dsc->p2);
 8010e8c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010e90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8010e9a:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8010e9e:	4611      	mov	r1, r2
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff fcbd 	bl	8010820 <lv_point_from_precise>
 8010ea6:	e02b      	b.n	8010f00 <draw_line_skew+0xc4>
    }
    else {
        p1 = lv_point_from_precise(&dsc->p2);
 8010ea8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010eac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8010eb6:	463b      	mov	r3, r7
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff fcb0 	bl	8010820 <lv_point_from_precise>
 8010ec0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010ec4:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8010ec8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8010ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ed0:	e883 0003 	stmia.w	r3, {r0, r1}
        p2 = lv_point_from_precise(&dsc->p1);
 8010ed4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010ed8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	f103 021c 	add.w	r2, r3, #28
 8010ee2:	463b      	mov	r3, r7
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7ff fc9a 	bl	8010820 <lv_point_from_precise>
 8010eec:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010ef0:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8010ef4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8010ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010efc:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    int32_t xdiff = p2.x - p1.x;
 8010f00:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    int32_t ydiff = p2.y - p1.y;
 8010f0e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8010f12:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff);
 8010f1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8010f20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8010f24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010f28:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	bfb8      	it	lt
 8010f30:	425b      	neglt	r3, r3
 8010f32:	429a      	cmp	r2, r3
 8010f34:	bfcc      	ite	gt
 8010f36:	2301      	movgt	r3, #1
 8010f38:	2300      	movle	r3, #0
 8010f3a:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 8010f3e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8010f42:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f4a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    int32_t wcorr_i = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 8010f54:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00f      	beq.n	8010f7c <draw_line_skew+0x140>
 8010f5c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	bfb8      	it	lt
 8010f64:	425b      	neglt	r3, r3
 8010f66:	015a      	lsls	r2, r3, #5
 8010f68:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	bfb8      	it	lt
 8010f70:	425b      	neglt	r3, r3
 8010f72:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f76:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8010f7a:	e00e      	b.n	8010f9a <draw_line_skew+0x15e>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 8010f7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	bfb8      	it	lt
 8010f84:	425b      	neglt	r3, r3
 8010f86:	015a      	lsls	r2, r3, #5
 8010f88:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	bfb8      	it	lt
 8010f90:	425b      	neglt	r3, r3
 8010f92:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f96:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8010f9a:	4ac0      	ldr	r2, [pc, #768]	@ (801129c <draw_line_skew+0x460>)
 8010f9c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8010fa0:	4413      	add	r3, r2
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8010faa:	fb02 f303 	mul.w	r3, r2, r3
 8010fae:	333f      	adds	r3, #63	@ 0x3f
 8010fb0:	11db      	asrs	r3, r3, #7
 8010fb2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    int32_t w_half0 = w >> 1;
 8010fb6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8010fba:	105b      	asrs	r3, r3, #1
 8010fbc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8010fc0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8010fc4:	f003 0301 	and.w	r3, r3, #1
 8010fc8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8010fcc:	4413      	add	r3, r2
 8010fce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 8010fd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	bfa8      	it	ge
 8010fde:	461a      	movge	r2, r3
 8010fe0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8010fe4:	1ad3      	subs	r3, r2, r3
 8010fe6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 8010fea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8010fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	bfb8      	it	lt
 8010ff6:	461a      	movlt	r2, r3
 8010ff8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 8011002:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011006:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801100a:	429a      	cmp	r2, r3
 801100c:	bfa8      	it	ge
 801100e:	461a      	movge	r2, r3
 8011010:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 801101a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801101e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8011022:	429a      	cmp	r2, r3
 8011024:	bfb8      	it	lt
 8011026:	461a      	movlt	r2, r3
 8011028:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 801102c:	4413      	add	r3, r2
 801102e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_unit->clip_area);
 8011032:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011036:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	689a      	ldr	r2, [r3, #8]
 801103e:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 8011042:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8011046:	4618      	mov	r0, r3
 8011048:	f009 fb6c 	bl	801a724 <_lv_area_intersect>
 801104c:	4603      	mov	r3, r0
 801104e:	f887 316b 	strb.w	r3, [r7, #363]	@ 0x16b
    if(is_common == false) return;
 8011052:	f897 316b 	ldrb.w	r3, [r7, #363]	@ 0x16b
 8011056:	f083 0301 	eor.w	r3, r3, #1
 801105a:	b2db      	uxtb	r3, r3
 801105c:	2b00      	cmp	r3, #0
 801105e:	f040 8223 	bne.w	80114a8 <draw_line_skew+0x66c>
    lv_draw_sw_mask_line_param_t mask_left_param;
    lv_draw_sw_mask_line_param_t mask_right_param;
    lv_draw_sw_mask_line_param_t mask_top_param;
    lv_draw_sw_mask_line_param_t mask_bottom_param;

    void * masks[5] = {&mask_left_param, & mask_right_param, NULL, NULL, NULL};
 8011062:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011066:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801106a:	f107 02fc 	add.w	r2, r7, #252	@ 0xfc
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011074:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011078:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 801107c:	605a      	str	r2, [r3, #4]
 801107e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011082:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011086:	2200      	movs	r2, #0
 8011088:	609a      	str	r2, [r3, #8]
 801108a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801108e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011092:	2200      	movs	r2, #0
 8011094:	60da      	str	r2, [r3, #12]
 8011096:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801109a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801109e:	2200      	movs	r2, #0
 80110a0:	611a      	str	r2, [r3, #16]

    if(flat) {
 80110a2:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d061      	beq.n	801116e <draw_line_skew+0x332>
        if(xdiff > 0) {
 80110aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	dd2e      	ble.n	8011110 <draw_line_skew+0x2d4>
            lv_draw_sw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80110b2:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80110b6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80110ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80110be:	1ad4      	subs	r4, r2, r3
 80110c0:	f8d7 5144 	ldr.w	r5, [r7, #324]	@ 0x144
 80110c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80110c8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80110cc:	1ad3      	subs	r3, r2, r3
 80110ce:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 80110d2:	2200      	movs	r2, #0
 80110d4:	9201      	str	r2, [sp, #4]
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	462b      	mov	r3, r5
 80110da:	4622      	mov	r2, r4
 80110dc:	f000 fac4 	bl	8011668 <lv_draw_sw_mask_line_points_init>
                                             LV_DRAW_SW_MASK_LINE_SIDE_LEFT);
            lv_draw_sw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 80110e0:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80110e4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80110e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80110ec:	18d4      	adds	r4, r2, r3
 80110ee:	f8d7 5144 	ldr.w	r5, [r7, #324]	@ 0x144
 80110f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80110f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80110fa:	4413      	add	r3, r2
 80110fc:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8011100:	2201      	movs	r2, #1
 8011102:	9201      	str	r2, [sp, #4]
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	462b      	mov	r3, r5
 8011108:	4622      	mov	r2, r4
 801110a:	f000 faad 	bl	8011668 <lv_draw_sw_mask_line_points_init>
 801110e:	e05c      	b.n	80111ca <draw_line_skew+0x38e>
                                             LV_DRAW_SW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_sw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8011110:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8011114:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011118:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801111c:	18d4      	adds	r4, r2, r3
 801111e:	f8d7 5144 	ldr.w	r5, [r7, #324]	@ 0x144
 8011122:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011126:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801112a:	4413      	add	r3, r2
 801112c:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8011130:	2200      	movs	r2, #0
 8011132:	9201      	str	r2, [sp, #4]
 8011134:	9300      	str	r3, [sp, #0]
 8011136:	462b      	mov	r3, r5
 8011138:	4622      	mov	r2, r4
 801113a:	f000 fa95 	bl	8011668 <lv_draw_sw_mask_line_points_init>
                                             LV_DRAW_SW_MASK_LINE_SIDE_LEFT);
            lv_draw_sw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801113e:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8011142:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011146:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 801114a:	1ad4      	subs	r4, r2, r3
 801114c:	f8d7 5144 	ldr.w	r5, [r7, #324]	@ 0x144
 8011150:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011154:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8011158:	1ad3      	subs	r3, r2, r3
 801115a:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 801115e:	2201      	movs	r2, #1
 8011160:	9201      	str	r2, [sp, #4]
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	462b      	mov	r3, r5
 8011166:	4622      	mov	r2, r4
 8011168:	f000 fa7e 	bl	8011668 <lv_draw_sw_mask_line_points_init>
 801116c:	e02d      	b.n	80111ca <draw_line_skew+0x38e>
                                             LV_DRAW_SW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_sw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 801116e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8011172:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011176:	18d1      	adds	r1, r2, r3
 8011178:	f8d7 4150 	ldr.w	r4, [r7, #336]	@ 0x150
 801117c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8011180:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011184:	441a      	add	r2, r3
 8011186:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801118a:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 801118e:	2500      	movs	r5, #0
 8011190:	9501      	str	r5, [sp, #4]
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	4613      	mov	r3, r2
 8011196:	4622      	mov	r2, r4
 8011198:	f000 fa66 	bl	8011668 <lv_draw_sw_mask_line_points_init>
                                         LV_DRAW_SW_MASK_LINE_SIDE_LEFT);
        lv_draw_sw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 801119c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80111a0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80111a4:	1ad1      	subs	r1, r2, r3
 80111a6:	f8d7 4150 	ldr.w	r4, [r7, #336]	@ 0x150
 80111aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80111ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80111b2:	1ad2      	subs	r2, r2, r3
 80111b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80111b8:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80111bc:	2501      	movs	r5, #1
 80111be:	9501      	str	r5, [sp, #4]
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	4613      	mov	r3, r2
 80111c4:	4622      	mov	r2, r4
 80111c6:	f000 fa4f 	bl	8011668 <lv_draw_sw_mask_line_points_init>

    }

    /*Use the normal vector for the endings*/

    if(!dsc->raw_end) {
 80111ca:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80111ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80111d8:	f003 0310 	and.w	r3, r3, #16
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d13b      	bne.n	801125a <draw_line_skew+0x41e>
        lv_draw_sw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff,
 80111e2:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80111e6:	f8d7 4150 	ldr.w	r4, [r7, #336]	@ 0x150
 80111ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80111ee:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80111f2:	1ad5      	subs	r5, r2, r3
 80111f4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80111f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80111fc:	4413      	add	r3, r2
 80111fe:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8011202:	2203      	movs	r2, #3
 8011204:	9201      	str	r2, [sp, #4]
 8011206:	9300      	str	r3, [sp, #0]
 8011208:	462b      	mov	r3, r5
 801120a:	4622      	mov	r2, r4
 801120c:	f000 fa2c 	bl	8011668 <lv_draw_sw_mask_line_points_init>
                                         LV_DRAW_SW_MASK_LINE_SIDE_BOTTOM);
        lv_draw_sw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,
 8011210:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8011214:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 8011218:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 801121c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8011220:	1ad5      	subs	r5, r2, r3
 8011222:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8011226:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 801122a:	4413      	add	r3, r2
 801122c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8011230:	2202      	movs	r2, #2
 8011232:	9201      	str	r2, [sp, #4]
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	462b      	mov	r3, r5
 8011238:	4622      	mov	r2, r4
 801123a:	f000 fa15 	bl	8011668 <lv_draw_sw_mask_line_points_init>
                                         LV_DRAW_SW_MASK_LINE_SIDE_TOP);
        masks[2] = &mask_top_param;
 801123e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011242:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011246:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 801124a:	609a      	str	r2, [r3, #8]
        masks[3] = &mask_bottom_param;
 801124c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011250:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011254:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8011258:	60da      	str	r2, [r3, #12]
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 801125a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff face 	bl	8010800 <lv_area_get_width>
 8011264:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_display_get_horizontal_resolution(_lv_refr_get_disp_refreshing());
 8011268:	f7f4 f93c 	bl	80054e4 <_lv_refr_get_disp_refreshing>
 801126c:	4603      	mov	r3, r0
 801126e:	4618      	mov	r0, r3
 8011270:	f7f4 f95e 	bl	8005530 <lv_display_get_horizontal_resolution>
 8011274:	4603      	mov	r3, r0
 8011276:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801127a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 801127e:	4618      	mov	r0, r3
 8011280:	f009 f9ed 	bl	801a65e <lv_area_get_size>
 8011284:	4602      	mov	r2, r0
 8011286:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 801128a:	4293      	cmp	r3, r2
 801128c:	d908      	bls.n	80112a0 <draw_line_skew+0x464>
 801128e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8011292:	4618      	mov	r0, r3
 8011294:	f009 f9e3 	bl	801a65e <lv_area_get_size>
 8011298:	4603      	mov	r3, r0
 801129a:	e003      	b.n	80112a4 <draw_line_skew+0x468>
 801129c:	0801e300 	.word	0x0801e300
 80112a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80112a4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    lv_opa_t * mask_buf = lv_malloc(mask_buf_size);
 80112a8:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 80112ac:	f00c fef4 	bl	801e098 <lv_malloc>
 80112b0:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158

    int32_t y2 = blend_area.y2;
 80112b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80112b8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    blend_area.y2 = blend_area.y1;
 80112bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80112c0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

    uint32_t mask_p = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    lv_memset(mask_buf, 0xff, mask_buf_size);
 80112ca:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80112ce:	21ff      	movs	r1, #255	@ 0xff
 80112d0:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 80112d4:	f00b ff43 	bl	801d15e <lv_memset>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memzero(&blend_dsc, sizeof(blend_dsc));
 80112d8:	f107 0314 	add.w	r3, r7, #20
 80112dc:	212c      	movs	r1, #44	@ 0x2c
 80112de:	4618      	mov	r0, r3
 80112e0:	f7ff fab7 	bl	8010852 <lv_memzero>
    blend_dsc.blend_area = &blend_area;
 80112e4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80112e8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80112ec:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 80112f0:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 80112f2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80112f6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80112fa:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 80112fe:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8011302:	6812      	ldr	r2, [r2, #0]
 8011304:	3315      	adds	r3, #21
 8011306:	322c      	adds	r2, #44	@ 0x2c
 8011308:	8811      	ldrh	r1, [r2, #0]
 801130a:	7892      	ldrb	r2, [r2, #2]
 801130c:	8019      	strh	r1, [r3, #0]
 801130e:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = dsc->opa;
 8011310:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011314:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 801131e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011322:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011326:	751a      	strb	r2, [r3, #20]
    blend_dsc.mask_buf = mask_buf;
 8011328:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801132c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011330:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8011334:	619a      	str	r2, [r3, #24]
    blend_dsc.mask_area = &blend_area;
 8011336:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801133a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801133e:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8011342:	621a      	str	r2, [r3, #32]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 8011344:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011348:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 801134c:	e066      	b.n	801141c <draw_line_skew+0x5e0>
        blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, &mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 801134e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8011352:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011356:	18d1      	adds	r1, r2, r3
 8011358:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801135c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8011360:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 801136a:	f000 f909 	bl	8011580 <lv_draw_sw_mask_apply>
 801136e:	4603      	mov	r3, r0
 8011370:	461a      	mov	r2, r3
 8011372:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011376:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801137a:	771a      	strb	r2, [r3, #28]
        if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_TRANSP) {
 801137c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011380:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011384:	7f1b      	ldrb	r3, [r3, #28]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d10a      	bne.n	80113a0 <draw_line_skew+0x564>
            lv_memzero(&mask_buf[mask_p], draw_area_w);
 801138a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801138e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011392:	4413      	add	r3, r2
 8011394:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8011398:	4611      	mov	r1, r2
 801139a:	4618      	mov	r0, r3
 801139c:	f7ff fa59 	bl	8010852 <lv_memzero>
        }

        mask_p += draw_area_w;
 80113a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80113a4:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80113a8:	4413      	add	r3, r2
 80113aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 80113ae:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80113b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80113b6:	4413      	add	r3, r2
 80113b8:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80113bc:	429a      	cmp	r2, r3
 80113be:	d905      	bls.n	80113cc <draw_line_skew+0x590>
            blend_area.y2 ++;
 80113c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80113c4:	3301      	adds	r3, #1
 80113c6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80113ca:	e022      	b.n	8011412 <draw_line_skew+0x5d6>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 80113cc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80113d0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80113d4:	2202      	movs	r2, #2
 80113d6:	771a      	strb	r2, [r3, #28]
            lv_draw_sw_blend(draw_unit, &blend_dsc);
 80113d8:	f107 0214 	add.w	r2, r7, #20
 80113dc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80113e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80113e4:	4611      	mov	r1, r2
 80113e6:	6818      	ldr	r0, [r3, #0]
 80113e8:	f7f6 fc9e 	bl	8007d28 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 80113ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80113f0:	3301      	adds	r3, #1
 80113f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
            blend_area.y2 = blend_area.y1;
 80113f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80113fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
            mask_p = 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
            lv_memset(mask_buf, 0xff, mask_buf_size);
 8011404:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8011408:	21ff      	movs	r1, #255	@ 0xff
 801140a:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 801140e:	f00b fea6 	bl	801d15e <lv_memset>
    for(h = blend_area.y1; h <= y2; h++) {
 8011412:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8011416:	3301      	adds	r3, #1
 8011418:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 801141c:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8011420:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8011424:	429a      	cmp	r2, r3
 8011426:	dd92      	ble.n	801134e <draw_line_skew+0x512>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 8011428:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801142c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011430:	429a      	cmp	r2, r3
 8011432:	d014      	beq.n	801145e <draw_line_skew+0x622>
        blend_area.y2--;
 8011434:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011438:	3b01      	subs	r3, #1
 801143a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 801143e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011442:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011446:	2202      	movs	r2, #2
 8011448:	771a      	strb	r2, [r3, #28]
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 801144a:	f107 0214 	add.w	r2, r7, #20
 801144e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8011452:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8011456:	4611      	mov	r1, r2
 8011458:	6818      	ldr	r0, [r3, #0]
 801145a:	f7f6 fc65 	bl	8007d28 <lv_draw_sw_blend>
    }

    lv_free(mask_buf);
 801145e:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8011462:	f00c fe51 	bl	801e108 <lv_free>

    lv_draw_sw_mask_free_param(&mask_left_param);
 8011466:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 801146a:	4618      	mov	r0, r3
 801146c:	f000 f8ca 	bl	8011604 <lv_draw_sw_mask_free_param>
    lv_draw_sw_mask_free_param(&mask_right_param);
 8011470:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8011474:	4618      	mov	r0, r3
 8011476:	f000 f8c5 	bl	8011604 <lv_draw_sw_mask_free_param>
    if(!dsc->raw_end) {
 801147a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801147e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011488:	f003 0310 	and.w	r3, r3, #16
 801148c:	b2db      	uxtb	r3, r3
 801148e:	2b00      	cmp	r3, #0
 8011490:	d10b      	bne.n	80114aa <draw_line_skew+0x66e>
        lv_draw_sw_mask_free_param(&mask_top_param);
 8011492:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011496:	4618      	mov	r0, r3
 8011498:	f000 f8b4 	bl	8011604 <lv_draw_sw_mask_free_param>
        lv_draw_sw_mask_free_param(&mask_bottom_param);
 801149c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80114a0:	4618      	mov	r0, r3
 80114a2:	f000 f8af 	bl	8011604 <lv_draw_sw_mask_free_param>
 80114a6:	e000      	b.n	80114aa <draw_line_skew+0x66e>
    if(is_common == false) return;
 80114a8:	bf00      	nop
#else
    LV_UNUSED(draw_unit);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_SW_COMPLEX == 0");
#endif /*LV_DRAW_SW_COMPLEX*/
}
 80114aa:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bdb0      	pop	{r4, r5, r7, pc}
 80114b2:	bf00      	nop

080114b4 <lv_area_copy>:
{
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	685a      	ldr	r2, [r3, #4]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	68da      	ldr	r2, [r3, #12]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	60da      	str	r2, [r3, #12]
}
 80114de:	bf00      	nop
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr

080114ea <lv_area_get_width>:
{
 80114ea:	b480      	push	{r7}
 80114ec:	b083      	sub	sp, #12
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	689a      	ldr	r2, [r3, #8]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	3301      	adds	r3, #1
}
 80114fe:	4618      	mov	r0, r3
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr

0801150a <lv_area_get_height>:
{
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	68da      	ldr	r2, [r3, #12]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	3301      	adds	r3, #1
}
 801151e:	4618      	mov	r0, r3
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <lv_point_set>:

    return point;
}

static inline void lv_point_set(lv_point_t * p, int32_t x, int32_t y)
{
 801152a:	b480      	push	{r7}
 801152c:	b085      	sub	sp, #20
 801152e:	af00      	add	r7, sp, #0
 8011530:	60f8      	str	r0, [r7, #12]
 8011532:	60b9      	str	r1, [r7, #8]
 8011534:	607a      	str	r2, [r7, #4]
    p->x = x;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	601a      	str	r2, [r3, #0]
    p->y = y;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	605a      	str	r2, [r3, #4]
}
 8011542:	bf00      	nop
 8011544:	3714      	adds	r7, #20
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <lv_memzero>:
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8011558:	683a      	ldr	r2, [r7, #0]
 801155a:	2100      	movs	r1, #0
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f00b fdfe 	bl	801d15e <lv_memset>
}
 8011562:	bf00      	nop
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
	...

0801156c <lv_draw_sw_mask_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_mask_init(void)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0
    lv_mutex_init(&circle_cache_mutex);
 8011570:	4802      	ldr	r0, [pc, #8]	@ (801157c <lv_draw_sw_mask_init+0x10>)
 8011572:	f00b faf7 	bl	801cb64 <lv_mutex_init>
}
 8011576:	bf00      	nop
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	2000018c 	.word	0x2000018c

08011580 <lv_draw_sw_mask_apply>:
}

lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_sw_mask_apply(void * masks[], lv_opa_t * mask_buf, int32_t abs_x,
                                                                  int32_t abs_y,
                                                                  int32_t len)
{
 8011580:	b590      	push	{r4, r7, lr}
 8011582:	b08b      	sub	sp, #44	@ 0x2c
 8011584:	af02      	add	r7, sp, #8
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
 801158c:	603b      	str	r3, [r7, #0]
    bool changed = false;
 801158e:	2300      	movs	r3, #0
 8011590:	77fb      	strb	r3, [r7, #31]
    _lv_draw_sw_mask_common_dsc_t * dsc;

    uint32_t i;
    for(i = 0; masks[i]; i++) {
 8011592:	2300      	movs	r3, #0
 8011594:	61bb      	str	r3, [r7, #24]
 8011596:	e023      	b.n	80115e0 <lv_draw_sw_mask_apply+0x60>
        dsc = masks[i];
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	009b      	lsls	r3, r3, #2
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	4413      	add	r3, r2
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	617b      	str	r3, [r7, #20]
        lv_draw_sw_mask_res_t res = LV_DRAW_SW_MASK_RES_FULL_COVER;
 80115a4:	2301      	movs	r3, #1
 80115a6:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, masks[i]);
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	681c      	ldr	r4, [r3, #0]
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	4413      	add	r3, r2
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	9300      	str	r3, [sp, #0]
 80115b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ba:	683a      	ldr	r2, [r7, #0]
 80115bc:	6879      	ldr	r1, [r7, #4]
 80115be:	68b8      	ldr	r0, [r7, #8]
 80115c0:	47a0      	blx	r4
 80115c2:	4603      	mov	r3, r0
 80115c4:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_SW_MASK_RES_TRANSP) return LV_DRAW_SW_MASK_RES_TRANSP;
 80115c6:	7cfb      	ldrb	r3, [r7, #19]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d101      	bne.n	80115d0 <lv_draw_sw_mask_apply+0x50>
 80115cc:	2300      	movs	r3, #0
 80115ce:	e014      	b.n	80115fa <lv_draw_sw_mask_apply+0x7a>
        else if(res == LV_DRAW_SW_MASK_RES_CHANGED) changed = true;
 80115d0:	7cfb      	ldrb	r3, [r7, #19]
 80115d2:	2b02      	cmp	r3, #2
 80115d4:	d101      	bne.n	80115da <lv_draw_sw_mask_apply+0x5a>
 80115d6:	2301      	movs	r3, #1
 80115d8:	77fb      	strb	r3, [r7, #31]
    for(i = 0; masks[i]; i++) {
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	3301      	adds	r3, #1
 80115de:	61bb      	str	r3, [r7, #24]
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	68fa      	ldr	r2, [r7, #12]
 80115e6:	4413      	add	r3, r2
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1d4      	bne.n	8011598 <lv_draw_sw_mask_apply+0x18>
    }

    return changed ? LV_DRAW_SW_MASK_RES_CHANGED : LV_DRAW_SW_MASK_RES_FULL_COVER;
 80115ee:	7ffb      	ldrb	r3, [r7, #31]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d001      	beq.n	80115f8 <lv_draw_sw_mask_apply+0x78>
 80115f4:	2302      	movs	r3, #2
 80115f6:	e000      	b.n	80115fa <lv_draw_sw_mask_apply+0x7a>
 80115f8:	2301      	movs	r3, #1
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3724      	adds	r7, #36	@ 0x24
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd90      	pop	{r4, r7, pc}
	...

08011604 <lv_draw_sw_mask_free_param>:

void lv_draw_sw_mask_free_param(void * p)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
    lv_mutex_lock(&circle_cache_mutex);
 801160c:	4815      	ldr	r0, [pc, #84]	@ (8011664 <lv_draw_sw_mask_free_param+0x60>)
 801160e:	f00b fab4 	bl	801cb7a <lv_mutex_lock>
    _lv_draw_sw_mask_common_dsc_t * pdsc = p;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	60fb      	str	r3, [r7, #12]
    if(pdsc->type == LV_DRAW_SW_MASK_TYPE_RADIUS) {
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	791b      	ldrb	r3, [r3, #4]
 801161a:	2b02      	cmp	r3, #2
 801161c:	d11b      	bne.n	8011656 <lv_draw_sw_mask_free_param+0x52>
        lv_draw_sw_mask_radius_param_t * radius_p = (lv_draw_sw_mask_radius_param_t *) p;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	60bb      	str	r3, [r7, #8]
        if(radius_p->circle) {
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	6a1b      	ldr	r3, [r3, #32]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d015      	beq.n	8011656 <lv_draw_sw_mask_free_param+0x52>
            if(radius_p->circle->life < 0) {
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	6a1b      	ldr	r3, [r3, #32]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	2b00      	cmp	r3, #0
 8011632:	da0b      	bge.n	801164c <lv_draw_sw_mask_free_param+0x48>
                lv_free(radius_p->circle->cir_opa);
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	6a1b      	ldr	r3, [r3, #32]
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	f00c fd64 	bl	801e108 <lv_free>
                lv_free(radius_p->circle);
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	6a1b      	ldr	r3, [r3, #32]
 8011644:	4618      	mov	r0, r3
 8011646:	f00c fd5f 	bl	801e108 <lv_free>
 801164a:	e004      	b.n	8011656 <lv_draw_sw_mask_free_param+0x52>
            }
            else {
                radius_p->circle->used_cnt--;
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	6a1b      	ldr	r3, [r3, #32]
 8011650:	695a      	ldr	r2, [r3, #20]
 8011652:	3a01      	subs	r2, #1
 8011654:	615a      	str	r2, [r3, #20]
            }
        }
    }

    lv_mutex_unlock(&circle_cache_mutex);
 8011656:	4803      	ldr	r0, [pc, #12]	@ (8011664 <lv_draw_sw_mask_free_param+0x60>)
 8011658:	f00b fa9a 	bl	801cb90 <lv_mutex_unlock>
}
 801165c:	bf00      	nop
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	2000018c 	.word	0x2000018c

08011668 <lv_draw_sw_mask_line_points_init>:
}

void lv_draw_sw_mask_line_points_init(lv_draw_sw_mask_line_param_t * param, int32_t p1x, int32_t p1y,
                                      int32_t p2x,
                                      int32_t p2y, lv_draw_sw_mask_line_side_t side)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b08a      	sub	sp, #40	@ 0x28
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	603b      	str	r3, [r7, #0]
    lv_memzero(param, sizeof(lv_draw_sw_mask_line_param_t));
 8011676:	2138      	movs	r1, #56	@ 0x38
 8011678:	68f8      	ldr	r0, [r7, #12]
 801167a:	f7ff ff68 	bl	801154e <lv_memzero>

    if(p1y == p2y && side == LV_DRAW_SW_MASK_LINE_SIDE_BOTTOM) {
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011682:	429a      	cmp	r2, r3
 8011684:	d109      	bne.n	801169a <lv_draw_sw_mask_line_points_init+0x32>
 8011686:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801168a:	2b03      	cmp	r3, #3
 801168c:	d105      	bne.n	801169a <lv_draw_sw_mask_line_points_init+0x32>
        p1y--;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	3b01      	subs	r3, #1
 8011692:	607b      	str	r3, [r7, #4]
        p2y--;
 8011694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011696:	3b01      	subs	r3, #1
 8011698:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    if(p1y > p2y) {
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169e:	429a      	cmp	r2, r3
 80116a0:	dd0b      	ble.n	80116ba <lv_draw_sw_mask_line_points_init+0x52>
        int32_t t;
        t = p2x;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	627b      	str	r3, [r7, #36]	@ 0x24
        p2x = p1x;
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	603b      	str	r3, [r7, #0]
        p1x = t;
 80116aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ac:	60bb      	str	r3, [r7, #8]

        t = p2y;
 80116ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b0:	627b      	str	r3, [r7, #36]	@ 0x24
        p2y = p1y;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	633b      	str	r3, [r7, #48]	@ 0x30
        p1y = t;
 80116b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b8:	607b      	str	r3, [r7, #4]
    }

    lv_point_set(&param->cfg.p1, p1x, p1y);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3308      	adds	r3, #8
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	68b9      	ldr	r1, [r7, #8]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7ff ff31 	bl	801152a <lv_point_set>
    lv_point_set(&param->cfg.p2, p2x, p2y);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	3310      	adds	r3, #16
 80116cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116ce:	6839      	ldr	r1, [r7, #0]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff ff2a 	bl	801152a <lv_point_set>
    param->cfg.side = side;
 80116d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80116da:	f003 0303 	and.w	r3, r3, #3
 80116de:	b2d9      	uxtb	r1, r3
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	7e13      	ldrb	r3, [r2, #24]
 80116e4:	f361 0301 	bfi	r3, r1, #0, #2
 80116e8:	7613      	strb	r3, [r2, #24]

    lv_point_set(&param->origo, p1x, p1y);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	331c      	adds	r3, #28
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	68b9      	ldr	r1, [r7, #8]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7ff ff19 	bl	801152a <lv_point_set>
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80116f8:	683a      	ldr	r2, [r7, #0]
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	1ad3      	subs	r3, r2, r3
 80116fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011702:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011706:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	1acb      	subs	r3, r1, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	bfb8      	it	lt
 8011710:	425b      	neglt	r3, r3
 8011712:	429a      	cmp	r2, r3
 8011714:	bfcc      	ite	gt
 8011716:	2301      	movgt	r3, #1
 8011718:	2300      	movle	r3, #0
 801171a:	b2d9      	uxtb	r1, r3
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8011722:	f361 0300 	bfi	r3, r1, #0, #1
 8011726:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
    param->yx_steep = 0;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2200      	movs	r2, #0
 801172e:	629a      	str	r2, [r3, #40]	@ 0x28
    param->xy_steep = 0;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2200      	movs	r2, #0
 8011734:	625a      	str	r2, [r3, #36]	@ 0x24
    param->dsc.cb = (lv_draw_sw_mask_xcb_t)lv_draw_mask_line;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	4a61      	ldr	r2, [pc, #388]	@ (80118c0 <lv_draw_sw_mask_line_points_init+0x258>)
 801173a:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_SW_MASK_TYPE_LINE;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2200      	movs	r2, #0
 8011740:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8011742:	683a      	ldr	r2, [r7, #0]
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 801174a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d024      	beq.n	80117ac <lv_draw_sw_mask_line_points_init+0x144>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8011762:	6a3b      	ldr	r3, [r7, #32]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d00c      	beq.n	8011782 <lv_draw_sw_mask_line_points_init+0x11a>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8011768:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801176c:	6a3b      	ldr	r3, [r7, #32]
 801176e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011772:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	69fa      	ldr	r2, [r7, #28]
 8011778:	fb02 f303 	mul.w	r3, r2, r3
 801177c:	129a      	asrs	r2, r3, #10
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        if(dy) {
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00c      	beq.n	80117a2 <lv_draw_sw_mask_line_points_init+0x13a>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8011788:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011792:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	6a3a      	ldr	r2, [r7, #32]
 8011798:	fb02 f303 	mul.w	r3, r2, r3
 801179c:	129a      	asrs	r2, r3, #10
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
        param->steep = param->yx_steep;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80117aa:	e023      	b.n	80117f4 <lv_draw_sw_mask_line_points_init+0x18c>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d00c      	beq.n	80117cc <lv_draw_sw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 80117b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80117bc:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	6a3a      	ldr	r2, [r7, #32]
 80117c2:	fb02 f303 	mul.w	r3, r2, r3
 80117c6:	129a      	asrs	r2, r3, #10
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        if(dx) {
 80117cc:	6a3b      	ldr	r3, [r7, #32]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00c      	beq.n	80117ec <lv_draw_sw_mask_line_points_init+0x184>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 80117d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80117d6:	6a3b      	ldr	r3, [r7, #32]
 80117d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80117dc:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	69fa      	ldr	r2, [r7, #28]
 80117e2:	fb02 f303 	mul.w	r3, r2, r3
 80117e6:	129a      	asrs	r2, r3, #10
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        param->steep = param->xy_steep;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    if(param->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	7e1b      	ldrb	r3, [r3, #24]
 80117f8:	f003 0303 	and.w	r3, r3, #3
 80117fc:	b2db      	uxtb	r3, r3
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d107      	bne.n	8011812 <lv_draw_sw_mask_line_points_init+0x1aa>
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8011808:	f36f 0341 	bfc	r3, #1, #1
 801180c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 8011810:	e043      	b.n	801189a <lv_draw_sw_mask_line_points_init+0x232>
    else if(param->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	7e1b      	ldrb	r3, [r3, #24]
 8011816:	f003 0303 	and.w	r3, r3, #3
 801181a:	b2db      	uxtb	r3, r3
 801181c:	2b01      	cmp	r3, #1
 801181e:	d107      	bne.n	8011830 <lv_draw_sw_mask_line_points_init+0x1c8>
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8011826:	f043 0302 	orr.w	r3, r3, #2
 801182a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 801182e:	e034      	b.n	801189a <lv_draw_sw_mask_line_points_init+0x232>
    else if(param->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_TOP) {
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	7e1b      	ldrb	r3, [r3, #24]
 8011834:	f003 0303 	and.w	r3, r3, #3
 8011838:	b2db      	uxtb	r3, r3
 801183a:	2b02      	cmp	r3, #2
 801183c:	d113      	bne.n	8011866 <lv_draw_sw_mask_line_points_init+0x1fe>
        if(param->steep > 0) param->inv = 1;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011842:	2b00      	cmp	r3, #0
 8011844:	dd07      	ble.n	8011856 <lv_draw_sw_mask_line_points_init+0x1ee>
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 801184c:	f043 0302 	orr.w	r3, r3, #2
 8011850:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 8011854:	e021      	b.n	801189a <lv_draw_sw_mask_line_points_init+0x232>
        else param->inv = 0;
 8011856:	68fa      	ldr	r2, [r7, #12]
 8011858:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 801185c:	f36f 0341 	bfc	r3, #1, #1
 8011860:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 8011864:	e019      	b.n	801189a <lv_draw_sw_mask_line_points_init+0x232>
    }
    else if(param->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_BOTTOM) {
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	7e1b      	ldrb	r3, [r3, #24]
 801186a:	f003 0303 	and.w	r3, r3, #3
 801186e:	b2db      	uxtb	r3, r3
 8011870:	2b03      	cmp	r3, #3
 8011872:	d112      	bne.n	801189a <lv_draw_sw_mask_line_points_init+0x232>
        if(param->steep > 0) param->inv = 0;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011878:	2b00      	cmp	r3, #0
 801187a:	dd07      	ble.n	801188c <lv_draw_sw_mask_line_points_init+0x224>
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8011882:	f36f 0341 	bfc	r3, #1, #1
 8011886:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 801188a:	e006      	b.n	801189a <lv_draw_sw_mask_line_points_init+0x232>
        else param->inv = 1;
 801188c:	68fa      	ldr	r2, [r7, #12]
 801188e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8011892:	f043 0302 	orr.w	r3, r3, #2
 8011896:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
    }

    param->spx = param->steep >> 2;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801189e:	109a      	asrs	r2, r3, #2
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if(param->steep < 0) param->spx = -param->spx;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	da04      	bge.n	80118b6 <lv_draw_sw_mask_line_points_init+0x24e>
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118b0:	425a      	negs	r2, r3
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80118b6:	bf00      	nop
 80118b8:	3728      	adds	r7, #40	@ 0x28
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	08011ca1 	.word	0x08011ca1

080118c4 <lv_draw_sw_mask_line_angle_init>:

void lv_draw_sw_mask_line_angle_init(lv_draw_sw_mask_line_param_t * param, int32_t p1x, int32_t py, int16_t angle,
                                     lv_draw_sw_mask_line_side_t side)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b088      	sub	sp, #32
 80118c8:	af02      	add	r7, sp, #8
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	60b9      	str	r1, [r7, #8]
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	807b      	strh	r3, [r7, #2]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 80118d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80118d6:	2bb4      	cmp	r3, #180	@ 0xb4
 80118d8:	dd03      	ble.n	80118e2 <lv_draw_sw_mask_line_angle_init+0x1e>
 80118da:	887b      	ldrh	r3, [r7, #2]
 80118dc:	3bb4      	subs	r3, #180	@ 0xb4
 80118de:	b29b      	uxth	r3, r3
 80118e0:	807b      	strh	r3, [r7, #2]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 80118e2:	887b      	ldrh	r3, [r7, #2]
 80118e4:	335a      	adds	r3, #90	@ 0x5a
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	b21b      	sxth	r3, r3
 80118ea:	4618      	mov	r0, r3
 80118ec:	f00a fb56 	bl	801bf9c <lv_trigo_sin>
 80118f0:	4603      	mov	r3, r0
 80118f2:	115b      	asrs	r3, r3, #5
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	4413      	add	r3, r2
 80118f8:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 80118fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80118fe:	4618      	mov	r0, r3
 8011900:	f00a fb4c 	bl	801bf9c <lv_trigo_sin>
 8011904:	4603      	mov	r3, r0
 8011906:	115b      	asrs	r3, r3, #5
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	4413      	add	r3, r2
 801190c:	613b      	str	r3, [r7, #16]

    lv_draw_sw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 801190e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	68b9      	ldr	r1, [r7, #8]
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f7ff fea2 	bl	8011668 <lv_draw_sw_mask_line_points_init>
}
 8011924:	bf00      	nop
 8011926:	3718      	adds	r7, #24
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <lv_draw_sw_mask_angle_init>:

void lv_draw_sw_mask_angle_init(lv_draw_sw_mask_angle_param_t * param, int32_t vertex_x, int32_t vertex_y,
                                int32_t start_angle, int32_t end_angle)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b088      	sub	sp, #32
 8011930:	af02      	add	r7, sp, #8
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
 8011938:	603b      	str	r3, [r7, #0]
    lv_draw_sw_mask_line_side_t start_side;
    lv_draw_sw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	da02      	bge.n	8011946 <lv_draw_sw_mask_angle_init+0x1a>
        start_angle = 0;
 8011940:	2300      	movs	r3, #0
 8011942:	603b      	str	r3, [r7, #0]
 8011944:	e006      	b.n	8011954 <lv_draw_sw_mask_angle_init+0x28>
    else if(start_angle > 359)
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 801194c:	db02      	blt.n	8011954 <lv_draw_sw_mask_angle_init+0x28>
        start_angle = 359;
 801194e:	f240 1367 	movw	r3, #359	@ 0x167
 8011952:	603b      	str	r3, [r7, #0]

    if(end_angle < 0)
 8011954:	6a3b      	ldr	r3, [r7, #32]
 8011956:	2b00      	cmp	r3, #0
 8011958:	da02      	bge.n	8011960 <lv_draw_sw_mask_angle_init+0x34>
        end_angle = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	623b      	str	r3, [r7, #32]
 801195e:	e006      	b.n	801196e <lv_draw_sw_mask_angle_init+0x42>
    else if(end_angle > 359)
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8011966:	db02      	blt.n	801196e <lv_draw_sw_mask_angle_init+0x42>
        end_angle = 359;
 8011968:	f240 1367 	movw	r3, #359	@ 0x167
 801196c:	623b      	str	r3, [r7, #32]

    if(end_angle < start_angle) {
 801196e:	6a3a      	ldr	r2, [r7, #32]
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	429a      	cmp	r2, r3
 8011974:	da0c      	bge.n	8011990 <lv_draw_sw_mask_angle_init+0x64>
        param->delta_deg = 360 - start_angle + end_angle;
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	b29a      	uxth	r2, r3
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	b29b      	uxth	r3, r3
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	b29b      	uxth	r3, r3
 8011982:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8011986:	b29a      	uxth	r2, r3
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
 801198e:	e009      	b.n	80119a4 <lv_draw_sw_mask_angle_init+0x78>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8011990:	6a3a      	ldr	r2, [r7, #32]
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	1ad3      	subs	r3, r2, r3
 8011996:	2b00      	cmp	r3, #0
 8011998:	bfb8      	it	lt
 801199a:	425b      	neglt	r3, r3
 801199c:	b29a      	uxth	r2, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    }

    param->cfg.start_angle = start_angle;
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	683a      	ldr	r2, [r7, #0]
 80119a8:	611a      	str	r2, [r3, #16]
    param->cfg.end_angle = end_angle;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a3a      	ldr	r2, [r7, #32]
 80119ae:	615a      	str	r2, [r3, #20]
    lv_point_set(&param->cfg.vertex_p, vertex_x, vertex_y);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	3308      	adds	r3, #8
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	68b9      	ldr	r1, [r7, #8]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7ff fdb6 	bl	801152a <lv_point_set>
    param->dsc.cb = (lv_draw_sw_mask_xcb_t)lv_draw_mask_angle;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	4a29      	ldr	r2, [pc, #164]	@ (8011a68 <lv_draw_sw_mask_angle_init+0x13c>)
 80119c2:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_SW_MASK_TYPE_ANGLE;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2201      	movs	r2, #1
 80119c8:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	db04      	blt.n	80119da <lv_draw_sw_mask_angle_init+0xae>
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80119d6:	dc00      	bgt.n	80119da <lv_draw_sw_mask_angle_init+0xae>
 80119d8:	e000      	b.n	80119dc <lv_draw_sw_mask_angle_init+0xb0>
 80119da:	e7fe      	b.n	80119da <lv_draw_sw_mask_angle_init+0xae>

    if(start_angle >= 0 && start_angle < 180) {
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	db05      	blt.n	80119ee <lv_draw_sw_mask_angle_init+0xc2>
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	2bb3      	cmp	r3, #179	@ 0xb3
 80119e6:	dc02      	bgt.n	80119ee <lv_draw_sw_mask_angle_init+0xc2>
        start_side = LV_DRAW_SW_MASK_LINE_SIDE_LEFT;
 80119e8:	2300      	movs	r3, #0
 80119ea:	75fb      	strb	r3, [r7, #23]
 80119ec:	e001      	b.n	80119f2 <lv_draw_sw_mask_angle_init+0xc6>
    }
    else
        start_side = LV_DRAW_SW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 80119ee:	2301      	movs	r3, #1
 80119f0:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 80119f2:	6a3b      	ldr	r3, [r7, #32]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	db04      	blt.n	8011a02 <lv_draw_sw_mask_angle_init+0xd6>
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80119fe:	dc00      	bgt.n	8011a02 <lv_draw_sw_mask_angle_init+0xd6>
 8011a00:	e000      	b.n	8011a04 <lv_draw_sw_mask_angle_init+0xd8>
 8011a02:	e7fe      	b.n	8011a02 <lv_draw_sw_mask_angle_init+0xd6>

    if(end_angle >= 0 && end_angle < 180) {
 8011a04:	6a3b      	ldr	r3, [r7, #32]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	db05      	blt.n	8011a16 <lv_draw_sw_mask_angle_init+0xea>
 8011a0a:	6a3b      	ldr	r3, [r7, #32]
 8011a0c:	2bb3      	cmp	r3, #179	@ 0xb3
 8011a0e:	dc02      	bgt.n	8011a16 <lv_draw_sw_mask_angle_init+0xea>
        end_side = LV_DRAW_SW_MASK_LINE_SIDE_RIGHT;
 8011a10:	2301      	movs	r3, #1
 8011a12:	75bb      	strb	r3, [r7, #22]
 8011a14:	e00b      	b.n	8011a2e <lv_draw_sw_mask_angle_init+0x102>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	2bb3      	cmp	r3, #179	@ 0xb3
 8011a1a:	dd06      	ble.n	8011a2a <lv_draw_sw_mask_angle_init+0xfe>
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8011a22:	da02      	bge.n	8011a2a <lv_draw_sw_mask_angle_init+0xfe>
        end_side = LV_DRAW_SW_MASK_LINE_SIDE_LEFT;
 8011a24:	2300      	movs	r3, #0
 8011a26:	75bb      	strb	r3, [r7, #22]
 8011a28:	e001      	b.n	8011a2e <lv_draw_sw_mask_angle_init+0x102>
    }
    else
        end_side = LV_DRAW_SW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	75bb      	strb	r3, [r7, #22]

    lv_draw_sw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f103 0018 	add.w	r0, r3, #24
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	b21a      	sxth	r2, r3
 8011a38:	7dfb      	ldrb	r3, [r7, #23]
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	68b9      	ldr	r1, [r7, #8]
 8011a42:	f7ff ff3f 	bl	80118c4 <lv_draw_sw_mask_line_angle_init>
    lv_draw_sw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	b21a      	sxth	r2, r3
 8011a50:	7dbb      	ldrb	r3, [r7, #22]
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	4613      	mov	r3, r2
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	68b9      	ldr	r1, [r7, #8]
 8011a5a:	f7ff ff33 	bl	80118c4 <lv_draw_sw_mask_line_angle_init>
}
 8011a5e:	bf00      	nop
 8011a60:	3718      	adds	r7, #24
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	08012569 	.word	0x08012569

08011a6c <lv_draw_sw_mask_radius_init>:

void lv_draw_sw_mask_radius_init(lv_draw_sw_mask_radius_param_t * param, const lv_area_t * rect, int32_t radius,
                                 bool inv)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b08a      	sub	sp, #40	@ 0x28
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
 8011a78:	70fb      	strb	r3, [r7, #3]
    int32_t w = lv_area_get_width(rect);
 8011a7a:	68b8      	ldr	r0, [r7, #8]
 8011a7c:	f7ff fd35 	bl	80114ea <lv_area_get_width>
 8011a80:	61f8      	str	r0, [r7, #28]
    int32_t h = lv_area_get_height(rect);
 8011a82:	68b8      	ldr	r0, [r7, #8]
 8011a84:	f7ff fd41 	bl	801150a <lv_area_get_height>
 8011a88:	61b8      	str	r0, [r7, #24]
    int32_t short_side = LV_MIN(w, h);
 8011a8a:	69ba      	ldr	r2, [r7, #24]
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	bfa8      	it	ge
 8011a92:	4613      	movge	r3, r2
 8011a94:	617b      	str	r3, [r7, #20]
    if(radius > short_side >> 1) radius = short_side >> 1;
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	105b      	asrs	r3, r3, #1
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	dd02      	ble.n	8011aa6 <lv_draw_sw_mask_radius_init+0x3a>
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	105b      	asrs	r3, r3, #1
 8011aa4:	607b      	str	r3, [r7, #4]
    if(radius < 0) radius = 0;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	da01      	bge.n	8011ab0 <lv_draw_sw_mask_radius_init+0x44>
 8011aac:	2300      	movs	r3, #0
 8011aae:	607b      	str	r3, [r7, #4]

    lv_area_copy(&param->cfg.rect, rect);
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	3308      	adds	r3, #8
 8011ab4:	68b9      	ldr	r1, [r7, #8]
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff fcfc 	bl	80114b4 <lv_area_copy>
    param->cfg.radius = radius;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	619a      	str	r2, [r3, #24]
    param->cfg.outer = inv ? 1 : 0;
 8011ac2:	78f9      	ldrb	r1, [r7, #3]
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	7f13      	ldrb	r3, [r2, #28]
 8011ac8:	f361 0300 	bfi	r3, r1, #0, #1
 8011acc:	7713      	strb	r3, [r2, #28]
    param->dsc.cb = (lv_draw_sw_mask_xcb_t)lv_draw_mask_radius;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	4a70      	ldr	r2, [pc, #448]	@ (8011c94 <lv_draw_sw_mask_radius_init+0x228>)
 8011ad2:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_SW_MASK_TYPE_RADIUS;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2202      	movs	r2, #2
 8011ad8:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d103      	bne.n	8011ae8 <lv_draw_sw_mask_radius_init+0x7c>
        param->circle = NULL;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	621a      	str	r2, [r3, #32]
        return;
 8011ae6:	e0d2      	b.n	8011c8e <lv_draw_sw_mask_radius_init+0x222>
    }

    lv_mutex_lock(&circle_cache_mutex);
 8011ae8:	486b      	ldr	r0, [pc, #428]	@ (8011c98 <lv_draw_sw_mask_radius_init+0x22c>)
 8011aea:	f00b f846 	bl	801cb7a <lv_mutex_lock>

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_DRAW_SW_CIRCLE_CACHE_SIZE; i++) {
 8011aee:	2300      	movs	r3, #0
 8011af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011af2:	e055      	b.n	8011ba0 <lv_draw_sw_mask_radius_init+0x134>
        if(_circle_cache[i].radius == radius) {
 8011af4:	4969      	ldr	r1, [pc, #420]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011af8:	4613      	mov	r3, r2
 8011afa:	00db      	lsls	r3, r3, #3
 8011afc:	1a9b      	subs	r3, r3, r2
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	440b      	add	r3, r1
 8011b02:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d145      	bne.n	8011b9a <lv_draw_sw_mask_radius_init+0x12e>
            _circle_cache[i].used_cnt++;
 8011b0e:	4963      	ldr	r1, [pc, #396]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b12:	4613      	mov	r3, r2
 8011b14:	00db      	lsls	r3, r3, #3
 8011b16:	1a9b      	subs	r3, r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	440b      	add	r3, r1
 8011b1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	1c59      	adds	r1, r3, #1
 8011b24:	485d      	ldr	r0, [pc, #372]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b28:	4613      	mov	r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	1a9b      	subs	r3, r3, r2
 8011b2e:	009b      	lsls	r3, r3, #2
 8011b30:	4403      	add	r3, r0
 8011b32:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011b36:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(_circle_cache[i].life, radius);
 8011b38:	4958      	ldr	r1, [pc, #352]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	00db      	lsls	r3, r3, #3
 8011b40:	1a9b      	subs	r3, r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	440b      	add	r3, r1
 8011b46:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b0f      	cmp	r3, #15
 8011b50:	dd02      	ble.n	8011b58 <lv_draw_sw_mask_radius_init+0xec>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	111b      	asrs	r3, r3, #4
 8011b56:	e000      	b.n	8011b5a <lv_draw_sw_mask_radius_init+0xee>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	4413      	add	r3, r2
 8011b5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b60:	bfa8      	it	ge
 8011b62:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 8011b66:	4619      	mov	r1, r3
 8011b68:	484c      	ldr	r0, [pc, #304]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	00db      	lsls	r3, r3, #3
 8011b70:	1a9b      	subs	r3, r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4403      	add	r3, r0
 8011b76:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8011b7a:	6019      	str	r1, [r3, #0]
            param->circle = &(_circle_cache[i]);
 8011b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b7e:	4613      	mov	r3, r2
 8011b80:	00db      	lsls	r3, r3, #3
 8011b82:	1a9b      	subs	r3, r3, r2
 8011b84:	009b      	lsls	r3, r3, #2
 8011b86:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8011b8a:	4a44      	ldr	r2, [pc, #272]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011b8c:	441a      	add	r2, r3
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	621a      	str	r2, [r3, #32]
            lv_mutex_unlock(&circle_cache_mutex);
 8011b92:	4841      	ldr	r0, [pc, #260]	@ (8011c98 <lv_draw_sw_mask_radius_init+0x22c>)
 8011b94:	f00a fffc 	bl	801cb90 <lv_mutex_unlock>
            return;
 8011b98:	e079      	b.n	8011c8e <lv_draw_sw_mask_radius_init+0x222>
    for(i = 0; i < LV_DRAW_SW_CIRCLE_CACHE_SIZE; i++) {
 8011b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d9a6      	bls.n	8011af4 <lv_draw_sw_mask_radius_init+0x88>
        }
    }

    /*If not cached use the free entry with lowest life*/
    _lv_draw_sw_mask_radius_circle_dsc_t * entry = NULL;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	623b      	str	r3, [r7, #32]
    for(i = 0; i < LV_DRAW_SW_CIRCLE_CACHE_SIZE; i++) {
 8011baa:	2300      	movs	r3, #0
 8011bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bae:	e034      	b.n	8011c1a <lv_draw_sw_mask_radius_init+0x1ae>
        if(_circle_cache[i].used_cnt == 0) {
 8011bb0:	493a      	ldr	r1, [pc, #232]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	1a9b      	subs	r3, r3, r2
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	440b      	add	r3, r1
 8011bbe:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d125      	bne.n	8011c14 <lv_draw_sw_mask_radius_init+0x1a8>
            if(!entry) entry = &(_circle_cache[i]);
 8011bc8:	6a3b      	ldr	r3, [r7, #32]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10a      	bne.n	8011be4 <lv_draw_sw_mask_radius_init+0x178>
 8011bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bd0:	4613      	mov	r3, r2
 8011bd2:	00db      	lsls	r3, r3, #3
 8011bd4:	1a9b      	subs	r3, r3, r2
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8011bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011bde:	4413      	add	r3, r2
 8011be0:	623b      	str	r3, [r7, #32]
 8011be2:	e017      	b.n	8011c14 <lv_draw_sw_mask_radius_init+0x1a8>
            else if(_circle_cache[i].life < entry->life) entry = &(_circle_cache[i]);
 8011be4:	492d      	ldr	r1, [pc, #180]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011be8:	4613      	mov	r3, r2
 8011bea:	00db      	lsls	r3, r3, #3
 8011bec:	1a9b      	subs	r3, r3, r2
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	440b      	add	r3, r1
 8011bf2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8011bf6:	681a      	ldr	r2, [r3, #0]
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	691b      	ldr	r3, [r3, #16]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	da09      	bge.n	8011c14 <lv_draw_sw_mask_radius_init+0x1a8>
 8011c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c02:	4613      	mov	r3, r2
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	1a9b      	subs	r3, r3, r2
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8011c0e:	4a23      	ldr	r2, [pc, #140]	@ (8011c9c <lv_draw_sw_mask_radius_init+0x230>)
 8011c10:	4413      	add	r3, r2
 8011c12:	623b      	str	r3, [r7, #32]
    for(i = 0; i < LV_DRAW_SW_CIRCLE_CACHE_SIZE; i++) {
 8011c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c16:	3301      	adds	r3, #1
 8011c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1c:	2b03      	cmp	r3, #3
 8011c1e:	d9c7      	bls.n	8011bb0 <lv_draw_sw_mask_radius_init+0x144>
        }
    }

    /*There is no unused entry. Allocate one temporarily*/
    if(!entry) {
 8011c20:	6a3b      	ldr	r3, [r7, #32]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d10d      	bne.n	8011c42 <lv_draw_sw_mask_radius_init+0x1d6>
        entry = lv_malloc_zeroed(sizeof(_lv_draw_sw_mask_radius_circle_dsc_t));
 8011c26:	201c      	movs	r0, #28
 8011c28:	f00c fa50 	bl	801e0cc <lv_malloc_zeroed>
 8011c2c:	6238      	str	r0, [r7, #32]
        LV_ASSERT_MALLOC(entry);
 8011c2e:	6a3b      	ldr	r3, [r7, #32]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d101      	bne.n	8011c38 <lv_draw_sw_mask_radius_init+0x1cc>
 8011c34:	bf00      	nop
 8011c36:	e7fd      	b.n	8011c34 <lv_draw_sw_mask_radius_init+0x1c8>
        entry->life = -1;
 8011c38:	6a3b      	ldr	r3, [r7, #32]
 8011c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c3e:	611a      	str	r2, [r3, #16]
 8011c40:	e019      	b.n	8011c76 <lv_draw_sw_mask_radius_init+0x20a>
    }
    else {
        entry->used_cnt++;
 8011c42:	6a3b      	ldr	r3, [r7, #32]
 8011c44:	695b      	ldr	r3, [r3, #20]
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	6a3b      	ldr	r3, [r7, #32]
 8011c4a:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 8011c4c:	6a3b      	ldr	r3, [r7, #32]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8011c52:	6a3b      	ldr	r3, [r7, #32]
 8011c54:	691a      	ldr	r2, [r3, #16]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2b0f      	cmp	r3, #15
 8011c5a:	dd02      	ble.n	8011c62 <lv_draw_sw_mask_radius_init+0x1f6>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	111b      	asrs	r3, r3, #4
 8011c60:	e000      	b.n	8011c64 <lv_draw_sw_mask_radius_init+0x1f8>
 8011c62:	2301      	movs	r3, #1
 8011c64:	4413      	add	r3, r2
 8011c66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c6a:	bfa8      	it	ge
 8011c6c:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 8011c70:	461a      	mov	r2, r3
 8011c72:	6a3b      	ldr	r3, [r7, #32]
 8011c74:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6a3a      	ldr	r2, [r7, #32]
 8011c7a:	621a      	str	r2, [r3, #32]

    circ_calc_aa4(param->circle, radius);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6a1b      	ldr	r3, [r3, #32]
 8011c80:	6879      	ldr	r1, [r7, #4]
 8011c82:	4618      	mov	r0, r3
 8011c84:	f001 f95b 	bl	8012f3e <circ_calc_aa4>
    lv_mutex_unlock(&circle_cache_mutex);
 8011c88:	4803      	ldr	r0, [pc, #12]	@ (8011c98 <lv_draw_sw_mask_radius_init+0x22c>)
 8011c8a:	f00a ff81 	bl	801cb90 <lv_mutex_unlock>

}
 8011c8e:	3728      	adds	r7, #40	@ 0x28
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	08012a89 	.word	0x08012a89
 8011c98:	2000018c 	.word	0x2000018c
 8011c9c:	2000008c 	.word	0x2000008c

08011ca0 <lv_draw_mask_line>:
 **********************/

static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_line(lv_opa_t * mask_buf, int32_t abs_x,
                                                                     int32_t abs_y, int32_t len,
                                                                     lv_draw_sw_mask_line_param_t * p)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b08a      	sub	sp, #40	@ 0x28
 8011ca4:	af02      	add	r7, sp, #8
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	607a      	str	r2, [r7, #4]
 8011cac:	603b      	str	r3, [r7, #0]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 8011cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cb0:	6a1b      	ldr	r3, [r3, #32]
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	607b      	str	r3, [r7, #4]
    abs_x -= p->origo.x;
 8011cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cba:	69db      	ldr	r3, [r3, #28]
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	60bb      	str	r3, [r7, #8]

    /*Handle special cases*/
    if(p->steep == 0) {
 8011cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f040 8099 	bne.w	8011dfe <lv_draw_mask_line+0x15e>
        /*Horizontal*/
        if(p->flat) {
 8011ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011cd2:	f003 0301 	and.w	r3, r3, #1
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d029      	beq.n	8011d30 <lv_draw_mask_line+0x90>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_LEFT ||
 8011cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cde:	7e1b      	ldrb	r3, [r3, #24]
 8011ce0:	f003 0303 	and.w	r3, r3, #3
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d006      	beq.n	8011cf8 <lv_draw_mask_line+0x58>
               p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cec:	7e1b      	ldrb	r3, [r3, #24]
 8011cee:	f003 0303 	and.w	r3, r3, #3
 8011cf2:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_LEFT ||
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d101      	bne.n	8011cfc <lv_draw_mask_line+0x5c>
               p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e09e      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            else if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_TOP && abs_y < 0) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfe:	7e1b      	ldrb	r3, [r3, #24]
 8011d00:	f003 0303 	and.w	r3, r3, #3
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	2b02      	cmp	r3, #2
 8011d08:	d104      	bne.n	8011d14 <lv_draw_mask_line+0x74>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	da01      	bge.n	8011d14 <lv_draw_mask_line+0x74>
 8011d10:	2301      	movs	r3, #1
 8011d12:	e092      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            else if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d16:	7e1b      	ldrb	r3, [r3, #24]
 8011d18:	f003 0303 	and.w	r3, r3, #3
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b03      	cmp	r3, #3
 8011d20:	d104      	bne.n	8011d2c <lv_draw_mask_line+0x8c>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	dd01      	ble.n	8011d2c <lv_draw_mask_line+0x8c>
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e086      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            else {
                return LV_DRAW_SW_MASK_RES_TRANSP;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	e084      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_TOP ||
 8011d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d32:	7e1b      	ldrb	r3, [r3, #24]
 8011d34:	f003 0303 	and.w	r3, r3, #3
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	2b02      	cmp	r3, #2
 8011d3c:	d006      	beq.n	8011d4c <lv_draw_mask_line+0xac>
               p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d40:	7e1b      	ldrb	r3, [r3, #24]
 8011d42:	f003 0303 	and.w	r3, r3, #3
 8011d46:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_TOP ||
 8011d48:	2b03      	cmp	r3, #3
 8011d4a:	d101      	bne.n	8011d50 <lv_draw_mask_line+0xb0>
               p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	e074      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            else if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d52:	7e1b      	ldrb	r3, [r3, #24]
 8011d54:	f003 0303 	and.w	r3, r3, #3
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d104      	bne.n	8011d68 <lv_draw_mask_line+0xc8>
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	dd01      	ble.n	8011d68 <lv_draw_mask_line+0xc8>
 8011d64:	2301      	movs	r3, #1
 8011d66:	e068      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            else if(p->cfg.side == LV_DRAW_SW_MASK_LINE_SIDE_LEFT) {
 8011d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d6a:	7e1b      	ldrb	r3, [r3, #24]
 8011d6c:	f003 0303 	and.w	r3, r3, #3
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d120      	bne.n	8011db8 <lv_draw_mask_line+0x118>
                if(abs_x + len < 0) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	da01      	bge.n	8011d84 <lv_draw_mask_line+0xe4>
 8011d80:	2301      	movs	r3, #1
 8011d82:	e05a      	b.n	8011e3a <lv_draw_mask_line+0x19a>
                else {
                    int32_t k = - abs_x;
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	425b      	negs	r3, r3
 8011d88:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_SW_MASK_RES_TRANSP;
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	da01      	bge.n	8011d94 <lv_draw_mask_line+0xf4>
 8011d90:	2300      	movs	r3, #0
 8011d92:	e052      	b.n	8011e3a <lv_draw_mask_line+0x19a>
                    if(k >= 0 && k < len) lv_memzero(&mask_buf[k], len - k);
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	db0c      	blt.n	8011db4 <lv_draw_mask_line+0x114>
 8011d9a:	697a      	ldr	r2, [r7, #20]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	da08      	bge.n	8011db4 <lv_draw_mask_line+0x114>
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	68fa      	ldr	r2, [r7, #12]
 8011da6:	18d0      	adds	r0, r2, r3
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	4619      	mov	r1, r3
 8011db0:	f7ff fbcd 	bl	801154e <lv_memzero>
                    return  LV_DRAW_SW_MASK_RES_CHANGED;
 8011db4:	2302      	movs	r3, #2
 8011db6:	e040      	b.n	8011e3a <lv_draw_mask_line+0x19a>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_SW_MASK_RES_TRANSP;
 8011db8:	68ba      	ldr	r2, [r7, #8]
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	da01      	bge.n	8011dc6 <lv_draw_mask_line+0x126>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	e039      	b.n	8011e3a <lv_draw_mask_line+0x19a>
                else {
                    int32_t k = - abs_x;
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	425b      	negs	r3, r3
 8011dca:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	da01      	bge.n	8011dd6 <lv_draw_mask_line+0x136>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_SW_MASK_RES_TRANSP;
 8011dd6:	69fa      	ldr	r2, [r7, #28]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	db01      	blt.n	8011de2 <lv_draw_mask_line+0x142>
 8011dde:	2300      	movs	r3, #0
 8011de0:	e02b      	b.n	8011e3a <lv_draw_mask_line+0x19a>
                    else if(k >= 0 && k < len) lv_memzero(&mask_buf[0], k);
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	db08      	blt.n	8011dfa <lv_draw_mask_line+0x15a>
 8011de8:	69fa      	ldr	r2, [r7, #28]
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	da04      	bge.n	8011dfa <lv_draw_mask_line+0x15a>
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	4619      	mov	r1, r3
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ff fbaa 	bl	801154e <lv_memzero>
                    return  LV_DRAW_SW_MASK_RES_CHANGED;
 8011dfa:	2302      	movs	r3, #2
 8011dfc:	e01d      	b.n	8011e3a <lv_draw_mask_line+0x19a>
            }
        }
    }

    lv_draw_sw_mask_res_t res;
    if(p->flat) {
 8011dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011e04:	f003 0301 	and.w	r3, r3, #1
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d00a      	beq.n	8011e24 <lv_draw_mask_line+0x184>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 8011e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e10:	9300      	str	r3, [sp, #0]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	68b9      	ldr	r1, [r7, #8]
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f000 f812 	bl	8011e42 <line_mask_flat>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	76fb      	strb	r3, [r7, #27]
 8011e22:	e009      	b.n	8011e38 <lv_draw_mask_line+0x198>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8011e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	68b9      	ldr	r1, [r7, #8]
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f000 f979 	bl	8012126 <line_mask_steep>
 8011e34:	4603      	mov	r3, r0
 8011e36:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8011e38:	7efb      	ldrb	r3, [r7, #27]
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3720      	adds	r7, #32
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}

08011e42 <line_mask_flat>:

static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM line_mask_flat(lv_opa_t * mask_buf, int32_t abs_x,
                                                                  int32_t abs_y,
                                                                  int32_t len,
                                                                  lv_draw_sw_mask_line_param_t * p)
{
 8011e42:	b590      	push	{r4, r7, lr}
 8011e44:	b08d      	sub	sp, #52	@ 0x34
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	60f8      	str	r0, [r7, #12]
 8011e4a:	60b9      	str	r1, [r7, #8]
 8011e4c:	607a      	str	r2, [r7, #4]
 8011e4e:	603b      	str	r3, [r7, #0]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8011e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e54:	68ba      	ldr	r2, [r7, #8]
 8011e56:	fb02 f303 	mul.w	r3, r2, r3
 8011e5a:	129b      	asrs	r3, r3, #10
 8011e5c:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 8011e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dd0f      	ble.n	8011e86 <line_mask_flat+0x44>
        if(y_at_x > abs_y) {
 8011e66:	69fa      	ldr	r2, [r7, #28]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	dd1b      	ble.n	8011ea6 <line_mask_flat+0x64>
            if(p->inv) {
 8011e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011e74:	f003 0302 	and.w	r3, r3, #2
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d001      	beq.n	8011e82 <line_mask_flat+0x40>
                return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e14d      	b.n	801211e <line_mask_flat+0x2dc>
            }
            else {
                return LV_DRAW_SW_MASK_RES_TRANSP;
 8011e82:	2300      	movs	r3, #0
 8011e84:	e14b      	b.n	801211e <line_mask_flat+0x2dc>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 8011e86:	69fa      	ldr	r2, [r7, #28]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	da0b      	bge.n	8011ea6 <line_mask_flat+0x64>
            if(p->inv) {
 8011e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011e94:	f003 0302 	and.w	r3, r3, #2
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <line_mask_flat+0x60>
                return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	e13d      	b.n	801211e <line_mask_flat+0x2dc>
            }
            else {
                return LV_DRAW_SW_MASK_RES_TRANSP;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e13b      	b.n	801211e <line_mask_flat+0x2dc>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 8011ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eaa:	68b9      	ldr	r1, [r7, #8]
 8011eac:	683a      	ldr	r2, [r7, #0]
 8011eae:	440a      	add	r2, r1
 8011eb0:	fb02 f303 	mul.w	r3, r2, r3
 8011eb4:	129b      	asrs	r3, r3, #10
 8011eb6:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 8011eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	dd0f      	ble.n	8011ee0 <line_mask_flat+0x9e>
        if(y_at_x < abs_y) {
 8011ec0:	69fa      	ldr	r2, [r7, #28]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	da1b      	bge.n	8011f00 <line_mask_flat+0xbe>
            if(p->inv) {
 8011ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011ece:	f003 0302 	and.w	r3, r3, #2
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d001      	beq.n	8011edc <line_mask_flat+0x9a>
                return LV_DRAW_SW_MASK_RES_TRANSP;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	e120      	b.n	801211e <line_mask_flat+0x2dc>
            }
            else {
                return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011edc:	2301      	movs	r3, #1
 8011ede:	e11e      	b.n	801211e <line_mask_flat+0x2dc>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8011ee0:	69fa      	ldr	r2, [r7, #28]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	dd0b      	ble.n	8011f00 <line_mask_flat+0xbe>
            if(p->inv) {
 8011ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011eee:	f003 0302 	and.w	r3, r3, #2
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <line_mask_flat+0xba>
                return LV_DRAW_SW_MASK_RES_TRANSP;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e110      	b.n	801211e <line_mask_flat+0x2dc>
            }
            else {
                return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8011efc:	2301      	movs	r3, #1
 8011efe:	e10e      	b.n	801211e <line_mask_flat+0x2dc>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 8011f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	dd08      	ble.n	8011f1a <line_mask_flat+0xd8>
 8011f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	fb02 f303 	mul.w	r3, r2, r3
 8011f12:	021b      	lsls	r3, r3, #8
 8011f14:	129b      	asrs	r3, r3, #10
 8011f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f18:	e008      	b.n	8011f2c <line_mask_flat+0xea>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8011f22:	fb02 f303 	mul.w	r3, r2, r3
 8011f26:	021b      	lsls	r3, r3, #8
 8011f28:	129b      	asrs	r3, r3, #10
 8011f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int32_t xei = xe >> 8;
 8011f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2e:	121b      	asrs	r3, r3, #8
 8011f30:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 8011f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d102      	bne.n	8011f44 <line_mask_flat+0x102>
 8011f3e:	23ff      	movs	r3, #255	@ 0xff
 8011f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f42:	e00a      	b.n	8011f5a <line_mask_flat+0x118>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8011f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011f4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011f4e:	fb02 f303 	mul.w	r3, r2, r3
 8011f52:	121b      	asrs	r3, r3, #8
 8011f54:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8011f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t k = xei - abs_x;
 8011f5a:	69ba      	ldr	r2, [r7, #24]
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	627b      	str	r3, [r7, #36]	@ 0x24
    lv_opa_t m;

    if(xef) {
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d069      	beq.n	801203c <line_mask_flat+0x1fa>
        if(k >= 0 && k < len) {
 8011f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	db2b      	blt.n	8011fc6 <line_mask_flat+0x184>
 8011f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	da27      	bge.n	8011fc6 <line_mask_flat+0x184>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8011f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f7e:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8011f82:	fb02 f303 	mul.w	r3, r2, r3
 8011f86:	125b      	asrs	r3, r3, #9
 8011f88:	b2db      	uxtb	r3, r3
 8011f8a:	43db      	mvns	r3, r3
 8011f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(p->inv) m = 255 - m;
 8011f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011f96:	f003 0302 	and.w	r3, r3, #2
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d004      	beq.n	8011faa <line_mask_flat+0x168>
 8011fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011fa4:	43db      	mvns	r3, r3
 8011fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8011faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fac:	68fa      	ldr	r2, [r7, #12]
 8011fae:	4413      	add	r3, r2
 8011fb0:	7818      	ldrb	r0, [r3, #0]
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb4:	68fa      	ldr	r2, [r7, #12]
 8011fb6:	18d4      	adds	r4, r2, r3
 8011fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	f001 fab2 	bl	8013526 <mask_mix>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8011fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fc8:	3301      	adds	r3, #1
 8011fca:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    while(px_h > p->spx) {
 8011fcc:	e036      	b.n	801203c <line_mask_flat+0x1fa>
        if(k >= 0 && k < len) {
 8011fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	db27      	blt.n	8012024 <line_mask_flat+0x1e2>
 8011fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	da23      	bge.n	8012024 <line_mask_flat+0x1e2>
            m = px_h - (p->spx >> 1);
 8011fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fe4:	105b      	asrs	r3, r3, #1
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	1ad3      	subs	r3, r2, r3
 8011fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(p->inv) m = 255 - m;
 8011fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ff0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011ff4:	f003 0302 	and.w	r3, r3, #2
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d004      	beq.n	8012008 <line_mask_flat+0x1c6>
 8011ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012002:	43db      	mvns	r3, r3
 8012004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	4413      	add	r3, r2
 801200e:	7818      	ldrb	r0, [r3, #0]
 8012010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012012:	68fa      	ldr	r2, [r7, #12]
 8012014:	18d4      	adds	r4, r2, r3
 8012016:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801201a:	4619      	mov	r1, r3
 801201c:	f001 fa83 	bl	8013526 <mask_mix>
 8012020:	4603      	mov	r3, r0
 8012022:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8012024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	62bb      	str	r3, [r7, #40]	@ 0x28
        k++;
 801202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012030:	3301      	adds	r3, #1
 8012032:	627b      	str	r3, [r7, #36]	@ 0x24
        if(k >= len) break;
 8012034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	429a      	cmp	r2, r3
 801203a:	da05      	bge.n	8012048 <line_mask_flat+0x206>
    while(px_h > p->spx) {
 801203c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012042:	429a      	cmp	r2, r3
 8012044:	dcc3      	bgt.n	8011fce <line_mask_flat+0x18c>
 8012046:	e000      	b.n	801204a <line_mask_flat+0x208>
        if(k >= len) break;
 8012048:	bf00      	nop
    }

    if(k < len && k >= 0) {
 801204a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	429a      	cmp	r2, r3
 8012050:	da34      	bge.n	80120bc <line_mask_flat+0x27a>
 8012052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012054:	2b00      	cmp	r3, #0
 8012056:	db31      	blt.n	80120bc <line_mask_flat+0x27a>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 8012058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801205c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801205e:	fb02 f303 	mul.w	r3, r2, r3
 8012062:	129b      	asrs	r3, r3, #10
 8012064:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801206a:	fb02 f303 	mul.w	r3, r2, r3
 801206e:	125b      	asrs	r3, r3, #9
 8012070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if(p->yx_steep < 0) m = 255 - m;
 8012074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012078:	2b00      	cmp	r3, #0
 801207a:	da04      	bge.n	8012086 <line_mask_flat+0x244>
 801207c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012080:	43db      	mvns	r3, r3
 8012082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if(p->inv) m = 255 - m;
 8012086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012088:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801208c:	f003 0302 	and.w	r3, r3, #2
 8012090:	b2db      	uxtb	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	d004      	beq.n	80120a0 <line_mask_flat+0x25e>
 8012096:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801209a:	43db      	mvns	r3, r3
 801209c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80120a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	4413      	add	r3, r2
 80120a6:	7818      	ldrb	r0, [r3, #0]
 80120a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120aa:	68fa      	ldr	r2, [r7, #12]
 80120ac:	18d4      	adds	r4, r2, r3
 80120ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80120b2:	4619      	mov	r1, r3
 80120b4:	f001 fa37 	bl	8013526 <mask_mix>
 80120b8:	4603      	mov	r3, r0
 80120ba:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 80120bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80120c2:	f003 0302 	and.w	r3, r3, #2
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d012      	beq.n	80120f2 <line_mask_flat+0x2b0>
        k = xei - abs_x;
 80120cc:	69ba      	ldr	r2, [r7, #24]
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	627b      	str	r3, [r7, #36]	@ 0x24
        if(k > len) {
 80120d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	429a      	cmp	r2, r3
 80120da:	dd01      	ble.n	80120e0 <line_mask_flat+0x29e>
            return LV_DRAW_SW_MASK_RES_TRANSP;
 80120dc:	2300      	movs	r3, #0
 80120de:	e01e      	b.n	801211e <line_mask_flat+0x2dc>
        }
        if(k >= 0) {
 80120e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	db1a      	blt.n	801211c <line_mask_flat+0x2da>
            lv_memzero(&mask_buf[0], k);
 80120e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e8:	4619      	mov	r1, r3
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	f7ff fa2f 	bl	801154e <lv_memzero>
 80120f0:	e014      	b.n	801211c <line_mask_flat+0x2da>
        }
    }
    else {
        k++;
 80120f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f4:	3301      	adds	r3, #1
 80120f6:	627b      	str	r3, [r7, #36]	@ 0x24
        if(k < 0) {
 80120f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	da01      	bge.n	8012102 <line_mask_flat+0x2c0>
            return LV_DRAW_SW_MASK_RES_TRANSP;
 80120fe:	2300      	movs	r3, #0
 8012100:	e00d      	b.n	801211e <line_mask_flat+0x2dc>
        }
        if(k <= len) {
 8012102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	429a      	cmp	r2, r3
 8012108:	dc08      	bgt.n	801211c <line_mask_flat+0x2da>
            lv_memzero(&mask_buf[k], len - k);
 801210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	18d0      	adds	r0, r2, r3
 8012110:	683a      	ldr	r2, [r7, #0]
 8012112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012114:	1ad3      	subs	r3, r2, r3
 8012116:	4619      	mov	r1, r3
 8012118:	f7ff fa19 	bl	801154e <lv_memzero>
        }
    }

    return LV_DRAW_SW_MASK_RES_CHANGED;
 801211c:	2302      	movs	r3, #2
}
 801211e:	4618      	mov	r0, r3
 8012120:	3734      	adds	r7, #52	@ 0x34
 8012122:	46bd      	mov	sp, r7
 8012124:	bd90      	pop	{r4, r7, pc}

08012126 <line_mask_steep>:

static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM line_mask_steep(lv_opa_t * mask_buf, int32_t abs_x,
                                                                   int32_t abs_y,
                                                                   int32_t len,
                                                                   lv_draw_sw_mask_line_param_t * p)
{
 8012126:	b590      	push	{r4, r7, lr}
 8012128:	b091      	sub	sp, #68	@ 0x44
 801212a:	af00      	add	r7, sp, #0
 801212c:	60f8      	str	r0, [r7, #12]
 801212e:	60b9      	str	r1, [r7, #8]
 8012130:	607a      	str	r2, [r7, #4]
 8012132:	603b      	str	r3, [r7, #0]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 8012134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	fb02 f303 	mul.w	r3, r2, r3
 801213e:	129b      	asrs	r3, r3, #10
 8012140:	63bb      	str	r3, [r7, #56]	@ 0x38
    if(p->xy_steep > 0) x_at_y++;
 8012142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012146:	2b00      	cmp	r3, #0
 8012148:	dd02      	ble.n	8012150 <line_mask_steep+0x2a>
 801214a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801214c:	3301      	adds	r3, #1
 801214e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if(x_at_y < abs_x) {
 8012150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	429a      	cmp	r2, r3
 8012156:	da0b      	bge.n	8012170 <line_mask_steep+0x4a>
        if(p->inv) {
 8012158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801215a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801215e:	f003 0302 	and.w	r3, r3, #2
 8012162:	b2db      	uxtb	r3, r3
 8012164:	2b00      	cmp	r3, #0
 8012166:	d001      	beq.n	801216c <line_mask_steep+0x46>
            return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012168:	2301      	movs	r3, #1
 801216a:	e1f9      	b.n	8012560 <line_mask_steep+0x43a>
        }
        else {
            return LV_DRAW_SW_MASK_RES_TRANSP;
 801216c:	2300      	movs	r3, #0
 801216e:	e1f7      	b.n	8012560 <line_mask_steep+0x43a>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 8012170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012174:	687a      	ldr	r2, [r7, #4]
 8012176:	fb02 f303 	mul.w	r3, r2, r3
 801217a:	129b      	asrs	r3, r3, #10
 801217c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if(x_at_y > abs_x + len) {
 801217e:	68ba      	ldr	r2, [r7, #8]
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	4413      	add	r3, r2
 8012184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012186:	429a      	cmp	r2, r3
 8012188:	dd0b      	ble.n	80121a2 <line_mask_steep+0x7c>
        if(p->inv) {
 801218a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801218c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012190:	f003 0302 	and.w	r3, r3, #2
 8012194:	b2db      	uxtb	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <line_mask_steep+0x78>
            return LV_DRAW_SW_MASK_RES_TRANSP;
 801219a:	2300      	movs	r3, #0
 801219c:	e1e0      	b.n	8012560 <line_mask_steep+0x43a>
        }
        else {
            return LV_DRAW_SW_MASK_RES_FULL_COVER;
 801219e:	2301      	movs	r3, #1
 80121a0:	e1de      	b.n	8012560 <line_mask_steep+0x43a>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 80121a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	fb02 f303 	mul.w	r3, r2, r3
 80121ac:	021b      	lsls	r3, r3, #8
 80121ae:	129b      	asrs	r3, r3, #10
 80121b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t xsi = xs >> 8;
 80121b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b4:	121b      	asrs	r3, r3, #8
 80121b6:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t xsf = xs & 0xFF;
 80121b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	633b      	str	r3, [r7, #48]	@ 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	3301      	adds	r3, #1
 80121c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80121c6:	fb02 f303 	mul.w	r3, r2, r3
 80121ca:	021b      	lsls	r3, r3, #8
 80121cc:	129b      	asrs	r3, r3, #10
 80121ce:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t xei = xe >> 8;
 80121d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d2:	121b      	asrs	r3, r3, #8
 80121d4:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 80121dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80121e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121e6:	6a3b      	ldr	r3, [r7, #32]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d00d      	beq.n	8012208 <line_mask_steep+0xe2>
 80121ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	da09      	bge.n	8012208 <line_mask_steep+0xe2>
 80121f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d106      	bne.n	8012208 <line_mask_steep+0xe2>
        xsf = 0xFF;
 80121fa:	23ff      	movs	r3, #255	@ 0xff
 80121fc:	633b      	str	r3, [r7, #48]	@ 0x30
        xsi = xei;
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	637b      	str	r3, [r7, #52]	@ 0x34
        k--;
 8012202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012204:	3b01      	subs	r3, #1
 8012206:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    if(xsi == xei) {
 8012208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801220a:	6a3b      	ldr	r3, [r7, #32]
 801220c:	429a      	cmp	r2, r3
 801220e:	d15f      	bne.n	80122d0 <line_mask_steep+0x1aa>
        if(k >= 0 && k < len) {
 8012210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012212:	2b00      	cmp	r3, #0
 8012214:	db24      	blt.n	8012260 <line_mask_steep+0x13a>
 8012216:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	429a      	cmp	r2, r3
 801221c:	da20      	bge.n	8012260 <line_mask_steep+0x13a>
            m = (xsf + xef) >> 1;
 801221e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	4413      	add	r3, r2
 8012224:	105b      	asrs	r3, r3, #1
 8012226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if(p->inv) m = 255 - m;
 801222a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801222c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012230:	f003 0302 	and.w	r3, r3, #2
 8012234:	b2db      	uxtb	r3, r3
 8012236:	2b00      	cmp	r3, #0
 8012238:	d004      	beq.n	8012244 <line_mask_steep+0x11e>
 801223a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801223e:	43db      	mvns	r3, r3
 8012240:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8012244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012246:	68fa      	ldr	r2, [r7, #12]
 8012248:	4413      	add	r3, r2
 801224a:	7818      	ldrb	r0, [r3, #0]
 801224c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	18d4      	adds	r4, r2, r3
 8012252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012256:	4619      	mov	r1, r3
 8012258:	f001 f965 	bl	8013526 <mask_mix>
 801225c:	4603      	mov	r3, r0
 801225e:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8012260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012262:	3301      	adds	r3, #1
 8012264:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if(p->inv) {
 8012266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012268:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801226c:	f003 0302 	and.w	r3, r3, #2
 8012270:	b2db      	uxtb	r3, r3
 8012272:	2b00      	cmp	r3, #0
 8012274:	d013      	beq.n	801229e <line_mask_steep+0x178>
            k = xsi - abs_x;
 8012276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if(k >= len) {
 801227e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	429a      	cmp	r2, r3
 8012284:	db01      	blt.n	801228a <line_mask_steep+0x164>
                return LV_DRAW_SW_MASK_RES_TRANSP;
 8012286:	2300      	movs	r3, #0
 8012288:	e16a      	b.n	8012560 <line_mask_steep+0x43a>
            }
            if(k >= 0) lv_memzero(&mask_buf[0], k);
 801228a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801228c:	2b00      	cmp	r3, #0
 801228e:	f2c0 8166 	blt.w	801255e <line_mask_steep+0x438>
 8012292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012294:	4619      	mov	r1, r3
 8012296:	68f8      	ldr	r0, [r7, #12]
 8012298:	f7ff f959 	bl	801154e <lv_memzero>
 801229c:	e15f      	b.n	801255e <line_mask_steep+0x438>

        }
        else {
            if(k > len) k = len;
 801229e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	dd01      	ble.n	80122aa <line_mask_steep+0x184>
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if(k == 0) return LV_DRAW_SW_MASK_RES_TRANSP;
 80122aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d101      	bne.n	80122b4 <line_mask_steep+0x18e>
 80122b0:	2300      	movs	r3, #0
 80122b2:	e155      	b.n	8012560 <line_mask_steep+0x43a>
            else if(k > 0) lv_memzero(&mask_buf[k],  len - k);
 80122b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f340 8151 	ble.w	801255e <line_mask_steep+0x438>
 80122bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122be:	68fa      	ldr	r2, [r7, #12]
 80122c0:	18d0      	adds	r0, r2, r3
 80122c2:	683a      	ldr	r2, [r7, #0]
 80122c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122c6:	1ad3      	subs	r3, r2, r3
 80122c8:	4619      	mov	r1, r3
 80122ca:	f7ff f940 	bl	801154e <lv_memzero>
 80122ce:	e146      	b.n	801255e <line_mask_steep+0x438>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 80122d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f280 80a0 	bge.w	801241a <line_mask_steep+0x2f4>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 80122da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122de:	425b      	negs	r3, r3
 80122e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122e2:	fb02 f303 	mul.w	r3, r2, r3
 80122e6:	129b      	asrs	r3, r3, #10
 80122e8:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 80122ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	db25      	blt.n	801233c <line_mask_steep+0x216>
 80122f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	da21      	bge.n	801233c <line_mask_steep+0x216>
                m = (y_inters * xsf) >> 9;
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122fc:	fb02 f303 	mul.w	r3, r2, r3
 8012300:	125b      	asrs	r3, r3, #9
 8012302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(p->inv) m = 255 - m;
 8012306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012308:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801230c:	f003 0302 	and.w	r3, r3, #2
 8012310:	b2db      	uxtb	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d004      	beq.n	8012320 <line_mask_steep+0x1fa>
 8012316:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801231a:	43db      	mvns	r3, r3
 801231c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012322:	68fa      	ldr	r2, [r7, #12]
 8012324:	4413      	add	r3, r2
 8012326:	7818      	ldrb	r0, [r3, #0]
 8012328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	18d4      	adds	r4, r2, r3
 801232e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012332:	4619      	mov	r1, r3
 8012334:	f001 f8f7 	bl	8013526 <mask_mix>
 8012338:	4603      	mov	r3, r0
 801233a:	7023      	strb	r3, [r4, #0]
            }
            k--;
 801233c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801233e:	3b01      	subs	r3, #1
 8012340:	63fb      	str	r3, [r7, #60]	@ 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8012348:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801234a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801234c:	4252      	negs	r2, r2
 801234e:	fb02 f303 	mul.w	r3, r2, r3
 8012352:	129b      	asrs	r3, r3, #10
 8012354:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 8012356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012358:	2b00      	cmp	r3, #0
 801235a:	db29      	blt.n	80123b0 <line_mask_steep+0x28a>
 801235c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801235e:	683b      	ldr	r3, [r7, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	da25      	bge.n	80123b0 <line_mask_steep+0x28a>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801236a:	693a      	ldr	r2, [r7, #16]
 801236c:	fb02 f303 	mul.w	r3, r2, r3
 8012370:	125b      	asrs	r3, r3, #9
 8012372:	b2db      	uxtb	r3, r3
 8012374:	43db      	mvns	r3, r3
 8012376:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(p->inv) m = 255 - m;
 801237a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801237c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012380:	f003 0302 	and.w	r3, r3, #2
 8012384:	b2db      	uxtb	r3, r3
 8012386:	2b00      	cmp	r3, #0
 8012388:	d004      	beq.n	8012394 <line_mask_steep+0x26e>
 801238a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801238e:	43db      	mvns	r3, r3
 8012390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8012394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012396:	68fa      	ldr	r2, [r7, #12]
 8012398:	4413      	add	r3, r2
 801239a:	7818      	ldrb	r0, [r3, #0]
 801239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	18d4      	adds	r4, r2, r3
 80123a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80123a6:	4619      	mov	r1, r3
 80123a8:	f001 f8bd 	bl	8013526 <mask_mix>
 80123ac:	4603      	mov	r3, r0
 80123ae:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 80123b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123b2:	3302      	adds	r3, #2
 80123b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if(p->inv) {
 80123b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80123bc:	f003 0302 	and.w	r3, r3, #2
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d015      	beq.n	80123f2 <line_mask_steep+0x2cc>
                k = xsi - abs_x - 1;
 80123c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	1ad3      	subs	r3, r2, r3
 80123cc:	3b01      	subs	r3, #1
 80123ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

                if(k > len) k = len;
 80123d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	dd02      	ble.n	80123de <line_mask_steep+0x2b8>
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80123dc:	e0bf      	b.n	801255e <line_mask_steep+0x438>
                else if(k > 0) lv_memzero(&mask_buf[0],  k);
 80123de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	f340 80bc 	ble.w	801255e <line_mask_steep+0x438>
 80123e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123e8:	4619      	mov	r1, r3
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	f7ff f8af 	bl	801154e <lv_memzero>
 80123f0:	e0b5      	b.n	801255e <line_mask_steep+0x438>

            }
            else {
                if(k > len) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 80123f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	dd01      	ble.n	80123fe <line_mask_steep+0x2d8>
 80123fa:	2301      	movs	r3, #1
 80123fc:	e0b0      	b.n	8012560 <line_mask_steep+0x43a>
                if(k >= 0) lv_memzero(&mask_buf[k],  len - k);
 80123fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012400:	2b00      	cmp	r3, #0
 8012402:	f2c0 80ac 	blt.w	801255e <line_mask_steep+0x438>
 8012406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012408:	68fa      	ldr	r2, [r7, #12]
 801240a:	18d0      	adds	r0, r2, r3
 801240c:	683a      	ldr	r2, [r7, #0]
 801240e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	4619      	mov	r1, r3
 8012414:	f7ff f89b 	bl	801154e <lv_memzero>
 8012418:	e0a1      	b.n	801255e <line_mask_steep+0x438>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 801241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801241c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8012420:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012422:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8012424:	fb02 f303 	mul.w	r3, r2, r3
 8012428:	129b      	asrs	r3, r3, #10
 801242a:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 801242c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801242e:	2b00      	cmp	r3, #0
 8012430:	db29      	blt.n	8012486 <line_mask_steep+0x360>
 8012432:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	429a      	cmp	r2, r3
 8012438:	da25      	bge.n	8012486 <line_mask_steep+0x360>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 801243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801243c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8012440:	69ba      	ldr	r2, [r7, #24]
 8012442:	fb02 f303 	mul.w	r3, r2, r3
 8012446:	125b      	asrs	r3, r3, #9
 8012448:	b2db      	uxtb	r3, r3
 801244a:	43db      	mvns	r3, r3
 801244c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(p->inv) m = 255 - m;
 8012450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012452:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	b2db      	uxtb	r3, r3
 801245c:	2b00      	cmp	r3, #0
 801245e:	d004      	beq.n	801246a <line_mask_steep+0x344>
 8012460:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012464:	43db      	mvns	r3, r3
 8012466:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 801246a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801246c:	68fa      	ldr	r2, [r7, #12]
 801246e:	4413      	add	r3, r2
 8012470:	7818      	ldrb	r0, [r3, #0]
 8012472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	18d4      	adds	r4, r2, r3
 8012478:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801247c:	4619      	mov	r1, r3
 801247e:	f001 f852 	bl	8013526 <mask_mix>
 8012482:	4603      	mov	r3, r0
 8012484:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8012486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012488:	3301      	adds	r3, #1
 801248a:	63fb      	str	r3, [r7, #60]	@ 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8012492:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8012496:	fb02 f303 	mul.w	r3, r2, r3
 801249a:	129b      	asrs	r3, r3, #10
 801249c:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 801249e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	db27      	blt.n	80124f4 <line_mask_steep+0x3ce>
 80124a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	da23      	bge.n	80124f4 <line_mask_steep+0x3ce>
                m = ((255 - y_inters) * x_inters) >> 9;
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80124b2:	697a      	ldr	r2, [r7, #20]
 80124b4:	fb02 f303 	mul.w	r3, r2, r3
 80124b8:	125b      	asrs	r3, r3, #9
 80124ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if(p->inv) m = 255 - m;
 80124be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80124c4:	f003 0302 	and.w	r3, r3, #2
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d004      	beq.n	80124d8 <line_mask_steep+0x3b2>
 80124ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80124d2:	43db      	mvns	r3, r3
 80124d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 80124d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124da:	68fa      	ldr	r2, [r7, #12]
 80124dc:	4413      	add	r3, r2
 80124de:	7818      	ldrb	r0, [r3, #0]
 80124e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	18d4      	adds	r4, r2, r3
 80124e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80124ea:	4619      	mov	r1, r3
 80124ec:	f001 f81b 	bl	8013526 <mask_mix>
 80124f0:	4603      	mov	r3, r0
 80124f2:	7023      	strb	r3, [r4, #0]
            }
            k++;
 80124f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124f6:	3301      	adds	r3, #1
 80124f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if(p->inv) {
 80124fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80124fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012500:	f003 0302 	and.w	r3, r3, #2
 8012504:	b2db      	uxtb	r3, r3
 8012506:	2b00      	cmp	r3, #0
 8012508:	d012      	beq.n	8012530 <line_mask_steep+0x40a>
                k = xsi - abs_x;
 801250a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if(k > len)  return LV_DRAW_SW_MASK_RES_TRANSP;
 8012512:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	429a      	cmp	r2, r3
 8012518:	dd01      	ble.n	801251e <line_mask_steep+0x3f8>
 801251a:	2300      	movs	r3, #0
 801251c:	e020      	b.n	8012560 <line_mask_steep+0x43a>
                if(k >= 0) lv_memzero(&mask_buf[0],  k);
 801251e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012520:	2b00      	cmp	r3, #0
 8012522:	db1c      	blt.n	801255e <line_mask_steep+0x438>
 8012524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012526:	4619      	mov	r1, r3
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f7ff f810 	bl	801154e <lv_memzero>
 801252e:	e016      	b.n	801255e <line_mask_steep+0x438>

            }
            else {
                if(k > len) k = len;
 8012530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	429a      	cmp	r2, r3
 8012536:	dd01      	ble.n	801253c <line_mask_steep+0x416>
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if(k == 0) return LV_DRAW_SW_MASK_RES_TRANSP;
 801253c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801253e:	2b00      	cmp	r3, #0
 8012540:	d101      	bne.n	8012546 <line_mask_steep+0x420>
 8012542:	2300      	movs	r3, #0
 8012544:	e00c      	b.n	8012560 <line_mask_steep+0x43a>
                else if(k > 0) lv_memzero(&mask_buf[k],  len - k);
 8012546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012548:	2b00      	cmp	r3, #0
 801254a:	dd08      	ble.n	801255e <line_mask_steep+0x438>
 801254c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	18d0      	adds	r0, r2, r3
 8012552:	683a      	ldr	r2, [r7, #0]
 8012554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	4619      	mov	r1, r3
 801255a:	f7fe fff8 	bl	801154e <lv_memzero>
            }
        }
    }

    return LV_DRAW_SW_MASK_RES_CHANGED;
 801255e:	2302      	movs	r3, #2
}
 8012560:	4618      	mov	r0, r3
 8012562:	3744      	adds	r7, #68	@ 0x44
 8012564:	46bd      	mov	sp, r7
 8012566:	bd90      	pop	{r4, r7, pc}

08012568 <lv_draw_mask_angle>:

static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_angle(lv_opa_t * mask_buf, int32_t abs_x,
                                                                      int32_t abs_y, int32_t len,
                                                                      lv_draw_sw_mask_angle_param_t * p)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b096      	sub	sp, #88	@ 0x58
 801256c:	af02      	add	r7, sp, #8
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	603b      	str	r3, [r7, #0]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8012576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8012580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012582:	689b      	ldr	r3, [r3, #8]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 801258a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	2bb3      	cmp	r3, #179	@ 0xb3
 8012590:	f300 80e9 	bgt.w	8012766 <lv_draw_mask_angle+0x1fe>
 8012594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012596:	695b      	ldr	r3, [r3, #20]
 8012598:	2bb3      	cmp	r3, #179	@ 0xb3
 801259a:	f300 80e4 	bgt.w	8012766 <lv_draw_mask_angle+0x1fe>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 801259e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125a0:	691b      	ldr	r3, [r3, #16]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 80df 	beq.w	8012766 <lv_draw_mask_angle+0x1fe>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 80125a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125aa:	695b      	ldr	r3, [r3, #20]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 80da 	beq.w	8012766 <lv_draw_mask_angle+0x1fe>
       p->cfg.start_angle > p->cfg.end_angle) {
 80125b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125b4:	691a      	ldr	r2, [r3, #16]
 80125b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125b8:	695b      	ldr	r3, [r3, #20]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 80125ba:	429a      	cmp	r2, r3
 80125bc:	f340 80d3 	ble.w	8012766 <lv_draw_mask_angle+0x1fe>

        if(abs_y < p->cfg.vertex_p.y) {
 80125c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	da01      	bge.n	80125ce <lv_draw_mask_angle+0x66>
            return LV_DRAW_SW_MASK_RES_FULL_COVER;
 80125ca:	2301      	movs	r3, #1
 80125cc:	e258      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 80125ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125d4:	fb02 f303 	mul.w	r3, r2, r3
 80125d8:	129b      	asrs	r3, r3, #10
 80125da:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 80125dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125de:	3301      	adds	r3, #1
 80125e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80125e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80125e4:	fb02 f303 	mul.w	r3, r2, r3
 80125e8:	129b      	asrs	r3, r3, #10
 80125ea:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80125ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80125f4:	dd0a      	ble.n	801260c <lv_draw_mask_angle+0xa4>
 80125f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125f8:	691b      	ldr	r3, [r3, #16]
 80125fa:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80125fe:	da05      	bge.n	801260c <lv_draw_mask_angle+0xa4>
 8012600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012602:	2b00      	cmp	r3, #0
 8012604:	da02      	bge.n	801260c <lv_draw_mask_angle+0xa4>
 8012606:	2300      	movs	r3, #0
 8012608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801260a:	e01b      	b.n	8012644 <lv_draw_mask_angle+0xdc>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801260c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	2b00      	cmp	r3, #0
 8012612:	dd09      	ble.n	8012628 <lv_draw_mask_angle+0xc0>
 8012614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012616:	691b      	ldr	r3, [r3, #16]
 8012618:	2b5a      	cmp	r3, #90	@ 0x5a
 801261a:	dc05      	bgt.n	8012628 <lv_draw_mask_angle+0xc0>
 801261c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801261e:	2b00      	cmp	r3, #0
 8012620:	da02      	bge.n	8012628 <lv_draw_mask_angle+0xc0>
 8012622:	2300      	movs	r3, #0
 8012624:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012626:	e00d      	b.n	8012644 <lv_draw_mask_angle+0xdc>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012628:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801262a:	691b      	ldr	r3, [r3, #16]
 801262c:	2b5a      	cmp	r3, #90	@ 0x5a
 801262e:	dd09      	ble.n	8012644 <lv_draw_mask_angle+0xdc>
 8012630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012632:	691b      	ldr	r3, [r3, #16]
 8012634:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012638:	da04      	bge.n	8012644 <lv_draw_mask_angle+0xdc>
 801263a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801263c:	2b00      	cmp	r3, #0
 801263e:	dd01      	ble.n	8012644 <lv_draw_mask_angle+0xdc>
 8012640:	2300      	movs	r3, #0
 8012642:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8012644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801264c:	dd0a      	ble.n	8012664 <lv_draw_mask_angle+0xfc>
 801264e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012650:	695b      	ldr	r3, [r3, #20]
 8012652:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8012656:	da05      	bge.n	8012664 <lv_draw_mask_angle+0xfc>
 8012658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801265a:	2b00      	cmp	r3, #0
 801265c:	da02      	bge.n	8012664 <lv_draw_mask_angle+0xfc>
 801265e:	2300      	movs	r3, #0
 8012660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012662:	e01b      	b.n	801269c <lv_draw_mask_angle+0x134>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8012664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012666:	695b      	ldr	r3, [r3, #20]
 8012668:	2b00      	cmp	r3, #0
 801266a:	dd09      	ble.n	8012680 <lv_draw_mask_angle+0x118>
 801266c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801266e:	695b      	ldr	r3, [r3, #20]
 8012670:	2b5a      	cmp	r3, #90	@ 0x5a
 8012672:	dc05      	bgt.n	8012680 <lv_draw_mask_angle+0x118>
 8012674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012676:	2b00      	cmp	r3, #0
 8012678:	da02      	bge.n	8012680 <lv_draw_mask_angle+0x118>
 801267a:	2300      	movs	r3, #0
 801267c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801267e:	e00d      	b.n	801269c <lv_draw_mask_angle+0x134>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012682:	695b      	ldr	r3, [r3, #20]
 8012684:	2b5a      	cmp	r3, #90	@ 0x5a
 8012686:	dd09      	ble.n	801269c <lv_draw_mask_angle+0x134>
 8012688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801268a:	695b      	ldr	r3, [r3, #20]
 801268c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012690:	da04      	bge.n	801269c <lv_draw_mask_angle+0x134>
 8012692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012694:	2b00      	cmp	r3, #0
 8012696:	dd01      	ble.n	801269c <lv_draw_mask_angle+0x134>
 8012698:	2300      	movs	r3, #0
 801269a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 801269c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801269e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	105b      	asrs	r3, r3, #1
 80126a4:	627b      	str	r3, [r7, #36]	@ 0x24

        lv_draw_sw_mask_res_t res1 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 80126a6:	2301      	movs	r3, #1
 80126a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        lv_draw_sw_mask_res_t res2 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 80126ac:	2301      	movs	r3, #1
 80126ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 80126b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80126b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b6:	441a      	add	r2, r3
 80126b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	647b      	str	r3, [r7, #68]	@ 0x44
        if(tmp > len) tmp = len;
 80126be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	dd01      	ble.n	80126ca <lv_draw_mask_angle+0x162>
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	647b      	str	r3, [r7, #68]	@ 0x44
        if(tmp > 0) {
 80126ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dd14      	ble.n	80126fa <lv_draw_mask_angle+0x192>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 80126d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80126d2:	3318      	adds	r3, #24
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	68b9      	ldr	r1, [r7, #8]
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f7ff fadf 	bl	8011ca0 <lv_draw_mask_line>
 80126e2:	4603      	mov	r3, r0
 80126e4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if(res1 == LV_DRAW_SW_MASK_RES_TRANSP) {
 80126e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d104      	bne.n	80126fa <lv_draw_mask_angle+0x192>
                lv_memzero(&mask_buf[0], tmp);
 80126f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126f2:	4619      	mov	r1, r3
 80126f4:	68f8      	ldr	r0, [r7, #12]
 80126f6:	f7fe ff2a 	bl	801154e <lv_memzero>
            }
        }

        if(tmp > len) tmp = len;
 80126fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	429a      	cmp	r2, r3
 8012700:	dd01      	ble.n	8012706 <lv_draw_mask_angle+0x19e>
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	647b      	str	r3, [r7, #68]	@ 0x44
        if(tmp < 0) tmp = 0;
 8012706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012708:	2b00      	cmp	r3, #0
 801270a:	da01      	bge.n	8012710 <lv_draw_mask_angle+0x1a8>
 801270c:	2300      	movs	r3, #0
 801270e:	647b      	str	r3, [r7, #68]	@ 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 8012710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	18d0      	adds	r0, r2, r3
 8012716:	68ba      	ldr	r2, [r7, #8]
 8012718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801271a:	18d1      	adds	r1, r2, r3
 801271c:	683a      	ldr	r2, [r7, #0]
 801271e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012720:	1ad2      	subs	r2, r2, r3
 8012722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012724:	3350      	adds	r3, #80	@ 0x50
 8012726:	9300      	str	r3, [sp, #0]
 8012728:	4613      	mov	r3, r2
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	f7ff fab8 	bl	8011ca0 <lv_draw_mask_line>
 8012730:	4603      	mov	r3, r0
 8012732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if(res2 == LV_DRAW_SW_MASK_RES_TRANSP) {
 8012736:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801273a:	2b00      	cmp	r3, #0
 801273c:	d108      	bne.n	8012750 <lv_draw_mask_angle+0x1e8>
            lv_memzero(&mask_buf[tmp], len - tmp);
 801273e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012740:	68fa      	ldr	r2, [r7, #12]
 8012742:	18d0      	adds	r0, r2, r3
 8012744:	683a      	ldr	r2, [r7, #0]
 8012746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	4619      	mov	r1, r3
 801274c:	f7fe feff 	bl	801154e <lv_memzero>
        }
        if(res1 == res2) return res1;
 8012750:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012758:	429a      	cmp	r2, r3
 801275a:	d102      	bne.n	8012762 <lv_draw_mask_angle+0x1fa>
 801275c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8012760:	e18e      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        else return LV_DRAW_SW_MASK_RES_CHANGED;
 8012762:	2302      	movs	r3, #2
 8012764:	e18c      	b.n	8012a80 <lv_draw_mask_angle+0x518>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8012766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012768:	691b      	ldr	r3, [r3, #16]
 801276a:	2bb4      	cmp	r3, #180	@ 0xb4
 801276c:	f340 80db 	ble.w	8012926 <lv_draw_mask_angle+0x3be>
 8012770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012772:	695b      	ldr	r3, [r3, #20]
 8012774:	2bb4      	cmp	r3, #180	@ 0xb4
 8012776:	f340 80d6 	ble.w	8012926 <lv_draw_mask_angle+0x3be>
 801277a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801277c:	691a      	ldr	r2, [r3, #16]
 801277e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012780:	695b      	ldr	r3, [r3, #20]
 8012782:	429a      	cmp	r2, r3
 8012784:	f340 80cf 	ble.w	8012926 <lv_draw_mask_angle+0x3be>

        if(abs_y > p->cfg.vertex_p.y) {
 8012788:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	687a      	ldr	r2, [r7, #4]
 801278e:	429a      	cmp	r2, r3
 8012790:	dd01      	ble.n	8012796 <lv_draw_mask_angle+0x22e>
            return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012792:	2301      	movs	r3, #1
 8012794:	e174      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8012796:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801279a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801279c:	fb02 f303 	mul.w	r3, r2, r3
 80127a0:	129b      	asrs	r3, r3, #10
 80127a2:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 80127a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a6:	3301      	adds	r3, #1
 80127a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80127ac:	fb02 f303 	mul.w	r3, r2, r3
 80127b0:	129b      	asrs	r3, r3, #10
 80127b2:	643b      	str	r3, [r7, #64]	@ 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 80127b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127b6:	691b      	ldr	r3, [r3, #16]
 80127b8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80127bc:	dd0a      	ble.n	80127d4 <lv_draw_mask_angle+0x26c>
 80127be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127c0:	691b      	ldr	r3, [r3, #16]
 80127c2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80127c6:	da05      	bge.n	80127d4 <lv_draw_mask_angle+0x26c>
 80127c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	da02      	bge.n	80127d4 <lv_draw_mask_angle+0x26c>
 80127ce:	2300      	movs	r3, #0
 80127d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80127d2:	e01b      	b.n	801280c <lv_draw_mask_angle+0x2a4>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 80127d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127d6:	691b      	ldr	r3, [r3, #16]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	dd09      	ble.n	80127f0 <lv_draw_mask_angle+0x288>
 80127dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127de:	691b      	ldr	r3, [r3, #16]
 80127e0:	2b5a      	cmp	r3, #90	@ 0x5a
 80127e2:	dc05      	bgt.n	80127f0 <lv_draw_mask_angle+0x288>
 80127e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	da02      	bge.n	80127f0 <lv_draw_mask_angle+0x288>
 80127ea:	2300      	movs	r3, #0
 80127ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80127ee:	e00d      	b.n	801280c <lv_draw_mask_angle+0x2a4>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 80127f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	2b5a      	cmp	r3, #90	@ 0x5a
 80127f6:	dd09      	ble.n	801280c <lv_draw_mask_angle+0x2a4>
 80127f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012800:	da04      	bge.n	801280c <lv_draw_mask_angle+0x2a4>
 8012802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012804:	2b00      	cmp	r3, #0
 8012806:	dd01      	ble.n	801280c <lv_draw_mask_angle+0x2a4>
 8012808:	2300      	movs	r3, #0
 801280a:	643b      	str	r3, [r7, #64]	@ 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 801280c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801280e:	695b      	ldr	r3, [r3, #20]
 8012810:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012814:	dd0a      	ble.n	801282c <lv_draw_mask_angle+0x2c4>
 8012816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012818:	695b      	ldr	r3, [r3, #20]
 801281a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 801281e:	da05      	bge.n	801282c <lv_draw_mask_angle+0x2c4>
 8012820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012822:	2b00      	cmp	r3, #0
 8012824:	da02      	bge.n	801282c <lv_draw_mask_angle+0x2c4>
 8012826:	2300      	movs	r3, #0
 8012828:	643b      	str	r3, [r7, #64]	@ 0x40
 801282a:	e01b      	b.n	8012864 <lv_draw_mask_angle+0x2fc>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 801282c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	2b00      	cmp	r3, #0
 8012832:	dd09      	ble.n	8012848 <lv_draw_mask_angle+0x2e0>
 8012834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012836:	695b      	ldr	r3, [r3, #20]
 8012838:	2b5a      	cmp	r3, #90	@ 0x5a
 801283a:	dc05      	bgt.n	8012848 <lv_draw_mask_angle+0x2e0>
 801283c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801283e:	2b00      	cmp	r3, #0
 8012840:	da02      	bge.n	8012848 <lv_draw_mask_angle+0x2e0>
 8012842:	2300      	movs	r3, #0
 8012844:	643b      	str	r3, [r7, #64]	@ 0x40
 8012846:	e00d      	b.n	8012864 <lv_draw_mask_angle+0x2fc>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8012848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801284a:	695b      	ldr	r3, [r3, #20]
 801284c:	2b5a      	cmp	r3, #90	@ 0x5a
 801284e:	dd09      	ble.n	8012864 <lv_draw_mask_angle+0x2fc>
 8012850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012852:	695b      	ldr	r3, [r3, #20]
 8012854:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012858:	da04      	bge.n	8012864 <lv_draw_mask_angle+0x2fc>
 801285a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801285c:	2b00      	cmp	r3, #0
 801285e:	dd01      	ble.n	8012864 <lv_draw_mask_angle+0x2fc>
 8012860:	2300      	movs	r3, #0
 8012862:	643b      	str	r3, [r7, #64]	@ 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8012864:	69fa      	ldr	r2, [r7, #28]
 8012866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012868:	1ad3      	subs	r3, r2, r3
 801286a:	105b      	asrs	r3, r3, #1
 801286c:	61bb      	str	r3, [r7, #24]

        lv_draw_sw_mask_res_t res1 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 801286e:	2301      	movs	r3, #1
 8012870:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        lv_draw_sw_mask_res_t res2 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012874:	2301      	movs	r3, #1
 8012876:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 8012878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	441a      	add	r2, r3
 801287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(tmp > len) tmp = len;
 8012884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	429a      	cmp	r2, r3
 801288a:	dd01      	ble.n	8012890 <lv_draw_mask_angle+0x328>
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(tmp > 0) {
 8012890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012892:	2b00      	cmp	r3, #0
 8012894:	dd14      	ble.n	80128c0 <lv_draw_mask_angle+0x358>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_sw_mask_line_param_t *)&p->end_line);
 8012896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012898:	3350      	adds	r3, #80	@ 0x50
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	68b9      	ldr	r1, [r7, #8]
 80128a2:	68f8      	ldr	r0, [r7, #12]
 80128a4:	f7ff f9fc 	bl	8011ca0 <lv_draw_mask_line>
 80128a8:	4603      	mov	r3, r0
 80128aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            if(res1 == LV_DRAW_SW_MASK_RES_TRANSP) {
 80128ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d104      	bne.n	80128c0 <lv_draw_mask_angle+0x358>
                lv_memzero(&mask_buf[0], tmp);
 80128b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b8:	4619      	mov	r1, r3
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f7fe fe47 	bl	801154e <lv_memzero>
            }
        }

        if(tmp > len) tmp = len;
 80128c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	dd01      	ble.n	80128cc <lv_draw_mask_angle+0x364>
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(tmp < 0) tmp = 0;
 80128cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	da01      	bge.n	80128d6 <lv_draw_mask_angle+0x36e>
 80128d2:	2300      	movs	r3, #0
 80128d4:	63bb      	str	r3, [r7, #56]	@ 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_sw_mask_line_param_t *)&p->start_line);
 80128d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128d8:	68fa      	ldr	r2, [r7, #12]
 80128da:	18d0      	adds	r0, r2, r3
 80128dc:	68ba      	ldr	r2, [r7, #8]
 80128de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e0:	18d1      	adds	r1, r2, r3
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e6:	1ad2      	subs	r2, r2, r3
 80128e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80128ea:	3318      	adds	r3, #24
 80128ec:	9300      	str	r3, [sp, #0]
 80128ee:	4613      	mov	r3, r2
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	f7ff f9d5 	bl	8011ca0 <lv_draw_mask_line>
 80128f6:	4603      	mov	r3, r0
 80128f8:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_SW_MASK_RES_TRANSP) {
 80128fa:	7dfb      	ldrb	r3, [r7, #23]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d108      	bne.n	8012912 <lv_draw_mask_angle+0x3aa>
            lv_memzero(&mask_buf[tmp], len - tmp);
 8012900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012902:	68fa      	ldr	r2, [r7, #12]
 8012904:	18d0      	adds	r0, r2, r3
 8012906:	683a      	ldr	r2, [r7, #0]
 8012908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801290a:	1ad3      	subs	r3, r2, r3
 801290c:	4619      	mov	r1, r3
 801290e:	f7fe fe1e 	bl	801154e <lv_memzero>
        }
        if(res1 == res2) return res1;
 8012912:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8012916:	7dfb      	ldrb	r3, [r7, #23]
 8012918:	429a      	cmp	r2, r3
 801291a:	d102      	bne.n	8012922 <lv_draw_mask_angle+0x3ba>
 801291c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012920:	e0ae      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        else return LV_DRAW_SW_MASK_RES_CHANGED;
 8012922:	2302      	movs	r3, #2
 8012924:	e0ac      	b.n	8012a80 <lv_draw_mask_angle+0x518>
    }
    else  {

        lv_draw_sw_mask_res_t res1 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012926:	2301      	movs	r3, #1
 8012928:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        lv_draw_sw_mask_res_t res2 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 801292c:	2301      	movs	r3, #1
 801292e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

        if(p->cfg.start_angle == 180) {
 8012932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012934:	691b      	ldr	r3, [r3, #16]
 8012936:	2bb4      	cmp	r3, #180	@ 0xb4
 8012938:	d10c      	bne.n	8012954 <lv_draw_mask_angle+0x3ec>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 801293a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	687a      	ldr	r2, [r7, #4]
 8012940:	429a      	cmp	r2, r3
 8012942:	da03      	bge.n	801294c <lv_draw_mask_angle+0x3e4>
 8012944:	2301      	movs	r3, #1
 8012946:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801294a:	e036      	b.n	80129ba <lv_draw_mask_angle+0x452>
            else res1 = LV_DRAW_SW_MASK_RES_UNKNOWN;
 801294c:	2303      	movs	r3, #3
 801294e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012952:	e032      	b.n	80129ba <lv_draw_mask_angle+0x452>
        }
        else if(p->cfg.start_angle == 0) {
 8012954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012956:	691b      	ldr	r3, [r3, #16]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10c      	bne.n	8012976 <lv_draw_mask_angle+0x40e>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_SW_MASK_RES_UNKNOWN;
 801295c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	429a      	cmp	r2, r3
 8012964:	da03      	bge.n	801296e <lv_draw_mask_angle+0x406>
 8012966:	2303      	movs	r3, #3
 8012968:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801296c:	e025      	b.n	80129ba <lv_draw_mask_angle+0x452>
            else res1 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 801296e:	2301      	movs	r3, #1
 8012970:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012974:	e021      	b.n	80129ba <lv_draw_mask_angle+0x452>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8012976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012978:	691b      	ldr	r3, [r3, #16]
 801297a:	2bb3      	cmp	r3, #179	@ 0xb3
 801297c:	dc04      	bgt.n	8012988 <lv_draw_mask_angle+0x420>
 801297e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012980:	68db      	ldr	r3, [r3, #12]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	429a      	cmp	r2, r3
 8012986:	db08      	blt.n	801299a <lv_draw_mask_angle+0x432>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8012988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801298a:	691b      	ldr	r3, [r3, #16]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801298c:	2bb4      	cmp	r3, #180	@ 0xb4
 801298e:	dd08      	ble.n	80129a2 <lv_draw_mask_angle+0x43a>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8012990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	429a      	cmp	r2, r3
 8012998:	db03      	blt.n	80129a2 <lv_draw_mask_angle+0x43a>
            res1 = LV_DRAW_SW_MASK_RES_UNKNOWN;
 801299a:	2303      	movs	r3, #3
 801299c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80129a0:	e00b      	b.n	80129ba <lv_draw_mask_angle+0x452>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 80129a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129a4:	3318      	adds	r3, #24
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	68b9      	ldr	r1, [r7, #8]
 80129ae:	68f8      	ldr	r0, [r7, #12]
 80129b0:	f7ff f976 	bl	8011ca0 <lv_draw_mask_line>
 80129b4:	4603      	mov	r3, r0
 80129b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }

        if(p->cfg.end_angle == 180) {
 80129ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129bc:	695b      	ldr	r3, [r3, #20]
 80129be:	2bb4      	cmp	r3, #180	@ 0xb4
 80129c0:	d10c      	bne.n	80129dc <lv_draw_mask_angle+0x474>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_SW_MASK_RES_UNKNOWN;
 80129c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	da03      	bge.n	80129d4 <lv_draw_mask_angle+0x46c>
 80129cc:	2303      	movs	r3, #3
 80129ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80129d2:	e036      	b.n	8012a42 <lv_draw_mask_angle+0x4da>
            else res2 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 80129d4:	2301      	movs	r3, #1
 80129d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80129da:	e032      	b.n	8012a42 <lv_draw_mask_angle+0x4da>
        }
        else if(p->cfg.end_angle == 0) {
 80129dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129de:	695b      	ldr	r3, [r3, #20]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d10c      	bne.n	80129fe <lv_draw_mask_angle+0x496>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_SW_MASK_RES_FULL_COVER;
 80129e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	da03      	bge.n	80129f6 <lv_draw_mask_angle+0x48e>
 80129ee:	2301      	movs	r3, #1
 80129f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80129f4:	e025      	b.n	8012a42 <lv_draw_mask_angle+0x4da>
            else res2 = LV_DRAW_SW_MASK_RES_UNKNOWN;
 80129f6:	2303      	movs	r3, #3
 80129f8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80129fc:	e021      	b.n	8012a42 <lv_draw_mask_angle+0x4da>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80129fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a00:	695b      	ldr	r3, [r3, #20]
 8012a02:	2bb3      	cmp	r3, #179	@ 0xb3
 8012a04:	dc04      	bgt.n	8012a10 <lv_draw_mask_angle+0x4a8>
 8012a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	db08      	blt.n	8012a22 <lv_draw_mask_angle+0x4ba>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8012a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a12:	695b      	ldr	r3, [r3, #20]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8012a14:	2bb4      	cmp	r3, #180	@ 0xb4
 8012a16:	dd08      	ble.n	8012a2a <lv_draw_mask_angle+0x4c2>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8012a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	db03      	blt.n	8012a2a <lv_draw_mask_angle+0x4c2>
            res2 = LV_DRAW_SW_MASK_RES_UNKNOWN;
 8012a22:	2303      	movs	r3, #3
 8012a24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8012a28:	e00b      	b.n	8012a42 <lv_draw_mask_angle+0x4da>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 8012a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a2c:	3350      	adds	r3, #80	@ 0x50
 8012a2e:	9300      	str	r3, [sp, #0]
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	68b9      	ldr	r1, [r7, #8]
 8012a36:	68f8      	ldr	r0, [r7, #12]
 8012a38:	f7ff f932 	bl	8011ca0 <lv_draw_mask_line>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        }

        if(res1 == LV_DRAW_SW_MASK_RES_TRANSP || res2 == LV_DRAW_SW_MASK_RES_TRANSP) return LV_DRAW_SW_MASK_RES_TRANSP;
 8012a42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d003      	beq.n	8012a52 <lv_draw_mask_angle+0x4ea>
 8012a4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <lv_draw_mask_angle+0x4ee>
 8012a52:	2300      	movs	r3, #0
 8012a54:	e014      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        else if(res1 == LV_DRAW_SW_MASK_RES_UNKNOWN && res2 == LV_DRAW_SW_MASK_RES_UNKNOWN) return LV_DRAW_SW_MASK_RES_TRANSP;
 8012a56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d105      	bne.n	8012a6a <lv_draw_mask_angle+0x502>
 8012a5e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012a62:	2b03      	cmp	r3, #3
 8012a64:	d101      	bne.n	8012a6a <lv_draw_mask_angle+0x502>
 8012a66:	2300      	movs	r3, #0
 8012a68:	e00a      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        else if(res1 == LV_DRAW_SW_MASK_RES_FULL_COVER &&
 8012a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d105      	bne.n	8012a7e <lv_draw_mask_angle+0x516>
 8012a72:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d101      	bne.n	8012a7e <lv_draw_mask_angle+0x516>
                res2 == LV_DRAW_SW_MASK_RES_FULL_COVER) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e000      	b.n	8012a80 <lv_draw_mask_angle+0x518>
        else return LV_DRAW_SW_MASK_RES_CHANGED;
 8012a7e:	2302      	movs	r3, #2
    }
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3750      	adds	r7, #80	@ 0x50
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <lv_draw_mask_radius>:

static lv_draw_sw_mask_res_t LV_ATTRIBUTE_FAST_MEM lv_draw_mask_radius(lv_opa_t * mask_buf, int32_t abs_x,
                                                                       int32_t abs_y, int32_t len,
                                                                       lv_draw_sw_mask_radius_param_t * p)
{
 8012a88:	b590      	push	{r4, r7, lr}
 8012a8a:	b09d      	sub	sp, #116	@ 0x74
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
 8012a94:	603b      	str	r3, [r7, #0]
    bool outer = p->cfg.outer;
 8012a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012a9a:	7f1b      	ldrb	r3, [r3, #28]
 8012a9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	bf14      	ite	ne
 8012aa6:	2301      	movne	r3, #1
 8012aa8:	2300      	moveq	r3, #0
 8012aaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    int32_t radius = p->cfg.radius;
 8012aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012ab2:	699b      	ldr	r3, [r3, #24]
 8012ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 8012ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012aba:	f103 0208 	add.w	r2, r3, #8
 8012abe:	f107 031c 	add.w	r3, r7, #28
 8012ac2:	4611      	mov	r1, r2
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fe fcf5 	bl	80114b4 <lv_area_copy>

    if(outer == false) {
 8012aca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012ace:	f083 0301 	eor.w	r3, r3, #1
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d009      	beq.n	8012aec <lv_draw_mask_radius+0x64>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8012ad8:	6a3b      	ldr	r3, [r7, #32]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	db03      	blt.n	8012ae8 <lv_draw_mask_radius+0x60>
 8012ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	dd0b      	ble.n	8012b00 <lv_draw_mask_radius+0x78>
            return LV_DRAW_SW_MASK_RES_TRANSP;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	e1cb      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8012aec:	6a3b      	ldr	r3, [r7, #32]
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	429a      	cmp	r2, r3
 8012af2:	db03      	blt.n	8012afc <lv_draw_mask_radius+0x74>
 8012af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	dd01      	ble.n	8012b00 <lv_draw_mask_radius+0x78>
            return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012afc:	2301      	movs	r3, #1
 8012afe:	e1c1      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8012b00:	69fa      	ldr	r2, [r7, #28]
 8012b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b04:	4413      	add	r3, r2
 8012b06:	68ba      	ldr	r2, [r7, #8]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	db07      	blt.n	8012b1c <lv_draw_mask_radius+0x94>
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	441a      	add	r2, r3
 8012b12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b16:	1acb      	subs	r3, r1, r3
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	dd0b      	ble.n	8012b34 <lv_draw_mask_radius+0xac>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8012b1c:	6a3a      	ldr	r2, [r7, #32]
 8012b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b20:	4413      	add	r3, r2
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	db6b      	blt.n	8012c00 <lv_draw_mask_radius+0x178>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8012b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b2c:	1ad3      	subs	r3, r2, r3
 8012b2e:	687a      	ldr	r2, [r7, #4]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	dc65      	bgt.n	8012c00 <lv_draw_mask_radius+0x178>
        if(outer == false) {
 8012b34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012b38:	f083 0301 	eor.w	r3, r3, #1
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d033      	beq.n	8012baa <lv_draw_mask_radius+0x122>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 8012b42:	69fa      	ldr	r2, [r7, #28]
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	1ad3      	subs	r3, r2, r3
 8012b48:	633b      	str	r3, [r7, #48]	@ 0x30
            if(last > len) return LV_DRAW_SW_MASK_RES_TRANSP;
 8012b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	dd01      	ble.n	8012b56 <lv_draw_mask_radius+0xce>
 8012b52:	2300      	movs	r3, #0
 8012b54:	e196      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
            if(last >= 0) {
 8012b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	db04      	blt.n	8012b66 <lv_draw_mask_radius+0xde>
                lv_memzero(&mask_buf[0], last);
 8012b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b5e:	4619      	mov	r1, r3
 8012b60:	68f8      	ldr	r0, [r7, #12]
 8012b62:	f7fe fcf4 	bl	801154e <lv_memzero>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8012b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	3301      	adds	r3, #1
 8012b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if(first <= 0) return LV_DRAW_SW_MASK_RES_TRANSP;
 8012b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	dc01      	bgt.n	8012b7a <lv_draw_mask_radius+0xf2>
 8012b76:	2300      	movs	r3, #0
 8012b78:	e184      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
            else if(first < len) {
 8012b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	da08      	bge.n	8012b94 <lv_draw_mask_radius+0x10c>
                lv_memzero(&mask_buf[first], len - first);
 8012b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	18d0      	adds	r0, r2, r3
 8012b88:	683a      	ldr	r2, [r7, #0]
 8012b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	4619      	mov	r1, r3
 8012b90:	f7fe fcdd 	bl	801154e <lv_memzero>
            }
            if(last == 0 && first == len) return LV_DRAW_SW_MASK_RES_FULL_COVER;
 8012b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d105      	bne.n	8012ba6 <lv_draw_mask_radius+0x11e>
 8012b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d101      	bne.n	8012ba6 <lv_draw_mask_radius+0x11e>
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	e16e      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
            else return LV_DRAW_SW_MASK_RES_CHANGED;
 8012ba6:	2302      	movs	r3, #2
 8012ba8:	e16c      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8012baa:	69fa      	ldr	r2, [r7, #28]
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if(first < 0) first = 0;
 8012bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	da01      	bge.n	8012bbc <lv_draw_mask_radius+0x134>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if(first <= len) {
 8012bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	dc1b      	bgt.n	8012bfc <lv_draw_mask_radius+0x174>
                int32_t last = rect.x2 - abs_x - first + 1;
 8012bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	1ad2      	subs	r2, r2, r3
 8012bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	3301      	adds	r3, #1
 8012bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
                if(first + last > len) last = len - first;
 8012bd2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012bd6:	4413      	add	r3, r2
 8012bd8:	683a      	ldr	r2, [r7, #0]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	da03      	bge.n	8012be6 <lv_draw_mask_radius+0x15e>
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012be2:	1ad3      	subs	r3, r2, r3
 8012be4:	66bb      	str	r3, [r7, #104]	@ 0x68
                if(last >= 0) {
 8012be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	db07      	blt.n	8012bfc <lv_draw_mask_radius+0x174>
                    lv_memzero(&mask_buf[first], last);
 8012bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bee:	68fa      	ldr	r2, [r7, #12]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f7fe fca9 	bl	801154e <lv_memzero>
                }
            }
        }
        return LV_DRAW_SW_MASK_RES_CHANGED;
 8012bfc:	2302      	movs	r3, #2
 8012bfe:	e141      	b.n	8012e84 <lv_draw_mask_radius+0x3fc>
    }

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 8012c00:	69fa      	ldr	r2, [r7, #28]
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	1ad3      	subs	r3, r2, r3
 8012c06:	657b      	str	r3, [r7, #84]	@ 0x54
    int32_t w = lv_area_get_width(&rect);
 8012c08:	f107 031c 	add.w	r3, r7, #28
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fe fc6c 	bl	80114ea <lv_area_get_width>
 8012c12:	6538      	str	r0, [r7, #80]	@ 0x50
    int32_t h = lv_area_get_height(&rect);
 8012c14:	f107 031c 	add.w	r3, r7, #28
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fe fc76 	bl	801150a <lv_area_get_height>
 8012c1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    abs_x -= rect.x1;
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	68ba      	ldr	r2, [r7, #8]
 8012c24:	1ad3      	subs	r3, r2, r3
 8012c26:	60bb      	str	r3, [r7, #8]
    abs_y -= rect.y1;
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	607b      	str	r3, [r7, #4]

    int32_t aa_len;
    int32_t x_start;
    int32_t cir_y;
    if(abs_y < radius) {
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c34:	429a      	cmp	r2, r3
 8012c36:	da05      	bge.n	8012c44 <lv_draw_mask_radius+0x1bc>
        cir_y = radius - abs_y - 1;
 8012c38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	3b01      	subs	r3, #1
 8012c40:	667b      	str	r3, [r7, #100]	@ 0x64
 8012c42:	e005      	b.n	8012c50 <lv_draw_mask_radius+0x1c8>
    }
    else {
        cir_y = abs_y - (h - radius);
 8012c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8012c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012c54:	6a18      	ldr	r0, [r3, #32]
 8012c56:	f107 0314 	add.w	r3, r7, #20
 8012c5a:	f107 0218 	add.w	r2, r7, #24
 8012c5e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8012c60:	f000 fc31 	bl	80134c6 <get_next_line>
 8012c64:	64b8      	str	r0, [r7, #72]	@ 0x48
    int32_t cir_x_right = k + w - radius + x_start;
 8012c66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c6a:	441a      	add	r2, r3
 8012c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c6e:	1ad2      	subs	r2, r2, r3
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	4413      	add	r3, r2
 8012c74:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t cir_x_left = k + radius - x_start - 1;
 8012c76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c7a:	441a      	add	r2, r3
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	3b01      	subs	r3, #1
 8012c82:	643b      	str	r3, [r7, #64]	@ 0x40
    int32_t i;

    if(outer == false) {
 8012c84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012c88:	f083 0301 	eor.w	r3, r3, #1
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d074      	beq.n	8012d7c <lv_draw_mask_radius+0x2f4>
        for(i = 0; i < aa_len; i++) {
 8012c92:	2300      	movs	r3, #0
 8012c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8012c96:	e049      	b.n	8012d2c <lv_draw_mask_radius+0x2a4>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 8012c98:	69ba      	ldr	r2, [r7, #24]
 8012c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c9c:	1ad3      	subs	r3, r2, r3
 8012c9e:	3b01      	subs	r3, #1
 8012ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012ca2:	4413      	add	r3, r2
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8012caa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012cac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012cae:	4413      	add	r3, r2
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	db19      	blt.n	8012ce8 <lv_draw_mask_radius+0x260>
 8012cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012cb8:	4413      	add	r3, r2
 8012cba:	683a      	ldr	r2, [r7, #0]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	dd13      	ble.n	8012ce8 <lv_draw_mask_radius+0x260>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8012cc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012cc4:	4413      	add	r3, r2
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	4413      	add	r3, r2
 8012ccc:	7819      	ldrb	r1, [r3, #0]
 8012cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012cd2:	4413      	add	r3, r2
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	189c      	adds	r4, r3, r2
 8012cda:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f000 fc21 	bl	8013526 <mask_mix>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8012ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	db19      	blt.n	8012d26 <lv_draw_mask_radius+0x29e>
 8012cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012cf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012cf6:	1ad3      	subs	r3, r2, r3
 8012cf8:	683a      	ldr	r2, [r7, #0]
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	dd13      	ble.n	8012d26 <lv_draw_mask_radius+0x29e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8012cfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012d02:	1ad3      	subs	r3, r2, r3
 8012d04:	461a      	mov	r2, r3
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	4413      	add	r3, r2
 8012d0a:	7819      	ldrb	r1, [r3, #0]
 8012d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	461a      	mov	r2, r3
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	189c      	adds	r4, r3, r2
 8012d18:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f000 fc02 	bl	8013526 <mask_mix>
 8012d22:	4603      	mov	r3, r0
 8012d24:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8012d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012d28:	3301      	adds	r3, #1
 8012d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012d30:	429a      	cmp	r2, r3
 8012d32:	dbb1      	blt.n	8012c98 <lv_draw_mask_radius+0x210>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 8012d34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012d38:	441a      	add	r2, r3
 8012d3a:	683b      	ldr	r3, [r7, #0]
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	bfa8      	it	ge
 8012d40:	4613      	movge	r3, r2
 8012d42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d46:	647b      	str	r3, [r7, #68]	@ 0x44
        lv_memzero(&mask_buf[cir_x_right], len - cir_x_right);
 8012d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d4a:	68fa      	ldr	r2, [r7, #12]
 8012d4c:	18d0      	adds	r0, r2, r3
 8012d4e:	683a      	ldr	r2, [r7, #0]
 8012d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	4619      	mov	r1, r3
 8012d56:	f7fe fbfa 	bl	801154e <lv_memzero>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	4293      	cmp	r3, r2
 8012d66:	bfa8      	it	ge
 8012d68:	4613      	movge	r3, r2
 8012d6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d6e:	643b      	str	r3, [r7, #64]	@ 0x40
        lv_memzero(&mask_buf[0], cir_x_left);
 8012d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d72:	4619      	mov	r1, r3
 8012d74:	68f8      	ldr	r0, [r7, #12]
 8012d76:	f7fe fbea 	bl	801154e <lv_memzero>
 8012d7a:	e082      	b.n	8012e82 <lv_draw_mask_radius+0x3fa>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8012d80:	e04b      	b.n	8012e1a <lv_draw_mask_radius+0x392>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	1e5a      	subs	r2, r3, #1
 8012d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012d88:	1ad3      	subs	r3, r2, r3
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012d8e:	4413      	add	r3, r2
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	43db      	mvns	r3, r3
 8012d94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8012d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012d9c:	4413      	add	r3, r2
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	db19      	blt.n	8012dd6 <lv_draw_mask_radius+0x34e>
 8012da2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012da6:	4413      	add	r3, r2
 8012da8:	683a      	ldr	r2, [r7, #0]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	dd13      	ble.n	8012dd6 <lv_draw_mask_radius+0x34e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8012dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012db0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012db2:	4413      	add	r3, r2
 8012db4:	461a      	mov	r2, r3
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	4413      	add	r3, r2
 8012dba:	7819      	ldrb	r1, [r3, #0]
 8012dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012dbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012dc0:	4413      	add	r3, r2
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	189c      	adds	r4, r3, r2
 8012dc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f000 fbaa 	bl	8013526 <mask_mix>
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8012dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012dd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	db19      	blt.n	8012e14 <lv_draw_mask_radius+0x38c>
 8012de0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012de4:	1ad3      	subs	r3, r2, r3
 8012de6:	683a      	ldr	r2, [r7, #0]
 8012de8:	429a      	cmp	r2, r3
 8012dea:	dd13      	ble.n	8012e14 <lv_draw_mask_radius+0x38c>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8012dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	461a      	mov	r2, r3
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	4413      	add	r3, r2
 8012df8:	7819      	ldrb	r1, [r3, #0]
 8012dfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012dfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012dfe:	1ad3      	subs	r3, r2, r3
 8012e00:	461a      	mov	r2, r3
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	189c      	adds	r4, r3, r2
 8012e06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 fb8b 	bl	8013526 <mask_mix>
 8012e10:	4603      	mov	r3, r0
 8012e12:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8012e14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012e16:	3301      	adds	r3, #1
 8012e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	dbaf      	blt.n	8012d82 <lv_draw_mask_radius+0x2fa>
            }
        }

        int32_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 8012e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e24:	1c5a      	adds	r2, r3, #1
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	bfa8      	it	ge
 8012e2c:	4613      	movge	r3, r2
 8012e2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8012e34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	da05      	bge.n	8012e48 <lv_draw_mask_radius+0x3c0>
 8012e3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	0fdb      	lsrs	r3, r3, #31
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	e004      	b.n	8012e52 <lv_draw_mask_radius+0x3ca>
 8012e48:	683a      	ldr	r2, [r7, #0]
 8012e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e4c:	1ad3      	subs	r3, r2, r3
 8012e4e:	0fdb      	lsrs	r3, r3, #31
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d001      	beq.n	8012e5a <lv_draw_mask_radius+0x3d2>
 8012e56:	2300      	movs	r3, #0
 8012e58:	e00a      	b.n	8012e70 <lv_draw_mask_radius+0x3e8>
 8012e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	da03      	bge.n	8012e6a <lv_draw_mask_radius+0x3e2>
 8012e62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e66:	1ad3      	subs	r3, r2, r3
 8012e68:	e002      	b.n	8012e70 <lv_draw_mask_radius+0x3e8>
 8012e6a:	683a      	ldr	r2, [r7, #0]
 8012e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e6e:	1ad3      	subs	r3, r2, r3
 8012e70:	63bb      	str	r3, [r7, #56]	@ 0x38
        lv_memzero(&mask_buf[clr_start], clr_len);
 8012e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4413      	add	r3, r2
 8012e78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e7a:	4611      	mov	r1, r2
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fe fb66 	bl	801154e <lv_memzero>
    }

    return LV_DRAW_SW_MASK_RES_CHANGED;
 8012e82:	2302      	movs	r3, #2
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3774      	adds	r7, #116	@ 0x74
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd90      	pop	{r4, r7, pc}

08012e8c <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, int32_t * tmp, int32_t radius)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
    c->x = radius;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	687a      	ldr	r2, [r7, #4]
 8012e9c:	601a      	str	r2, [r3, #0]
    c->y = 0;
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	605a      	str	r2, [r3, #4]
    *tmp = 1 - radius;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f1c3 0201 	rsb	r2, r3, #1
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	601a      	str	r2, [r3, #0]
}
 8012eae:	bf00      	nop
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr

08012eba <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 8012eba:	b480      	push	{r7}
 8012ebc:	b083      	sub	sp, #12
 8012ebe:	af00      	add	r7, sp, #0
 8012ec0:	6078      	str	r0, [r7, #4]
    return c->y <= c->x;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	bfd4      	ite	le
 8012ece:	2301      	movle	r3, #1
 8012ed0:	2300      	movgt	r3, #0
 8012ed2:	b2db      	uxtb	r3, r3
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, int32_t * tmp)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	dc09      	bgt.n	8012f06 <circ_next+0x26>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	005b      	lsls	r3, r3, #1
 8012efc:	3303      	adds	r3, #3
 8012efe:	441a      	add	r2, r3
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	601a      	str	r2, [r3, #0]
 8012f04:	e010      	b.n	8012f28 <circ_next+0x48>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6859      	ldr	r1, [r3, #4]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	1acb      	subs	r3, r1, r3
 8012f14:	005b      	lsls	r3, r3, #1
 8012f16:	3305      	adds	r3, #5
 8012f18:	441a      	add	r2, r3
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	601a      	str	r2, [r3, #0]
        c->x--;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	1e5a      	subs	r2, r3, #1
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	601a      	str	r2, [r3, #0]
    }
    c->y++;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	1c5a      	adds	r2, r3, #1
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	605a      	str	r2, [r3, #4]
}
 8012f32:	bf00      	nop
 8012f34:	370c      	adds	r7, #12
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr

08012f3e <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_sw_mask_radius_circle_dsc_t * c, int32_t radius)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b098      	sub	sp, #96	@ 0x60
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	6039      	str	r1, [r7, #0]
    if(radius == 0) return;
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f000 82b7 	beq.w	80134be <circ_calc_aa4+0x580>
    c->radius = radius;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	619a      	str	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_free(c->buf);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d004      	beq.n	8012f68 <circ_calc_aa4+0x2a>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f00b f8d0 	bl	801e108 <lv_free>

    c->buf = lv_malloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	1c5a      	adds	r2, r3, #1
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	005b      	lsls	r3, r3, #1
 8012f70:	4413      	add	r3, r2
 8012f72:	005b      	lsls	r3, r3, #1
 8012f74:	4618      	mov	r0, r3
 8012f76:	f00b f88f 	bl	801e098 <lv_malloc>
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <circ_calc_aa4+0x4e>
 8012f88:	bf00      	nop
 8012f8a:	e7fd      	b.n	8012f88 <circ_calc_aa4+0x4a>
    c->cir_opa = c->buf;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	3302      	adds	r3, #2
 8012f9e:	441a      	add	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	3304      	adds	r3, #4
 8012fae:	441a      	add	r2, r3
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d111      	bne.n	8012fde <circ_calc_aa4+0xa0>
        c->cir_opa[0] = 180;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	22b4      	movs	r2, #180	@ 0xb4
 8012fc0:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	3302      	adds	r3, #2
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	689b      	ldr	r3, [r3, #8]
 8012fd8:	2200      	movs	r2, #0
 8012fda:	801a      	strh	r2, [r3, #0]
        return;
 8012fdc:	e270      	b.n	80134c0 <circ_calc_aa4+0x582>
    }

    const size_t cir_xy_size = (radius + 1) * 2 * 2 * sizeof(int32_t);
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	011b      	lsls	r3, r3, #4
 8012fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t * cir_x = lv_malloc_zeroed(cir_xy_size);
 8012fe6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8012fe8:	f00b f870 	bl	801e0cc <lv_malloc_zeroed>
 8012fec:	6478      	str	r0, [r7, #68]	@ 0x44
    int32_t * cir_y = &cir_x[(radius + 1) * 2];
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	3301      	adds	r3, #1
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ff6:	4413      	add	r3, r2
 8012ff8:	643b      	str	r3, [r7, #64]	@ 0x40

    uint32_t y_8th_cnt = 0;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    lv_point_t cp;
    int32_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	009a      	lsls	r2, r3, #2
 8013002:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8013006:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff ff3e 	bl	8012e8c <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    int32_t cir_size = 0;
 8013010:	2300      	movs	r3, #0
 8013012:	657b      	str	r3, [r7, #84]	@ 0x54
    x_int[0] = cp.x >> 2;
 8013014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013016:	109b      	asrs	r3, r3, #2
 8013018:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 801301e:	e167      	b.n	80132f0 <circ_calc_aa4+0x3b2>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 8013020:	2300      	movs	r3, #0
 8013022:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013024:	e027      	b.n	8013076 <circ_calc_aa4+0x138>
            circ_next(&cp, &tmp);
 8013026:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801302a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801302e:	4611      	mov	r1, r2
 8013030:	4618      	mov	r0, r3
 8013032:	f7ff ff55 	bl	8012ee0 <circ_next>
            if(circ_cont(&cp) == false) break;
 8013036:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff ff3d 	bl	8012eba <circ_cont>
 8013040:	4603      	mov	r3, r0
 8013042:	f083 0301 	eor.w	r3, r3, #1
 8013046:	b2db      	uxtb	r3, r3
 8013048:	2b00      	cmp	r3, #0
 801304a:	d118      	bne.n	801307e <circ_calc_aa4+0x140>
            x_int[i] = cp.x >> 2;
 801304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801304e:	109b      	asrs	r3, r3, #2
 8013050:	461a      	mov	r2, r3
 8013052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013054:	009b      	lsls	r3, r3, #2
 8013056:	3360      	adds	r3, #96	@ 0x60
 8013058:	443b      	add	r3, r7
 801305a:	f843 2c44 	str.w	r2, [r3, #-68]
            x_fract[i] = cp.x & 0x3;
 801305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013060:	f003 0203 	and.w	r2, r3, #3
 8013064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	3360      	adds	r3, #96	@ 0x60
 801306a:	443b      	add	r3, r7
 801306c:	f843 2c54 	str.w	r2, [r3, #-84]
        for(i = 0; i < 4; i++) {
 8013070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013072:	3301      	adds	r3, #1
 8013074:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013078:	2b03      	cmp	r3, #3
 801307a:	ddd4      	ble.n	8013026 <circ_calc_aa4+0xe8>
 801307c:	e000      	b.n	8013080 <circ_calc_aa4+0x142>
            if(circ_cont(&cp) == false) break;
 801307e:	bf00      	nop
        }
        if(i != 4) break;
 8013080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013082:	2b04      	cmp	r3, #4
 8013084:	f040 813e 	bne.w	8013304 <circ_calc_aa4+0x3c6>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 8013088:	69fa      	ldr	r2, [r7, #28]
 801308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801308c:	429a      	cmp	r2, r3
 801308e:	d12f      	bne.n	80130f0 <circ_calc_aa4+0x1b2>
            cir_x[cir_size] = x_int[0];
 8013090:	69f9      	ldr	r1, [r7, #28]
 8013092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013094:	009b      	lsls	r3, r3, #2
 8013096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013098:	4413      	add	r3, r2
 801309a:	460a      	mov	r2, r1
 801309c:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 801309e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130a0:	009b      	lsls	r3, r3, #2
 80130a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80130a4:	4413      	add	r3, r2
 80130a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80130a8:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	b2da      	uxtb	r2, r3
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	b2db      	uxtb	r3, r3
 80130b2:	4413      	add	r3, r2
 80130b4:	b2da      	uxtb	r2, r3
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	b2db      	uxtb	r3, r3
 80130ba:	4413      	add	r3, r2
 80130bc:	b2d9      	uxtb	r1, r3
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	b2da      	uxtb	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6858      	ldr	r0, [r3, #4]
 80130c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130c8:	4403      	add	r3, r0
 80130ca:	440a      	add	r2, r1
 80130cc:	b2d2      	uxtb	r2, r2
 80130ce:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	685a      	ldr	r2, [r3, #4]
 80130d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130d6:	4413      	add	r3, r2
 80130d8:	781a      	ldrb	r2, [r3, #0]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6859      	ldr	r1, [r3, #4]
 80130de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130e0:	440b      	add	r3, r1
 80130e2:	0112      	lsls	r2, r2, #4
 80130e4:	b2d2      	uxtb	r2, r2
 80130e6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80130e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ea:	3301      	adds	r3, #1
 80130ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80130ee:	e0fc      	b.n	80132ea <circ_calc_aa4+0x3ac>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 80130f0:	69fa      	ldr	r2, [r7, #28]
 80130f2:	6a3b      	ldr	r3, [r7, #32]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d051      	beq.n	801319c <circ_calc_aa4+0x25e>
            cir_x[cir_size] = x_int[0];
 80130f8:	69f9      	ldr	r1, [r7, #28]
 80130fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013100:	4413      	add	r3, r2
 8013102:	460a      	mov	r2, r1
 8013104:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801310c:	4413      	add	r3, r2
 801310e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013110:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 8013112:	68f9      	ldr	r1, [r7, #12]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	685a      	ldr	r2, [r3, #4]
 8013118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801311a:	4413      	add	r3, r2
 801311c:	b2ca      	uxtb	r2, r1
 801311e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	685a      	ldr	r2, [r3, #4]
 8013124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013126:	4413      	add	r3, r2
 8013128:	781a      	ldrb	r2, [r3, #0]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6859      	ldr	r1, [r3, #4]
 801312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013130:	440b      	add	r3, r1
 8013132:	0112      	lsls	r2, r2, #4
 8013134:	b2d2      	uxtb	r2, r2
 8013136:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801313a:	3301      	adds	r3, #1
 801313c:	657b      	str	r3, [r7, #84]	@ 0x54

            cir_x[cir_size] = x_int[0] - 1;
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	1e59      	subs	r1, r3, #1
 8013142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013148:	4413      	add	r3, r2
 801314a:	460a      	mov	r2, r1
 801314c:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 801314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013154:	4413      	add	r3, r2
 8013156:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013158:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	b2da      	uxtb	r2, r3
 801315e:	697b      	ldr	r3, [r7, #20]
 8013160:	b2db      	uxtb	r3, r3
 8013162:	4413      	add	r3, r2
 8013164:	b2da      	uxtb	r2, r3
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	b2db      	uxtb	r3, r3
 801316a:	4413      	add	r3, r2
 801316c:	b2da      	uxtb	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6859      	ldr	r1, [r3, #4]
 8013172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013174:	440b      	add	r3, r1
 8013176:	3204      	adds	r2, #4
 8013178:	b2d2      	uxtb	r2, r2
 801317a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	685a      	ldr	r2, [r3, #4]
 8013180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013182:	4413      	add	r3, r2
 8013184:	781a      	ldrb	r2, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	6859      	ldr	r1, [r3, #4]
 801318a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801318c:	440b      	add	r3, r1
 801318e:	0112      	lsls	r2, r2, #4
 8013190:	b2d2      	uxtb	r2, r2
 8013192:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013196:	3301      	adds	r3, #1
 8013198:	657b      	str	r3, [r7, #84]	@ 0x54
 801319a:	e0a6      	b.n	80132ea <circ_calc_aa4+0x3ac>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 801319c:	69fa      	ldr	r2, [r7, #28]
 801319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d051      	beq.n	8013248 <circ_calc_aa4+0x30a>
            cir_x[cir_size] = x_int[0];
 80131a4:	69f9      	ldr	r1, [r7, #28]
 80131a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80131ac:	4413      	add	r3, r2
 80131ae:	460a      	mov	r2, r1
 80131b0:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 80131b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80131b8:	4413      	add	r3, r2
 80131ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80131bc:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	b2d9      	uxtb	r1, r3
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	b2da      	uxtb	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6858      	ldr	r0, [r3, #4]
 80131ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131cc:	4403      	add	r3, r0
 80131ce:	440a      	add	r2, r1
 80131d0:	b2d2      	uxtb	r2, r2
 80131d2:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	685a      	ldr	r2, [r3, #4]
 80131d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131da:	4413      	add	r3, r2
 80131dc:	781a      	ldrb	r2, [r3, #0]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6859      	ldr	r1, [r3, #4]
 80131e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131e4:	440b      	add	r3, r1
 80131e6:	0112      	lsls	r2, r2, #4
 80131e8:	b2d2      	uxtb	r2, r2
 80131ea:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80131ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131ee:	3301      	adds	r3, #1
 80131f0:	657b      	str	r3, [r7, #84]	@ 0x54

            cir_x[cir_size] = x_int[0] - 1;
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	1e59      	subs	r1, r3, #1
 80131f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80131fc:	4413      	add	r3, r2
 80131fe:	460a      	mov	r2, r1
 8013200:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013208:	4413      	add	r3, r2
 801320a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801320c:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	b2da      	uxtb	r2, r3
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	b2db      	uxtb	r3, r3
 8013216:	4413      	add	r3, r2
 8013218:	b2da      	uxtb	r2, r3
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6859      	ldr	r1, [r3, #4]
 801321e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013220:	440b      	add	r3, r1
 8013222:	3208      	adds	r2, #8
 8013224:	b2d2      	uxtb	r2, r2
 8013226:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685a      	ldr	r2, [r3, #4]
 801322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801322e:	4413      	add	r3, r2
 8013230:	781a      	ldrb	r2, [r3, #0]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6859      	ldr	r1, [r3, #4]
 8013236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013238:	440b      	add	r3, r1
 801323a:	0112      	lsls	r2, r2, #4
 801323c:	b2d2      	uxtb	r2, r2
 801323e:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013242:	3301      	adds	r3, #1
 8013244:	657b      	str	r3, [r7, #84]	@ 0x54
 8013246:	e050      	b.n	80132ea <circ_calc_aa4+0x3ac>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 8013248:	69f9      	ldr	r1, [r7, #28]
 801324a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013250:	4413      	add	r3, r2
 8013252:	460a      	mov	r2, r1
 8013254:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8013256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801325c:	4413      	add	r3, r2
 801325e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013260:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	b2da      	uxtb	r2, r3
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	b2db      	uxtb	r3, r3
 801326a:	4413      	add	r3, r2
 801326c:	b2d9      	uxtb	r1, r3
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	b2da      	uxtb	r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6858      	ldr	r0, [r3, #4]
 8013276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013278:	4403      	add	r3, r0
 801327a:	440a      	add	r2, r1
 801327c:	b2d2      	uxtb	r2, r2
 801327e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	685a      	ldr	r2, [r3, #4]
 8013284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013286:	4413      	add	r3, r2
 8013288:	781a      	ldrb	r2, [r3, #0]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6859      	ldr	r1, [r3, #4]
 801328e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013290:	440b      	add	r3, r1
 8013292:	0112      	lsls	r2, r2, #4
 8013294:	b2d2      	uxtb	r2, r2
 8013296:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8013298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801329a:	3301      	adds	r3, #1
 801329c:	657b      	str	r3, [r7, #84]	@ 0x54

            cir_x[cir_size] = x_int[0] - 1;
 801329e:	69fb      	ldr	r3, [r7, #28]
 80132a0:	1e59      	subs	r1, r3, #1
 80132a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80132a8:	4413      	add	r3, r2
 80132aa:	460a      	mov	r2, r1
 80132ac:	601a      	str	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 80132ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80132b4:	4413      	add	r3, r2
 80132b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80132b8:	601a      	str	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 80132ba:	69bb      	ldr	r3, [r7, #24]
 80132bc:	b2da      	uxtb	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6859      	ldr	r1, [r3, #4]
 80132c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132c4:	440b      	add	r3, r1
 80132c6:	320c      	adds	r2, #12
 80132c8:	b2d2      	uxtb	r2, r2
 80132ca:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	685a      	ldr	r2, [r3, #4]
 80132d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132d2:	4413      	add	r3, r2
 80132d4:	781a      	ldrb	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6859      	ldr	r1, [r3, #4]
 80132da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132dc:	440b      	add	r3, r1
 80132de:	0112      	lsls	r2, r2, #4
 80132e0:	b2d2      	uxtb	r2, r2
 80132e2:	701a      	strb	r2, [r3, #0]
            cir_size++;
 80132e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132e6:	3301      	adds	r3, #1
 80132e8:	657b      	str	r3, [r7, #84]	@ 0x54
        }

        y_8th_cnt++;
 80132ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80132ec:	3301      	adds	r3, #1
 80132ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while(circ_cont(&cp)) {
 80132f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7ff fde0 	bl	8012eba <circ_cont>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f47f ae8f 	bne.w	8013020 <circ_calc_aa4+0xe2>
 8013302:	e000      	b.n	8013306 <circ_calc_aa4+0x3c8>
        if(i != 4) break;
 8013304:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801330c:	fb02 f303 	mul.w	r3, r2, r3
 8013310:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t mid_int = mid >> 10;
 8013312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013314:	129b      	asrs	r3, r3, #10
 8013316:	63bb      	str	r3, [r7, #56]	@ 0x38
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8013318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801331a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801331e:	3b01      	subs	r3, #1
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013324:	4413      	add	r3, r2
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801332a:	429a      	cmp	r2, r3
 801332c:	d10a      	bne.n	8013344 <circ_calc_aa4+0x406>
 801332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013330:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013334:	3b01      	subs	r3, #1
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801333a:	4413      	add	r3, r2
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013340:	429a      	cmp	r2, r3
 8013342:	d043      	beq.n	80133cc <circ_calc_aa4+0x48e>
        int32_t tmp_val = mid - (mid_int << 10);
 8013344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013346:	029b      	lsls	r3, r3, #10
 8013348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	653b      	str	r3, [r7, #80]	@ 0x50
        if(tmp_val <= 512) {
 801334e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013354:	dc08      	bgt.n	8013368 <circ_calc_aa4+0x42a>
            tmp_val = tmp_val * tmp_val * 2;
 8013356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013358:	fb03 f303 	mul.w	r3, r3, r3
 801335c:	005b      	lsls	r3, r3, #1
 801335e:	653b      	str	r3, [r7, #80]	@ 0x50
            tmp_val = tmp_val >> (10 + 6);
 8013360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013362:	141b      	asrs	r3, r3, #16
 8013364:	653b      	str	r3, [r7, #80]	@ 0x50
 8013366:	e00f      	b.n	8013388 <circ_calc_aa4+0x44a>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8013368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801336a:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801336e:	653b      	str	r3, [r7, #80]	@ 0x50
            tmp_val = tmp_val * tmp_val * 2;
 8013370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013372:	fb03 f303 	mul.w	r3, r3, r3
 8013376:	005b      	lsls	r3, r3, #1
 8013378:	653b      	str	r3, [r7, #80]	@ 0x50
            tmp_val = tmp_val >> (10 + 6);
 801337a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801337c:	141b      	asrs	r3, r3, #16
 801337e:	653b      	str	r3, [r7, #80]	@ 0x50
            tmp_val = 15 - tmp_val;
 8013380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013382:	f1c3 030f 	rsb	r3, r3, #15
 8013386:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        cir_x[cir_size] = mid_int;
 8013388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801338e:	4413      	add	r3, r2
 8013390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013392:	601a      	str	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8013394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801339a:	4413      	add	r3, r2
 801339c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801339e:	601a      	str	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	685a      	ldr	r2, [r3, #4]
 80133a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133a6:	4413      	add	r3, r2
 80133a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80133aa:	b2d2      	uxtb	r2, r2
 80133ac:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	685a      	ldr	r2, [r3, #4]
 80133b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133b4:	4413      	add	r3, r2
 80133b6:	781a      	ldrb	r2, [r3, #0]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	6859      	ldr	r1, [r3, #4]
 80133bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133be:	440b      	add	r3, r1
 80133c0:	0112      	lsls	r2, r2, #4
 80133c2:	b2d2      	uxtb	r2, r2
 80133c4:	701a      	strb	r2, [r3, #0]
        cir_size++;
 80133c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133c8:	3301      	adds	r3, #1
 80133ca:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 80133cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133ce:	3b02      	subs	r3, #2
 80133d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80133d2:	e023      	b.n	801341c <circ_calc_aa4+0x4de>
        cir_x[cir_size] = cir_y[i];
 80133d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80133da:	441a      	add	r2, r3
 80133dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133de:	009b      	lsls	r3, r3, #2
 80133e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80133e2:	440b      	add	r3, r1
 80133e4:	6812      	ldr	r2, [r2, #0]
 80133e6:	601a      	str	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 80133e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80133ee:	441a      	add	r2, r3
 80133f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80133f6:	440b      	add	r3, r1
 80133f8:	6812      	ldr	r2, [r2, #0]
 80133fa:	601a      	str	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	685a      	ldr	r2, [r3, #4]
 8013400:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013402:	441a      	add	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6859      	ldr	r1, [r3, #4]
 8013408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801340a:	440b      	add	r3, r1
 801340c:	7812      	ldrb	r2, [r2, #0]
 801340e:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8013410:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013412:	3b01      	subs	r3, #1
 8013414:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013418:	3301      	adds	r3, #1
 801341a:	657b      	str	r3, [r7, #84]	@ 0x54
 801341c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801341e:	2b00      	cmp	r3, #0
 8013420:	dad8      	bge.n	80133d4 <circ_calc_aa4+0x496>
    }

    int32_t y = 0;
 8013422:	2300      	movs	r3, #0
 8013424:	64fb      	str	r3, [r7, #76]	@ 0x4c
    i = 0;
 8013426:	2300      	movs	r3, #0
 8013428:	65bb      	str	r3, [r7, #88]	@ 0x58
    c->opa_start_on_y[0] = 0;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	2200      	movs	r2, #0
 8013430:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 8013432:	e03c      	b.n	80134ae <circ_calc_aa4+0x570>
        c->opa_start_on_y[y] = i;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	68da      	ldr	r2, [r3, #12]
 8013438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801343a:	005b      	lsls	r3, r3, #1
 801343c:	4413      	add	r3, r2
 801343e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013440:	b292      	uxth	r2, r2
 8013442:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 8013444:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801344a:	4413      	add	r3, r2
 801344c:	6819      	ldr	r1, [r3, #0]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	689a      	ldr	r2, [r3, #8]
 8013452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013454:	005b      	lsls	r3, r3, #1
 8013456:	4413      	add	r3, r2
 8013458:	b28a      	uxth	r2, r1
 801345a:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 801345c:	e018      	b.n	8013490 <circ_calc_aa4+0x552>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 801345e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013464:	4413      	add	r3, r2
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	6891      	ldr	r1, [r2, #8]
 801346c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801346e:	0052      	lsls	r2, r2, #1
 8013470:	440a      	add	r2, r1
 8013472:	8812      	ldrh	r2, [r2, #0]
 8013474:	4293      	cmp	r3, r2
 8013476:	bfa8      	it	ge
 8013478:	4613      	movge	r3, r2
 801347a:	4619      	mov	r1, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	689a      	ldr	r2, [r3, #8]
 8013480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013482:	005b      	lsls	r3, r3, #1
 8013484:	4413      	add	r3, r2
 8013486:	b28a      	uxth	r2, r1
 8013488:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 801348a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801348c:	3301      	adds	r3, #1
 801348e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013490:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013496:	4413      	add	r3, r2
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801349c:	429a      	cmp	r2, r3
 801349e:	d103      	bne.n	80134a8 <circ_calc_aa4+0x56a>
 80134a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80134a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134a4:	429a      	cmp	r2, r3
 80134a6:	dbda      	blt.n	801345e <circ_calc_aa4+0x520>
        }
        y++;
 80134a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134aa:	3301      	adds	r3, #1
 80134ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while(i < cir_size) {
 80134ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80134b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b2:	429a      	cmp	r2, r3
 80134b4:	dbbe      	blt.n	8013434 <circ_calc_aa4+0x4f6>
    }

    lv_free(cir_x);
 80134b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80134b8:	f00a fe26 	bl	801e108 <lv_free>
 80134bc:	e000      	b.n	80134c0 <circ_calc_aa4+0x582>
    if(radius == 0) return;
 80134be:	bf00      	nop
}
 80134c0:	3760      	adds	r7, #96	@ 0x60
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_sw_mask_radius_circle_dsc_t * c, int32_t y, int32_t * len,
                                int32_t * x_start)
{
 80134c6:	b480      	push	{r7}
 80134c8:	b085      	sub	sp, #20
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	60f8      	str	r0, [r7, #12]
 80134ce:	60b9      	str	r1, [r7, #8]
 80134d0:	607a      	str	r2, [r7, #4]
 80134d2:	603b      	str	r3, [r7, #0]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	68da      	ldr	r2, [r3, #12]
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	3301      	adds	r3, #1
 80134dc:	005b      	lsls	r3, r3, #1
 80134de:	4413      	add	r3, r2
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	4619      	mov	r1, r3
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	68da      	ldr	r2, [r3, #12]
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	005b      	lsls	r3, r3, #1
 80134ec:	4413      	add	r3, r2
 80134ee:	881b      	ldrh	r3, [r3, #0]
 80134f0:	1aca      	subs	r2, r1, r3
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	601a      	str	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	689a      	ldr	r2, [r3, #8]
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	005b      	lsls	r3, r3, #1
 80134fe:	4413      	add	r3, r2
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	461a      	mov	r2, r3
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	601a      	str	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	68d1      	ldr	r1, [r2, #12]
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	0052      	lsls	r2, r2, #1
 8013514:	440a      	add	r2, r1
 8013516:	8812      	ldrh	r2, [r2, #0]
 8013518:	4413      	add	r3, r2
}
 801351a:	4618      	mov	r0, r3
 801351c:	3714      	adds	r7, #20
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr

08013526 <mask_mix>:

static inline lv_opa_t LV_ATTRIBUTE_FAST_MEM mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8013526:	b480      	push	{r7}
 8013528:	b083      	sub	sp, #12
 801352a:	af00      	add	r7, sp, #0
 801352c:	4603      	mov	r3, r0
 801352e:	460a      	mov	r2, r1
 8013530:	71fb      	strb	r3, [r7, #7]
 8013532:	4613      	mov	r3, r2
 8013534:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8013536:	79bb      	ldrb	r3, [r7, #6]
 8013538:	2bfc      	cmp	r3, #252	@ 0xfc
 801353a:	d901      	bls.n	8013540 <mask_mix+0x1a>
 801353c:	79fb      	ldrb	r3, [r7, #7]
 801353e:	e010      	b.n	8013562 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8013540:	79bb      	ldrb	r3, [r7, #6]
 8013542:	2b02      	cmp	r3, #2
 8013544:	d801      	bhi.n	801354a <mask_mix+0x24>
 8013546:	2300      	movs	r3, #0
 8013548:	e00b      	b.n	8013562 <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);
 801354a:	79fb      	ldrb	r3, [r7, #7]
 801354c:	79ba      	ldrb	r2, [r7, #6]
 801354e:	fb02 f303 	mul.w	r3, r2, r3
 8013552:	461a      	mov	r2, r3
 8013554:	4613      	mov	r3, r2
 8013556:	021b      	lsls	r3, r3, #8
 8013558:	4413      	add	r3, r2
 801355a:	01db      	lsls	r3, r3, #7
 801355c:	4413      	add	r3, r2
 801355e:	0ddb      	lsrs	r3, r3, #23
 8013560:	b2db      	uxtb	r3, r3
}
 8013562:	4618      	mov	r0, r3
 8013564:	370c      	adds	r7, #12
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <lv_area_get_width>:
{
 801356e:	b480      	push	{r7}
 8013570:	b083      	sub	sp, #12
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	689a      	ldr	r2, [r3, #8]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	1ad3      	subs	r3, r2, r3
 8013580:	3301      	adds	r3, #1
}
 8013582:	4618      	mov	r0, r3
 8013584:	370c      	adds	r7, #12
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr

0801358e <lv_memzero>:
{
 801358e:	b580      	push	{r7, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
 8013596:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8013598:	683a      	ldr	r2, [r7, #0]
 801359a:	2100      	movs	r1, #0
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f009 fdde 	bl	801d15e <lv_memset>
}
 80135a2:	bf00      	nop
 80135a4:	3708      	adds	r7, #8
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <lv_draw_sw_mask_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_mask_rect(lv_draw_unit_t * draw_unit, const lv_draw_mask_rect_dsc_t * dsc, const lv_area_t * coords)
{
 80135aa:	b590      	push	{r4, r7, lr}
 80135ac:	b0a3      	sub	sp, #140	@ 0x8c
 80135ae:	af02      	add	r7, sp, #8
 80135b0:	60f8      	str	r0, [r7, #12]
 80135b2:	60b9      	str	r1, [r7, #8]
 80135b4:	607a      	str	r2, [r7, #4]
    LV_UNUSED(coords);

    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &dsc->area, draw_unit->clip_area)) {
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	f103 011c 	add.w	r1, r3, #28
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	689a      	ldr	r2, [r3, #8]
 80135c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80135c4:	4618      	mov	r0, r3
 80135c6:	f007 f8ad 	bl	801a724 <_lv_area_intersect>
 80135ca:	4603      	mov	r3, r0
 80135cc:	f083 0301 	eor.w	r3, r3, #1
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	f040 8113 	bne.w	80137fe <lv_draw_sw_mask_rect+0x254>
        return;
    }

    lv_layer_t * target_layer = draw_unit->target_layer;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	677b      	str	r3, [r7, #116]	@ 0x74
    lv_area_t * buf_area = &target_layer->buf_area;
 80135de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80135e0:	3304      	adds	r3, #4
 80135e2:	673b      	str	r3, [r7, #112]	@ 0x70
    lv_area_t clear_area;

    void * draw_buf = target_layer->draw_buf;
 80135e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /*Clear the top part*/
    lv_area_set(&clear_area, draw_unit->clip_area->x1, draw_unit->clip_area->y1, draw_unit->clip_area->x2,
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	6819      	ldr	r1, [r3, #0]
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	685a      	ldr	r2, [r3, #4]
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	689c      	ldr	r4, [r3, #8]
                dsc->area.y1 - 1);
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	6a1b      	ldr	r3, [r3, #32]
    lv_area_set(&clear_area, draw_unit->clip_area->x1, draw_unit->clip_area->y1, draw_unit->clip_area->x2,
 8013600:	3b01      	subs	r3, #1
 8013602:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	4623      	mov	r3, r4
 801360a:	f006 ffeb 	bl	801a5e4 <lv_area_set>
    lv_area_move(&clear_area, -buf_area->x1, -buf_area->y1);
 801360e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4259      	negs	r1, r3
 8013614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	425a      	negs	r2, r3
 801361a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801361e:	4618      	mov	r0, r3
 8013620:	f007 f85c 	bl	801a6dc <lv_area_move>
    lv_draw_buf_clear(draw_buf, &clear_area);
 8013624:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013628:	4619      	mov	r1, r3
 801362a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801362c:	f7f2 fb1c 	bl	8005c68 <lv_draw_buf_clear>

    /*Clear the bottom part*/
    lv_area_set(&clear_area, draw_unit->clip_area->x1, dsc->area.y2 + 1, draw_unit->clip_area->x2,
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	6819      	ldr	r1, [r3, #0]
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801363a:	1c5a      	adds	r2, r3, #1
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	689b      	ldr	r3, [r3, #8]
 8013640:	689c      	ldr	r4, [r3, #8]
                draw_unit->clip_area->y2);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	68db      	ldr	r3, [r3, #12]
    lv_area_set(&clear_area, draw_unit->clip_area->x1, dsc->area.y2 + 1, draw_unit->clip_area->x2,
 8013648:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 801364c:	9300      	str	r3, [sp, #0]
 801364e:	4623      	mov	r3, r4
 8013650:	f006 ffc8 	bl	801a5e4 <lv_area_set>
    lv_area_move(&clear_area, -buf_area->x1, -buf_area->y1);
 8013654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	4259      	negs	r1, r3
 801365a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	425a      	negs	r2, r3
 8013660:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013664:	4618      	mov	r0, r3
 8013666:	f007 f839 	bl	801a6dc <lv_area_move>
    lv_draw_buf_clear(draw_buf, &clear_area);
 801366a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801366e:	4619      	mov	r1, r3
 8013670:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013672:	f7f2 faf9 	bl	8005c68 <lv_draw_buf_clear>

    /*Clear the left part*/
    lv_area_set(&clear_area, draw_unit->clip_area->x1, dsc->area.y1, dsc->area.x1 - 1, dsc->area.y2);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	6819      	ldr	r1, [r3, #0]
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	6a1a      	ldr	r2, [r3, #32]
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	69db      	ldr	r3, [r3, #28]
 8013684:	1e5c      	subs	r4, r3, #1
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801368a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	4623      	mov	r3, r4
 8013692:	f006 ffa7 	bl	801a5e4 <lv_area_set>
    lv_area_move(&clear_area, -buf_area->x1, -buf_area->y1);
 8013696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	4259      	negs	r1, r3
 801369c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	425a      	negs	r2, r3
 80136a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80136a6:	4618      	mov	r0, r3
 80136a8:	f007 f818 	bl	801a6dc <lv_area_move>
    lv_draw_buf_clear(draw_buf, &clear_area);
 80136ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80136b0:	4619      	mov	r1, r3
 80136b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80136b4:	f7f2 fad8 	bl	8005c68 <lv_draw_buf_clear>

    /*Clear the right part*/
    lv_area_set(&clear_area, dsc->area.x2 + 1, dsc->area.y1, draw_unit->clip_area->x2, dsc->area.y2);
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136bc:	1c59      	adds	r1, r3, #1
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	6a1a      	ldr	r2, [r3, #32]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	689b      	ldr	r3, [r3, #8]
 80136c6:	689c      	ldr	r4, [r3, #8]
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136cc:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	4623      	mov	r3, r4
 80136d4:	f006 ff86 	bl	801a5e4 <lv_area_set>
    lv_area_move(&clear_area, -buf_area->x1, -buf_area->y1);
 80136d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	4259      	negs	r1, r3
 80136de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	425a      	negs	r2, r3
 80136e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80136e8:	4618      	mov	r0, r3
 80136ea:	f006 fff7 	bl	801a6dc <lv_area_move>
    lv_draw_buf_clear(draw_buf, &clear_area);
 80136ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80136f2:	4619      	mov	r1, r3
 80136f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80136f6:	f7f2 fab7 	bl	8005c68 <lv_draw_buf_clear>

    lv_draw_sw_mask_radius_param_t param;
    lv_draw_sw_mask_radius_init(&param, &dsc->area, dsc->radius, false);
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	f103 011c 	add.w	r1, r3, #28
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013704:	f107 0018 	add.w	r0, r7, #24
 8013708:	2300      	movs	r3, #0
 801370a:	f7fe f9af 	bl	8011a6c <lv_draw_sw_mask_radius_init>

    void * masks[2] = {0};
 801370e:	f107 0310 	add.w	r3, r7, #16
 8013712:	2200      	movs	r2, #0
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	605a      	str	r2, [r3, #4]
    masks[0] = &param;
 8013718:	f107 0318 	add.w	r3, r7, #24
 801371c:	613b      	str	r3, [r7, #16]

    uint32_t area_w = lv_area_get_width(&draw_area);
 801371e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013722:	4618      	mov	r0, r3
 8013724:	f7ff ff23 	bl	801356e <lv_area_get_width>
 8013728:	4603      	mov	r3, r0
 801372a:	66bb      	str	r3, [r7, #104]	@ 0x68
    lv_opa_t * mask_buf = lv_malloc(area_w);
 801372c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801372e:	f00a fcb3 	bl	801e098 <lv_malloc>
 8013732:	6678      	str	r0, [r7, #100]	@ 0x64

    int32_t y;
    for(y = draw_area.y1; y <= draw_area.y2; y++) {
 8013734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013736:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013738:	e054      	b.n	80137e4 <lv_draw_sw_mask_rect+0x23a>
        lv_memset(mask_buf, 0xff, area_w);
 801373a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801373c:	21ff      	movs	r1, #255	@ 0xff
 801373e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8013740:	f009 fd0d 	bl	801d15e <lv_memset>
        lv_draw_sw_mask_res_t res = lv_draw_sw_mask_apply(masks, mask_buf, draw_area.x1, y, area_w);
 8013744:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013748:	f107 0010 	add.w	r0, r7, #16
 801374c:	9300      	str	r3, [sp, #0]
 801374e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013750:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8013752:	f7fd ff15 	bl	8011580 <lv_draw_sw_mask_apply>
 8013756:	4603      	mov	r3, r0
 8013758:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        if(res == LV_DRAW_SW_MASK_RES_FULL_COVER) continue;
 801375c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013760:	2b01      	cmp	r3, #1
 8013762:	d03b      	beq.n	80137dc <lv_draw_sw_mask_rect+0x232>

        lv_color32_t * c32_buf = lv_draw_layer_go_to_xy(target_layer, draw_area.x1 - buf_area->x1,
 8013764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	1ad1      	subs	r1, r2, r3
                                                        y - buf_area->y1);
 801376c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801376e:	685b      	ldr	r3, [r3, #4]
        lv_color32_t * c32_buf = lv_draw_layer_go_to_xy(target_layer, draw_area.x1 - buf_area->x1,
 8013770:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013772:	1ad3      	subs	r3, r2, r3
 8013774:	461a      	mov	r2, r3
 8013776:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013778:	f7f2 f92c 	bl	80059d4 <lv_draw_layer_go_to_xy>
 801377c:	65f8      	str	r0, [r7, #92]	@ 0x5c

        if(res == LV_DRAW_SW_MASK_RES_TRANSP) {
 801377e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013782:	2b00      	cmp	r3, #0
 8013784:	d106      	bne.n	8013794 <lv_draw_sw_mask_rect+0x1ea>
            lv_memzero(c32_buf, area_w * sizeof(lv_color32_t));
 8013786:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013788:	009b      	lsls	r3, r3, #2
 801378a:	4619      	mov	r1, r3
 801378c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801378e:	f7ff fefe 	bl	801358e <lv_memzero>
 8013792:	e024      	b.n	80137de <lv_draw_sw_mask_rect+0x234>
        }
        else {
            uint32_t i;
            for(i = 0; i < area_w; i++) {
 8013794:	2300      	movs	r3, #0
 8013796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013798:	e01b      	b.n	80137d2 <lv_draw_sw_mask_rect+0x228>
                if(mask_buf[i] != LV_OPA_COVER) {
 801379a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801379c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801379e:	4413      	add	r3, r2
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	2bff      	cmp	r3, #255	@ 0xff
 80137a4:	d012      	beq.n	80137cc <lv_draw_sw_mask_rect+0x222>
                    c32_buf[i].alpha = LV_OPA_MIX2(c32_buf[i].alpha, mask_buf[i]);
 80137a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80137ac:	4413      	add	r3, r2
 80137ae:	78db      	ldrb	r3, [r3, #3]
 80137b0:	4619      	mov	r1, r3
 80137b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80137b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137b6:	4413      	add	r3, r2
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	fb01 f303 	mul.w	r3, r1, r3
 80137be:	1219      	asrs	r1, r3, #8
 80137c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80137c6:	4413      	add	r3, r2
 80137c8:	b2ca      	uxtb	r2, r1
 80137ca:	70da      	strb	r2, [r3, #3]
            for(i = 0; i < area_w; i++) {
 80137cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137ce:	3301      	adds	r3, #1
 80137d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80137d2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80137d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d3df      	bcc.n	801379a <lv_draw_sw_mask_rect+0x1f0>
 80137da:	e000      	b.n	80137de <lv_draw_sw_mask_rect+0x234>
        if(res == LV_DRAW_SW_MASK_RES_FULL_COVER) continue;
 80137dc:	bf00      	nop
    for(y = draw_area.y1; y <= draw_area.y2; y++) {
 80137de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80137e0:	3301      	adds	r3, #1
 80137e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80137e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80137e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80137e8:	429a      	cmp	r2, r3
 80137ea:	dda6      	ble.n	801373a <lv_draw_sw_mask_rect+0x190>
                }
            }
        }
    }

    lv_free(mask_buf);
 80137ec:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80137ee:	f00a fc8b 	bl	801e108 <lv_free>
    lv_draw_sw_mask_free_param(&param);
 80137f2:	f107 0318 	add.w	r3, r7, #24
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fd ff04 	bl	8011604 <lv_draw_sw_mask_free_param>
 80137fc:	e000      	b.n	8013800 <lv_draw_sw_mask_rect+0x256>
        return;
 80137fe:	bf00      	nop
}
 8013800:	3784      	adds	r7, #132	@ 0x84
 8013802:	46bd      	mov	sp, r7
 8013804:	bd90      	pop	{r4, r7, pc}

08013806 <lv_area_get_width>:
{
 8013806:	b480      	push	{r7}
 8013808:	b083      	sub	sp, #12
 801380a:	af00      	add	r7, sp, #0
 801380c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	689a      	ldr	r2, [r3, #8]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	1ad3      	subs	r3, r2, r3
 8013818:	3301      	adds	r3, #1
}
 801381a:	4618      	mov	r0, r3
 801381c:	370c      	adds	r7, #12
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr

08013826 <lv_area_get_height>:
{
 8013826:	b480      	push	{r7}
 8013828:	b083      	sub	sp, #12
 801382a:	af00      	add	r7, sp, #0
 801382c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	68da      	ldr	r2, [r3, #12]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	1ad3      	subs	r3, r2, r3
 8013838:	3301      	adds	r3, #1
}
 801383a:	4618      	mov	r0, r3
 801383c:	370c      	adds	r7, #12
 801383e:	46bd      	mov	sp, r7
 8013840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013844:	4770      	bx	lr

08013846 <lv_color_format_get_size>:
{
 8013846:	b580      	push	{r7, lr}
 8013848:	b082      	sub	sp, #8
 801384a:	af00      	add	r7, sp, #0
 801384c:	4603      	mov	r3, r0
 801384e:	71fb      	strb	r3, [r7, #7]
    return (lv_color_format_get_bpp(cf) + 7) >> 3;
 8013850:	79fb      	ldrb	r3, [r7, #7]
 8013852:	4618      	mov	r0, r3
 8013854:	f007 fd2c 	bl	801b2b0 <lv_color_format_get_bpp>
 8013858:	4603      	mov	r3, r0
 801385a:	3307      	adds	r3, #7
 801385c:	10db      	asrs	r3, r3, #3
 801385e:	b2db      	uxtb	r3, r3
}
 8013860:	4618      	mov	r0, r3
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <lv_color32_eq>:
 * @param c1    the first color
 * @param c2    the second color
 * @return      true: equal
 */
static inline bool lv_color32_eq(lv_color32_t c1, lv_color32_t c2)
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
    return *((uint32_t *)&c1) == *((uint32_t *)&c2);
 8013872:	1d3b      	adds	r3, r7, #4
 8013874:	681a      	ldr	r2, [r3, #0]
 8013876:	463b      	mov	r3, r7
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	429a      	cmp	r2, r3
 801387c:	bf0c      	ite	eq
 801387e:	2301      	moveq	r3, #1
 8013880:	2300      	movne	r3, #0
 8013882:	b2db      	uxtb	r3, r3
}
 8013884:	4618      	mov	r0, r3
 8013886:	370c      	adds	r7, #12
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <lv_color_16_16_mix>:
 * @return          mix == 0: c2
 *                  mix == 255: c1
 *                  mix == 128: 0.5 x c1 + 0.5 x c2
 */
static inline uint16_t LV_ATTRIBUTE_FAST_MEM lv_color_16_16_mix(uint16_t c1, uint16_t c2, uint8_t mix)
{
 8013890:	b480      	push	{r7}
 8013892:	b087      	sub	sp, #28
 8013894:	af00      	add	r7, sp, #0
 8013896:	4603      	mov	r3, r0
 8013898:	80fb      	strh	r3, [r7, #6]
 801389a:	460b      	mov	r3, r1
 801389c:	80bb      	strh	r3, [r7, #4]
 801389e:	4613      	mov	r3, r2
 80138a0:	70fb      	strb	r3, [r7, #3]
    if(mix == 255) return c1;
 80138a2:	78fb      	ldrb	r3, [r7, #3]
 80138a4:	2bff      	cmp	r3, #255	@ 0xff
 80138a6:	d101      	bne.n	80138ac <lv_color_16_16_mix+0x1c>
 80138a8:	88fb      	ldrh	r3, [r7, #6]
 80138aa:	e02a      	b.n	8013902 <lv_color_16_16_mix+0x72>
    if(mix == 0) return c2;
 80138ac:	78fb      	ldrb	r3, [r7, #3]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d101      	bne.n	80138b6 <lv_color_16_16_mix+0x26>
 80138b2:	88bb      	ldrh	r3, [r7, #4]
 80138b4:	e025      	b.n	8013902 <lv_color_16_16_mix+0x72>

    uint16_t ret;

    /* Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80138b6:	78fb      	ldrb	r3, [r7, #3]
 80138b8:	3304      	adds	r3, #4
 80138ba:	08db      	lsrs	r3, r3, #3
 80138bc:	70fb      	strb	r3, [r7, #3]

    /*0x7E0F81F = 0b00000111111000001111100000011111*/
    uint32_t bg = (uint32_t)(c2 | ((uint32_t)c2 << 16)) & 0x7E0F81F;
 80138be:	88ba      	ldrh	r2, [r7, #4]
 80138c0:	4613      	mov	r3, r2
 80138c2:	041b      	lsls	r3, r3, #16
 80138c4:	441a      	add	r2, r3
 80138c6:	4b12      	ldr	r3, [pc, #72]	@ (8013910 <lv_color_16_16_mix+0x80>)
 80138c8:	4013      	ands	r3, r2
 80138ca:	617b      	str	r3, [r7, #20]
    uint32_t fg = (uint32_t)(c1 | ((uint32_t)c1 << 16)) & 0x7E0F81F;
 80138cc:	88fa      	ldrh	r2, [r7, #6]
 80138ce:	4613      	mov	r3, r2
 80138d0:	041b      	lsls	r3, r3, #16
 80138d2:	441a      	add	r2, r3
 80138d4:	4b0e      	ldr	r3, [pc, #56]	@ (8013910 <lv_color_16_16_mix+0x80>)
 80138d6:	4013      	ands	r3, r2
 80138d8:	613b      	str	r3, [r7, #16]
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80138da:	693a      	ldr	r2, [r7, #16]
 80138dc:	697b      	ldr	r3, [r7, #20]
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	78fa      	ldrb	r2, [r7, #3]
 80138e2:	fb02 f303 	mul.w	r3, r2, r3
 80138e6:	095a      	lsrs	r2, r3, #5
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	441a      	add	r2, r3
 80138ec:	4b08      	ldr	r3, [pc, #32]	@ (8013910 <lv_color_16_16_mix+0x80>)
 80138ee:	4013      	ands	r3, r2
 80138f0:	60fb      	str	r3, [r7, #12]
    ret = (uint16_t)(result >> 16) | result;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	0c1b      	lsrs	r3, r3, #16
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	b29b      	uxth	r3, r3
 80138fc:	4313      	orrs	r3, r2
 80138fe:	817b      	strh	r3, [r7, #10]

    return ret;
 8013900:	897b      	ldrh	r3, [r7, #10]
}
 8013902:	4618      	mov	r0, r3
 8013904:	371c      	adds	r7, #28
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	07e0f81f 	.word	0x07e0f81f

08013914 <lv_color_mix32>:
 * @return
 * @note Use bg.alpha in the return value
 * @note Use fg.alpha as mix ratio
 */
static inline lv_color32_t lv_color_mix32(lv_color32_t fg, lv_color32_t bg)
{
 8013914:	b480      	push	{r7}
 8013916:	b085      	sub	sp, #20
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
    if(fg.alpha >= LV_OPA_MAX) {
 801391e:	79fb      	ldrb	r3, [r7, #7]
 8013920:	2bfc      	cmp	r3, #252	@ 0xfc
 8013922:	d904      	bls.n	801392e <lv_color_mix32+0x1a>
        fg.alpha = bg.alpha;
 8013924:	78fb      	ldrb	r3, [r7, #3]
 8013926:	71fb      	strb	r3, [r7, #7]
        return fg;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	60fb      	str	r3, [r7, #12]
 801392c:	e031      	b.n	8013992 <lv_color_mix32+0x7e>
    }
    if(fg.alpha <= LV_OPA_MIN) {
 801392e:	79fb      	ldrb	r3, [r7, #7]
 8013930:	2b02      	cmp	r3, #2
 8013932:	d802      	bhi.n	801393a <lv_color_mix32+0x26>
        return bg;
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	60fb      	str	r3, [r7, #12]
 8013938:	e02b      	b.n	8013992 <lv_color_mix32+0x7e>
    }
    bg.red = (uint32_t)((uint32_t)fg.red * fg.alpha + (uint32_t)bg.red * (255 - fg.alpha)) >> 8;
 801393a:	79bb      	ldrb	r3, [r7, #6]
 801393c:	79fa      	ldrb	r2, [r7, #7]
 801393e:	fb03 f202 	mul.w	r2, r3, r2
 8013942:	78bb      	ldrb	r3, [r7, #2]
 8013944:	79f9      	ldrb	r1, [r7, #7]
 8013946:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801394a:	fb01 f303 	mul.w	r3, r1, r3
 801394e:	4413      	add	r3, r2
 8013950:	0a1b      	lsrs	r3, r3, #8
 8013952:	b2db      	uxtb	r3, r3
 8013954:	70bb      	strb	r3, [r7, #2]
    bg.green = (uint32_t)((uint32_t)fg.green * fg.alpha + (uint32_t)bg.green * (255 - fg.alpha)) >> 8;
 8013956:	797b      	ldrb	r3, [r7, #5]
 8013958:	79fa      	ldrb	r2, [r7, #7]
 801395a:	fb03 f202 	mul.w	r2, r3, r2
 801395e:	787b      	ldrb	r3, [r7, #1]
 8013960:	79f9      	ldrb	r1, [r7, #7]
 8013962:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013966:	fb01 f303 	mul.w	r3, r1, r3
 801396a:	4413      	add	r3, r2
 801396c:	0a1b      	lsrs	r3, r3, #8
 801396e:	b2db      	uxtb	r3, r3
 8013970:	707b      	strb	r3, [r7, #1]
    bg.blue = (uint32_t)((uint32_t)fg.blue * fg.alpha + (uint32_t)bg.blue * (255 - fg.alpha)) >> 8;
 8013972:	793b      	ldrb	r3, [r7, #4]
 8013974:	79fa      	ldrb	r2, [r7, #7]
 8013976:	fb03 f202 	mul.w	r2, r3, r2
 801397a:	783b      	ldrb	r3, [r7, #0]
 801397c:	79f9      	ldrb	r1, [r7, #7]
 801397e:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013982:	fb01 f303 	mul.w	r3, r1, r3
 8013986:	4413      	add	r3, r2
 8013988:	0a1b      	lsrs	r3, r3, #8
 801398a:	b2db      	uxtb	r3, r3
 801398c:	703b      	strb	r3, [r7, #0]
    return bg;
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	60fb      	str	r3, [r7, #12]
}
 8013992:	2300      	movs	r3, #0
 8013994:	7b3a      	ldrb	r2, [r7, #12]
 8013996:	f362 0307 	bfi	r3, r2, #0, #8
 801399a:	7b7a      	ldrb	r2, [r7, #13]
 801399c:	f362 230f 	bfi	r3, r2, #8, #8
 80139a0:	7bba      	ldrb	r2, [r7, #14]
 80139a2:	f362 4317 	bfi	r3, r2, #16, #8
 80139a6:	7bfa      	ldrb	r2, [r7, #15]
 80139a8:	f362 631f 	bfi	r3, r2, #24, #8
 80139ac:	4618      	mov	r0, r3
 80139ae:	3714      	adds	r7, #20
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr

080139b8 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_unit_t * draw_unit, const lv_area_t * dest_area, const void * src_buf,
                          int32_t src_w, int32_t src_h, int32_t src_stride,
                          const lv_draw_image_dsc_t * draw_dsc, const lv_draw_image_sup_t * sup, lv_color_format_t src_cf, void * dest_buf)
{
 80139b8:	b590      	push	{r4, r7, lr}
 80139ba:	b0c3      	sub	sp, #268	@ 0x10c
 80139bc:	af0a      	add	r7, sp, #40	@ 0x28
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
 80139c4:	603b      	str	r3, [r7, #0]
    LV_UNUSED(draw_unit);
    LV_UNUSED(sup);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->rotation;
 80139c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80139ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139cc:	425b      	negs	r3, r3
 80139ce:	667b      	str	r3, [r7, #100]	@ 0x64
    tr_dsc.scale_x = (256 * 256) / draw_dsc->scale_x;
 80139d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80139d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80139da:	fb92 f3f3 	sdiv	r3, r2, r3
 80139de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    tr_dsc.scale_y = (256 * 256) / draw_dsc->scale_y;
 80139e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80139e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80139e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80139ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80139ee:	663b      	str	r3, [r7, #96]	@ 0x60
    tr_dsc.pivot = draw_dsc->pivot;
 80139f0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80139f4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80139f8:	3240      	adds	r2, #64	@ 0x40
 80139fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139fe:	e883 0003 	stmia.w	r3, {r0, r1}

    int32_t angle_low = tr_dsc.angle / 10;
 8013a02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a04:	4ad0      	ldr	r2, [pc, #832]	@ (8013d48 <lv_draw_sw_transform+0x390>)
 8013a06:	fb82 1203 	smull	r1, r2, r2, r3
 8013a0a:	1092      	asrs	r2, r2, #2
 8013a0c:	17db      	asrs	r3, r3, #31
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    int32_t angle_high = angle_low + 1;
 8013a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013a18:	3301      	adds	r3, #1
 8013a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 8013a1e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013a20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013a24:	f06f 0109 	mvn.w	r1, #9
 8013a28:	fb01 f303 	mul.w	r3, r1, r3
 8013a2c:	4413      	add	r3, r2
 8013a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

    int32_t s1 = lv_trigo_sin(angle_low);
 8013a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013a36:	b21b      	sxth	r3, r3
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f008 faaf 	bl	801bf9c <lv_trigo_sin>
 8013a3e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    int32_t s2 = lv_trigo_sin(angle_high);
 8013a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013a46:	b21b      	sxth	r3, r3
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f008 faa7 	bl	801bf9c <lv_trigo_sin>
 8013a4e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 8013a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	335a      	adds	r3, #90	@ 0x5a
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	b21b      	sxth	r3, r3
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f008 fa9c 	bl	801bf9c <lv_trigo_sin>
 8013a64:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 8013a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	335a      	adds	r3, #90	@ 0x5a
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	b21b      	sxth	r3, r3
 8013a74:	4618      	mov	r0, r3
 8013a76:	f008 fa91 	bl	801bf9c <lv_trigo_sin>
 8013a7a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8013a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013a82:	f1c3 030a 	rsb	r3, r3, #10
 8013a86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013a8a:	fb03 f202 	mul.w	r2, r3, r2
 8013a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013a92:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8013a96:	fb01 f303 	mul.w	r3, r1, r3
 8013a9a:	4413      	add	r3, r2
 8013a9c:	4aaa      	ldr	r2, [pc, #680]	@ (8013d48 <lv_draw_sw_transform+0x390>)
 8013a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8013aa2:	1092      	asrs	r2, r2, #2
 8013aa4:	17db      	asrs	r3, r3, #31
 8013aa6:	1ad3      	subs	r3, r2, r3
 8013aa8:	657b      	str	r3, [r7, #84]	@ 0x54
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8013aaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8013aae:	f1c3 030a 	rsb	r3, r3, #10
 8013ab2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013ab6:	fb03 f202 	mul.w	r2, r3, r2
 8013aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013abe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8013ac2:	fb01 f303 	mul.w	r3, r1, r3
 8013ac6:	4413      	add	r3, r2
 8013ac8:	4a9f      	ldr	r2, [pc, #636]	@ (8013d48 <lv_draw_sw_transform+0x390>)
 8013aca:	fb82 1203 	smull	r1, r2, r2, r3
 8013ace:	1092      	asrs	r2, r2, #2
 8013ad0:	17db      	asrs	r3, r3, #31
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 8013ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ad8:	115b      	asrs	r3, r3, #5
 8013ada:	657b      	str	r3, [r7, #84]	@ 0x54
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 8013adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ade:	115b      	asrs	r3, r3, #5
 8013ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 8013ae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013ae4:	021b      	lsls	r3, r3, #8
 8013ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 8013ae8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013aea:	021b      	lsls	r3, r3, #8
 8013aec:	66fb      	str	r3, [r7, #108]	@ 0x6c

    int32_t dest_w = lv_area_get_width(dest_area);
 8013aee:	68b8      	ldr	r0, [r7, #8]
 8013af0:	f7ff fe89 	bl	8013806 <lv_area_get_width>
 8013af4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    int32_t dest_h = lv_area_get_height(dest_area);
 8013af8:	68b8      	ldr	r0, [r7, #8]
 8013afa:	f7ff fe94 	bl	8013826 <lv_area_get_height>
 8013afe:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    int32_t dest_stride_a8 = dest_w;
 8013b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    int32_t dest_stride;
    if(src_cf == LV_COLOR_FORMAT_RGB888) {
 8013b0a:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8013b0e:	2b0f      	cmp	r3, #15
 8013b10:	d10b      	bne.n	8013b2a <lv_draw_sw_transform+0x172>
        dest_stride = dest_w * lv_color_format_get_size(LV_COLOR_FORMAT_ARGB8888);
 8013b12:	2010      	movs	r0, #16
 8013b14:	f7ff fe97 	bl	8013846 <lv_color_format_get_size>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	461a      	mov	r2, r3
 8013b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013b20:	fb02 f303 	mul.w	r3, r2, r3
 8013b24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013b28:	e016      	b.n	8013b58 <lv_draw_sw_transform+0x1a0>
    }
    else if(src_cf == LV_COLOR_FORMAT_RGB565A8) {
 8013b2a:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8013b2e:	2b14      	cmp	r3, #20
 8013b30:	d105      	bne.n	8013b3e <lv_draw_sw_transform+0x186>
        dest_stride = dest_w * 2;
 8013b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013b3c:	e00c      	b.n	8013b58 <lv_draw_sw_transform+0x1a0>
    }
    else {
        dest_stride = dest_w * lv_color_format_get_size(src_cf);
 8013b3e:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7ff fe7f 	bl	8013846 <lv_color_format_get_size>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013b50:	fb02 f303 	mul.w	r3, r2, r3
 8013b54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    }

    uint8_t * alpha_buf;
    if(src_cf == LV_COLOR_FORMAT_RGB565 || src_cf == LV_COLOR_FORMAT_RGB565A8) {
 8013b58:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8013b5c:	2b12      	cmp	r3, #18
 8013b5e:	d003      	beq.n	8013b68 <lv_draw_sw_transform+0x1b0>
 8013b60:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8013b64:	2b14      	cmp	r3, #20
 8013b66:	d110      	bne.n	8013b8a <lv_draw_sw_transform+0x1d2>
        alpha_buf = dest_buf;
 8013b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        alpha_buf += dest_stride * dest_h;
 8013b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013b74:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013b78:	fb02 f303 	mul.w	r3, r2, r3
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013b82:	4413      	add	r3, r2
 8013b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8013b88:	e002      	b.n	8013b90 <lv_draw_sw_transform+0x1d8>
    }
    else {
        alpha_buf = NULL;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    }

    bool aa = draw_dsc->antialias;
 8013b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013b94:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8013b98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	bf14      	ite	ne
 8013ba2:	2301      	movne	r3, #1
 8013ba4:	2300      	moveq	r3, #0
 8013ba6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    bool is_rotated = draw_dsc->rotation;
 8013baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	bf14      	ite	ne
 8013bb4:	2301      	movne	r3, #1
 8013bb6:	2300      	moveq	r3, #0
 8013bb8:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92

    int32_t xs_ups = 0, ys_ups = 0, ys_ups_start = 0, ys_step_256_original = 0;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013bc8:	2300      	movs	r3, #0
 8013bca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    int32_t xs_step_256 = 0, ys_step_256 = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8013bda:	2300      	movs	r3, #0
 8013bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     *However this way the last pixel will be on the 99.67 coordinate.
     *As it's larger than 99.5 LVGL will start to mix the next coordinate
     *which is out of the image, so will make the pixel more transparent.
     *To avoid it in case of scale only limit the coordinates to the 0..297 range,
     *that is to 0..(src_w-1)*zoom */
    if(is_rotated == false) {
 8013be0:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8013be4:	f083 0301 	eor.w	r3, r3, #1
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	f000 8091 	beq.w	8013d12 <lv_draw_sw_transform+0x35a>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        int32_t x_max = (((src_w - 1 - draw_dsc->pivot.x) * draw_dsc->scale_x) >> 8) + draw_dsc->pivot.x;
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	1e5a      	subs	r2, r3, #1
 8013bf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8013c00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8013c02:	fb02 f303 	mul.w	r3, r2, r3
 8013c06:	121a      	asrs	r2, r3, #8
 8013c08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c0e:	4413      	add	r3, r2
 8013c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        int32_t y_max = (((src_h - 1 - draw_dsc->pivot.y) * draw_dsc->scale_y) >> 8) + draw_dsc->pivot.y;
 8013c14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013c18:	1e5a      	subs	r2, r3, #1
 8013c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8013c26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013c28:	fb02 f303 	mul.w	r3, r2, r3
 8013c2c:	121a      	asrs	r2, r3, #8
 8013c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c34:	4413      	add	r3, r2
 8013c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        lv_area_t dest_area_limited;
        dest_area_limited.x1 = dest_area->x1 > x_max ? x_max : dest_area->x1;
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c42:	4293      	cmp	r3, r2
 8013c44:	bfa8      	it	ge
 8013c46:	4613      	movge	r3, r2
 8013c48:	627b      	str	r3, [r7, #36]	@ 0x24
        dest_area_limited.x2 = dest_area->x2 > x_max ? x_max : dest_area->x2;
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	689a      	ldr	r2, [r3, #8]
 8013c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c52:	4293      	cmp	r3, r2
 8013c54:	bfa8      	it	ge
 8013c56:	4613      	movge	r3, r2
 8013c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        dest_area_limited.y1 = dest_area->y1 > y_max ? y_max : dest_area->y1;
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	685a      	ldr	r2, [r3, #4]
 8013c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013c62:	4293      	cmp	r3, r2
 8013c64:	bfa8      	it	ge
 8013c66:	4613      	movge	r3, r2
 8013c68:	62bb      	str	r3, [r7, #40]	@ 0x28
        dest_area_limited.y2 = dest_area->y2 > y_max ? y_max : dest_area->y2;
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	68da      	ldr	r2, [r3, #12]
 8013c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013c72:	4293      	cmp	r3, r2
 8013c74:	bfa8      	it	ge
 8013c76:	4613      	movge	r3, r2
 8013c78:	633b      	str	r3, [r7, #48]	@ 0x30

        transform_point_upscaled(&tr_dsc, dest_area_limited.x1, dest_area_limited.y1, &xs1_ups, &ys1_ups);
 8013c7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c7e:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8013c82:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8013c86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	4623      	mov	r3, r4
 8013c8e:	f000 ffb5 	bl	8014bfc <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area_limited.x2, dest_area_limited.y2, &xs2_ups, &ys2_ups);
 8013c92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c96:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8013c9a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8013c9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	4623      	mov	r3, r4
 8013ca6:	f000 ffa9 	bl	8014bfc <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 8013caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        int32_t ys_diff = ys2_ups - ys1_ups;
 8013cb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        xs_step_256 = 0;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
        ys_step_256_original = 0;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        if(dest_w > 1) {
 8013cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	dd09      	ble.n	8013ce6 <lv_draw_sw_transform+0x32e>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8013cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013cd6:	021a      	lsls	r2, r3, #8
 8013cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8013ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
        }
        if(dest_h > 1) {
 8013ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	dd09      	ble.n	8013d02 <lv_draw_sw_transform+0x34a>
            ys_step_256_original = (256 * ys_diff) / (dest_h - 1);
 8013cee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cf2:	021a      	lsls	r2, r3, #8
 8013cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013cf8:	3b01      	subs	r3, #1
 8013cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8013cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        }

        xs_ups = xs1_ups + 0x80;
 8013d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013d04:	3380      	adds	r3, #128	@ 0x80
 8013d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        ys_ups_start = ys1_ups + 0x80;
 8013d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d0c:	3380      	adds	r3, #128	@ 0x80
 8013d0e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    }

    int32_t y;
    for(y = 0; y < dest_h; y++) {
 8013d12:	2300      	movs	r3, #0
 8013d14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013d18:	e158      	b.n	8013fcc <lv_draw_sw_transform+0x614>
        if(is_rotated == false) {
 8013d1a:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8013d1e:	f083 0301 	eor.w	r3, r3, #1
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d011      	beq.n	8013d4c <lv_draw_sw_transform+0x394>
            ys_ups = ys_ups_start + ((ys_step_256_original * y) >> 8);
 8013d28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013d2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8013d30:	fb02 f303 	mul.w	r3, r2, r3
 8013d34:	121b      	asrs	r3, r3, #8
 8013d36:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8013d3a:	4413      	add	r3, r2
 8013d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            ys_step_256 = 0;
 8013d40:	2300      	movs	r3, #0
 8013d42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013d46:	e04f      	b.n	8013de8 <lv_draw_sw_transform+0x430>
 8013d48:	66666667 	.word	0x66666667
        }
        else {
            int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;
            transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	6819      	ldr	r1, [r3, #0]
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	685a      	ldr	r2, [r3, #4]
 8013d54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013d58:	441a      	add	r2, r3
 8013d5a:	f107 0420 	add.w	r4, r7, #32
 8013d5e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8013d62:	f107 031c 	add.w	r3, r7, #28
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	4623      	mov	r3, r4
 8013d6a:	f000 ff47 	bl	8014bfc <transform_point_upscaled>
            transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	6899      	ldr	r1, [r3, #8]
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	685a      	ldr	r2, [r3, #4]
 8013d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013d7a:	441a      	add	r2, r3
 8013d7c:	f107 0418 	add.w	r4, r7, #24
 8013d80:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8013d84:	f107 0314 	add.w	r3, r7, #20
 8013d88:	9300      	str	r3, [sp, #0]
 8013d8a:	4623      	mov	r3, r4
 8013d8c:	f000 ff36 	bl	8014bfc <transform_point_upscaled>

            int32_t xs_diff = xs2_ups - xs1_ups;
 8013d90:	69ba      	ldr	r2, [r7, #24]
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	1ad3      	subs	r3, r2, r3
 8013d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
            int32_t ys_diff = ys2_ups - ys1_ups;
 8013d98:	697a      	ldr	r2, [r7, #20]
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	1ad3      	subs	r3, r2, r3
 8013d9e:	67bb      	str	r3, [r7, #120]	@ 0x78
            xs_step_256 = 0;
 8013da0:	2300      	movs	r3, #0
 8013da2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            ys_step_256 = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            if(dest_w > 1) {
 8013dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	dd11      	ble.n	8013dd8 <lv_draw_sw_transform+0x420>
                xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8013db4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013db6:	021a      	lsls	r2, r3, #8
 8013db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013dbc:	3b01      	subs	r3, #1
 8013dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8013dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8013dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013dc8:	021a      	lsls	r2, r3, #8
 8013dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8013dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            }

            xs_ups = xs1_ups + 0x80;
 8013dd8:	6a3b      	ldr	r3, [r7, #32]
 8013dda:	3380      	adds	r3, #128	@ 0x80
 8013ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            ys_ups = ys1_ups + 0x80;
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	3380      	adds	r3, #128	@ 0x80
 8013de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        }

        switch(src_cf) {
 8013de8:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8013dec:	3b0e      	subs	r3, #14
 8013dee:	2b06      	cmp	r3, #6
 8013df0:	f200 80d4 	bhi.w	8013f9c <lv_draw_sw_transform+0x5e4>
 8013df4:	a201      	add	r2, pc, #4	@ (adr r2, 8013dfc <lv_draw_sw_transform+0x444>)
 8013df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dfa:	bf00      	nop
 8013dfc:	08013e99 	.word	0x08013e99
 8013e00:	08013e59 	.word	0x08013e59
 8013e04:	08013ed5 	.word	0x08013ed5
 8013e08:	08013e19 	.word	0x08013e19
 8013e0c:	08013f11 	.word	0x08013f11
 8013e10:	08013f9d 	.word	0x08013f9d
 8013e14:	08013f57 	.word	0x08013f57
            case LV_COLOR_FORMAT_XRGB8888:
                transform_rgb888(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, dest_buf, aa,
 8013e18:	2304      	movs	r3, #4
 8013e1a:	9307      	str	r3, [sp, #28]
 8013e1c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8013e20:	9306      	str	r3, [sp, #24]
 8013e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013e26:	9305      	str	r3, [sp, #20]
 8013e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013e2c:	9304      	str	r3, [sp, #16]
 8013e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013e32:	9303      	str	r3, [sp, #12]
 8013e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013e38:	9302      	str	r3, [sp, #8]
 8013e3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013e3e:	9301      	str	r3, [sp, #4]
 8013e40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013e4a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013e4e:	6839      	ldr	r1, [r7, #0]
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f000 f8c7 	bl	8013fe4 <transform_rgb888>
                                 4);
                break;
 8013e56:	e0a2      	b.n	8013f9e <lv_draw_sw_transform+0x5e6>
            case LV_COLOR_FORMAT_RGB888:
                transform_rgb888(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, dest_buf, aa,
 8013e58:	2303      	movs	r3, #3
 8013e5a:	9307      	str	r3, [sp, #28]
 8013e5c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8013e60:	9306      	str	r3, [sp, #24]
 8013e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013e66:	9305      	str	r3, [sp, #20]
 8013e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013e6c:	9304      	str	r3, [sp, #16]
 8013e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013e72:	9303      	str	r3, [sp, #12]
 8013e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013e78:	9302      	str	r3, [sp, #8]
 8013e7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013e7e:	9301      	str	r3, [sp, #4]
 8013e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013e84:	9300      	str	r3, [sp, #0]
 8013e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013e8a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013e8e:	6839      	ldr	r1, [r7, #0]
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f000 f8a7 	bl	8013fe4 <transform_rgb888>
                                 3);
                break;
 8013e96:	e082      	b.n	8013f9e <lv_draw_sw_transform+0x5e6>
            case LV_COLOR_FORMAT_A8:
                transform_a8(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, dest_buf, aa);
 8013e98:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8013e9c:	9306      	str	r3, [sp, #24]
 8013e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ea2:	9305      	str	r3, [sp, #20]
 8013ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013ea8:	9304      	str	r3, [sp, #16]
 8013eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013eae:	9303      	str	r3, [sp, #12]
 8013eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013eb4:	9302      	str	r3, [sp, #8]
 8013eb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013eba:	9301      	str	r3, [sp, #4]
 8013ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013ec6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013eca:	6839      	ldr	r1, [r7, #0]
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f000 fd6d 	bl	80149ac <transform_a8>
                break;
 8013ed2:	e064      	b.n	8013f9e <lv_draw_sw_transform+0x5e6>
            case LV_COLOR_FORMAT_ARGB8888:
                transform_argb8888(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, dest_buf,
 8013ed4:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8013ed8:	9306      	str	r3, [sp, #24]
 8013eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013ede:	9305      	str	r3, [sp, #20]
 8013ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013ee4:	9304      	str	r3, [sp, #16]
 8013ee6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013eea:	9303      	str	r3, [sp, #12]
 8013eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013ef0:	9302      	str	r3, [sp, #8]
 8013ef2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013ef6:	9301      	str	r3, [sp, #4]
 8013ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013efc:	9300      	str	r3, [sp, #0]
 8013efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013f02:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013f06:	6839      	ldr	r1, [r7, #0]
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 f9e1 	bl	80142d0 <transform_argb8888>
                                   aa);
                break;
 8013f0e:	e046      	b.n	8013f9e <lv_draw_sw_transform+0x5e6>
            case LV_COLOR_FORMAT_RGB565:
                transform_rgb565a8(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, dest_buf,
 8013f10:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8013f14:	9308      	str	r3, [sp, #32]
 8013f16:	2300      	movs	r3, #0
 8013f18:	9307      	str	r3, [sp, #28]
 8013f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f1e:	9306      	str	r3, [sp, #24]
 8013f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f24:	9305      	str	r3, [sp, #20]
 8013f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013f2a:	9304      	str	r3, [sp, #16]
 8013f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013f30:	9303      	str	r3, [sp, #12]
 8013f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013f36:	9302      	str	r3, [sp, #8]
 8013f38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013f3c:	9301      	str	r3, [sp, #4]
 8013f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013f48:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013f4c:	6839      	ldr	r1, [r7, #0]
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f000 fb6a 	bl	8014628 <transform_rgb565a8>
                                   alpha_buf, false, aa);
                break;
 8013f54:	e023      	b.n	8013f9e <lv_draw_sw_transform+0x5e6>
            case LV_COLOR_FORMAT_RGB565A8:
                transform_rgb565a8(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w,
 8013f56:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8013f5a:	9308      	str	r3, [sp, #32]
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	9307      	str	r3, [sp, #28]
 8013f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f64:	9306      	str	r3, [sp, #24]
 8013f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013f6a:	9305      	str	r3, [sp, #20]
 8013f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013f70:	9304      	str	r3, [sp, #16]
 8013f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013f76:	9303      	str	r3, [sp, #12]
 8013f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013f7c:	9302      	str	r3, [sp, #8]
 8013f7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013f82:	9301      	str	r3, [sp, #4]
 8013f84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013f8e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013f92:	6839      	ldr	r1, [r7, #0]
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f000 fb47 	bl	8014628 <transform_rgb565a8>
                                   (uint16_t *)dest_buf,
                                   alpha_buf, true, aa);
                break;
 8013f9a:	e000      	b.n	8013f9e <lv_draw_sw_transform+0x5e6>
            default:
                break;
 8013f9c:	bf00      	nop
        }

        dest_buf = (uint8_t *)dest_buf + dest_stride;
 8013f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013fa2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8013fa6:	4413      	add	r3, r2
 8013fa8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        if(alpha_buf) alpha_buf += dest_stride_a8;
 8013fac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d006      	beq.n	8013fc2 <lv_draw_sw_transform+0x60a>
 8013fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013fb8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8013fbc:	4413      	add	r3, r2
 8013fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for(y = 0; y < dest_h; y++) {
 8013fc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8013fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	f6ff aea0 	blt.w	8013d1a <lv_draw_sw_transform+0x362>
    }
}
 8013fda:	bf00      	nop
 8013fdc:	bf00      	nop
 8013fde:	37e4      	adds	r7, #228	@ 0xe4
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd90      	pop	{r4, r7, pc}

08013fe4 <transform_rgb888>:
 **********************/

static void transform_rgb888(const uint8_t * src, int32_t src_w, int32_t src_h, int32_t src_stride,
                             int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                             int32_t x_end, uint8_t * dest_buf, bool aa, uint32_t px_size)
{
 8013fe4:	b590      	push	{r4, r7, lr}
 8013fe6:	b095      	sub	sp, #84	@ 0x54
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
 8013ff0:	603b      	str	r3, [r7, #0]
    int32_t xs_ups_start = xs_ups;
 8013ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t ys_ups_start = ys_ups;
 8013ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ff8:	637b      	str	r3, [r7, #52]	@ 0x34
    lv_color32_t * dest_c32 = (lv_color32_t *) dest_buf;
 8013ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013ffc:	633b      	str	r3, [r7, #48]	@ 0x30

    int32_t x;
    for(x = 0; x < x_end; x++) {
 8013ffe:	2300      	movs	r3, #0
 8014000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014002:	e15b      	b.n	80142bc <transform_rgb888+0x2d8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8014004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014008:	fb02 f303 	mul.w	r3, r2, r3
 801400c:	121b      	asrs	r3, r3, #8
 801400e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014010:	4413      	add	r3, r2
 8014012:	663b      	str	r3, [r7, #96]	@ 0x60
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8014014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014016:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014018:	fb02 f303 	mul.w	r3, r2, r3
 801401c:	121b      	asrs	r3, r3, #8
 801401e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014020:	4413      	add	r3, r2
 8014022:	667b      	str	r3, [r7, #100]	@ 0x64

        int32_t xs_int = xs_ups >> 8;
 8014024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014026:	121b      	asrs	r3, r3, #8
 8014028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int32_t ys_int = ys_ups >> 8;
 801402a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801402c:	121b      	asrs	r3, r3, #8
 801402e:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8014030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014032:	2b00      	cmp	r3, #0
 8014034:	db0a      	blt.n	801404c <transform_rgb888+0x68>
 8014036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	429a      	cmp	r2, r3
 801403c:	da06      	bge.n	801404c <transform_rgb888+0x68>
 801403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014040:	2b00      	cmp	r3, #0
 8014042:	db03      	blt.n	801404c <transform_rgb888+0x68>
 8014044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	429a      	cmp	r2, r3
 801404a:	db06      	blt.n	801405a <transform_rgb888+0x76>
            dest_c32[x].alpha = 0x00;
 801404c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801404e:	009b      	lsls	r3, r3, #2
 8014050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014052:	4413      	add	r3, r2
 8014054:	2200      	movs	r2, #0
 8014056:	70da      	strb	r2, [r3, #3]
            continue;
 8014058:	e12d      	b.n	80142b6 <transform_rgb888+0x2d2>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 801405a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801405c:	b2db      	uxtb	r3, r3
 801405e:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t ys_fract = ys_ups & 0xFF;
 8014060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014062:	b2db      	uxtb	r3, r3
 8014064:	647b      	str	r3, [r7, #68]	@ 0x44

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 8014066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014068:	2b7f      	cmp	r3, #127	@ 0x7f
 801406a:	dc07      	bgt.n	801407c <transform_rgb888+0x98>
            x_next = -1;
 801406c:	f04f 33ff 	mov.w	r3, #4294967295
 8014070:	643b      	str	r3, [r7, #64]	@ 0x40
            xs_fract = 0x7F - xs_fract;
 8014072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014074:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014078:	64bb      	str	r3, [r7, #72]	@ 0x48
 801407a:	e004      	b.n	8014086 <transform_rgb888+0xa2>
        }
        else {
            x_next = 1;
 801407c:	2301      	movs	r3, #1
 801407e:	643b      	str	r3, [r7, #64]	@ 0x40
            xs_fract = xs_fract - 0x80;
 8014080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014082:	3b80      	subs	r3, #128	@ 0x80
 8014084:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
        if(ys_fract < 0x80) {
 8014086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014088:	2b7f      	cmp	r3, #127	@ 0x7f
 801408a:	dc07      	bgt.n	801409c <transform_rgb888+0xb8>
            y_next = -1;
 801408c:	f04f 33ff 	mov.w	r3, #4294967295
 8014090:	63fb      	str	r3, [r7, #60]	@ 0x3c
            ys_fract = 0x7F - ys_fract;
 8014092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014094:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014098:	647b      	str	r3, [r7, #68]	@ 0x44
 801409a:	e004      	b.n	80140a6 <transform_rgb888+0xc2>
        }
        else {
            y_next = 1;
 801409c:	2301      	movs	r3, #1
 801409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            ys_fract = ys_fract - 0x80;
 80140a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140a2:	3b80      	subs	r3, #128	@ 0x80
 80140a4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        const uint8_t * src_u8 = &src[ys_int * src_stride + xs_int * px_size];
 80140a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140a8:	683a      	ldr	r2, [r7, #0]
 80140aa:	fb02 f303 	mul.w	r3, r2, r3
 80140ae:	4619      	mov	r1, r3
 80140b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80140b4:	fb02 f303 	mul.w	r3, r2, r3
 80140b8:	440b      	add	r3, r1
 80140ba:	68fa      	ldr	r2, [r7, #12]
 80140bc:	4413      	add	r3, r2
 80140be:	627b      	str	r3, [r7, #36]	@ 0x24

        dest_c32[x].red = src_u8[2];
 80140c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c2:	1c9a      	adds	r2, r3, #2
 80140c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80140ca:	440b      	add	r3, r1
 80140cc:	7812      	ldrb	r2, [r2, #0]
 80140ce:	709a      	strb	r2, [r3, #2]
        dest_c32[x].green = src_u8[1];
 80140d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d2:	1c5a      	adds	r2, r3, #1
 80140d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80140da:	440b      	add	r3, r1
 80140dc:	7812      	ldrb	r2, [r2, #0]
 80140de:	705a      	strb	r2, [r3, #1]
        dest_c32[x].blue = src_u8[0];
 80140e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140e2:	009b      	lsls	r3, r3, #2
 80140e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140e6:	4413      	add	r3, r2
 80140e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140ea:	7812      	ldrb	r2, [r2, #0]
 80140ec:	701a      	strb	r2, [r3, #0]
        dest_c32[x].alpha = 0xff;
 80140ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140f4:	4413      	add	r3, r2
 80140f6:	22ff      	movs	r2, #255	@ 0xff
 80140f8:	70da      	strb	r2, [r3, #3]

        if(aa &&
 80140fa:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80140fe:	2b00      	cmp	r3, #0
 8014100:	f000 809e 	beq.w	8014240 <transform_rgb888+0x25c>
           xs_int + x_next >= 0 &&
 8014104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014108:	4413      	add	r3, r2
        if(aa &&
 801410a:	2b00      	cmp	r3, #0
 801410c:	f2c0 8098 	blt.w	8014240 <transform_rgb888+0x25c>
           xs_int + x_next <= src_w - 1 &&
 8014110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014114:	4413      	add	r3, r2
           xs_int + x_next >= 0 &&
 8014116:	68ba      	ldr	r2, [r7, #8]
 8014118:	429a      	cmp	r2, r3
 801411a:	f340 8091 	ble.w	8014240 <transform_rgb888+0x25c>
           ys_int + y_next >= 0 &&
 801411e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014122:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 8014124:	2b00      	cmp	r3, #0
 8014126:	f2c0 808b 	blt.w	8014240 <transform_rgb888+0x25c>
           ys_int + y_next <= src_h - 1) {
 801412a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801412c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801412e:	4413      	add	r3, r2
           ys_int + y_next >= 0 &&
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	429a      	cmp	r2, r3
 8014134:	f340 8084 	ble.w	8014240 <transform_rgb888+0x25c>
            const uint8_t * px_hor_u8 = src_u8 + (int32_t)(x_next * px_size);
 8014138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801413a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801413c:	fb02 f303 	mul.w	r3, r2, r3
 8014140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014142:	4413      	add	r3, r2
 8014144:	623b      	str	r3, [r7, #32]
            lv_color32_t px_hor;
            px_hor.red = px_hor_u8[2];
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	3302      	adds	r3, #2
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	75bb      	strb	r3, [r7, #22]
            px_hor.green = px_hor_u8[1];
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	3301      	adds	r3, #1
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	757b      	strb	r3, [r7, #21]
            px_hor.blue = px_hor_u8[0];
 8014156:	6a3b      	ldr	r3, [r7, #32]
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	753b      	strb	r3, [r7, #20]
            px_hor.alpha = 0xff;
 801415c:	23ff      	movs	r3, #255	@ 0xff
 801415e:	75fb      	strb	r3, [r7, #23]

            const uint8_t * px_ver_u8 = src_u8 + (int32_t)(y_next * src_stride);
 8014160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014162:	683a      	ldr	r2, [r7, #0]
 8014164:	fb02 f303 	mul.w	r3, r2, r3
 8014168:	461a      	mov	r2, r3
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	4413      	add	r3, r2
 801416e:	61fb      	str	r3, [r7, #28]
            lv_color32_t px_ver;
            px_ver.red = px_ver_u8[2];
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	3302      	adds	r3, #2
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	74bb      	strb	r3, [r7, #18]
            px_ver.green = px_ver_u8[1];
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	3301      	adds	r3, #1
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	747b      	strb	r3, [r7, #17]
            px_ver.blue = px_ver_u8[0];
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	781b      	ldrb	r3, [r3, #0]
 8014184:	743b      	strb	r3, [r7, #16]
            px_ver.alpha = 0xff;
 8014186:	23ff      	movs	r3, #255	@ 0xff
 8014188:	74fb      	strb	r3, [r7, #19]

            if(!lv_color32_eq(dest_c32[x], px_ver)) {
 801418a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014190:	4413      	add	r3, r2
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	4613      	mov	r3, r2
 8014196:	6939      	ldr	r1, [r7, #16]
 8014198:	4618      	mov	r0, r3
 801419a:	f7ff fb65 	bl	8013868 <lv_color32_eq>
 801419e:	4603      	mov	r3, r0
 80141a0:	f083 0301 	eor.w	r3, r3, #1
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d01c      	beq.n	80141e4 <transform_rgb888+0x200>
                px_ver.alpha = ys_fract;
 80141aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141ac:	b2db      	uxtb	r3, r3
 80141ae:	74fb      	strb	r3, [r7, #19]
                dest_c32[x] = lv_color_mix32(px_ver, dest_c32[x]);
 80141b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141b6:	4413      	add	r3, r2
 80141b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80141ba:	0092      	lsls	r2, r2, #2
 80141bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80141be:	188c      	adds	r4, r1, r2
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	4613      	mov	r3, r2
 80141c4:	4619      	mov	r1, r3
 80141c6:	6938      	ldr	r0, [r7, #16]
 80141c8:	f7ff fba4 	bl	8013914 <lv_color_mix32>
 80141cc:	4603      	mov	r3, r0
 80141ce:	461a      	mov	r2, r3
 80141d0:	7022      	strb	r2, [r4, #0]
 80141d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80141d6:	7062      	strb	r2, [r4, #1]
 80141d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80141dc:	70a2      	strb	r2, [r4, #2]
 80141de:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80141e2:	70e3      	strb	r3, [r4, #3]
            }

            if(!lv_color32_eq(dest_c32[x], px_hor)) {
 80141e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80141e6:	009b      	lsls	r3, r3, #2
 80141e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80141ea:	4413      	add	r3, r2
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	4613      	mov	r3, r2
 80141f0:	6979      	ldr	r1, [r7, #20]
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7ff fb38 	bl	8013868 <lv_color32_eq>
 80141f8:	4603      	mov	r3, r0
 80141fa:	f083 0301 	eor.w	r3, r3, #1
 80141fe:	b2db      	uxtb	r3, r3
 8014200:	2b00      	cmp	r3, #0
 8014202:	d057      	beq.n	80142b4 <transform_rgb888+0x2d0>
                px_hor.alpha = xs_fract;
 8014204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014206:	b2db      	uxtb	r3, r3
 8014208:	75fb      	strb	r3, [r7, #23]
                dest_c32[x] = lv_color_mix32(px_hor, dest_c32[x]);
 801420a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014210:	4413      	add	r3, r2
 8014212:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014214:	0092      	lsls	r2, r2, #2
 8014216:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014218:	188c      	adds	r4, r1, r2
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	4613      	mov	r3, r2
 801421e:	4619      	mov	r1, r3
 8014220:	6978      	ldr	r0, [r7, #20]
 8014222:	f7ff fb77 	bl	8013914 <lv_color_mix32>
 8014226:	4603      	mov	r3, r0
 8014228:	461a      	mov	r2, r3
 801422a:	7022      	strb	r2, [r4, #0]
 801422c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014230:	7062      	strb	r2, [r4, #1]
 8014232:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014236:	70a2      	strb	r2, [r4, #2]
 8014238:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801423c:	70e3      	strb	r3, [r4, #3]
           ys_int + y_next <= src_h - 1) {
 801423e:	e039      	b.n	80142b4 <transform_rgb888+0x2d0>
            }
        }
        /*Partially out of the image*/
        else {
            lv_opa_t a = 0xff;
 8014240:	23ff      	movs	r3, #255	@ 0xff
 8014242:	76fb      	strb	r3, [r7, #27]

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8014244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014246:	2b00      	cmp	r3, #0
 8014248:	d102      	bne.n	8014250 <transform_rgb888+0x26c>
 801424a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801424c:	2b00      	cmp	r3, #0
 801424e:	db07      	blt.n	8014260 <transform_rgb888+0x27c>
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	3b01      	subs	r3, #1
 8014254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014256:	429a      	cmp	r2, r3
 8014258:	d110      	bne.n	801427c <transform_rgb888+0x298>
 801425a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801425c:	2b00      	cmp	r3, #0
 801425e:	dd0d      	ble.n	801427c <transform_rgb888+0x298>
                dest_c32[x].alpha = (a * (0xFF - xs_fract)) >> 8;
 8014260:	7efb      	ldrb	r3, [r7, #27]
 8014262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014264:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8014268:	fb02 f303 	mul.w	r3, r2, r3
 801426c:	1219      	asrs	r1, r3, #8
 801426e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014274:	4413      	add	r3, r2
 8014276:	b2ca      	uxtb	r2, r1
 8014278:	70da      	strb	r2, [r3, #3]
 801427a:	e01c      	b.n	80142b6 <transform_rgb888+0x2d2>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 801427c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801427e:	2b00      	cmp	r3, #0
 8014280:	d102      	bne.n	8014288 <transform_rgb888+0x2a4>
 8014282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014284:	2b00      	cmp	r3, #0
 8014286:	db07      	blt.n	8014298 <transform_rgb888+0x2b4>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	3b01      	subs	r3, #1
 801428c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801428e:	429a      	cmp	r2, r3
 8014290:	d111      	bne.n	80142b6 <transform_rgb888+0x2d2>
 8014292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014294:	2b00      	cmp	r3, #0
 8014296:	dd0e      	ble.n	80142b6 <transform_rgb888+0x2d2>
                dest_c32[x].alpha = (a * (0xFF - ys_fract)) >> 8;
 8014298:	7efb      	ldrb	r3, [r7, #27]
 801429a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801429c:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 80142a0:	fb02 f303 	mul.w	r3, r2, r3
 80142a4:	1219      	asrs	r1, r3, #8
 80142a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142ac:	4413      	add	r3, r2
 80142ae:	b2ca      	uxtb	r2, r1
 80142b0:	70da      	strb	r2, [r3, #3]
 80142b2:	e000      	b.n	80142b6 <transform_rgb888+0x2d2>
           ys_int + y_next <= src_h - 1) {
 80142b4:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 80142b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142b8:	3301      	adds	r3, #1
 80142ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80142bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80142be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80142c0:	429a      	cmp	r2, r3
 80142c2:	f6ff ae9f 	blt.w	8014004 <transform_rgb888+0x20>
            }
        }
    }
}
 80142c6:	bf00      	nop
 80142c8:	bf00      	nop
 80142ca:	3754      	adds	r7, #84	@ 0x54
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd90      	pop	{r4, r7, pc}

080142d0 <transform_argb8888>:

static void transform_argb8888(const uint8_t * src, int32_t src_w, int32_t src_h, int32_t src_stride,
                               int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                               int32_t x_end, uint8_t * dest_buf, bool aa)
{
 80142d0:	b590      	push	{r4, r7, lr}
 80142d2:	b093      	sub	sp, #76	@ 0x4c
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
 80142dc:	603b      	str	r3, [r7, #0]
    //    lv_memzero(dest_buf, x_end * 4);
    int32_t xs_ups_start = xs_ups;
 80142de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142e0:	633b      	str	r3, [r7, #48]	@ 0x30
    int32_t ys_ups_start = ys_ups;
 80142e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80142e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lv_color32_t * dest_c32 = (lv_color32_t *) dest_buf;
 80142e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80142e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    int32_t x;
    for(x = 0; x < x_end; x++) {
 80142ea:	2300      	movs	r3, #0
 80142ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80142ee:	e191      	b.n	8014614 <transform_argb8888+0x344>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80142f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80142f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142f4:	fb02 f303 	mul.w	r3, r2, r3
 80142f8:	121b      	asrs	r3, r3, #8
 80142fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142fc:	4413      	add	r3, r2
 80142fe:	65bb      	str	r3, [r7, #88]	@ 0x58
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8014300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014304:	fb02 f303 	mul.w	r3, r2, r3
 8014308:	121b      	asrs	r3, r3, #8
 801430a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801430c:	4413      	add	r3, r2
 801430e:	65fb      	str	r3, [r7, #92]	@ 0x5c

        int32_t xs_int = xs_ups >> 8;
 8014310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014312:	121b      	asrs	r3, r3, #8
 8014314:	627b      	str	r3, [r7, #36]	@ 0x24
        int32_t ys_int = ys_ups >> 8;
 8014316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014318:	121b      	asrs	r3, r3, #8
 801431a:	623b      	str	r3, [r7, #32]

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801431c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801431e:	2b00      	cmp	r3, #0
 8014320:	db0a      	blt.n	8014338 <transform_argb8888+0x68>
 8014322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	429a      	cmp	r2, r3
 8014328:	da06      	bge.n	8014338 <transform_argb8888+0x68>
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	2b00      	cmp	r3, #0
 801432e:	db03      	blt.n	8014338 <transform_argb8888+0x68>
 8014330:	6a3a      	ldr	r2, [r7, #32]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	429a      	cmp	r2, r3
 8014336:	db06      	blt.n	8014346 <transform_argb8888+0x76>
            ((uint32_t *)dest_buf)[x] = 0x00000000;
 8014338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801433a:	009b      	lsls	r3, r3, #2
 801433c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801433e:	4413      	add	r3, r2
 8014340:	2200      	movs	r2, #0
 8014342:	601a      	str	r2, [r3, #0]
            continue;
 8014344:	e163      	b.n	801460e <transform_argb8888+0x33e>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 8014346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014348:	b2db      	uxtb	r3, r3
 801434a:	643b      	str	r3, [r7, #64]	@ 0x40
        int32_t ys_fract = ys_ups & 0xFF;
 801434c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801434e:	b2db      	uxtb	r3, r3
 8014350:	63fb      	str	r3, [r7, #60]	@ 0x3c

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 8014352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014354:	2b7f      	cmp	r3, #127	@ 0x7f
 8014356:	dc07      	bgt.n	8014368 <transform_argb8888+0x98>
            x_next = -1;
 8014358:	f04f 33ff 	mov.w	r3, #4294967295
 801435c:	63bb      	str	r3, [r7, #56]	@ 0x38
            xs_fract = 0x7F - xs_fract;
 801435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014360:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014364:	643b      	str	r3, [r7, #64]	@ 0x40
 8014366:	e004      	b.n	8014372 <transform_argb8888+0xa2>
        }
        else {
            x_next = 1;
 8014368:	2301      	movs	r3, #1
 801436a:	63bb      	str	r3, [r7, #56]	@ 0x38
            xs_fract = xs_fract - 0x80;
 801436c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801436e:	3b80      	subs	r3, #128	@ 0x80
 8014370:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        if(ys_fract < 0x80) {
 8014372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014374:	2b7f      	cmp	r3, #127	@ 0x7f
 8014376:	dc07      	bgt.n	8014388 <transform_argb8888+0xb8>
            y_next = -1;
 8014378:	f04f 33ff 	mov.w	r3, #4294967295
 801437c:	637b      	str	r3, [r7, #52]	@ 0x34
            ys_fract = 0x7F - ys_fract;
 801437e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014380:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014386:	e004      	b.n	8014392 <transform_argb8888+0xc2>
        }
        else {
            y_next = 1;
 8014388:	2301      	movs	r3, #1
 801438a:	637b      	str	r3, [r7, #52]	@ 0x34
            ys_fract = ys_fract - 0x80;
 801438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801438e:	3b80      	subs	r3, #128	@ 0x80
 8014390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        const lv_color32_t * src_c32 = (const lv_color32_t *)(src + ys_int * src_stride + xs_int * 4);
 8014392:	6a3b      	ldr	r3, [r7, #32]
 8014394:	683a      	ldr	r2, [r7, #0]
 8014396:	fb02 f303 	mul.w	r3, r2, r3
 801439a:	461a      	mov	r2, r3
 801439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	4413      	add	r3, r2
 80143a2:	68fa      	ldr	r2, [r7, #12]
 80143a4:	4413      	add	r3, r2
 80143a6:	61fb      	str	r3, [r7, #28]

        dest_c32[x] = src_c32[0];
 80143a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80143aa:	009b      	lsls	r3, r3, #2
 80143ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143ae:	441a      	add	r2, r3
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	6013      	str	r3, [r2, #0]

        if(aa &&
 80143b6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	f000 80e4 	beq.w	8014588 <transform_argb8888+0x2b8>
           xs_int + x_next >= 0 &&
 80143c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143c4:	4413      	add	r3, r2
        if(aa &&
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	f2c0 80de 	blt.w	8014588 <transform_argb8888+0x2b8>
           xs_int + x_next <= src_w - 1 &&
 80143cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d0:	4413      	add	r3, r2
           xs_int + x_next >= 0 &&
 80143d2:	68ba      	ldr	r2, [r7, #8]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	f340 80d7 	ble.w	8014588 <transform_argb8888+0x2b8>
           ys_int + y_next >= 0 &&
 80143da:	6a3a      	ldr	r2, [r7, #32]
 80143dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143de:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f2c0 80d1 	blt.w	8014588 <transform_argb8888+0x2b8>
           ys_int + y_next <= src_h - 1) {
 80143e6:	6a3a      	ldr	r2, [r7, #32]
 80143e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143ea:	4413      	add	r3, r2
           ys_int + y_next >= 0 &&
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	f340 80ca 	ble.w	8014588 <transform_argb8888+0x2b8>

            lv_color32_t px_hor = src_c32[x_next];
 80143f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	69fa      	ldr	r2, [r7, #28]
 80143fa:	441a      	add	r2, r3
 80143fc:	f107 0318 	add.w	r3, r7, #24
 8014400:	6810      	ldr	r0, [r2, #0]
 8014402:	6018      	str	r0, [r3, #0]
            lv_color32_t px_ver = *(const lv_color32_t *)((uint8_t *)src_c32 + y_next * src_stride);
 8014404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	fb02 f303 	mul.w	r3, r2, r3
 801440c:	461a      	mov	r2, r3
 801440e:	69fb      	ldr	r3, [r7, #28]
 8014410:	441a      	add	r2, r3
 8014412:	f107 0314 	add.w	r3, r7, #20
 8014416:	6810      	ldr	r0, [r2, #0]
 8014418:	6018      	str	r0, [r3, #0]

            if(px_ver.alpha == 0) {
 801441a:	7dfb      	ldrb	r3, [r7, #23]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d112      	bne.n	8014446 <transform_argb8888+0x176>
                dest_c32[x].alpha = (dest_c32[x].alpha * (0xFF - ys_fract)) >> 8;
 8014420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014426:	4413      	add	r3, r2
 8014428:	78db      	ldrb	r3, [r3, #3]
 801442a:	461a      	mov	r2, r3
 801442c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801442e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014432:	fb02 f303 	mul.w	r3, r2, r3
 8014436:	1219      	asrs	r1, r3, #8
 8014438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801443e:	4413      	add	r3, r2
 8014440:	b2ca      	uxtb	r2, r1
 8014442:	70da      	strb	r2, [r3, #3]
 8014444:	e044      	b.n	80144d0 <transform_argb8888+0x200>
            }
            else if(!lv_color32_eq(dest_c32[x], px_ver)) {
 8014446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801444c:	4413      	add	r3, r2
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	4613      	mov	r3, r2
 8014452:	6979      	ldr	r1, [r7, #20]
 8014454:	4618      	mov	r0, r3
 8014456:	f7ff fa07 	bl	8013868 <lv_color32_eq>
 801445a:	4603      	mov	r3, r0
 801445c:	f083 0301 	eor.w	r3, r3, #1
 8014460:	b2db      	uxtb	r3, r3
 8014462:	2b00      	cmp	r3, #0
 8014464:	d034      	beq.n	80144d0 <transform_argb8888+0x200>
                dest_c32[x].alpha = ((px_ver.alpha * ys_fract) + (dest_c32[x].alpha * (0xFF - ys_fract))) >> 8;
 8014466:	7dfb      	ldrb	r3, [r7, #23]
 8014468:	461a      	mov	r2, r3
 801446a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801446c:	fb03 f202 	mul.w	r2, r3, r2
 8014470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014476:	440b      	add	r3, r1
 8014478:	78db      	ldrb	r3, [r3, #3]
 801447a:	4619      	mov	r1, r3
 801447c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801447e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014482:	fb01 f303 	mul.w	r3, r1, r3
 8014486:	4413      	add	r3, r2
 8014488:	1219      	asrs	r1, r3, #8
 801448a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014490:	4413      	add	r3, r2
 8014492:	b2ca      	uxtb	r2, r1
 8014494:	70da      	strb	r2, [r3, #3]
                px_ver.alpha = ys_fract;
 8014496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014498:	b2db      	uxtb	r3, r3
 801449a:	75fb      	strb	r3, [r7, #23]
                dest_c32[x] = lv_color_mix32(px_ver, dest_c32[x]);
 801449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144a2:	4413      	add	r3, r2
 80144a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144a6:	0092      	lsls	r2, r2, #2
 80144a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80144aa:	188c      	adds	r4, r1, r2
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	4613      	mov	r3, r2
 80144b0:	4619      	mov	r1, r3
 80144b2:	6978      	ldr	r0, [r7, #20]
 80144b4:	f7ff fa2e 	bl	8013914 <lv_color_mix32>
 80144b8:	4603      	mov	r3, r0
 80144ba:	461a      	mov	r2, r3
 80144bc:	7022      	strb	r2, [r4, #0]
 80144be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80144c2:	7062      	strb	r2, [r4, #1]
 80144c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80144c8:	70a2      	strb	r2, [r4, #2]
 80144ca:	f3c3 6307 	ubfx	r3, r3, #24, #8
 80144ce:	70e3      	strb	r3, [r4, #3]
            }

            if(px_hor.alpha == 0) {
 80144d0:	7efb      	ldrb	r3, [r7, #27]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d112      	bne.n	80144fc <transform_argb8888+0x22c>
                dest_c32[x].alpha = (dest_c32[x].alpha * (0xFF - xs_fract)) >> 8;
 80144d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144dc:	4413      	add	r3, r2
 80144de:	78db      	ldrb	r3, [r3, #3]
 80144e0:	461a      	mov	r2, r3
 80144e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144e4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80144e8:	fb02 f303 	mul.w	r3, r2, r3
 80144ec:	1219      	asrs	r1, r3, #8
 80144ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144f4:	4413      	add	r3, r2
 80144f6:	b2ca      	uxtb	r2, r1
 80144f8:	70da      	strb	r2, [r3, #3]
           ys_int + y_next <= src_h - 1) {
 80144fa:	e087      	b.n	801460c <transform_argb8888+0x33c>
            }
            else if(!lv_color32_eq(dest_c32[x], px_hor)) {
 80144fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144fe:	009b      	lsls	r3, r3, #2
 8014500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014502:	4413      	add	r3, r2
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	4613      	mov	r3, r2
 8014508:	69b9      	ldr	r1, [r7, #24]
 801450a:	4618      	mov	r0, r3
 801450c:	f7ff f9ac 	bl	8013868 <lv_color32_eq>
 8014510:	4603      	mov	r3, r0
 8014512:	f083 0301 	eor.w	r3, r3, #1
 8014516:	b2db      	uxtb	r3, r3
 8014518:	2b00      	cmp	r3, #0
 801451a:	d077      	beq.n	801460c <transform_argb8888+0x33c>
                dest_c32[x].alpha = ((px_hor.alpha * xs_fract) + (dest_c32[x].alpha * (0xFF - xs_fract))) >> 8;
 801451c:	7efb      	ldrb	r3, [r7, #27]
 801451e:	461a      	mov	r2, r3
 8014520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014522:	fb03 f202 	mul.w	r2, r3, r2
 8014526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801452c:	440b      	add	r3, r1
 801452e:	78db      	ldrb	r3, [r3, #3]
 8014530:	4619      	mov	r1, r3
 8014532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014534:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014538:	fb01 f303 	mul.w	r3, r1, r3
 801453c:	4413      	add	r3, r2
 801453e:	1219      	asrs	r1, r3, #8
 8014540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014546:	4413      	add	r3, r2
 8014548:	b2ca      	uxtb	r2, r1
 801454a:	70da      	strb	r2, [r3, #3]
                px_hor.alpha = xs_fract;
 801454c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801454e:	b2db      	uxtb	r3, r3
 8014550:	76fb      	strb	r3, [r7, #27]
                dest_c32[x] = lv_color_mix32(px_hor, dest_c32[x]);
 8014552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014558:	4413      	add	r3, r2
 801455a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801455c:	0092      	lsls	r2, r2, #2
 801455e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014560:	188c      	adds	r4, r1, r2
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	4613      	mov	r3, r2
 8014566:	4619      	mov	r1, r3
 8014568:	69b8      	ldr	r0, [r7, #24]
 801456a:	f7ff f9d3 	bl	8013914 <lv_color_mix32>
 801456e:	4603      	mov	r3, r0
 8014570:	461a      	mov	r2, r3
 8014572:	7022      	strb	r2, [r4, #0]
 8014574:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014578:	7062      	strb	r2, [r4, #1]
 801457a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801457e:	70a2      	strb	r2, [r4, #2]
 8014580:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8014584:	70e3      	strb	r3, [r4, #3]
           ys_int + y_next <= src_h - 1) {
 8014586:	e041      	b.n	801460c <transform_argb8888+0x33c>
            }
        }
        /*Partially out of the image*/
        else {
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8014588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801458a:	2b00      	cmp	r3, #0
 801458c:	d102      	bne.n	8014594 <transform_argb8888+0x2c4>
 801458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014590:	2b00      	cmp	r3, #0
 8014592:	db07      	blt.n	80145a4 <transform_argb8888+0x2d4>
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	3b01      	subs	r3, #1
 8014598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801459a:	429a      	cmp	r2, r3
 801459c:	d115      	bne.n	80145ca <transform_argb8888+0x2fa>
 801459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	dd12      	ble.n	80145ca <transform_argb8888+0x2fa>
                dest_c32[x].alpha = (dest_c32[x].alpha * (0x7F - xs_fract)) >> 7;
 80145a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145aa:	4413      	add	r3, r2
 80145ac:	78db      	ldrb	r3, [r3, #3]
 80145ae:	461a      	mov	r2, r3
 80145b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80145b2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80145b6:	fb02 f303 	mul.w	r3, r2, r3
 80145ba:	11d9      	asrs	r1, r3, #7
 80145bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145be:	009b      	lsls	r3, r3, #2
 80145c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145c2:	4413      	add	r3, r2
 80145c4:	b2ca      	uxtb	r2, r1
 80145c6:	70da      	strb	r2, [r3, #3]
 80145c8:	e021      	b.n	801460e <transform_argb8888+0x33e>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 80145ca:	6a3b      	ldr	r3, [r7, #32]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d102      	bne.n	80145d6 <transform_argb8888+0x306>
 80145d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	db07      	blt.n	80145e6 <transform_argb8888+0x316>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	3b01      	subs	r3, #1
 80145da:	6a3a      	ldr	r2, [r7, #32]
 80145dc:	429a      	cmp	r2, r3
 80145de:	d116      	bne.n	801460e <transform_argb8888+0x33e>
 80145e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	dd13      	ble.n	801460e <transform_argb8888+0x33e>
                dest_c32[x].alpha = (dest_c32[x].alpha * (0x7F - ys_fract)) >> 7;
 80145e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145ec:	4413      	add	r3, r2
 80145ee:	78db      	ldrb	r3, [r3, #3]
 80145f0:	461a      	mov	r2, r3
 80145f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145f4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80145f8:	fb02 f303 	mul.w	r3, r2, r3
 80145fc:	11d9      	asrs	r1, r3, #7
 80145fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014600:	009b      	lsls	r3, r3, #2
 8014602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014604:	4413      	add	r3, r2
 8014606:	b2ca      	uxtb	r2, r1
 8014608:	70da      	strb	r2, [r3, #3]
 801460a:	e000      	b.n	801460e <transform_argb8888+0x33e>
           ys_int + y_next <= src_h - 1) {
 801460c:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 801460e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014610:	3301      	adds	r3, #1
 8014612:	647b      	str	r3, [r7, #68]	@ 0x44
 8014614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014618:	429a      	cmp	r2, r3
 801461a:	f6ff ae69 	blt.w	80142f0 <transform_argb8888+0x20>
            }
        }
    }
}
 801461e:	bf00      	nop
 8014620:	bf00      	nop
 8014622:	374c      	adds	r7, #76	@ 0x4c
 8014624:	46bd      	mov	sp, r7
 8014626:	bd90      	pop	{r4, r7, pc}

08014628 <transform_rgb565a8>:

static void transform_rgb565a8(const uint8_t * src, int32_t src_w, int32_t src_h, int32_t src_stride,
                               int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                               int32_t x_end, uint16_t * cbuf, uint8_t * abuf, bool src_has_a8, bool aa)
{
 8014628:	b590      	push	{r4, r7, lr}
 801462a:	b097      	sub	sp, #92	@ 0x5c
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	60b9      	str	r1, [r7, #8]
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	603b      	str	r3, [r7, #0]
    int32_t xs_ups_start = xs_ups;
 8014636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014638:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t ys_ups_start = ys_ups;
 801463a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801463c:	63bb      	str	r3, [r7, #56]	@ 0x38

    const lv_opa_t * src_alpha = src + src_stride * src_h;
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	fb02 f303 	mul.w	r3, r2, r3
 8014646:	461a      	mov	r2, r3
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	4413      	add	r3, r2
 801464c:	637b      	str	r3, [r7, #52]	@ 0x34

    /*Must be signed type, because we would use negative array index calculated from stride*/
    int32_t alpha_stride = src_stride / 2; /*alpha map stride is always half of RGB map stride*/
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	0fda      	lsrs	r2, r3, #31
 8014652:	4413      	add	r3, r2
 8014654:	105b      	asrs	r3, r3, #1
 8014656:	633b      	str	r3, [r7, #48]	@ 0x30

    int32_t x;
    for(x = 0; x < x_end; x++) {
 8014658:	2300      	movs	r3, #0
 801465a:	657b      	str	r3, [r7, #84]	@ 0x54
 801465c:	e19c      	b.n	8014998 <transform_rgb565a8+0x370>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 801465e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014660:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014662:	fb02 f303 	mul.w	r3, r2, r3
 8014666:	121b      	asrs	r3, r3, #8
 8014668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801466a:	4413      	add	r3, r2
 801466c:	66bb      	str	r3, [r7, #104]	@ 0x68
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 801466e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014670:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014672:	fb02 f303 	mul.w	r3, r2, r3
 8014676:	121b      	asrs	r3, r3, #8
 8014678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801467a:	4413      	add	r3, r2
 801467c:	66fb      	str	r3, [r7, #108]	@ 0x6c

        int32_t xs_int = xs_ups >> 8;
 801467e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014680:	121b      	asrs	r3, r3, #8
 8014682:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int32_t ys_int = ys_ups >> 8;
 8014684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014686:	121b      	asrs	r3, r3, #8
 8014688:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801468c:	2b00      	cmp	r3, #0
 801468e:	db0a      	blt.n	80146a6 <transform_rgb565a8+0x7e>
 8014690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	429a      	cmp	r2, r3
 8014696:	da06      	bge.n	80146a6 <transform_rgb565a8+0x7e>
 8014698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469a:	2b00      	cmp	r3, #0
 801469c:	db03      	blt.n	80146a6 <transform_rgb565a8+0x7e>
 801469e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	db06      	blt.n	80146b4 <transform_rgb565a8+0x8c>
            abuf[x] = 0x00;
 80146a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80146ac:	4413      	add	r3, r2
 80146ae:	2200      	movs	r2, #0
 80146b0:	701a      	strb	r2, [r3, #0]
            continue;
 80146b2:	e16e      	b.n	8014992 <transform_rgb565a8+0x36a>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 80146b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	653b      	str	r3, [r7, #80]	@ 0x50
        int32_t ys_fract = ys_ups & 0xFF;
 80146ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80146bc:	b2db      	uxtb	r3, r3
 80146be:	64fb      	str	r3, [r7, #76]	@ 0x4c

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 80146c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80146c4:	dc08      	bgt.n	80146d8 <transform_rgb565a8+0xb0>
            x_next = -1;
 80146c6:	f04f 33ff 	mov.w	r3, #4294967295
 80146ca:	64bb      	str	r3, [r7, #72]	@ 0x48
            xs_fract = (0x7F - xs_fract) * 2;
 80146cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146ce:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80146d6:	e005      	b.n	80146e4 <transform_rgb565a8+0xbc>
        }
        else {
            x_next = 1;
 80146d8:	2301      	movs	r3, #1
 80146da:	64bb      	str	r3, [r7, #72]	@ 0x48
            xs_fract = (xs_fract - 0x80) * 2;
 80146dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146de:	3b80      	subs	r3, #128	@ 0x80
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	653b      	str	r3, [r7, #80]	@ 0x50
        }
        if(ys_fract < 0x80) {
 80146e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80146e8:	dc08      	bgt.n	80146fc <transform_rgb565a8+0xd4>
            y_next = -1;
 80146ea:	f04f 33ff 	mov.w	r3, #4294967295
 80146ee:	647b      	str	r3, [r7, #68]	@ 0x44
            ys_fract = (0x7F - ys_fract) * 2;
 80146f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146f2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80146f6:	005b      	lsls	r3, r3, #1
 80146f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80146fa:	e005      	b.n	8014708 <transform_rgb565a8+0xe0>
        }
        else {
            y_next = 1;
 80146fc:	2301      	movs	r3, #1
 80146fe:	647b      	str	r3, [r7, #68]	@ 0x44
            ys_fract = (ys_fract - 0x80) * 2;
 8014700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014702:	3b80      	subs	r3, #128	@ 0x80
 8014704:	005b      	lsls	r3, r3, #1
 8014706:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        const uint16_t * src_tmp_u16 = (const uint16_t *)(src + (ys_int * src_stride) + xs_int * 2);
 8014708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	fb02 f303 	mul.w	r3, r2, r3
 8014710:	461a      	mov	r2, r3
 8014712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4413      	add	r3, r2
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	4413      	add	r3, r2
 801471c:	627b      	str	r3, [r7, #36]	@ 0x24
        cbuf[x] = src_tmp_u16[0];
 801471e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014720:	005b      	lsls	r3, r3, #1
 8014722:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014724:	4413      	add	r3, r2
 8014726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014728:	8812      	ldrh	r2, [r2, #0]
 801472a:	801a      	strh	r2, [r3, #0]

        if(aa &&
 801472c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8014730:	2b00      	cmp	r3, #0
 8014732:	f000 80db 	beq.w	80148ec <transform_rgb565a8+0x2c4>
           xs_int + x_next >= 0 &&
 8014736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801473a:	4413      	add	r3, r2
        if(aa &&
 801473c:	2b00      	cmp	r3, #0
 801473e:	f2c0 80d5 	blt.w	80148ec <transform_rgb565a8+0x2c4>
           xs_int + x_next <= src_w - 1 &&
 8014742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014746:	4413      	add	r3, r2
           xs_int + x_next >= 0 &&
 8014748:	68ba      	ldr	r2, [r7, #8]
 801474a:	429a      	cmp	r2, r3
 801474c:	f340 80ce 	ble.w	80148ec <transform_rgb565a8+0x2c4>
           ys_int + y_next >= 0 &&
 8014750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014754:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 8014756:	2b00      	cmp	r3, #0
 8014758:	f2c0 80c8 	blt.w	80148ec <transform_rgb565a8+0x2c4>
           ys_int + y_next <= src_h - 1) {
 801475c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801475e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014760:	4413      	add	r3, r2
           ys_int + y_next >= 0 &&
 8014762:	687a      	ldr	r2, [r7, #4]
 8014764:	429a      	cmp	r2, r3
 8014766:	f340 80c1 	ble.w	80148ec <transform_rgb565a8+0x2c4>

            uint16_t px_hor = src_tmp_u16[x_next];
 801476a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014770:	4413      	add	r3, r2
 8014772:	881b      	ldrh	r3, [r3, #0]
 8014774:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t px_ver = *(const uint16_t *)((uint8_t *)src_tmp_u16 + (y_next * src_stride));
 8014776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014778:	683a      	ldr	r2, [r7, #0]
 801477a:	fb02 f303 	mul.w	r3, r2, r3
 801477e:	461a      	mov	r2, r3
 8014780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014782:	4413      	add	r3, r2
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	843b      	strh	r3, [r7, #32]

            if(src_has_a8) {
 8014788:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801478c:	2b00      	cmp	r3, #0
 801478e:	d070      	beq.n	8014872 <transform_rgb565a8+0x24a>
                const lv_opa_t * src_alpha_tmp = src_alpha;
 8014790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014792:	61fb      	str	r3, [r7, #28]
                src_alpha_tmp += (ys_int * alpha_stride) + xs_int;
 8014794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014798:	fb03 f202 	mul.w	r2, r3, r2
 801479c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801479e:	4413      	add	r3, r2
 80147a0:	461a      	mov	r2, r3
 80147a2:	69fb      	ldr	r3, [r7, #28]
 80147a4:	4413      	add	r3, r2
 80147a6:	61fb      	str	r3, [r7, #28]
                abuf[x] = src_alpha_tmp[0];
 80147a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80147ae:	4413      	add	r3, r2
 80147b0:	69fa      	ldr	r2, [r7, #28]
 80147b2:	7812      	ldrb	r2, [r2, #0]
 80147b4:	701a      	strb	r2, [r3, #0]

                lv_opa_t a_hor = src_alpha_tmp[x_next];
 80147b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147b8:	69fa      	ldr	r2, [r7, #28]
 80147ba:	4413      	add	r3, r2
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                lv_opa_t a_ver = src_alpha_tmp[y_next * alpha_stride];
 80147c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147c6:	fb02 f303 	mul.w	r3, r2, r3
 80147ca:	461a      	mov	r2, r3
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	4413      	add	r3, r2
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

                if(a_ver != abuf[x]) a_ver = ((a_ver * ys_fract) + (abuf[x] * (0x100 - ys_fract))) >> 8;
 80147d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80147dc:	4413      	add	r3, r2
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d013      	beq.n	8014810 <transform_rgb565a8+0x1e8>
 80147e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80147ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80147ee:	fb03 f202 	mul.w	r2, r3, r2
 80147f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80147f8:	440b      	add	r3, r1
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	4619      	mov	r1, r3
 80147fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014800:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8014804:	fb01 f303 	mul.w	r3, r1, r3
 8014808:	4413      	add	r3, r2
 801480a:	121b      	asrs	r3, r3, #8
 801480c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
                if(a_hor != abuf[x]) a_hor = ((a_hor * xs_fract) + (abuf[x] * (0x100 - xs_fract))) >> 8;
 8014810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014816:	4413      	add	r3, r2
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 801481e:	429a      	cmp	r2, r3
 8014820:	d013      	beq.n	801484a <transform_rgb565a8+0x222>
 8014822:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014826:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014828:	fb03 f202 	mul.w	r2, r3, r2
 801482c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801482e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8014832:	440b      	add	r3, r1
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	4619      	mov	r1, r3
 8014838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801483a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801483e:	fb01 f303 	mul.w	r3, r1, r3
 8014842:	4413      	add	r3, r2
 8014844:	121b      	asrs	r3, r3, #8
 8014846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                abuf[x] = (a_ver + a_hor) >> 1;
 801484a:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 801484e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014852:	4413      	add	r3, r2
 8014854:	1059      	asrs	r1, r3, #1
 8014856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014858:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801485c:	4413      	add	r3, r2
 801485e:	b2ca      	uxtb	r2, r1
 8014860:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 8014862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014864:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014868:	4413      	add	r3, r2
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d106      	bne.n	801487e <transform_rgb565a8+0x256>
 8014870:	e08f      	b.n	8014992 <transform_rgb565a8+0x36a>
            }
            else {
                abuf[x] = 0xff;
 8014872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014874:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014878:	4413      	add	r3, r2
 801487a:	22ff      	movs	r2, #255	@ 0xff
 801487c:	701a      	strb	r2, [r3, #0]
            }

            if(cbuf[x] != px_ver || cbuf[x] != px_hor) {
 801487e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014880:	005b      	lsls	r3, r3, #1
 8014882:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014884:	4413      	add	r3, r2
 8014886:	881b      	ldrh	r3, [r3, #0]
 8014888:	8c3a      	ldrh	r2, [r7, #32]
 801488a:	429a      	cmp	r2, r3
 801488c:	d107      	bne.n	801489e <transform_rgb565a8+0x276>
 801488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014890:	005b      	lsls	r3, r3, #1
 8014892:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014894:	4413      	add	r3, r2
 8014896:	881b      	ldrh	r3, [r3, #0]
 8014898:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801489a:	429a      	cmp	r2, r3
 801489c:	d078      	beq.n	8014990 <transform_rgb565a8+0x368>
                uint16_t v = lv_color_16_16_mix(px_ver, cbuf[x], ys_fract);
 801489e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148a0:	005b      	lsls	r3, r3, #1
 80148a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80148a4:	4413      	add	r3, r2
 80148a6:	8819      	ldrh	r1, [r3, #0]
 80148a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80148aa:	b2da      	uxtb	r2, r3
 80148ac:	8c3b      	ldrh	r3, [r7, #32]
 80148ae:	4618      	mov	r0, r3
 80148b0:	f7fe ffee 	bl	8013890 <lv_color_16_16_mix>
 80148b4:	4603      	mov	r3, r0
 80148b6:	837b      	strh	r3, [r7, #26]
                uint16_t h = lv_color_16_16_mix(px_hor, cbuf[x], xs_fract);
 80148b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148ba:	005b      	lsls	r3, r3, #1
 80148bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80148be:	4413      	add	r3, r2
 80148c0:	8819      	ldrh	r1, [r3, #0]
 80148c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148c4:	b2da      	uxtb	r2, r3
 80148c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fe ffe1 	bl	8013890 <lv_color_16_16_mix>
 80148ce:	4603      	mov	r3, r0
 80148d0:	833b      	strh	r3, [r7, #24]
                cbuf[x] = lv_color_16_16_mix(h, v, LV_OPA_50);
 80148d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148d4:	005b      	lsls	r3, r3, #1
 80148d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80148d8:	18d4      	adds	r4, r2, r3
 80148da:	8b79      	ldrh	r1, [r7, #26]
 80148dc:	8b3b      	ldrh	r3, [r7, #24]
 80148de:	227f      	movs	r2, #127	@ 0x7f
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fe ffd5 	bl	8013890 <lv_color_16_16_mix>
 80148e6:	4603      	mov	r3, r0
 80148e8:	8023      	strh	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 80148ea:	e051      	b.n	8014990 <transform_rgb565a8+0x368>
            }
        }
        /*Partially out of the image*/
        else {
            lv_opa_t a;
            if(src_has_a8) {
 80148ec:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d010      	beq.n	8014916 <transform_rgb565a8+0x2ee>
                const lv_opa_t * src_alpha_tmp = src_alpha;
 80148f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148f6:	617b      	str	r3, [r7, #20]
                src_alpha_tmp += (ys_int * alpha_stride) + xs_int;
 80148f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80148fc:	fb03 f202 	mul.w	r2, r3, r2
 8014900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014902:	4413      	add	r3, r2
 8014904:	461a      	mov	r2, r3
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	4413      	add	r3, r2
 801490a:	617b      	str	r3, [r7, #20]
                a = src_alpha_tmp[0];
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8014914:	e002      	b.n	801491c <transform_rgb565a8+0x2f4>
            }
            else {
                a = 0xff;
 8014916:	23ff      	movs	r3, #255	@ 0xff
 8014918:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801491e:	2b00      	cmp	r3, #0
 8014920:	d102      	bne.n	8014928 <transform_rgb565a8+0x300>
 8014922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014924:	2b00      	cmp	r3, #0
 8014926:	db07      	blt.n	8014938 <transform_rgb565a8+0x310>
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	3b01      	subs	r3, #1
 801492c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801492e:	429a      	cmp	r2, r3
 8014930:	d111      	bne.n	8014956 <transform_rgb565a8+0x32e>
 8014932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014934:	2b00      	cmp	r3, #0
 8014936:	dd0e      	ble.n	8014956 <transform_rgb565a8+0x32e>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 8014938:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 801493c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801493e:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8014942:	fb02 f303 	mul.w	r3, r2, r3
 8014946:	1219      	asrs	r1, r3, #8
 8014948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801494a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801494e:	4413      	add	r3, r2
 8014950:	b2ca      	uxtb	r2, r1
 8014952:	701a      	strb	r2, [r3, #0]
 8014954:	e01d      	b.n	8014992 <transform_rgb565a8+0x36a>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8014956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014958:	2b00      	cmp	r3, #0
 801495a:	d102      	bne.n	8014962 <transform_rgb565a8+0x33a>
 801495c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801495e:	2b00      	cmp	r3, #0
 8014960:	db07      	blt.n	8014972 <transform_rgb565a8+0x34a>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	3b01      	subs	r3, #1
 8014966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014968:	429a      	cmp	r2, r3
 801496a:	d112      	bne.n	8014992 <transform_rgb565a8+0x36a>
 801496c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801496e:	2b00      	cmp	r3, #0
 8014970:	dd0f      	ble.n	8014992 <transform_rgb565a8+0x36a>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 8014972:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8014976:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014978:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801497c:	fb02 f303 	mul.w	r3, r2, r3
 8014980:	1219      	asrs	r1, r3, #8
 8014982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014984:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014988:	4413      	add	r3, r2
 801498a:	b2ca      	uxtb	r2, r1
 801498c:	701a      	strb	r2, [r3, #0]
 801498e:	e000      	b.n	8014992 <transform_rgb565a8+0x36a>
           ys_int + y_next <= src_h - 1) {
 8014990:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 8014992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014994:	3301      	adds	r3, #1
 8014996:	657b      	str	r3, [r7, #84]	@ 0x54
 8014998:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801499a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801499c:	429a      	cmp	r2, r3
 801499e:	f6ff ae5e 	blt.w	801465e <transform_rgb565a8+0x36>
            }
        }
    }
}
 80149a2:	bf00      	nop
 80149a4:	bf00      	nop
 80149a6:	375c      	adds	r7, #92	@ 0x5c
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd90      	pop	{r4, r7, pc}

080149ac <transform_a8>:

static void transform_a8(const uint8_t * src, int32_t src_w, int32_t src_h, int32_t src_stride,
                         int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                         int32_t x_end, uint8_t * abuf, bool aa)
{
 80149ac:	b480      	push	{r7}
 80149ae:	b091      	sub	sp, #68	@ 0x44
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
 80149b8:	603b      	str	r3, [r7, #0]
    int32_t xs_ups_start = xs_ups;
 80149ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149bc:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t ys_ups_start = ys_ups;
 80149be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149c0:	623b      	str	r3, [r7, #32]

    int32_t x;
    for(x = 0; x < x_end; x++) {
 80149c2:	2300      	movs	r3, #0
 80149c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149c6:	e10d      	b.n	8014be4 <transform_a8+0x238>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80149c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80149cc:	fb02 f303 	mul.w	r3, r2, r3
 80149d0:	121b      	asrs	r3, r3, #8
 80149d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149d4:	4413      	add	r3, r2
 80149d6:	64bb      	str	r3, [r7, #72]	@ 0x48
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 80149d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80149dc:	fb02 f303 	mul.w	r3, r2, r3
 80149e0:	121b      	asrs	r3, r3, #8
 80149e2:	6a3a      	ldr	r2, [r7, #32]
 80149e4:	4413      	add	r3, r2
 80149e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

        int32_t xs_int = xs_ups >> 8;
 80149e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149ea:	121b      	asrs	r3, r3, #8
 80149ec:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 80149ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80149f0:	121b      	asrs	r3, r3, #8
 80149f2:	61bb      	str	r3, [r7, #24]

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	db0a      	blt.n	8014a10 <transform_a8+0x64>
 80149fa:	69fa      	ldr	r2, [r7, #28]
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	429a      	cmp	r2, r3
 8014a00:	da06      	bge.n	8014a10 <transform_a8+0x64>
 8014a02:	69bb      	ldr	r3, [r7, #24]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	db03      	blt.n	8014a10 <transform_a8+0x64>
 8014a08:	69ba      	ldr	r2, [r7, #24]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	db05      	blt.n	8014a1c <transform_a8+0x70>
            abuf[x] = 0x00;
 8014a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a14:	4413      	add	r3, r2
 8014a16:	2200      	movs	r2, #0
 8014a18:	701a      	strb	r2, [r3, #0]
            continue;
 8014a1a:	e0e0      	b.n	8014bde <transform_a8+0x232>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 8014a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	63bb      	str	r3, [r7, #56]	@ 0x38
        int32_t ys_fract = ys_ups & 0xFF;
 8014a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	637b      	str	r3, [r7, #52]	@ 0x34

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 8014a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a2c:	dc08      	bgt.n	8014a40 <transform_a8+0x94>
            x_next = -1;
 8014a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a32:	633b      	str	r3, [r7, #48]	@ 0x30
            xs_fract = (0x7F - xs_fract) * 2;
 8014a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a36:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014a3e:	e005      	b.n	8014a4c <transform_a8+0xa0>
        }
        else {
            x_next = 1;
 8014a40:	2301      	movs	r3, #1
 8014a42:	633b      	str	r3, [r7, #48]	@ 0x30
            xs_fract = (xs_fract - 0x80) * 2;
 8014a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a46:	3b80      	subs	r3, #128	@ 0x80
 8014a48:	005b      	lsls	r3, r3, #1
 8014a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        }
        if(ys_fract < 0x80) {
 8014a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a50:	dc08      	bgt.n	8014a64 <transform_a8+0xb8>
            y_next = -1;
 8014a52:	f04f 33ff 	mov.w	r3, #4294967295
 8014a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            ys_fract = (0x7F - ys_fract) * 2;
 8014a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a5a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a62:	e005      	b.n	8014a70 <transform_a8+0xc4>
        }
        else {
            y_next = 1;
 8014a64:	2301      	movs	r3, #1
 8014a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
            ys_fract = (ys_fract - 0x80) * 2;
 8014a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a6a:	3b80      	subs	r3, #128	@ 0x80
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        const uint8_t * src_tmp = src;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	617b      	str	r3, [r7, #20]
        src_tmp += ys_int * src_stride + xs_int;
 8014a74:	69bb      	ldr	r3, [r7, #24]
 8014a76:	683a      	ldr	r2, [r7, #0]
 8014a78:	fb03 f202 	mul.w	r2, r3, r2
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	4413      	add	r3, r2
 8014a80:	461a      	mov	r2, r3
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	4413      	add	r3, r2
 8014a86:	617b      	str	r3, [r7, #20]
        abuf[x] = src_tmp[0];
 8014a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a8c:	4413      	add	r3, r2
 8014a8e:	697a      	ldr	r2, [r7, #20]
 8014a90:	7812      	ldrb	r2, [r2, #0]
 8014a92:	701a      	strb	r2, [r3, #0]

        if(aa &&
 8014a94:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d067      	beq.n	8014b6c <transform_a8+0x1c0>
           xs_int + x_next >= 0 &&
 8014a9c:	69fa      	ldr	r2, [r7, #28]
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa0:	4413      	add	r3, r2
        if(aa &&
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	db62      	blt.n	8014b6c <transform_a8+0x1c0>
           xs_int + x_next <= src_w - 1 &&
 8014aa6:	69fa      	ldr	r2, [r7, #28]
 8014aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aaa:	4413      	add	r3, r2
           xs_int + x_next >= 0 &&
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	dd5c      	ble.n	8014b6c <transform_a8+0x1c0>
           ys_int + y_next >= 0 &&
 8014ab2:	69ba      	ldr	r2, [r7, #24]
 8014ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ab6:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	db57      	blt.n	8014b6c <transform_a8+0x1c0>
           ys_int + y_next <= src_h - 1) {
 8014abc:	69ba      	ldr	r2, [r7, #24]
 8014abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac0:	4413      	add	r3, r2
           ys_int + y_next >= 0 &&
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	dd51      	ble.n	8014b6c <transform_a8+0x1c0>

            lv_opa_t a_ver = src_tmp[x_next];
 8014ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aca:	697a      	ldr	r2, [r7, #20]
 8014acc:	4413      	add	r3, r2
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            lv_opa_t a_hor = src_tmp[y_next * src_stride];
 8014ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ad6:	683a      	ldr	r2, [r7, #0]
 8014ad8:	fb02 f303 	mul.w	r3, r2, r3
 8014adc:	461a      	mov	r2, r3
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

            if(a_ver != abuf[x]) a_ver = ((a_ver * ys_fract) + (abuf[x] * (0x100 - ys_fract))) >> 8;
 8014ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014aea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014aec:	4413      	add	r3, r2
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d012      	beq.n	8014b1e <transform_a8+0x172>
 8014af8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014afc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014afe:	fb03 f202 	mul.w	r2, r3, r2
 8014b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b04:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8014b06:	440b      	add	r3, r1
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	4619      	mov	r1, r3
 8014b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b0e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8014b12:	fb01 f303 	mul.w	r3, r1, r3
 8014b16:	4413      	add	r3, r2
 8014b18:	121b      	asrs	r3, r3, #8
 8014b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if(a_hor != abuf[x]) a_hor = ((a_hor * xs_fract) + (abuf[x] * (0x100 - xs_fract))) >> 8;
 8014b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b22:	4413      	add	r3, r2
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d012      	beq.n	8014b54 <transform_a8+0x1a8>
 8014b2e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014b34:	fb03 f202 	mul.w	r2, r3, r2
 8014b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b3a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8014b3c:	440b      	add	r3, r1
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	4619      	mov	r1, r3
 8014b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b44:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8014b48:	fb01 f303 	mul.w	r3, r1, r3
 8014b4c:	4413      	add	r3, r2
 8014b4e:	121b      	asrs	r3, r3, #8
 8014b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            abuf[x] = (a_ver + a_hor) >> 1;
 8014b54:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8014b58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8014b5c:	4413      	add	r3, r2
 8014b5e:	1059      	asrs	r1, r3, #1
 8014b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b64:	4413      	add	r3, r2
 8014b66:	b2ca      	uxtb	r2, r1
 8014b68:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 8014b6a:	e038      	b.n	8014bde <transform_a8+0x232>
        }
        else {
            /*Partially out of the image*/
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8014b6c:	69fb      	ldr	r3, [r7, #28]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d102      	bne.n	8014b78 <transform_a8+0x1cc>
 8014b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	db07      	blt.n	8014b88 <transform_a8+0x1dc>
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	69fa      	ldr	r2, [r7, #28]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d111      	bne.n	8014ba6 <transform_a8+0x1fa>
 8014b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	dd0e      	ble.n	8014ba6 <transform_a8+0x1fa>
                abuf[x] = (src_tmp[0] * (0xFF - xs_fract)) >> 8;
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	781b      	ldrb	r3, [r3, #0]
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b90:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014b94:	fb02 f303 	mul.w	r3, r2, r3
 8014b98:	1219      	asrs	r1, r3, #8
 8014b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b9e:	4413      	add	r3, r2
 8014ba0:	b2ca      	uxtb	r2, r1
 8014ba2:	701a      	strb	r2, [r3, #0]
 8014ba4:	e01b      	b.n	8014bde <transform_a8+0x232>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8014ba6:	69bb      	ldr	r3, [r7, #24]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d102      	bne.n	8014bb2 <transform_a8+0x206>
 8014bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	db07      	blt.n	8014bc2 <transform_a8+0x216>
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	3b01      	subs	r3, #1
 8014bb6:	69ba      	ldr	r2, [r7, #24]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d110      	bne.n	8014bde <transform_a8+0x232>
 8014bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	dd0d      	ble.n	8014bde <transform_a8+0x232>
                abuf[x] = (src_tmp[0] * (0xFF - ys_fract)) >> 8;
 8014bc2:	697b      	ldr	r3, [r7, #20]
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bca:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8014bce:	fb02 f303 	mul.w	r3, r2, r3
 8014bd2:	1219      	asrs	r1, r3, #8
 8014bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bd6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014bd8:	4413      	add	r3, r2
 8014bda:	b2ca      	uxtb	r2, r1
 8014bdc:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 8014bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014be0:	3301      	adds	r3, #1
 8014be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014be4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014be8:	429a      	cmp	r2, r3
 8014bea:	f6ff aeed 	blt.w	80149c8 <transform_a8+0x1c>
            }
        }
    }
}
 8014bee:	bf00      	nop
 8014bf0:	bf00      	nop
 8014bf2:	3744      	adds	r7, #68	@ 0x44
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfa:	4770      	bx	lr

08014bfc <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	b085      	sub	sp, #20
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	60f8      	str	r0, [r7, #12]
 8014c04:	60b9      	str	r1, [r7, #8]
 8014c06:	607a      	str	r2, [r7, #4]
 8014c08:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->scale_x == LV_SCALE_NONE && t->scale_y == LV_SCALE_NONE) {
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	6a1b      	ldr	r3, [r3, #32]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d112      	bne.n	8014c38 <transform_point_upscaled+0x3c>
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	699b      	ldr	r3, [r3, #24]
 8014c16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014c1a:	d10d      	bne.n	8014c38 <transform_point_upscaled+0x3c>
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	69db      	ldr	r3, [r3, #28]
 8014c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014c24:	d108      	bne.n	8014c38 <transform_point_upscaled+0x3c>
        *xout = xin * 256;
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	021a      	lsls	r2, r3, #8
 8014c2a:	683b      	ldr	r3, [r7, #0]
 8014c2c:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	021a      	lsls	r2, r3, #8
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	601a      	str	r2, [r3, #0]
        return;
 8014c36:	e079      	b.n	8014d2c <transform_point_upscaled+0x130>
    }

    xin -= t->pivot.x;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c3c:	68ba      	ldr	r2, [r7, #8]
 8014c3e:	1ad3      	subs	r3, r2, r3
 8014c40:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	6a1b      	ldr	r3, [r3, #32]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d114      	bne.n	8014c7e <transform_point_upscaled+0x82>
        *xout = ((int32_t)(xin * t->scale_x)) + (t->pivot_x_256);
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	699b      	ldr	r3, [r3, #24]
 8014c58:	68ba      	ldr	r2, [r7, #8]
 8014c5a:	fb03 f202 	mul.w	r2, r3, r2
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c62:	441a      	add	r2, r3
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->scale_y)) + (t->pivot_y_256);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	69db      	ldr	r3, [r3, #28]
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	fb03 f202 	mul.w	r2, r3, r2
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c76:	441a      	add	r2, r3
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	601a      	str	r2, [r3, #0]
 8014c7c:	e056      	b.n	8014d2c <transform_point_upscaled+0x130>
    }
    else if(t->scale_x == LV_SCALE_NONE && t->scale_y == LV_SCALE_NONE) {
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	699b      	ldr	r3, [r3, #24]
 8014c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014c86:	d127      	bne.n	8014cd8 <transform_point_upscaled+0xdc>
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	69db      	ldr	r3, [r3, #28]
 8014c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014c90:	d122      	bne.n	8014cd8 <transform_point_upscaled+0xdc>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	695b      	ldr	r3, [r3, #20]
 8014c96:	68ba      	ldr	r2, [r7, #8]
 8014c98:	fb03 f202 	mul.w	r2, r3, r2
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	691b      	ldr	r3, [r3, #16]
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	fb01 f303 	mul.w	r3, r1, r3
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	109a      	asrs	r2, r3, #2
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cae:	441a      	add	r2, r3
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	691b      	ldr	r3, [r3, #16]
 8014cb8:	68ba      	ldr	r2, [r7, #8]
 8014cba:	fb03 f202 	mul.w	r2, r3, r2
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	695b      	ldr	r3, [r3, #20]
 8014cc2:	6879      	ldr	r1, [r7, #4]
 8014cc4:	fb01 f303 	mul.w	r3, r1, r3
 8014cc8:	4413      	add	r3, r2
 8014cca:	109a      	asrs	r2, r3, #2
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cd0:	441a      	add	r2, r3
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	601a      	str	r2, [r3, #0]
 8014cd6:	e029      	b.n	8014d2c <transform_point_upscaled+0x130>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->scale_x) >> 10) + (t->pivot_x_256);
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	695b      	ldr	r3, [r3, #20]
 8014cdc:	68ba      	ldr	r2, [r7, #8]
 8014cde:	fb03 f202 	mul.w	r2, r3, r2
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	691b      	ldr	r3, [r3, #16]
 8014ce6:	6879      	ldr	r1, [r7, #4]
 8014ce8:	fb01 f303 	mul.w	r3, r1, r3
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	68fa      	ldr	r2, [r7, #12]
 8014cf0:	6992      	ldr	r2, [r2, #24]
 8014cf2:	fb02 f303 	mul.w	r3, r2, r3
 8014cf6:	129a      	asrs	r2, r3, #10
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cfc:	441a      	add	r2, r3
 8014cfe:	683b      	ldr	r3, [r7, #0]
 8014d00:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->scale_y) >> 10) + (t->pivot_y_256);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	691b      	ldr	r3, [r3, #16]
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	fb03 f202 	mul.w	r2, r3, r2
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	695b      	ldr	r3, [r3, #20]
 8014d10:	6879      	ldr	r1, [r7, #4]
 8014d12:	fb01 f303 	mul.w	r3, r1, r3
 8014d16:	4413      	add	r3, r2
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	69d2      	ldr	r2, [r2, #28]
 8014d1c:	fb02 f303 	mul.w	r3, r2, r3
 8014d20:	129a      	asrs	r2, r3, #10
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d26:	441a      	add	r2, r3
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	601a      	str	r2, [r3, #0]
    }
}
 8014d2c:	3714      	adds	r7, #20
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d34:	4770      	bx	lr

08014d36 <lv_area_get_width>:
{
 8014d36:	b480      	push	{r7}
 8014d38:	b083      	sub	sp, #12
 8014d3a:	af00      	add	r7, sp, #0
 8014d3c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	689a      	ldr	r2, [r3, #8]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	1ad3      	subs	r3, r2, r3
 8014d48:	3301      	adds	r3, #1
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	370c      	adds	r7, #12
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d54:	4770      	bx	lr

08014d56 <lv_area_get_height>:
{
 8014d56:	b480      	push	{r7}
 8014d58:	b083      	sub	sp, #12
 8014d5a:	af00      	add	r7, sp, #0
 8014d5c:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	68da      	ldr	r2, [r3, #12]
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	1ad3      	subs	r3, r2, r3
 8014d68:	3301      	adds	r3, #1
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	370c      	adds	r7, #12
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr

08014d76 <lv_point_from_precise>:
{
 8014d76:	b480      	push	{r7}
 8014d78:	b085      	sub	sp, #20
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
 8014d7e:	6039      	str	r1, [r7, #0]
        (int32_t)p->x, (int32_t)p->y
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	681b      	ldr	r3, [r3, #0]
    lv_point_t point = {
 8014d84:	60bb      	str	r3, [r7, #8]
        (int32_t)p->x, (int32_t)p->y
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	685b      	ldr	r3, [r3, #4]
    lv_point_t point = {
 8014d8a:	60fb      	str	r3, [r7, #12]
    return point;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	f107 0308 	add.w	r3, r7, #8
 8014d94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014d98:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	3714      	adds	r7, #20
 8014da0:	46bd      	mov	sp, r7
 8014da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da6:	4770      	bx	lr

08014da8 <lv_point_swap>:
    p->x = x;
    p->y = y;
}

static inline void lv_point_swap(lv_point_t * p1, lv_point_t * p2)
{
 8014da8:	b480      	push	{r7}
 8014daa:	b085      	sub	sp, #20
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
    lv_point_t tmp = *p1;
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	f107 0308 	add.w	r3, r7, #8
 8014db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dbc:	e883 0003 	stmia.w	r3, {r0, r1}
    *p1 = *p2;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	683a      	ldr	r2, [r7, #0]
 8014dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dc8:	e883 0003 	stmia.w	r3, {r0, r1}
    *p2 = tmp;
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	461a      	mov	r2, r3
 8014dd0:	f107 0308 	add.w	r3, r7, #8
 8014dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014dd8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8014ddc:	bf00      	nop
 8014dde:	3714      	adds	r7, #20
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr

08014de8 <lv_draw_sw_triangle>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_triangle(lv_draw_unit_t * draw_unit, const lv_draw_triangle_dsc_t * dsc)
{
 8014de8:	b5b0      	push	{r4, r5, r7, lr}
 8014dea:	b0da      	sub	sp, #360	@ 0x168
 8014dec:	af02      	add	r7, sp, #8
 8014dee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014df2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014df6:	6018      	str	r0, [r3, #0]
 8014df8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014dfc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e00:	6019      	str	r1, [r3, #0]
#if LV_DRAW_SW_COMPLEX
    lv_area_t tri_area;
    tri_area.x1 = (int32_t)LV_MIN3(dsc->p[0].x, dsc->p[1].x, dsc->p[2].x);
 8014e02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e06:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014e0e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e12:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014e1a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e1e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e26:	428b      	cmp	r3, r1
 8014e28:	bfa8      	it	ge
 8014e2a:	460b      	movge	r3, r1
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	bfa8      	it	ge
 8014e30:	4613      	movge	r3, r2
 8014e32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    tri_area.y1 = (int32_t)LV_MIN3(dsc->p[0].y, dsc->p[1].y, dsc->p[2].y);
 8014e36:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e3a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014e42:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e46:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014e4e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e52:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e5a:	428b      	cmp	r3, r1
 8014e5c:	bfa8      	it	ge
 8014e5e:	460b      	movge	r3, r1
 8014e60:	4293      	cmp	r3, r2
 8014e62:	bfa8      	it	ge
 8014e64:	4613      	movge	r3, r2
 8014e66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    tri_area.x2 = (int32_t)LV_MAX3(dsc->p[0].x, dsc->p[1].x, dsc->p[2].x);
 8014e6a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e6e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014e76:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e7a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014e82:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014e86:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e8e:	428b      	cmp	r3, r1
 8014e90:	bfb8      	it	lt
 8014e92:	460b      	movlt	r3, r1
 8014e94:	4293      	cmp	r3, r2
 8014e96:	bfb8      	it	lt
 8014e98:	4613      	movlt	r3, r2
 8014e9a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    tri_area.y2 = (int32_t)LV_MAX3(dsc->p[0].y, dsc->p[1].y, dsc->p[2].y);
 8014e9e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014ea2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014eaa:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014eae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014eb6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014eba:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ec2:	428b      	cmp	r3, r1
 8014ec4:	bfb8      	it	lt
 8014ec6:	460b      	movlt	r3, r1
 8014ec8:	4293      	cmp	r3, r2
 8014eca:	bfb8      	it	lt
 8014ecc:	4613      	movlt	r3, r2
 8014ece:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    bool is_common;
    lv_area_t draw_area;
    is_common = _lv_area_intersect(&draw_area, &tri_area, draw_unit->clip_area);
 8014ed2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014ed6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	689a      	ldr	r2, [r3, #8]
 8014ede:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8014ee2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f005 fc1c 	bl	801a724 <_lv_area_intersect>
 8014eec:	4603      	mov	r3, r0
 8014eee:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
    if(!is_common) return;
 8014ef2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8014ef6:	f083 0301 	eor.w	r3, r3, #1
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	f040 83bd 	bne.w	801567c <lv_draw_sw_triangle+0x894>

    lv_point_t p[3];
    /*If there is a vertical side use it as p[0] and p[1]*/
    if(dsc->p[0].x == dsc->p[1].x) {
 8014f02:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f06:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f0e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f12:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d142      	bne.n	8014fa4 <lv_draw_sw_triangle+0x1bc>
        p[0] = lv_point_from_precise(&dsc->p[0]);
 8014f1e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f22:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014f2c:	463b      	mov	r3, r7
 8014f2e:	4611      	mov	r1, r2
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7ff ff20 	bl	8014d76 <lv_point_from_precise>
 8014f36:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f3a:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8014f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f46:	e883 0003 	stmia.w	r3, {r0, r1}
        p[1] = lv_point_from_precise(&dsc->p[1]);
 8014f4a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f4e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014f58:	463b      	mov	r3, r7
 8014f5a:	4611      	mov	r1, r2
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7ff ff0a 	bl	8014d76 <lv_point_from_precise>
 8014f62:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f66:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8014f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f72:	e883 0003 	stmia.w	r3, {r0, r1}
        p[2] = lv_point_from_precise(&dsc->p[2]);
 8014f76:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f7a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8014f84:	463b      	mov	r3, r7
 8014f86:	4611      	mov	r1, r2
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7ff fef4 	bl	8014d76 <lv_point_from_precise>
 8014f8e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014f92:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8014f96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f9e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fa2:	e114      	b.n	80151ce <lv_draw_sw_triangle+0x3e6>
    }
    else if(dsc->p[0].x == dsc->p[2].x) {
 8014fa4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014fa8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fb0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014fb4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d142      	bne.n	8015046 <lv_draw_sw_triangle+0x25e>
        p[0] = lv_point_from_precise(&dsc->p[0]);
 8014fc0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014fc4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014fce:	463b      	mov	r3, r7
 8014fd0:	4611      	mov	r1, r2
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7ff fecf 	bl	8014d76 <lv_point_from_precise>
 8014fd8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014fdc:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8014fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8014fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fe8:	e883 0003 	stmia.w	r3, {r0, r1}
        p[1] = lv_point_from_precise(&dsc->p[2]);
 8014fec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8014ff0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8014ffa:	463b      	mov	r3, r7
 8014ffc:	4611      	mov	r1, r2
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7ff feb9 	bl	8014d76 <lv_point_from_precise>
 8015004:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015008:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 801500c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015014:	e883 0003 	stmia.w	r3, {r0, r1}
        p[2] = lv_point_from_precise(&dsc->p[1]);
 8015018:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801501c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015026:	463b      	mov	r3, r7
 8015028:	4611      	mov	r1, r2
 801502a:	4618      	mov	r0, r3
 801502c:	f7ff fea3 	bl	8014d76 <lv_point_from_precise>
 8015030:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015034:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8015038:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801503c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015040:	e883 0003 	stmia.w	r3, {r0, r1}
 8015044:	e0c3      	b.n	80151ce <lv_draw_sw_triangle+0x3e6>
    }
    else if(dsc->p[1].x == dsc->p[2].x) {
 8015046:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801504a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015052:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015056:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801505e:	429a      	cmp	r2, r3
 8015060:	d142      	bne.n	80150e8 <lv_draw_sw_triangle+0x300>
        p[0] = lv_point_from_precise(&dsc->p[1]);
 8015062:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015066:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015070:	463b      	mov	r3, r7
 8015072:	4611      	mov	r1, r2
 8015074:	4618      	mov	r0, r3
 8015076:	f7ff fe7e 	bl	8014d76 <lv_point_from_precise>
 801507a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801507e:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8015082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015086:	e892 0003 	ldmia.w	r2, {r0, r1}
 801508a:	e883 0003 	stmia.w	r3, {r0, r1}
        p[1] = lv_point_from_precise(&dsc->p[2]);
 801508e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015092:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801509c:	463b      	mov	r3, r7
 801509e:	4611      	mov	r1, r2
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7ff fe68 	bl	8014d76 <lv_point_from_precise>
 80150a6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80150aa:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 80150ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150b6:	e883 0003 	stmia.w	r3, {r0, r1}
        p[2] = lv_point_from_precise(&dsc->p[0]);
 80150ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80150be:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80150c8:	463b      	mov	r3, r7
 80150ca:	4611      	mov	r1, r2
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7ff fe52 	bl	8014d76 <lv_point_from_precise>
 80150d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80150d6:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 80150da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80150de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80150e6:	e072      	b.n	80151ce <lv_draw_sw_triangle+0x3e6>
    }
    else {
        p[0] = lv_point_from_precise(&dsc->p[0]);
 80150e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80150ec:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80150f6:	463b      	mov	r3, r7
 80150f8:	4611      	mov	r1, r2
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7ff fe3b 	bl	8014d76 <lv_point_from_precise>
 8015100:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015104:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8015108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801510c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015110:	e883 0003 	stmia.w	r3, {r0, r1}
        p[1] = lv_point_from_precise(&dsc->p[1]);
 8015114:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015118:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015122:	463b      	mov	r3, r7
 8015124:	4611      	mov	r1, r2
 8015126:	4618      	mov	r0, r3
 8015128:	f7ff fe25 	bl	8014d76 <lv_point_from_precise>
 801512c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015130:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8015134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015138:	e892 0003 	ldmia.w	r2, {r0, r1}
 801513c:	e883 0003 	stmia.w	r3, {r0, r1}
        p[2] = lv_point_from_precise(&dsc->p[2]);
 8015140:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015144:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801514e:	463b      	mov	r3, r7
 8015150:	4611      	mov	r1, r2
 8015152:	4618      	mov	r0, r3
 8015154:	f7ff fe0f 	bl	8014d76 <lv_point_from_precise>
 8015158:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801515c:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8015160:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8015164:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015168:	e883 0003 	stmia.w	r3, {r0, r1}

        /*Set the smallest y as p[0]*/
        if(p[0].y > p[1].y) lv_point_swap(&p[0], &p[1]);
 801516c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8015170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015174:	429a      	cmp	r2, r3
 8015176:	dd09      	ble.n	801518c <lv_draw_sw_triangle+0x3a4>
 8015178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801517c:	f103 0208 	add.w	r2, r3, #8
 8015180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8015184:	4611      	mov	r1, r2
 8015186:	4618      	mov	r0, r3
 8015188:	f7ff fe0e 	bl	8014da8 <lv_point_swap>
        if(p[0].y > p[2].y) lv_point_swap(&p[0], &p[2]);
 801518c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8015190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015194:	429a      	cmp	r2, r3
 8015196:	dd09      	ble.n	80151ac <lv_draw_sw_triangle+0x3c4>
 8015198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801519c:	f103 0210 	add.w	r2, r3, #16
 80151a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80151a4:	4611      	mov	r1, r2
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7ff fdfe 	bl	8014da8 <lv_point_swap>

        /*Set the greatest y as p[1]*/
        if(p[1].y < p[2].y) lv_point_swap(&p[1], &p[2]);
 80151ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80151b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151b4:	429a      	cmp	r2, r3
 80151b6:	da0a      	bge.n	80151ce <lv_draw_sw_triangle+0x3e6>
 80151b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80151bc:	f103 0210 	add.w	r2, r3, #16
 80151c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80151c4:	3308      	adds	r3, #8
 80151c6:	4611      	mov	r1, r2
 80151c8:	4618      	mov	r0, r3
 80151ca:	f7ff fded 	bl	8014da8 <lv_point_swap>
    }

    /*Be sure p[0] is on the top*/
    if(p[0].y > p[1].y) lv_point_swap(&p[0], &p[1]);
 80151ce:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80151d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80151d6:	429a      	cmp	r2, r3
 80151d8:	dd09      	ble.n	80151ee <lv_draw_sw_triangle+0x406>
 80151da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80151de:	f103 0208 	add.w	r2, r3, #8
 80151e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80151e6:	4611      	mov	r1, r2
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7ff fddd 	bl	8014da8 <lv_point_swap>

    /*If right == true p[2] is on the right side of the p[0] p[1] line*/
    bool right = ((p[1].x - p[0].x) * (p[2].y - p[0].y) - (p[1].y - p[0].y) * (p[2].x - p[0].x)) < 0;
 80151ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80151f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80151f6:	1ad3      	subs	r3, r2, r3
 80151f8:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80151fc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8015200:	1a8a      	subs	r2, r1, r2
 8015202:	fb03 f202 	mul.w	r2, r3, r2
 8015206:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 801520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801520e:	1acb      	subs	r3, r1, r3
 8015210:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8015214:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8015218:	1a41      	subs	r1, r0, r1
 801521a:	fb01 f303 	mul.w	r3, r1, r3
 801521e:	1ad3      	subs	r3, r2, r3
 8015220:	0fdb      	lsrs	r3, r3, #31
 8015222:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

    void * masks[4] = {0};
 8015226:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 801522a:	2200      	movs	r2, #0
 801522c:	601a      	str	r2, [r3, #0]
 801522e:	605a      	str	r2, [r3, #4]
 8015230:	609a      	str	r2, [r3, #8]
 8015232:	60da      	str	r2, [r3, #12]
    lv_draw_sw_mask_line_param_t mask_left;
    lv_draw_sw_mask_line_param_t mask_right;
    lv_draw_sw_mask_line_param_t mask_bottom;

    lv_draw_sw_mask_line_points_init(&mask_left, p[0].x, p[0].y,
 8015234:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8015238:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801523c:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 8015240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015244:	f897 0152 	ldrb.w	r0, [r7, #338]	@ 0x152
 8015248:	4605      	mov	r5, r0
 801524a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 801524e:	9501      	str	r5, [sp, #4]
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	4623      	mov	r3, r4
 8015254:	f7fc fa08 	bl	8011668 <lv_draw_sw_mask_line_points_init>
                                     p[1].x, p[1].y,
                                     right ? LV_DRAW_SW_MASK_LINE_SIDE_RIGHT : LV_DRAW_SW_MASK_LINE_SIDE_LEFT);

    lv_draw_sw_mask_line_points_init(&mask_right, p[0].x, p[0].y,
 8015258:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 801525c:	f8d7 410c 	ldr.w	r4, [r7, #268]	@ 0x10c
 8015260:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 8015264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
                                     p[2].x, p[2].y,
                                     right ? LV_DRAW_SW_MASK_LINE_SIDE_LEFT : LV_DRAW_SW_MASK_LINE_SIDE_RIGHT);
 8015268:	f897 2152 	ldrb.w	r2, [r7, #338]	@ 0x152
 801526c:	f082 0201 	eor.w	r2, r2, #1
 8015270:	b2d2      	uxtb	r2, r2
    lv_draw_sw_mask_line_points_init(&mask_right, p[0].x, p[0].y,
 8015272:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8015276:	9201      	str	r2, [sp, #4]
 8015278:	9300      	str	r3, [sp, #0]
 801527a:	462b      	mov	r3, r5
 801527c:	4622      	mov	r2, r4
 801527e:	f7fc f9f3 	bl	8011668 <lv_draw_sw_mask_line_points_init>

    if(p[1].y == p[2].y) {
 8015282:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8015286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801528a:	429a      	cmp	r2, r3
 801528c:	d110      	bne.n	80152b0 <lv_draw_sw_triangle+0x4c8>
        lv_draw_sw_mask_line_points_init(&mask_bottom, p[1].x, p[1].y,
 801528e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8015292:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8015296:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 801529a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801529e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80152a2:	2502      	movs	r5, #2
 80152a4:	9501      	str	r5, [sp, #4]
 80152a6:	9300      	str	r3, [sp, #0]
 80152a8:	4623      	mov	r3, r4
 80152aa:	f7fc f9dd 	bl	8011668 <lv_draw_sw_mask_line_points_init>
 80152ae:	e014      	b.n	80152da <lv_draw_sw_triangle+0x4f2>
                                         p[2].x, p[2].y, LV_DRAW_SW_MASK_LINE_SIDE_TOP);
    }
    else {
        lv_draw_sw_mask_line_points_init(&mask_bottom, p[1].x, p[1].y,
 80152b0:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80152b4:	f8d7 4114 	ldr.w	r4, [r7, #276]	@ 0x114
 80152b8:	f8d7 5118 	ldr.w	r5, [r7, #280]	@ 0x118
 80152bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
                                         p[2].x, p[2].y,
                                         right ? LV_DRAW_SW_MASK_LINE_SIDE_LEFT  : LV_DRAW_SW_MASK_LINE_SIDE_RIGHT);
 80152c0:	f897 2152 	ldrb.w	r2, [r7, #338]	@ 0x152
 80152c4:	f082 0201 	eor.w	r2, r2, #1
 80152c8:	b2d2      	uxtb	r2, r2
        lv_draw_sw_mask_line_points_init(&mask_bottom, p[1].x, p[1].y,
 80152ca:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80152ce:	9201      	str	r2, [sp, #4]
 80152d0:	9300      	str	r3, [sp, #0]
 80152d2:	462b      	mov	r3, r5
 80152d4:	4622      	mov	r2, r4
 80152d6:	f7fc f9c7 	bl	8011668 <lv_draw_sw_mask_line_points_init>
    }

    masks[0] = &mask_left;
 80152da:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80152de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    masks[1] = &mask_right;
 80152e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80152e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    masks[2] = &mask_bottom;
 80152ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80152ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int32_t area_w = lv_area_get_width(&draw_area);
 80152f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7ff fd1d 	bl	8014d36 <lv_area_get_width>
 80152fc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
    lv_opa_t * mask_buf = lv_malloc(area_w);
 8015300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015304:	4618      	mov	r0, r3
 8015306:	f008 fec7 	bl	801e098 <lv_malloc>
 801530a:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148

    lv_area_t blend_area = draw_area;
 801530e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015312:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015316:	461c      	mov	r4, r3
 8015318:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801531c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801531e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    blend_area.y2 = blend_area.y1;
 8015322:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015326:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015330:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015334:	60da      	str	r2, [r3, #12]
    lv_draw_sw_blend_dsc_t blend_dsc;
    blend_dsc.color = dsc->bg_color;
 8015336:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801533a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801533e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8015342:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8015346:	6812      	ldr	r2, [r2, #0]
 8015348:	3315      	adds	r3, #21
 801534a:	321d      	adds	r2, #29
 801534c:	8811      	ldrh	r1, [r2, #0]
 801534e:	7892      	ldrb	r2, [r2, #2]
 8015350:	8019      	strh	r1, [r3, #0]
 8015352:	709a      	strb	r2, [r3, #2]
    blend_dsc.opa = dsc->bg_opa;
 8015354:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015358:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	7f1a      	ldrb	r2, [r3, #28]
 8015360:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015364:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015368:	751a      	strb	r2, [r3, #20]
    blend_dsc.mask_buf = mask_buf;
 801536a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801536e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015372:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8015376:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_area = &blend_area;
 8015378:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801537c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015380:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8015384:	601a      	str	r2, [r3, #0]
    blend_dsc.mask_area = &blend_area;
 8015386:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801538a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801538e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8015392:	621a      	str	r2, [r3, #32]
    blend_dsc.blend_mode = LV_BLEND_MODE_NORMAL;
 8015394:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015398:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801539c:	2200      	movs	r2, #0
 801539e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    blend_dsc.src_buf = NULL;
 80153a2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80153a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80153aa:	2200      	movs	r2, #0
 80153ac:	605a      	str	r2, [r3, #4]

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 80153ae:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80153b2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80153bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147

    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, lv_area_get_width(&tri_area), lv_area_get_height(&tri_area));
 80153c6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80153ca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	f103 0420 	add.w	r4, r3, #32
 80153d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153d8:	4618      	mov	r0, r3
 80153da:	f7ff fcac 	bl	8014d36 <lv_area_get_width>
 80153de:	4605      	mov	r5, r0
 80153e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7ff fcb6 	bl	8014d56 <lv_area_get_height>
 80153ea:	4603      	mov	r3, r0
 80153ec:	461a      	mov	r2, r3
 80153ee:	4629      	mov	r1, r5
 80153f0:	4620      	mov	r0, r4
 80153f2:	f7fa f906 	bl	800f602 <lv_gradient_get>
 80153f6:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
    lv_opa_t * grad_opa_map = NULL;
 80153fa:	2300      	movs	r3, #0
 80153fc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 8015400:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8015404:	2b00      	cmp	r3, #0
 8015406:	d02e      	beq.n	8015466 <lv_draw_sw_triangle+0x67e>
 8015408:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801540c:	2b02      	cmp	r3, #2
 801540e:	d12a      	bne.n	8015466 <lv_draw_sw_triangle+0x67e>
        blend_dsc.src_area = &blend_area;
 8015410:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015414:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015418:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801541c:	611a      	str	r2, [r3, #16]
        blend_dsc.src_buf = grad->color_map + draw_area.x1 - tri_area.x1;
 801541e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8015422:	6819      	ldr	r1, [r3, #0]
 8015424:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015428:	461a      	mov	r2, r3
 801542a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801542e:	1ad2      	subs	r2, r2, r3
 8015430:	4613      	mov	r3, r2
 8015432:	005b      	lsls	r3, r3, #1
 8015434:	4413      	add	r3, r2
 8015436:	18ca      	adds	r2, r1, r3
 8015438:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801543c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015440:	605a      	str	r2, [r3, #4]
        grad_opa_map = grad->opa_map + draw_area.x1 - tri_area.x1;
 8015442:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801544c:	4619      	mov	r1, r3
 801544e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015452:	1acb      	subs	r3, r1, r3
 8015454:	4413      	add	r3, r2
 8015456:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        blend_dsc.src_color_format = LV_COLOR_FORMAT_RGB888;
 801545a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801545e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015462:	220f      	movs	r2, #15
 8015464:	731a      	strb	r2, [r3, #12]
    }

    int32_t y;
    for(y = draw_area.y1; y <= draw_area.y2; y++) {
 8015466:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801546a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801546e:	e0e2      	b.n	8015636 <lv_draw_sw_triangle+0x84e>
        blend_area.y1 = y;
 8015470:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015474:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015478:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801547c:	605a      	str	r2, [r3, #4]
        blend_area.y2 = y;
 801547e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015482:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015486:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801548a:	60da      	str	r2, [r3, #12]
        lv_memset(mask_buf, 0xff, area_w);
 801548c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015490:	461a      	mov	r2, r3
 8015492:	21ff      	movs	r1, #255	@ 0xff
 8015494:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8015498:	f007 fe61 	bl	801d15e <lv_memset>
        blend_dsc.mask_res = lv_draw_sw_mask_apply(masks, mask_buf, draw_area.x1, y, area_w);
 801549c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80154a0:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 80154a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80154a8:	9300      	str	r3, [sp, #0]
 80154aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80154ae:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 80154b2:	f7fc f865 	bl	8011580 <lv_draw_sw_mask_apply>
 80154b6:	4603      	mov	r3, r0
 80154b8:	461a      	mov	r2, r3
 80154ba:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80154be:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80154c2:	771a      	strb	r2, [r3, #28]
        if(grad_dir == LV_GRAD_DIR_VER) {
 80154c4:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 80154c8:	2b01      	cmp	r3, #1
 80154ca:	d142      	bne.n	8015552 <lv_draw_sw_triangle+0x76a>
            blend_dsc.color = grad->color_map[y - tri_area.y1];
 80154cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80154d6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80154da:	1acb      	subs	r3, r1, r3
 80154dc:	4619      	mov	r1, r3
 80154de:	460b      	mov	r3, r1
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	440b      	add	r3, r1
 80154e4:	441a      	add	r2, r3
 80154e6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80154ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80154ee:	3315      	adds	r3, #21
 80154f0:	8811      	ldrh	r1, [r2, #0]
 80154f2:	7892      	ldrb	r2, [r2, #2]
 80154f4:	8019      	strh	r1, [r3, #0]
 80154f6:	709a      	strb	r2, [r3, #2]
            blend_dsc.opa = grad->opa_map[y - tri_area.y1];
 80154f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015502:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8015506:	1a8a      	subs	r2, r1, r2
 8015508:	4413      	add	r3, r2
 801550a:	781a      	ldrb	r2, [r3, #0]
 801550c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015510:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015514:	751a      	strb	r2, [r3, #20]
            if(dsc->bg_opa < LV_OPA_MAX) blend_dsc.opa = LV_OPA_MIX2(blend_dsc.opa, dsc->bg_opa);
 8015516:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801551a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	7f1b      	ldrb	r3, [r3, #28]
 8015522:	2bfc      	cmp	r3, #252	@ 0xfc
 8015524:	d876      	bhi.n	8015614 <lv_draw_sw_triangle+0x82c>
 8015526:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801552a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801552e:	7d1b      	ldrb	r3, [r3, #20]
 8015530:	461a      	mov	r2, r3
 8015532:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015536:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	7f1b      	ldrb	r3, [r3, #28]
 801553e:	fb02 f303 	mul.w	r3, r2, r3
 8015542:	121b      	asrs	r3, r3, #8
 8015544:	b2da      	uxtb	r2, r3
 8015546:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801554a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801554e:	751a      	strb	r2, [r3, #20]
 8015550:	e060      	b.n	8015614 <lv_draw_sw_triangle+0x82c>
        }
        else if(grad_dir == LV_GRAD_DIR_HOR) {
 8015552:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8015556:	2b02      	cmp	r3, #2
 8015558:	d15c      	bne.n	8015614 <lv_draw_sw_triangle+0x82c>
            if(grad_opa_map) {
 801555a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 801555e:	2b00      	cmp	r3, #0
 8015560:	d058      	beq.n	8015614 <lv_draw_sw_triangle+0x82c>
                int32_t i;
                if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_CHANGED) {
 8015562:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015566:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801556a:	7f1b      	ldrb	r3, [r3, #28]
 801556c:	2b02      	cmp	r3, #2
 801556e:	d135      	bne.n	80155dc <lv_draw_sw_triangle+0x7f4>
                    blend_dsc.mask_buf = mask_buf;
 8015570:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015574:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015578:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801557c:	619a      	str	r2, [r3, #24]
                    for(i = 0; i < area_w; i++) {
 801557e:	2300      	movs	r3, #0
 8015580:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8015584:	e023      	b.n	80155ce <lv_draw_sw_triangle+0x7e6>
                        if(grad_opa_map[i] < LV_OPA_MAX) mask_buf[i] = LV_OPA_MIX2(mask_buf[i], grad_opa_map[i]);
 8015586:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801558a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 801558e:	4413      	add	r3, r2
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	2bfc      	cmp	r3, #252	@ 0xfc
 8015594:	d816      	bhi.n	80155c4 <lv_draw_sw_triangle+0x7dc>
 8015596:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801559a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801559e:	4413      	add	r3, r2
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	4619      	mov	r1, r3
 80155a4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80155a8:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80155ac:	4413      	add	r3, r2
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	fb01 f303 	mul.w	r3, r1, r3
 80155b4:	1219      	asrs	r1, r3, #8
 80155b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80155ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80155be:	4413      	add	r3, r2
 80155c0:	b2ca      	uxtb	r2, r1
 80155c2:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < area_w; i++) {
 80155c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80155c8:	3301      	adds	r3, #1
 80155ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80155ce:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80155d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80155d6:	429a      	cmp	r2, r3
 80155d8:	dbd5      	blt.n	8015586 <lv_draw_sw_triangle+0x79e>
 80155da:	e01b      	b.n	8015614 <lv_draw_sw_triangle+0x82c>
                    }
                }
                else if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_FULL_COVER) {
 80155dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80155e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80155e4:	7f1b      	ldrb	r3, [r3, #28]
 80155e6:	2b01      	cmp	r3, #1
 80155e8:	d10d      	bne.n	8015606 <lv_draw_sw_triangle+0x81e>
                    blend_dsc.mask_buf = grad_opa_map;
 80155ea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80155ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80155f2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80155f6:	619a      	str	r2, [r3, #24]
                    blend_dsc.mask_res = LV_DRAW_SW_MASK_RES_CHANGED;
 80155f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80155fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015600:	2202      	movs	r2, #2
 8015602:	771a      	strb	r2, [r3, #28]
 8015604:	e006      	b.n	8015614 <lv_draw_sw_triangle+0x82c>
                }
                else if(blend_dsc.mask_res == LV_DRAW_SW_MASK_RES_TRANSP) {
 8015606:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801560a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801560e:	7f1b      	ldrb	r3, [r3, #28]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d00a      	beq.n	801562a <lv_draw_sw_triangle+0x842>
                    continue;
                }
            }
        }
        lv_draw_sw_blend(draw_unit, &blend_dsc);
 8015614:	f107 0214 	add.w	r2, r7, #20
 8015618:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801561c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8015620:	4611      	mov	r1, r2
 8015622:	6818      	ldr	r0, [r3, #0]
 8015624:	f7f2 fb80 	bl	8007d28 <lv_draw_sw_blend>
 8015628:	e000      	b.n	801562c <lv_draw_sw_triangle+0x844>
                    continue;
 801562a:	bf00      	nop
    for(y = draw_area.y1; y <= draw_area.y2; y++) {
 801562c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8015630:	3301      	adds	r3, #1
 8015632:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8015636:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801563a:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801563e:	429a      	cmp	r2, r3
 8015640:	f77f af16 	ble.w	8015470 <lv_draw_sw_triangle+0x688>
    }

    lv_free(mask_buf);
 8015644:	f8d7 0148 	ldr.w	r0, [r7, #328]	@ 0x148
 8015648:	f008 fd5e 	bl	801e108 <lv_free>
    lv_draw_sw_mask_free_param(&mask_bottom);
 801564c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015650:	4618      	mov	r0, r3
 8015652:	f7fb ffd7 	bl	8011604 <lv_draw_sw_mask_free_param>
    lv_draw_sw_mask_free_param(&mask_left);
 8015656:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801565a:	4618      	mov	r0, r3
 801565c:	f7fb ffd2 	bl	8011604 <lv_draw_sw_mask_free_param>
    lv_draw_sw_mask_free_param(&mask_right);
 8015660:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8015664:	4618      	mov	r0, r3
 8015666:	f7fb ffcd 	bl	8011604 <lv_draw_sw_mask_free_param>

    if(grad) {
 801566a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801566e:	2b00      	cmp	r3, #0
 8015670:	d005      	beq.n	801567e <lv_draw_sw_triangle+0x896>
        lv_gradient_cleanup(grad);
 8015672:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8015676:	f7fa f947 	bl	800f908 <lv_gradient_cleanup>
 801567a:	e000      	b.n	801567e <lv_draw_sw_triangle+0x896>
    if(!is_common) return;
 801567c:	bf00      	nop
#else
    LV_UNUSED(draw_unit);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw triangles with LV_DRAW_SW_COMPLEX == 0");
#endif /*LV_DRAW_SW_COMPLEX*/
}
 801567e:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8015682:	46bd      	mov	sp, r7
 8015684:	bdb0      	pop	{r4, r5, r7, pc}

08015686 <_lv_text_is_marker>:
 *
 * @param letter a letter
 * @return true if so
 */
static inline bool _lv_text_is_marker(uint32_t letter)
{
 8015686:	b480      	push	{r7}
 8015688:	b083      	sub	sp, #12
 801568a:	af00      	add	r7, sp, #0
 801568c:	6078      	str	r0, [r7, #4]
    if(letter < 0x20) return true;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b1f      	cmp	r3, #31
 8015692:	d801      	bhi.n	8015698 <_lv_text_is_marker+0x12>
 8015694:	2301      	movs	r3, #1
 8015696:	e052      	b.n	801573e <_lv_text_is_marker+0xb8>

    /*U+061C ARABIC LETTER MARK, see https://www.compart.com/en/unicode/block/U+0600*/
    if(letter == 0x061C) return true;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f240 621c 	movw	r2, #1564	@ 0x61c
 801569e:	4293      	cmp	r3, r2
 80156a0:	d101      	bne.n	80156a6 <_lv_text_is_marker+0x20>
 80156a2:	2301      	movs	r3, #1
 80156a4:	e04b      	b.n	801573e <_lv_text_is_marker+0xb8>

    /*U+115F HANGUL CHOSEONG FILLER, See https://www.compart.com/en/unicode/block/U+1100*/
    if(letter == 0x115F) return true;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f241 125f 	movw	r2, #4447	@ 0x115f
 80156ac:	4293      	cmp	r3, r2
 80156ae:	d101      	bne.n	80156b4 <_lv_text_is_marker+0x2e>
 80156b0:	2301      	movs	r3, #1
 80156b2:	e044      	b.n	801573e <_lv_text_is_marker+0xb8>
    /*U+1160 HANGUL JUNGSEONG FILLER*/
    if(letter == 0x1160) return true;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f5b3 5f8b 	cmp.w	r3, #4448	@ 0x1160
 80156ba:	d101      	bne.n	80156c0 <_lv_text_is_marker+0x3a>
 80156bc:	2301      	movs	r3, #1
 80156be:	e03e      	b.n	801573e <_lv_text_is_marker+0xb8>

    /*See https://www.compart.com/en/unicode/block/U+1800*/
    if(letter >= 0x180B && letter <= 0x180E) return true;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f641 020a 	movw	r2, #6154	@ 0x180a
 80156c6:	4293      	cmp	r3, r2
 80156c8:	d906      	bls.n	80156d8 <_lv_text_is_marker+0x52>
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f641 020e 	movw	r2, #6158	@ 0x180e
 80156d0:	4293      	cmp	r3, r2
 80156d2:	d801      	bhi.n	80156d8 <_lv_text_is_marker+0x52>
 80156d4:	2301      	movs	r3, #1
 80156d6:	e032      	b.n	801573e <_lv_text_is_marker+0xb8>

    /*See https://www.compart.com/en/unicode/block/U+2000*/
    if(letter >= 0x200B && letter <= 0x200F) return true;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f242 020a 	movw	r2, #8202	@ 0x200a
 80156de:	4293      	cmp	r3, r2
 80156e0:	d906      	bls.n	80156f0 <_lv_text_is_marker+0x6a>
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f242 020f 	movw	r2, #8207	@ 0x200f
 80156e8:	4293      	cmp	r3, r2
 80156ea:	d801      	bhi.n	80156f0 <_lv_text_is_marker+0x6a>
 80156ec:	2301      	movs	r3, #1
 80156ee:	e026      	b.n	801573e <_lv_text_is_marker+0xb8>
    if(letter >= 0x2028 && letter <= 0x202F) return true;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f242 0227 	movw	r2, #8231	@ 0x2027
 80156f6:	4293      	cmp	r3, r2
 80156f8:	d906      	bls.n	8015708 <_lv_text_is_marker+0x82>
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f242 022f 	movw	r2, #8239	@ 0x202f
 8015700:	4293      	cmp	r3, r2
 8015702:	d801      	bhi.n	8015708 <_lv_text_is_marker+0x82>
 8015704:	2301      	movs	r3, #1
 8015706:	e01a      	b.n	801573e <_lv_text_is_marker+0xb8>
    if(letter >= 0x205F && letter <= 0x206F) return true;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f242 025e 	movw	r2, #8286	@ 0x205e
 801570e:	4293      	cmp	r3, r2
 8015710:	d906      	bls.n	8015720 <_lv_text_is_marker+0x9a>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f242 026f 	movw	r2, #8303	@ 0x206f
 8015718:	4293      	cmp	r3, r2
 801571a:	d801      	bhi.n	8015720 <_lv_text_is_marker+0x9a>
 801571c:	2301      	movs	r3, #1
 801571e:	e00e      	b.n	801573e <_lv_text_is_marker+0xb8>

    /*U+FEFF ZERO WIDTH NO-BREAK SPACE, see https://www.compart.com/en/unicode/block/U+FE70*/
    if(letter == 0xFEFF) return true;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015726:	4293      	cmp	r3, r2
 8015728:	d101      	bne.n	801572e <_lv_text_is_marker+0xa8>
 801572a:	2301      	movs	r3, #1
 801572c:	e007      	b.n	801573e <_lv_text_is_marker+0xb8>

    if(letter == 0xF8FF) return true; /*LV_SYMBOL_DUMMY*/
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f64f 02ff 	movw	r2, #63743	@ 0xf8ff
 8015734:	4293      	cmp	r3, r2
 8015736:	d101      	bne.n	801573c <_lv_text_is_marker+0xb6>
 8015738:	2301      	movs	r3, #1
 801573a:	e000      	b.n	801573e <_lv_text_is_marker+0xb8>

    return false;
 801573c:	2300      	movs	r3, #0
}
 801573e:	4618      	mov	r0, r3
 8015740:	370c      	adds	r7, #12
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr

0801574a <lv_font_get_glyph_bitmap>:
 *   GLOBAL FUNCTIONS
 **********************/

const void * lv_font_get_glyph_bitmap(lv_font_glyph_dsc_t * g_dsc, uint32_t letter,
                                      lv_draw_buf_t * draw_buf)
{
 801574a:	b580      	push	{r7, lr}
 801574c:	b086      	sub	sp, #24
 801574e:	af00      	add	r7, sp, #0
 8015750:	60f8      	str	r0, [r7, #12]
 8015752:	60b9      	str	r1, [r7, #8]
 8015754:	607a      	str	r2, [r7, #4]
    const lv_font_t * font_p = g_dsc->resolved_font;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	617b      	str	r3, [r7, #20]
    LV_ASSERT_NULL(font_p);
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <lv_font_get_glyph_bitmap+0x1c>
 8015762:	bf00      	nop
 8015764:	e7fd      	b.n	8015762 <lv_font_get_glyph_bitmap+0x18>
    return font_p->get_glyph_bitmap(g_dsc, letter, draw_buf);
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	68b9      	ldr	r1, [r7, #8]
 801576e:	68f8      	ldr	r0, [r7, #12]
 8015770:	4798      	blx	r3
 8015772:	4603      	mov	r3, r0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3718      	adds	r7, #24
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <lv_font_get_glyph_dsc>:

bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801577c:	b590      	push	{r4, r7, lr}
 801577e:	b089      	sub	sp, #36	@ 0x24
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
 8015788:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <lv_font_get_glyph_dsc+0x18>
 8015790:	bf00      	nop
 8015792:	e7fd      	b.n	8015790 <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d101      	bne.n	801579e <lv_font_get_glyph_dsc+0x22>
 801579a:	bf00      	nop
 801579c:	e7fd      	b.n	801579a <lv_font_get_glyph_dsc+0x1e>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 801579e:	2300      	movs	r3, #0
 80157a0:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	2200      	movs	r2, #0
 80157aa:	601a      	str	r2, [r3, #0]

    while(f) {
 80157ac:	e028      	b.n	8015800 <lv_font_get_glyph_dsc+0x84>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, f->kerning == LV_FONT_KERNING_NONE ? 0 : letter_next);
 80157ae:	69bb      	ldr	r3, [r7, #24]
 80157b0:	681c      	ldr	r4, [r3, #0]
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	7d1b      	ldrb	r3, [r3, #20]
 80157b6:	f003 0304 	and.w	r3, r3, #4
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d101      	bne.n	80157c4 <lv_font_get_glyph_dsc+0x48>
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	e000      	b.n	80157c6 <lv_font_get_glyph_dsc+0x4a>
 80157c4:	2300      	movs	r3, #0
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	68b9      	ldr	r1, [r7, #8]
 80157ca:	69b8      	ldr	r0, [r7, #24]
 80157cc:	47a0      	blx	r4
 80157ce:	4603      	mov	r3, r0
 80157d0:	75fb      	strb	r3, [r7, #23]
        if(found) {
 80157d2:	7dfb      	ldrb	r3, [r7, #23]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d010      	beq.n	80157fa <lv_font_get_glyph_dsc+0x7e>
            if(!dsc_out->is_placeholder) {
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	7bdb      	ldrb	r3, [r3, #15]
 80157dc:	f003 0301 	and.w	r3, r3, #1
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d104      	bne.n	80157f0 <lv_font_get_glyph_dsc+0x74>
                dsc_out->resolved_font = f;
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	69ba      	ldr	r2, [r7, #24]
 80157ea:	601a      	str	r2, [r3, #0]
                return true;
 80157ec:	2301      	movs	r3, #1
 80157ee:	e047      	b.n	8015880 <lv_font_get_glyph_dsc+0x104>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 80157f0:	69fb      	ldr	r3, [r7, #28]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d101      	bne.n	80157fa <lv_font_get_glyph_dsc+0x7e>
                placeholder_font = f;
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	69db      	ldr	r3, [r3, #28]
 80157fe:	61bb      	str	r3, [r7, #24]
    while(f) {
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d1d3      	bne.n	80157ae <lv_font_get_glyph_dsc+0x32>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d014      	beq.n	8015836 <lv_font_get_glyph_dsc+0xba>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter,
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	681c      	ldr	r4, [r3, #0]
                                        placeholder_font->kerning == LV_FONT_KERNING_NONE ? 0 : letter_next);
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	7d1b      	ldrb	r3, [r3, #20]
 8015814:	f003 0304 	and.w	r3, r3, #4
 8015818:	b2db      	uxtb	r3, r3
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter,
 801581a:	2b00      	cmp	r3, #0
 801581c:	d101      	bne.n	8015822 <lv_font_get_glyph_dsc+0xa6>
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	e000      	b.n	8015824 <lv_font_get_glyph_dsc+0xa8>
 8015822:	2300      	movs	r3, #0
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	68b9      	ldr	r1, [r7, #8]
 8015828:	69f8      	ldr	r0, [r7, #28]
 801582a:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	69fa      	ldr	r2, [r7, #28]
 8015830:	601a      	str	r2, [r3, #0]
        return true;
 8015832:	2301      	movs	r3, #1
 8015834:	e024      	b.n	8015880 <lv_font_get_glyph_dsc+0x104>
    }
#endif

#if LV_USE_FONT_PLACEHOLDER
    dsc_out->box_w = font_p->line_height / 2;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	0fda      	lsrs	r2, r3, #31
 801583c:	4413      	add	r3, r2
 801583e:	105b      	asrs	r3, r3, #1
 8015840:	b29a      	uxth	r2, r3
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	80da      	strh	r2, [r3, #6]
    dsc_out->adv_w = dsc_out->box_w + 2;
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	88db      	ldrh	r3, [r3, #6]
 801584a:	3302      	adds	r3, #2
 801584c:	b29a      	uxth	r2, r3
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	809a      	strh	r2, [r3, #4]
#else
    dsc_out->box_w = 0;
    dsc_out->adv_w = 0;
#endif

    dsc_out->resolved_font = NULL;
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	2200      	movs	r2, #0
 8015856:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	68db      	ldr	r3, [r3, #12]
 801585c:	b29a      	uxth	r2, r3
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	2200      	movs	r2, #0
 8015866:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	2200      	movs	r2, #0
 801586c:	819a      	strh	r2, [r3, #12]
    dsc_out->format = LV_FONT_GLYPH_FORMAT_A1;
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	2201      	movs	r2, #1
 8015872:	739a      	strb	r2, [r3, #14]
    dsc_out->is_placeholder = true;
 8015874:	68ba      	ldr	r2, [r7, #8]
 8015876:	7bd3      	ldrb	r3, [r2, #15]
 8015878:	f043 0301 	orr.w	r3, r3, #1
 801587c:	73d3      	strb	r3, [r2, #15]

    return false;
 801587e:	2300      	movs	r3, #0
}
 8015880:	4618      	mov	r0, r3
 8015882:	3724      	adds	r7, #36	@ 0x24
 8015884:	46bd      	mov	sp, r7
 8015886:	bd90      	pop	{r4, r7, pc}

08015888 <lv_font_get_glyph_width>:

uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b08a      	sub	sp, #40	@ 0x28
 801588c:	af00      	add	r7, sp, #0
 801588e:	60f8      	str	r0, [r7, #12]
 8015890:	60b9      	str	r1, [r7, #8]
 8015892:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d101      	bne.n	801589e <lv_font_get_glyph_width+0x16>
 801589a:	bf00      	nop
 801589c:	e7fd      	b.n	801589a <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;

    /*Return zero if letter is marker*/
    if(_lv_text_is_marker(letter)) return 0;
 801589e:	68b8      	ldr	r0, [r7, #8]
 80158a0:	f7ff fef1 	bl	8015686 <_lv_text_is_marker>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <lv_font_get_glyph_width+0x26>
 80158aa:	2300      	movs	r3, #0
 80158ac:	e007      	b.n	80158be <lv_font_get_glyph_width+0x36>

    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80158ae:	f107 0110 	add.w	r1, r7, #16
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	68ba      	ldr	r2, [r7, #8]
 80158b6:	68f8      	ldr	r0, [r7, #12]
 80158b8:	f7ff ff60 	bl	801577c <lv_font_get_glyph_dsc>
    return g.adv_w;
 80158bc:	8abb      	ldrh	r3, [r7, #20]
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3728      	adds	r7, #40	@ 0x28
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
	...

080158c8 <lv_font_get_bitmap_fmt_txt>:
 *   GLOBAL FUNCTIONS
 **********************/

const void * lv_font_get_bitmap_fmt_txt(lv_font_glyph_dsc_t * g_dsc, uint32_t unicode_letter,
                                        lv_draw_buf_t * draw_buf)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b090      	sub	sp, #64	@ 0x40
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	60f8      	str	r0, [r7, #12]
 80158d0:	60b9      	str	r1, [r7, #8]
 80158d2:	607a      	str	r2, [r7, #4]
    const lv_font_t * font = g_dsc->resolved_font;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t * bitmap_out = draw_buf->data;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	627b      	str	r3, [r7, #36]	@ 0x24

    if(unicode_letter == '\t') unicode_letter = ' ';
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	2b09      	cmp	r3, #9
 80158e4:	d101      	bne.n	80158ea <lv_font_get_bitmap_fmt_txt+0x22>
 80158e6:	2320      	movs	r3, #32
 80158e8:	60bb      	str	r3, [r7, #8]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80158ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ec:	699b      	ldr	r3, [r3, #24]
 80158ee:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80158f0:	68b9      	ldr	r1, [r7, #8]
 80158f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158f4:	f000 fa44 	bl	8015d80 <get_glyph_dsc_id>
 80158f8:	61f8      	str	r0, [r7, #28]
    if(!gid) return NULL;
 80158fa:	69fb      	ldr	r3, [r7, #28]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d101      	bne.n	8015904 <lv_font_get_bitmap_fmt_txt+0x3c>
 8015900:	2300      	movs	r3, #0
 8015902:	e1a2      	b.n	8015c4a <lv_font_get_bitmap_fmt_txt+0x382>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8015904:	6a3b      	ldr	r3, [r7, #32]
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	69fb      	ldr	r3, [r7, #28]
 801590a:	00db      	lsls	r3, r3, #3
 801590c:	4413      	add	r3, r2
 801590e:	61bb      	str	r3, [r7, #24]

    int32_t gsize = (int32_t) gdsc->box_w * gdsc->box_h;
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	791b      	ldrb	r3, [r3, #4]
 8015914:	461a      	mov	r2, r3
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	795b      	ldrb	r3, [r3, #5]
 801591a:	fb02 f303 	mul.w	r3, r2, r3
 801591e:	617b      	str	r3, [r7, #20]
    if(gsize == 0) return NULL;
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d101      	bne.n	801592a <lv_font_get_bitmap_fmt_txt+0x62>
 8015926:	2300      	movs	r3, #0
 8015928:	e18f      	b.n	8015c4a <lv_font_get_bitmap_fmt_txt+0x382>

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 801592a:	6a3b      	ldr	r3, [r7, #32]
 801592c:	7cdb      	ldrb	r3, [r3, #19]
 801592e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8015932:	b2db      	uxtb	r3, r3
 8015934:	2b00      	cmp	r3, #0
 8015936:	f040 8187 	bne.w	8015c48 <lv_font_get_bitmap_fmt_txt+0x380>
        const uint8_t * bitmap_in = &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801593a:	6a3b      	ldr	r3, [r7, #32]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	69ba      	ldr	r2, [r7, #24]
 8015940:	6812      	ldr	r2, [r2, #0]
 8015942:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015946:	4413      	add	r3, r2
 8015948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t * bitmap_out_tmp = bitmap_out;
 801594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801594c:	63bb      	str	r3, [r7, #56]	@ 0x38
        int32_t i = 0;
 801594e:	2300      	movs	r3, #0
 8015950:	637b      	str	r3, [r7, #52]	@ 0x34
        int32_t x, y;
        uint32_t stride = lv_draw_buf_width_to_stride(gdsc->box_w, LV_COLOR_FORMAT_A8);
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	791b      	ldrb	r3, [r3, #4]
 8015956:	210e      	movs	r1, #14
 8015958:	4618      	mov	r0, r3
 801595a:	f7f0 f94d 	bl	8005bf8 <lv_draw_buf_width_to_stride>
 801595e:	6138      	str	r0, [r7, #16]

        if(fdsc->bpp == 1) {
 8015960:	6a3b      	ldr	r3, [r7, #32]
 8015962:	7cdb      	ldrb	r3, [r3, #19]
 8015964:	f003 031e 	and.w	r3, r3, #30
 8015968:	b2db      	uxtb	r3, r3
 801596a:	2b02      	cmp	r3, #2
 801596c:	f040 80b7 	bne.w	8015ade <lv_font_get_bitmap_fmt_txt+0x216>
            for(y = 0; y < gdsc->box_h; y ++) {
 8015970:	2300      	movs	r3, #0
 8015972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015974:	e0ab      	b.n	8015ace <lv_font_get_bitmap_fmt_txt+0x206>
                for(x = 0; x < gdsc->box_w; x++, i++) {
 8015976:	2300      	movs	r3, #0
 8015978:	633b      	str	r3, [r7, #48]	@ 0x30
 801597a:	e09a      	b.n	8015ab2 <lv_font_get_bitmap_fmt_txt+0x1ea>
                    i = i & 0x7;
 801597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801597e:	f003 0307 	and.w	r3, r3, #7
 8015982:	637b      	str	r3, [r7, #52]	@ 0x34
                    if(i == 0) bitmap_out_tmp[x] = (*bitmap_in) & 0x80 ? 0xff : 0x00;
 8015984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015986:	2b00      	cmp	r3, #0
 8015988:	d10d      	bne.n	80159a6 <lv_font_get_bitmap_fmt_txt+0xde>
 801598a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	b25b      	sxtb	r3, r3
 8015990:	2b00      	cmp	r3, #0
 8015992:	da01      	bge.n	8015998 <lv_font_get_bitmap_fmt_txt+0xd0>
 8015994:	21ff      	movs	r1, #255	@ 0xff
 8015996:	e000      	b.n	801599a <lv_font_get_bitmap_fmt_txt+0xd2>
 8015998:	2100      	movs	r1, #0
 801599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801599c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801599e:	4413      	add	r3, r2
 80159a0:	460a      	mov	r2, r1
 80159a2:	701a      	strb	r2, [r3, #0]
 80159a4:	e07f      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 1) bitmap_out_tmp[x] = (*bitmap_in) & 0x40 ? 0xff : 0x00;
 80159a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159a8:	2b01      	cmp	r3, #1
 80159aa:	d10e      	bne.n	80159ca <lv_font_get_bitmap_fmt_txt+0x102>
 80159ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159ae:	781b      	ldrb	r3, [r3, #0]
 80159b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d001      	beq.n	80159bc <lv_font_get_bitmap_fmt_txt+0xf4>
 80159b8:	21ff      	movs	r1, #255	@ 0xff
 80159ba:	e000      	b.n	80159be <lv_font_get_bitmap_fmt_txt+0xf6>
 80159bc:	2100      	movs	r1, #0
 80159be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80159c2:	4413      	add	r3, r2
 80159c4:	460a      	mov	r2, r1
 80159c6:	701a      	strb	r2, [r3, #0]
 80159c8:	e06d      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 2) bitmap_out_tmp[x] = (*bitmap_in) & 0x20 ? 0xff : 0x00;
 80159ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159cc:	2b02      	cmp	r3, #2
 80159ce:	d10e      	bne.n	80159ee <lv_font_get_bitmap_fmt_txt+0x126>
 80159d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	f003 0320 	and.w	r3, r3, #32
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d001      	beq.n	80159e0 <lv_font_get_bitmap_fmt_txt+0x118>
 80159dc:	21ff      	movs	r1, #255	@ 0xff
 80159de:	e000      	b.n	80159e2 <lv_font_get_bitmap_fmt_txt+0x11a>
 80159e0:	2100      	movs	r1, #0
 80159e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80159e6:	4413      	add	r3, r2
 80159e8:	460a      	mov	r2, r1
 80159ea:	701a      	strb	r2, [r3, #0]
 80159ec:	e05b      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 3) bitmap_out_tmp[x] = (*bitmap_in) & 0x10 ? 0xff : 0x00;
 80159ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159f0:	2b03      	cmp	r3, #3
 80159f2:	d10e      	bne.n	8015a12 <lv_font_get_bitmap_fmt_txt+0x14a>
 80159f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	f003 0310 	and.w	r3, r3, #16
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d001      	beq.n	8015a04 <lv_font_get_bitmap_fmt_txt+0x13c>
 8015a00:	21ff      	movs	r1, #255	@ 0xff
 8015a02:	e000      	b.n	8015a06 <lv_font_get_bitmap_fmt_txt+0x13e>
 8015a04:	2100      	movs	r1, #0
 8015a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a0a:	4413      	add	r3, r2
 8015a0c:	460a      	mov	r2, r1
 8015a0e:	701a      	strb	r2, [r3, #0]
 8015a10:	e049      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 4) bitmap_out_tmp[x] = (*bitmap_in) & 0x08 ? 0xff : 0x00;
 8015a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a14:	2b04      	cmp	r3, #4
 8015a16:	d10e      	bne.n	8015a36 <lv_font_get_bitmap_fmt_txt+0x16e>
 8015a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	f003 0308 	and.w	r3, r3, #8
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d001      	beq.n	8015a28 <lv_font_get_bitmap_fmt_txt+0x160>
 8015a24:	21ff      	movs	r1, #255	@ 0xff
 8015a26:	e000      	b.n	8015a2a <lv_font_get_bitmap_fmt_txt+0x162>
 8015a28:	2100      	movs	r1, #0
 8015a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a2e:	4413      	add	r3, r2
 8015a30:	460a      	mov	r2, r1
 8015a32:	701a      	strb	r2, [r3, #0]
 8015a34:	e037      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 5) bitmap_out_tmp[x] = (*bitmap_in) & 0x04 ? 0xff : 0x00;
 8015a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a38:	2b05      	cmp	r3, #5
 8015a3a:	d10e      	bne.n	8015a5a <lv_font_get_bitmap_fmt_txt+0x192>
 8015a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	f003 0304 	and.w	r3, r3, #4
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d001      	beq.n	8015a4c <lv_font_get_bitmap_fmt_txt+0x184>
 8015a48:	21ff      	movs	r1, #255	@ 0xff
 8015a4a:	e000      	b.n	8015a4e <lv_font_get_bitmap_fmt_txt+0x186>
 8015a4c:	2100      	movs	r1, #0
 8015a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a52:	4413      	add	r3, r2
 8015a54:	460a      	mov	r2, r1
 8015a56:	701a      	strb	r2, [r3, #0]
 8015a58:	e025      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 6) bitmap_out_tmp[x] = (*bitmap_in) & 0x02 ? 0xff : 0x00;
 8015a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a5c:	2b06      	cmp	r3, #6
 8015a5e:	d10e      	bne.n	8015a7e <lv_font_get_bitmap_fmt_txt+0x1b6>
 8015a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	f003 0302 	and.w	r3, r3, #2
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d001      	beq.n	8015a70 <lv_font_get_bitmap_fmt_txt+0x1a8>
 8015a6c:	21ff      	movs	r1, #255	@ 0xff
 8015a6e:	e000      	b.n	8015a72 <lv_font_get_bitmap_fmt_txt+0x1aa>
 8015a70:	2100      	movs	r1, #0
 8015a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a76:	4413      	add	r3, r2
 8015a78:	460a      	mov	r2, r1
 8015a7a:	701a      	strb	r2, [r3, #0]
 8015a7c:	e013      	b.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                    else if(i == 7) {
 8015a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a80:	2b07      	cmp	r3, #7
 8015a82:	d110      	bne.n	8015aa6 <lv_font_get_bitmap_fmt_txt+0x1de>
                        bitmap_out_tmp[x] = (*bitmap_in) & 0x01 ? 0xff : 0x00;
 8015a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	f003 0301 	and.w	r3, r3, #1
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d001      	beq.n	8015a94 <lv_font_get_bitmap_fmt_txt+0x1cc>
 8015a90:	21ff      	movs	r1, #255	@ 0xff
 8015a92:	e000      	b.n	8015a96 <lv_font_get_bitmap_fmt_txt+0x1ce>
 8015a94:	2100      	movs	r1, #0
 8015a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015a9a:	4413      	add	r3, r2
 8015a9c:	460a      	mov	r2, r1
 8015a9e:	701a      	strb	r2, [r3, #0]
                        bitmap_in++;
 8015aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(x = 0; x < gdsc->box_w; x++, i++) {
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8015aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015aae:	3301      	adds	r3, #1
 8015ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	791b      	ldrb	r3, [r3, #4]
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aba:	4293      	cmp	r3, r2
 8015abc:	f6ff af5e 	blt.w	801597c <lv_font_get_bitmap_fmt_txt+0xb4>
                    }
                }
                bitmap_out_tmp += stride;
 8015ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
            for(y = 0; y < gdsc->box_h; y ++) {
 8015ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aca:	3301      	adds	r3, #1
 8015acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015ace:	69bb      	ldr	r3, [r7, #24]
 8015ad0:	795b      	ldrb	r3, [r3, #5]
 8015ad2:	461a      	mov	r2, r3
 8015ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	f6ff af4d 	blt.w	8015976 <lv_font_get_bitmap_fmt_txt+0xae>
 8015adc:	e0b2      	b.n	8015c44 <lv_font_get_bitmap_fmt_txt+0x37c>
            }
        }
        else if(fdsc->bpp == 2) {
 8015ade:	6a3b      	ldr	r3, [r7, #32]
 8015ae0:	7cdb      	ldrb	r3, [r3, #19]
 8015ae2:	f003 031e 	and.w	r3, r3, #30
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	2b04      	cmp	r3, #4
 8015aea:	d162      	bne.n	8015bb2 <lv_font_get_bitmap_fmt_txt+0x2ea>
            for(y = 0; y < gdsc->box_h; y ++) {
 8015aec:	2300      	movs	r3, #0
 8015aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015af0:	e058      	b.n	8015ba4 <lv_font_get_bitmap_fmt_txt+0x2dc>
                for(x = 0; x < gdsc->box_w; x++, i++) {
 8015af2:	2300      	movs	r3, #0
 8015af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8015af6:	e048      	b.n	8015b8a <lv_font_get_bitmap_fmt_txt+0x2c2>
                    i = i & 0x3;
 8015af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015afa:	f003 0303 	and.w	r3, r3, #3
 8015afe:	637b      	str	r3, [r7, #52]	@ 0x34
                    if(i == 0) bitmap_out_tmp[x] = opa2_table[(*bitmap_in) >> 6];
 8015b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10b      	bne.n	8015b1e <lv_font_get_bitmap_fmt_txt+0x256>
 8015b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	099b      	lsrs	r3, r3, #6
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	4619      	mov	r1, r3
 8015b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b14:	4413      	add	r3, r2
 8015b16:	4a4f      	ldr	r2, [pc, #316]	@ (8015c54 <lv_font_get_bitmap_fmt_txt+0x38c>)
 8015b18:	5c52      	ldrb	r2, [r2, r1]
 8015b1a:	701a      	strb	r2, [r3, #0]
 8015b1c:	e02f      	b.n	8015b7e <lv_font_get_bitmap_fmt_txt+0x2b6>
                    else if(i == 1) bitmap_out_tmp[x] = opa2_table[((*bitmap_in) >> 4) & 0x3];
 8015b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b20:	2b01      	cmp	r3, #1
 8015b22:	d10c      	bne.n	8015b3e <lv_font_get_bitmap_fmt_txt+0x276>
 8015b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	091b      	lsrs	r3, r3, #4
 8015b2a:	b2db      	uxtb	r3, r3
 8015b2c:	f003 0203 	and.w	r2, r3, #3
 8015b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015b34:	440b      	add	r3, r1
 8015b36:	4947      	ldr	r1, [pc, #284]	@ (8015c54 <lv_font_get_bitmap_fmt_txt+0x38c>)
 8015b38:	5c8a      	ldrb	r2, [r1, r2]
 8015b3a:	701a      	strb	r2, [r3, #0]
 8015b3c:	e01f      	b.n	8015b7e <lv_font_get_bitmap_fmt_txt+0x2b6>
                    else if(i == 2) bitmap_out_tmp[x] = opa2_table[((*bitmap_in) >> 2) & 0x3];
 8015b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b40:	2b02      	cmp	r3, #2
 8015b42:	d10c      	bne.n	8015b5e <lv_font_get_bitmap_fmt_txt+0x296>
 8015b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	089b      	lsrs	r3, r3, #2
 8015b4a:	b2db      	uxtb	r3, r3
 8015b4c:	f003 0203 	and.w	r2, r3, #3
 8015b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015b54:	440b      	add	r3, r1
 8015b56:	493f      	ldr	r1, [pc, #252]	@ (8015c54 <lv_font_get_bitmap_fmt_txt+0x38c>)
 8015b58:	5c8a      	ldrb	r2, [r1, r2]
 8015b5a:	701a      	strb	r2, [r3, #0]
 8015b5c:	e00f      	b.n	8015b7e <lv_font_get_bitmap_fmt_txt+0x2b6>
                    else if(i == 3) {
 8015b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b60:	2b03      	cmp	r3, #3
 8015b62:	d10c      	bne.n	8015b7e <lv_font_get_bitmap_fmt_txt+0x2b6>
                        bitmap_out_tmp[x] = opa2_table[((*bitmap_in) >> 0) & 0x3];
 8015b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	f003 0203 	and.w	r2, r3, #3
 8015b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015b70:	440b      	add	r3, r1
 8015b72:	4938      	ldr	r1, [pc, #224]	@ (8015c54 <lv_font_get_bitmap_fmt_txt+0x38c>)
 8015b74:	5c8a      	ldrb	r2, [r1, r2]
 8015b76:	701a      	strb	r2, [r3, #0]
                        bitmap_in++;
 8015b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(x = 0; x < gdsc->box_w; x++, i++) {
 8015b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b80:	3301      	adds	r3, #1
 8015b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8015b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b86:	3301      	adds	r3, #1
 8015b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8015b8a:	69bb      	ldr	r3, [r7, #24]
 8015b8c:	791b      	ldrb	r3, [r3, #4]
 8015b8e:	461a      	mov	r2, r3
 8015b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b92:	4293      	cmp	r3, r2
 8015b94:	dbb0      	blt.n	8015af8 <lv_font_get_bitmap_fmt_txt+0x230>
                    }
                }
                bitmap_out_tmp += stride;
 8015b96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	4413      	add	r3, r2
 8015b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
            for(y = 0; y < gdsc->box_h; y ++) {
 8015b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015ba4:	69bb      	ldr	r3, [r7, #24]
 8015ba6:	795b      	ldrb	r3, [r3, #5]
 8015ba8:	461a      	mov	r2, r3
 8015baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bac:	4293      	cmp	r3, r2
 8015bae:	dba0      	blt.n	8015af2 <lv_font_get_bitmap_fmt_txt+0x22a>
 8015bb0:	e048      	b.n	8015c44 <lv_font_get_bitmap_fmt_txt+0x37c>
            }

        }
        else if(fdsc->bpp == 4) {
 8015bb2:	6a3b      	ldr	r3, [r7, #32]
 8015bb4:	7cdb      	ldrb	r3, [r3, #19]
 8015bb6:	f003 031e 	and.w	r3, r3, #30
 8015bba:	b2db      	uxtb	r3, r3
 8015bbc:	2b08      	cmp	r3, #8
 8015bbe:	d141      	bne.n	8015c44 <lv_font_get_bitmap_fmt_txt+0x37c>
            for(y = 0; y < gdsc->box_h; y ++) {
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015bc4:	e038      	b.n	8015c38 <lv_font_get_bitmap_fmt_txt+0x370>
                for(x = 0; x < gdsc->box_w; x++, i++) {
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8015bca:	e028      	b.n	8015c1e <lv_font_get_bitmap_fmt_txt+0x356>
                    i = i & 0x1;
 8015bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bce:	f003 0301 	and.w	r3, r3, #1
 8015bd2:	637b      	str	r3, [r7, #52]	@ 0x34
                    if(i == 0) {
 8015bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d10b      	bne.n	8015bf2 <lv_font_get_bitmap_fmt_txt+0x32a>
                        bitmap_out_tmp[x] = opa4_table[(*bitmap_in) >> 4];
 8015bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bdc:	781b      	ldrb	r3, [r3, #0]
 8015bde:	091b      	lsrs	r3, r3, #4
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	4619      	mov	r1, r3
 8015be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015be6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015be8:	4413      	add	r3, r2
 8015bea:	4a1b      	ldr	r2, [pc, #108]	@ (8015c58 <lv_font_get_bitmap_fmt_txt+0x390>)
 8015bec:	5c52      	ldrb	r2, [r2, r1]
 8015bee:	701a      	strb	r2, [r3, #0]
 8015bf0:	e00f      	b.n	8015c12 <lv_font_get_bitmap_fmt_txt+0x34a>
                    }
                    else if(i == 1) {
 8015bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	d10c      	bne.n	8015c12 <lv_font_get_bitmap_fmt_txt+0x34a>
                        bitmap_out_tmp[x] = opa4_table[(*bitmap_in) & 0xF];
 8015bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	f003 020f 	and.w	r2, r3, #15
 8015c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015c04:	440b      	add	r3, r1
 8015c06:	4914      	ldr	r1, [pc, #80]	@ (8015c58 <lv_font_get_bitmap_fmt_txt+0x390>)
 8015c08:	5c8a      	ldrb	r2, [r1, r2]
 8015c0a:	701a      	strb	r2, [r3, #0]
                        bitmap_in++;
 8015c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c0e:	3301      	adds	r3, #1
 8015c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
                for(x = 0; x < gdsc->box_w; x++, i++) {
 8015c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c14:	3301      	adds	r3, #1
 8015c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c1a:	3301      	adds	r3, #1
 8015c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015c1e:	69bb      	ldr	r3, [r7, #24]
 8015c20:	791b      	ldrb	r3, [r3, #4]
 8015c22:	461a      	mov	r2, r3
 8015c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c26:	4293      	cmp	r3, r2
 8015c28:	dbd0      	blt.n	8015bcc <lv_font_get_bitmap_fmt_txt+0x304>
                    }
                }
                bitmap_out_tmp += stride;
 8015c2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	4413      	add	r3, r2
 8015c30:	63bb      	str	r3, [r7, #56]	@ 0x38
            for(y = 0; y < gdsc->box_h; y ++) {
 8015c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c34:	3301      	adds	r3, #1
 8015c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	795b      	ldrb	r3, [r3, #5]
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c40:	4293      	cmp	r3, r2
 8015c42:	dbc0      	blt.n	8015bc6 <lv_font_get_bitmap_fmt_txt+0x2fe>
            }
        }
        return draw_buf;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	e000      	b.n	8015c4a <lv_font_get_bitmap_fmt_txt+0x382>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], bitmap_out, gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return draw_buf;
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 8015c48:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3740      	adds	r7, #64	@ 0x40
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	0801e334 	.word	0x0801e334
 8015c58:	0801e324 	.word	0x0801e324

08015c5c <lv_font_get_glyph_dsc_fmt_txt>:

bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b08c      	sub	sp, #48	@ 0x30
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	60f8      	str	r0, [r7, #12]
 8015c64:	60b9      	str	r1, [r7, #8]
 8015c66:	607a      	str	r2, [r7, #4]
 8015c68:	603b      	str	r3, [r7, #0]
    /*It fixes a strange compiler optimization issue: https://github.com/lvgl/lvgl/issues/4370*/
    bool is_tab = unicode_letter == '\t';
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2b09      	cmp	r3, #9
 8015c6e:	bf0c      	ite	eq
 8015c70:	2301      	moveq	r3, #1
 8015c72:	2300      	movne	r3, #0
 8015c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(is_tab) {
 8015c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d001      	beq.n	8015c84 <lv_font_get_glyph_dsc_fmt_txt+0x28>
        unicode_letter = ' ';
 8015c80:	2320      	movs	r3, #32
 8015c82:	607b      	str	r3, [r7, #4]
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	699b      	ldr	r3, [r3, #24]
 8015c88:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8015c8a:	6879      	ldr	r1, [r7, #4]
 8015c8c:	68f8      	ldr	r0, [r7, #12]
 8015c8e:	f000 f877 	bl	8015d80 <get_glyph_dsc_id>
 8015c92:	61f8      	str	r0, [r7, #28]
    if(!gid) return false;
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d101      	bne.n	8015c9e <lv_font_get_glyph_dsc_fmt_txt+0x42>
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e06b      	b.n	8015d76 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(fdsc->kern_dsc) {
 8015ca4:	6a3b      	ldr	r3, [r7, #32]
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d00f      	beq.n	8015ccc <lv_font_get_glyph_dsc_fmt_txt+0x70>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8015cac:	6839      	ldr	r1, [r7, #0]
 8015cae:	68f8      	ldr	r0, [r7, #12]
 8015cb0:	f000 f866 	bl	8015d80 <get_glyph_dsc_id>
 8015cb4:	61b8      	str	r0, [r7, #24]
        if(gid_next) {
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d007      	beq.n	8015ccc <lv_font_get_glyph_dsc_fmt_txt+0x70>
            kvalue = get_kern_value(font, gid, gid_next);
 8015cbc:	69ba      	ldr	r2, [r7, #24]
 8015cbe:	69f9      	ldr	r1, [r7, #28]
 8015cc0:	68f8      	ldr	r0, [r7, #12]
 8015cc2:	f000 f97d 	bl	8015fc0 <get_kern_value>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8015ccc:	6a3b      	ldr	r3, [r7, #32]
 8015cce:	685a      	ldr	r2, [r3, #4]
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	00db      	lsls	r3, r3, #3
 8015cd4:	4413      	add	r3, r2
 8015cd6:	617b      	str	r3, [r7, #20]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8015cd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8015cdc:	6a3a      	ldr	r2, [r7, #32]
 8015cde:	8a12      	ldrh	r2, [r2, #16]
 8015ce0:	fb02 f303 	mul.w	r3, r2, r3
 8015ce4:	111b      	asrs	r3, r3, #4
 8015ce6:	613b      	str	r3, [r7, #16]

    uint32_t adv_w = gdsc->adv_w;
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	885b      	ldrh	r3, [r3, #2]
 8015cec:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(is_tab) adv_w *= 2;
 8015cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d002      	beq.n	8015d02 <lv_font_get_glyph_dsc_fmt_txt+0xa6>
 8015cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	62bb      	str	r3, [r7, #40]	@ 0x28

    adv_w += kv;
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d06:	4413      	add	r3, r2
 8015d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8015d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d0c:	3308      	adds	r3, #8
 8015d0e:	091b      	lsrs	r3, r3, #4
 8015d10:	62bb      	str	r3, [r7, #40]	@ 0x28

    dsc_out->adv_w = adv_w;
 8015d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 8015d1a:	697b      	ldr	r3, [r7, #20]
 8015d1c:	795b      	ldrb	r3, [r3, #5]
 8015d1e:	461a      	mov	r2, r3
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	791b      	ldrb	r3, [r3, #4]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8015d34:	461a      	mov	r2, r3
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8015d40:	461a      	mov	r2, r3
 8015d42:	68bb      	ldr	r3, [r7, #8]
 8015d44:	819a      	strh	r2, [r3, #12]
    dsc_out->format = (uint8_t)fdsc->bpp;
 8015d46:	6a3b      	ldr	r3, [r7, #32]
 8015d48:	7cdb      	ldrb	r3, [r3, #19]
 8015d4a:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	461a      	mov	r2, r3
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	739a      	strb	r2, [r3, #14]
    dsc_out->is_placeholder = false;
 8015d56:	68ba      	ldr	r2, [r7, #8]
 8015d58:	7bd3      	ldrb	r3, [r2, #15]
 8015d5a:	f36f 0300 	bfc	r3, #0, #1
 8015d5e:	73d3      	strb	r3, [r2, #15]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8015d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d005      	beq.n	8015d74 <lv_font_get_glyph_dsc_fmt_txt+0x118>
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	88db      	ldrh	r3, [r3, #6]
 8015d6c:	005b      	lsls	r3, r3, #1
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	80da      	strh	r2, [r3, #6]

    return true;
 8015d74:	2301      	movs	r3, #1
}
 8015d76:	4618      	mov	r0, r3
 8015d78:	3730      	adds	r7, #48	@ 0x30
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}
	...

08015d80 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 8015d80:	b590      	push	{r4, r7, lr}
 8015d82:	b091      	sub	sp, #68	@ 0x44
 8015d84:	af02      	add	r7, sp, #8
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d101      	bne.n	8015d94 <get_glyph_dsc_id+0x14>
 8015d90:	2300      	movs	r3, #0
 8015d92:	e10e      	b.n	8015fb2 <get_glyph_dsc_id+0x232>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	699b      	ldr	r3, [r3, #24]
 8015d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015d9e:	e0fd      	b.n	8015f9c <get_glyph_dsc_id+0x21c>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8015da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da2:	6899      	ldr	r1, [r3, #8]
 8015da4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015da6:	4613      	mov	r3, r2
 8015da8:	009b      	lsls	r3, r3, #2
 8015daa:	4413      	add	r3, r2
 8015dac:	009b      	lsls	r3, r3, #2
 8015dae:	440b      	add	r3, r1
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	683a      	ldr	r2, [r7, #0]
 8015db4:	1ad3      	subs	r3, r2, r3
 8015db6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(rcp >= fdsc->cmaps[i].range_length) continue;
 8015db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dba:	6899      	ldr	r1, [r3, #8]
 8015dbc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015dbe:	4613      	mov	r3, r2
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	4413      	add	r3, r2
 8015dc4:	009b      	lsls	r3, r3, #2
 8015dc6:	440b      	add	r3, r1
 8015dc8:	889b      	ldrh	r3, [r3, #4]
 8015dca:	461a      	mov	r2, r3
 8015dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	f080 80e0 	bcs.w	8015f94 <get_glyph_dsc_id+0x214>
        uint32_t glyph_id = 0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	633b      	str	r3, [r7, #48]	@ 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8015dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dda:	6899      	ldr	r1, [r3, #8]
 8015ddc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015dde:	4613      	mov	r3, r2
 8015de0:	009b      	lsls	r3, r3, #2
 8015de2:	4413      	add	r3, r2
 8015de4:	009b      	lsls	r3, r3, #2
 8015de6:	440b      	add	r3, r1
 8015de8:	7c9b      	ldrb	r3, [r3, #18]
 8015dea:	2b02      	cmp	r3, #2
 8015dec:	d10d      	bne.n	8015e0a <get_glyph_dsc_id+0x8a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8015dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df0:	6899      	ldr	r1, [r3, #8]
 8015df2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015df4:	4613      	mov	r3, r2
 8015df6:	009b      	lsls	r3, r3, #2
 8015df8:	4413      	add	r3, r2
 8015dfa:	009b      	lsls	r3, r3, #2
 8015dfc:	440b      	add	r3, r1
 8015dfe:	88db      	ldrh	r3, [r3, #6]
 8015e00:	461a      	mov	r2, r3
 8015e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e04:	4413      	add	r3, r2
 8015e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8015e08:	e0c2      	b.n	8015f90 <get_glyph_dsc_id+0x210>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8015e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e0c:	6899      	ldr	r1, [r3, #8]
 8015e0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015e10:	4613      	mov	r3, r2
 8015e12:	009b      	lsls	r3, r3, #2
 8015e14:	4413      	add	r3, r2
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	440b      	add	r3, r1
 8015e1a:	7c9b      	ldrb	r3, [r3, #18]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d11a      	bne.n	8015e56 <get_glyph_dsc_id+0xd6>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 8015e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e22:	6899      	ldr	r1, [r3, #8]
 8015e24:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015e26:	4613      	mov	r3, r2
 8015e28:	009b      	lsls	r3, r3, #2
 8015e2a:	4413      	add	r3, r2
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	440b      	add	r3, r1
 8015e30:	68db      	ldr	r3, [r3, #12]
 8015e32:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8015e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e36:	6899      	ldr	r1, [r3, #8]
 8015e38:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015e3a:	4613      	mov	r3, r2
 8015e3c:	009b      	lsls	r3, r3, #2
 8015e3e:	4413      	add	r3, r2
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	440b      	add	r3, r1
 8015e44:	88db      	ldrh	r3, [r3, #6]
 8015e46:	4619      	mov	r1, r3
 8015e48:	693a      	ldr	r2, [r7, #16]
 8015e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e4c:	4413      	add	r3, r2
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	440b      	add	r3, r1
 8015e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8015e54:	e09c      	b.n	8015f90 <get_glyph_dsc_id+0x210>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 8015e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e58:	6899      	ldr	r1, [r3, #8]
 8015e5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015e5c:	4613      	mov	r3, r2
 8015e5e:	009b      	lsls	r3, r3, #2
 8015e60:	4413      	add	r3, r2
 8015e62:	009b      	lsls	r3, r3, #2
 8015e64:	440b      	add	r3, r1
 8015e66:	7c9b      	ldrb	r3, [r3, #18]
 8015e68:	2b03      	cmp	r3, #3
 8015e6a:	d13c      	bne.n	8015ee6 <get_glyph_dsc_id+0x166>
            uint16_t key = rcp;
 8015e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e6e:	b29b      	uxth	r3, r3
 8015e70:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8015e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e74:	6899      	ldr	r1, [r3, #8]
 8015e76:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015e78:	4613      	mov	r3, r2
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	4413      	add	r3, r2
 8015e7e:	009b      	lsls	r3, r3, #2
 8015e80:	440b      	add	r3, r1
 8015e82:	689c      	ldr	r4, [r3, #8]
 8015e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e86:	6899      	ldr	r1, [r3, #8]
 8015e88:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015e8a:	4613      	mov	r3, r2
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	4413      	add	r3, r2
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	440b      	add	r3, r1
 8015e94:	8a1b      	ldrh	r3, [r3, #16]
 8015e96:	461a      	mov	r2, r3
 8015e98:	f107 000e 	add.w	r0, r7, #14
 8015e9c:	4b47      	ldr	r3, [pc, #284]	@ (8015fbc <get_glyph_dsc_id+0x23c>)
 8015e9e:	9300      	str	r3, [sp, #0]
 8015ea0:	2302      	movs	r3, #2
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	f006 fe1e 	bl	801cae4 <_lv_utils_bsearch>
 8015ea8:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 8015eaa:	69bb      	ldr	r3, [r7, #24]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d06f      	beq.n	8015f90 <get_glyph_dsc_id+0x210>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8015eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb2:	6899      	ldr	r1, [r3, #8]
 8015eb4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015eb6:	4613      	mov	r3, r2
 8015eb8:	009b      	lsls	r3, r3, #2
 8015eba:	4413      	add	r3, r2
 8015ebc:	009b      	lsls	r3, r3, #2
 8015ebe:	440b      	add	r3, r1
 8015ec0:	689b      	ldr	r3, [r3, #8]
 8015ec2:	69ba      	ldr	r2, [r7, #24]
 8015ec4:	1ad3      	subs	r3, r2, r3
 8015ec6:	105b      	asrs	r3, r3, #1
 8015ec8:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8015eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ecc:	6899      	ldr	r1, [r3, #8]
 8015ece:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015ed0:	4613      	mov	r3, r2
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	4413      	add	r3, r2
 8015ed6:	009b      	lsls	r3, r3, #2
 8015ed8:	440b      	add	r3, r1
 8015eda:	88db      	ldrh	r3, [r3, #6]
 8015edc:	461a      	mov	r2, r3
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	4413      	add	r3, r2
 8015ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8015ee4:	e054      	b.n	8015f90 <get_glyph_dsc_id+0x210>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8015ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee8:	6899      	ldr	r1, [r3, #8]
 8015eea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015eec:	4613      	mov	r3, r2
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	4413      	add	r3, r2
 8015ef2:	009b      	lsls	r3, r3, #2
 8015ef4:	440b      	add	r3, r1
 8015ef6:	7c9b      	ldrb	r3, [r3, #18]
 8015ef8:	2b01      	cmp	r3, #1
 8015efa:	d149      	bne.n	8015f90 <get_glyph_dsc_id+0x210>
            uint16_t key = rcp;
 8015efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8015f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f04:	6899      	ldr	r1, [r3, #8]
 8015f06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015f08:	4613      	mov	r3, r2
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	4413      	add	r3, r2
 8015f0e:	009b      	lsls	r3, r3, #2
 8015f10:	440b      	add	r3, r1
 8015f12:	689c      	ldr	r4, [r3, #8]
 8015f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f16:	6899      	ldr	r1, [r3, #8]
 8015f18:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015f1a:	4613      	mov	r3, r2
 8015f1c:	009b      	lsls	r3, r3, #2
 8015f1e:	4413      	add	r3, r2
 8015f20:	009b      	lsls	r3, r3, #2
 8015f22:	440b      	add	r3, r1
 8015f24:	8a1b      	ldrh	r3, [r3, #16]
 8015f26:	461a      	mov	r2, r3
 8015f28:	f107 000c 	add.w	r0, r7, #12
 8015f2c:	4b23      	ldr	r3, [pc, #140]	@ (8015fbc <get_glyph_dsc_id+0x23c>)
 8015f2e:	9300      	str	r3, [sp, #0]
 8015f30:	2302      	movs	r3, #2
 8015f32:	4621      	mov	r1, r4
 8015f34:	f006 fdd6 	bl	801cae4 <_lv_utils_bsearch>
 8015f38:	6278      	str	r0, [r7, #36]	@ 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d027      	beq.n	8015f90 <get_glyph_dsc_id+0x210>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8015f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f42:	6899      	ldr	r1, [r3, #8]
 8015f44:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015f46:	4613      	mov	r3, r2
 8015f48:	009b      	lsls	r3, r3, #2
 8015f4a:	4413      	add	r3, r2
 8015f4c:	009b      	lsls	r3, r3, #2
 8015f4e:	440b      	add	r3, r1
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015f54:	1ad3      	subs	r3, r2, r3
 8015f56:	105b      	asrs	r3, r3, #1
 8015f58:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 8015f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f5c:	6899      	ldr	r1, [r3, #8]
 8015f5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015f60:	4613      	mov	r3, r2
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	4413      	add	r3, r2
 8015f66:	009b      	lsls	r3, r3, #2
 8015f68:	440b      	add	r3, r1
 8015f6a:	68db      	ldr	r3, [r3, #12]
 8015f6c:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8015f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f70:	6899      	ldr	r1, [r3, #8]
 8015f72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015f74:	4613      	mov	r3, r2
 8015f76:	009b      	lsls	r3, r3, #2
 8015f78:	4413      	add	r3, r2
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	440b      	add	r3, r1
 8015f7e:	88db      	ldrh	r3, [r3, #6]
 8015f80:	4619      	mov	r1, r3
 8015f82:	6a3b      	ldr	r3, [r7, #32]
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	69fa      	ldr	r2, [r7, #28]
 8015f88:	4413      	add	r3, r2
 8015f8a:	881b      	ldrh	r3, [r3, #0]
 8015f8c:	440b      	add	r3, r1
 8015f8e:	633b      	str	r3, [r7, #48]	@ 0x30
            }
        }

        return glyph_id;
 8015f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f92:	e00e      	b.n	8015fb2 <get_glyph_dsc_id+0x232>
        if(rcp >= fdsc->cmaps[i].range_length) continue;
 8015f94:	bf00      	nop
    for(i = 0; i < fdsc->cmap_num; i++) {
 8015f96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015f98:	3301      	adds	r3, #1
 8015f9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f9e:	8a5b      	ldrh	r3, [r3, #18]
 8015fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015faa:	4293      	cmp	r3, r2
 8015fac:	f4ff aef8 	bcc.w	8015da0 <get_glyph_dsc_id+0x20>
    }

    return 0;
 8015fb0:	2300      	movs	r3, #0

}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	373c      	adds	r7, #60	@ 0x3c
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd90      	pop	{r4, r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	08016191 	.word	0x08016191

08015fc0 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b096      	sub	sp, #88	@ 0x58
 8015fc4:	af02      	add	r7, sp, #8
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	699b      	ldr	r3, [r3, #24]
 8015fd0:	64bb      	str	r3, [r7, #72]	@ 0x48

    int8_t value = 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if(fdsc->kern_classes == 0) {
 8015fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fda:	7cdb      	ldrb	r3, [r3, #19]
 8015fdc:	f003 0320 	and.w	r3, r3, #32
 8015fe0:	b2db      	uxtb	r3, r3
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d15a      	bne.n	801609c <get_kern_value+0xdc>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8015fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fe8:	68db      	ldr	r3, [r3, #12]
 8015fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if(kdsc->glyph_ids_size == 0) {
 8015fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fee:	7adb      	ldrb	r3, [r3, #11]
 8015ff0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d124      	bne.n	8016044 <get_kern_value+0x84>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 8015ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            kern_pair_ref_t g_id_both = {gid_left, gid_right};
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	61fb      	str	r3, [r7, #28]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	623b      	str	r3, [r7, #32]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8016008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801600a:	689b      	ldr	r3, [r3, #8]
 801600c:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8016010:	461a      	mov	r2, r3
 8016012:	f107 001c 	add.w	r0, r7, #28
 8016016:	4b39      	ldr	r3, [pc, #228]	@ (80160fc <get_kern_value+0x13c>)
 8016018:	9300      	str	r3, [sp, #0]
 801601a:	2302      	movs	r3, #2
 801601c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801601e:	f006 fd61 	bl	801cae4 <_lv_utils_bsearch>
 8016022:	62b8      	str	r0, [r7, #40]	@ 0x28

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8016024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016026:	2b00      	cmp	r3, #0
 8016028:	d062      	beq.n	80160f0 <get_kern_value+0x130>
                lv_uintptr_t ofs = kid_p - g_ids;
 801602a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801602e:	1ad3      	subs	r3, r2, r3
 8016030:	105b      	asrs	r3, r3, #1
 8016032:	627b      	str	r3, [r7, #36]	@ 0x24
                value = kdsc->values[ofs];
 8016034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016036:	685a      	ldr	r2, [r3, #4]
 8016038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603a:	4413      	add	r3, r2
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8016042:	e055      	b.n	80160f0 <get_kern_value+0x130>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 8016044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016046:	7adb      	ldrb	r3, [r3, #11]
 8016048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801604c:	b2db      	uxtb	r3, r3
 801604e:	2b40      	cmp	r3, #64	@ 0x40
 8016050:	d14e      	bne.n	80160f0 <get_kern_value+0x130>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 8016052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	63bb      	str	r3, [r7, #56]	@ 0x38
            kern_pair_ref_t g_id_both = {gid_left, gid_right};
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	617b      	str	r3, [r7, #20]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	61bb      	str	r3, [r7, #24]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8016060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016062:	689b      	ldr	r3, [r3, #8]
 8016064:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8016068:	461a      	mov	r2, r3
 801606a:	f107 0014 	add.w	r0, r7, #20
 801606e:	4b24      	ldr	r3, [pc, #144]	@ (8016100 <get_kern_value+0x140>)
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	2304      	movs	r3, #4
 8016074:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016076:	f006 fd35 	bl	801cae4 <_lv_utils_bsearch>
 801607a:	6378      	str	r0, [r7, #52]	@ 0x34

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 801607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801607e:	2b00      	cmp	r3, #0
 8016080:	d036      	beq.n	80160f0 <get_kern_value+0x130>
                lv_uintptr_t ofs = kid_p - g_ids;
 8016082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	109b      	asrs	r3, r3, #2
 801608a:	633b      	str	r3, [r7, #48]	@ 0x30
                value = kdsc->values[ofs];
 801608c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801608e:	685a      	ldr	r2, [r3, #4]
 8016090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016092:	4413      	add	r3, r2
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801609a:	e029      	b.n	80160f0 <get_kern_value+0x130>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 801609c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	647b      	str	r3, [r7, #68]	@ 0x44
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80160a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160a4:	685a      	ldr	r2, [r3, #4]
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	4413      	add	r3, r2
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 80160b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160b2:	689a      	ldr	r2, [r3, #8]
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	4413      	add	r3, r2
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 80160be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d014      	beq.n	80160f0 <get_kern_value+0x130>
 80160c6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d010      	beq.n	80160f0 <get_kern_value+0x130>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 80160ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80160d6:	3a01      	subs	r2, #1
 80160d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80160da:	7b49      	ldrb	r1, [r1, #13]
 80160dc:	fb02 f101 	mul.w	r1, r2, r1
 80160e0:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80160e4:	3a01      	subs	r2, #1
 80160e6:	440a      	add	r2, r1
 80160e8:	4413      	add	r3, r2
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        }

    }
    return value;
 80160f0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	3750      	adds	r7, #80	@ 0x50
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}
 80160fc:	08016105 	.word	0x08016105
 8016100:	0801614b 	.word	0x0801614b

08016104 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8016104:	b480      	push	{r7}
 8016106:	b085      	sub	sp, #20
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	6039      	str	r1, [r7, #0]
    const kern_pair_ref_t * ref8_p = ref;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p->gid_left != element8_p[0]) return (int32_t) ref8_p->gid_left - element8_p[0];
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	68ba      	ldr	r2, [r7, #8]
 801611c:	7812      	ldrb	r2, [r2, #0]
 801611e:	4293      	cmp	r3, r2
 8016120:	d006      	beq.n	8016130 <kern_pair_8_compare+0x2c>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	461a      	mov	r2, r3
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	1ad3      	subs	r3, r2, r3
 801612e:	e006      	b.n	801613e <kern_pair_8_compare+0x3a>
    else return (int32_t) ref8_p->gid_right - element8_p[1];
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	461a      	mov	r2, r3
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	3301      	adds	r3, #1
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	1ad3      	subs	r3, r2, r3

}
 801613e:	4618      	mov	r0, r3
 8016140:	3714      	adds	r7, #20
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr

0801614a <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 801614a:	b480      	push	{r7}
 801614c:	b085      	sub	sp, #20
 801614e:	af00      	add	r7, sp, #0
 8016150:	6078      	str	r0, [r7, #4]
 8016152:	6039      	str	r1, [r7, #0]
    const kern_pair_ref_t * ref16_p = ref;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p->gid_left != element16_p[0]) return (int32_t) ref16_p->gid_left - element16_p[0];
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	8812      	ldrh	r2, [r2, #0]
 8016164:	4293      	cmp	r3, r2
 8016166:	d006      	beq.n	8016176 <kern_pair_16_compare+0x2c>
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	461a      	mov	r2, r3
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	881b      	ldrh	r3, [r3, #0]
 8016172:	1ad3      	subs	r3, r2, r3
 8016174:	e006      	b.n	8016184 <kern_pair_16_compare+0x3a>
    else return (int32_t) ref16_p->gid_right - element16_p[1];
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	461a      	mov	r2, r3
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	3302      	adds	r3, #2
 8016180:	881b      	ldrh	r3, [r3, #0]
 8016182:	1ad3      	subs	r3, r2, r3
}
 8016184:	4618      	mov	r0, r3
 8016186:	3714      	adds	r7, #20
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr

08016190 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 8016190:	b480      	push	{r7}
 8016192:	b083      	sub	sp, #12
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	881b      	ldrh	r3, [r3, #0]
 801619e:	461a      	mov	r2, r3
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	881b      	ldrh	r3, [r3, #0]
 80161a4:	1ad3      	subs	r3, r2, r3
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	370c      	adds	r7, #12
 80161aa:	46bd      	mov	sp, r7
 80161ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b0:	4770      	bx	lr
	...

080161b4 <lv_indev_get_next>:
    /*Free the memory of the input device*/
    lv_free(indev);
}

lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d104      	bne.n	80161cc <lv_indev_get_next+0x18>
        return _lv_ll_get_head(indev_ll_head);
 80161c2:	4807      	ldr	r0, [pc, #28]	@ (80161e0 <lv_indev_get_next+0x2c>)
 80161c4:	f005 fe5f 	bl	801be86 <_lv_ll_get_head>
 80161c8:	4603      	mov	r3, r0
 80161ca:	e004      	b.n	80161d6 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(indev_ll_head, indev);
 80161cc:	6879      	ldr	r1, [r7, #4]
 80161ce:	4804      	ldr	r0, [pc, #16]	@ (80161e0 <lv_indev_get_next+0x2c>)
 80161d0:	f005 fe7b 	bl	801beca <_lv_ll_get_next>
 80161d4:	4603      	mov	r3, r0
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3708      	adds	r7, #8
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	200000d0 	.word	0x200000d0

080161e4 <lv_indev_active>:
        }
    }
}

lv_indev_t * lv_indev_active(void)
{
 80161e4:	b480      	push	{r7}
 80161e6:	af00      	add	r7, sp, #0
    return indev_act;
 80161e8:	4b03      	ldr	r3, [pc, #12]	@ (80161f8 <lv_indev_active+0x14>)
 80161ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	46bd      	mov	sp, r7
 80161f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f4:	4770      	bx	lr
 80161f6:	bf00      	nop
 80161f8:	2000008c 	.word	0x2000008c

080161fc <lv_indev_get_scroll_dir>:

    return key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b083      	sub	sp, #12
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d101      	bne.n	801620e <lv_indev_get_scroll_dir+0x12>
 801620a:	2300      	movs	r3, #0
 801620c:	e00f      	b.n	801622e <lv_indev_get_scroll_dir+0x32>
    if(indev->type != LV_INDEV_TYPE_POINTER && indev->type != LV_INDEV_TYPE_BUTTON) return false;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d005      	beq.n	8016222 <lv_indev_get_scroll_dir+0x26>
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	2b03      	cmp	r3, #3
 801621c:	d001      	beq.n	8016222 <lv_indev_get_scroll_dir+0x26>
 801621e:	2300      	movs	r3, #0
 8016220:	e005      	b.n	801622e <lv_indev_get_scroll_dir+0x32>
    return indev->pointer.scroll_dir;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8016228:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801622c:	b2db      	uxtb	r3, r3
}
 801622e:	4618      	mov	r0, r3
 8016230:	370c      	adds	r7, #12
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr

0801623a <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 801623a:	b480      	push	{r7}
 801623c:	b083      	sub	sp, #12
 801623e:	af00      	add	r7, sp, #0
 8016240:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d101      	bne.n	801624c <lv_indev_get_scroll_obj+0x12>
 8016248:	2300      	movs	r3, #0
 801624a:	e00b      	b.n	8016264 <lv_indev_get_scroll_obj+0x2a>
    if(indev->type != LV_INDEV_TYPE_POINTER && indev->type != LV_INDEV_TYPE_BUTTON) return NULL;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	2b01      	cmp	r3, #1
 8016252:	d005      	beq.n	8016260 <lv_indev_get_scroll_obj+0x26>
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	2b03      	cmp	r3, #3
 801625a:	d001      	beq.n	8016260 <lv_indev_get_scroll_obj+0x26>
 801625c:	2300      	movs	r3, #0
 801625e:	e001      	b.n	8016264 <lv_indev_get_scroll_obj+0x2a>
    return indev->pointer.scroll_obj;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
}
 8016264:	4618      	mov	r0, r3
 8016266:	370c      	adds	r7, #12
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	685a      	ldr	r2, [r3, #4]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	689a      	ldr	r2, [r3, #8]
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	68da      	ldr	r2, [r3, #12]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	60da      	str	r2, [r3, #12]
}
 801629a:	bf00      	nop
 801629c:	370c      	adds	r7, #12
 801629e:	46bd      	mov	sp, r7
 80162a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a4:	4770      	bx	lr

080162a6 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 80162a6:	b480      	push	{r7}
 80162a8:	b083      	sub	sp, #12
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	689a      	ldr	r2, [r3, #8]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	1ad3      	subs	r3, r2, r3
 80162b8:	3301      	adds	r3, #1
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	370c      	adds	r7, #12
 80162be:	46bd      	mov	sp, r7
 80162c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c4:	4770      	bx	lr

080162c6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 80162c6:	b480      	push	{r7}
 80162c8:	b083      	sub	sp, #12
 80162ca:	af00      	add	r7, sp, #0
 80162cc:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	68da      	ldr	r2, [r3, #12]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	685b      	ldr	r3, [r3, #4]
 80162d6:	1ad3      	subs	r3, r2, r3
 80162d8:	3301      	adds	r3, #1
}
 80162da:	4618      	mov	r0, r3
 80162dc:	370c      	adds	r7, #12
 80162de:	46bd      	mov	sp, r7
 80162e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e4:	4770      	bx	lr

080162e6 <lv_obj_get_style_width>:
#include "../misc/lv_area.h"
#include "../misc/lv_style.h"
#include "../core/lv_obj_style.h"

static inline int32_t lv_obj_get_style_width(const lv_obj_t * obj, uint32_t part)
{
 80162e6:	b580      	push	{r7, lr}
 80162e8:	b084      	sub	sp, #16
 80162ea:	af00      	add	r7, sp, #0
 80162ec:	6078      	str	r0, [r7, #4]
 80162ee:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80162f0:	2201      	movs	r2, #1
 80162f2:	6839      	ldr	r1, [r7, #0]
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f7ee fdc1 	bl	8004e7c <lv_obj_get_style_prop>
 80162fa:	4603      	mov	r3, r0
 80162fc:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80162fe:	68fb      	ldr	r3, [r7, #12]
}
 8016300:	4618      	mov	r0, r3
 8016302:	3710      	adds	r7, #16
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <lv_obj_get_style_min_width>:

static inline int32_t lv_obj_get_style_min_width(const lv_obj_t * obj, uint32_t part)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8016312:	2204      	movs	r2, #4
 8016314:	6839      	ldr	r1, [r7, #0]
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	f7ee fdb0 	bl	8004e7c <lv_obj_get_style_prop>
 801631c:	4603      	mov	r3, r0
 801631e:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016320:	68fb      	ldr	r3, [r7, #12]
}
 8016322:	4618      	mov	r0, r3
 8016324:	3710      	adds	r7, #16
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}

0801632a <lv_obj_get_style_max_width>:

static inline int32_t lv_obj_get_style_max_width(const lv_obj_t * obj, uint32_t part)
{
 801632a:	b580      	push	{r7, lr}
 801632c:	b084      	sub	sp, #16
 801632e:	af00      	add	r7, sp, #0
 8016330:	6078      	str	r0, [r7, #4]
 8016332:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8016334:	2205      	movs	r2, #5
 8016336:	6839      	ldr	r1, [r7, #0]
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7ee fd9f 	bl	8004e7c <lv_obj_get_style_prop>
 801633e:	4603      	mov	r3, r0
 8016340:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016342:	68fb      	ldr	r3, [r7, #12]
}
 8016344:	4618      	mov	r0, r3
 8016346:	3710      	adds	r7, #16
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <lv_obj_get_style_height>:

static inline int32_t lv_obj_get_style_height(const lv_obj_t * obj, uint32_t part)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8016356:	2202      	movs	r2, #2
 8016358:	6839      	ldr	r1, [r7, #0]
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	f7ee fd8e 	bl	8004e7c <lv_obj_get_style_prop>
 8016360:	4603      	mov	r3, r0
 8016362:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016364:	68fb      	ldr	r3, [r7, #12]
}
 8016366:	4618      	mov	r0, r3
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <lv_obj_get_style_min_height>:

static inline int32_t lv_obj_get_style_min_height(const lv_obj_t * obj, uint32_t part)
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b084      	sub	sp, #16
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]
 8016376:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8016378:	2206      	movs	r2, #6
 801637a:	6839      	ldr	r1, [r7, #0]
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7ee fd7d 	bl	8004e7c <lv_obj_get_style_prop>
 8016382:	4603      	mov	r3, r0
 8016384:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016386:	68fb      	ldr	r3, [r7, #12]
}
 8016388:	4618      	mov	r0, r3
 801638a:	3710      	adds	r7, #16
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}

08016390 <lv_obj_get_style_max_height>:

static inline int32_t lv_obj_get_style_max_height(const lv_obj_t * obj, uint32_t part)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b084      	sub	sp, #16
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801639a:	2207      	movs	r2, #7
 801639c:	6839      	ldr	r1, [r7, #0]
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f7ee fd6c 	bl	8004e7c <lv_obj_get_style_prop>
 80163a4:	4603      	mov	r3, r0
 80163a6:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80163a8:	68fb      	ldr	r3, [r7, #12]
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}

080163b2 <lv_obj_get_style_translate_x>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_translate_x(const lv_obj_t * obj, uint32_t part)
{
 80163b2:	b580      	push	{r7, lr}
 80163b4:	b084      	sub	sp, #16
 80163b6:	af00      	add	r7, sp, #0
 80163b8:	6078      	str	r0, [r7, #4]
 80163ba:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80163bc:	226a      	movs	r2, #106	@ 0x6a
 80163be:	6839      	ldr	r1, [r7, #0]
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7ee fd5b 	bl	8004e7c <lv_obj_get_style_prop>
 80163c6:	4603      	mov	r3, r0
 80163c8:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80163ca:	68fb      	ldr	r3, [r7, #12]
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3710      	adds	r7, #16
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <lv_obj_get_style_translate_y>:

static inline int32_t lv_obj_get_style_translate_y(const lv_obj_t * obj, uint32_t part)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b084      	sub	sp, #16
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80163de:	226b      	movs	r2, #107	@ 0x6b
 80163e0:	6839      	ldr	r1, [r7, #0]
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7ee fd4a 	bl	8004e7c <lv_obj_get_style_prop>
 80163e8:	4603      	mov	r3, r0
 80163ea:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80163ec:	68fb      	ldr	r3, [r7, #12]
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3710      	adds	r7, #16
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}

080163f6 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_SKEW_Y);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_top(const lv_obj_t * obj, uint32_t part)
{
 80163f6:	b580      	push	{r7, lr}
 80163f8:	b084      	sub	sp, #16
 80163fa:	af00      	add	r7, sp, #0
 80163fc:	6078      	str	r0, [r7, #4]
 80163fe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016400:	2210      	movs	r2, #16
 8016402:	6839      	ldr	r1, [r7, #0]
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7ee fd39 	bl	8004e7c <lv_obj_get_style_prop>
 801640a:	4603      	mov	r3, r0
 801640c:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 801640e:	68fb      	ldr	r3, [r7, #12]
}
 8016410:	4618      	mov	r0, r3
 8016412:	3710      	adds	r7, #16
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_left(const lv_obj_t * obj, uint32_t part)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016422:	2212      	movs	r2, #18
 8016424:	6839      	ldr	r1, [r7, #0]
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f7ee fd28 	bl	8004e7c <lv_obj_get_style_prop>
 801642c:	4603      	mov	r3, r0
 801642e:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016430:	68fb      	ldr	r3, [r7, #12]
}
 8016432:	4618      	mov	r0, r3
 8016434:	3710      	adds	r7, #16
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}

0801643a <lv_obj_get_style_pad_row>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_row(const lv_obj_t * obj, uint32_t part)
{
 801643a:	b580      	push	{r7, lr}
 801643c:	b084      	sub	sp, #16
 801643e:	af00      	add	r7, sp, #0
 8016440:	6078      	str	r0, [r7, #4]
 8016442:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016444:	2214      	movs	r2, #20
 8016446:	6839      	ldr	r1, [r7, #0]
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f7ee fd17 	bl	8004e7c <lv_obj_get_style_prop>
 801644e:	4603      	mov	r3, r0
 8016450:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016452:	68fb      	ldr	r3, [r7, #12]
}
 8016454:	4618      	mov	r0, r3
 8016456:	3710      	adds	r7, #16
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}

0801645c <lv_obj_get_style_pad_column>:

static inline int32_t lv_obj_get_style_pad_column(const lv_obj_t * obj, uint32_t part)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b084      	sub	sp, #16
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8016466:	2215      	movs	r2, #21
 8016468:	6839      	ldr	r1, [r7, #0]
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7ee fd06 	bl	8004e7c <lv_obj_get_style_prop>
 8016470:	4603      	mov	r3, r0
 8016472:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016474:	68fb      	ldr	r3, [r7, #12]
}
 8016476:	4618      	mov	r0, r3
 8016478:	3710      	adds	r7, #16
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}

0801647e <lv_obj_get_style_margin_top>:

static inline int32_t lv_obj_get_style_margin_top(const lv_obj_t * obj, uint32_t part)
{
 801647e:	b580      	push	{r7, lr}
 8016480:	b084      	sub	sp, #16
 8016482:	af00      	add	r7, sp, #0
 8016484:	6078      	str	r0, [r7, #4]
 8016486:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_TOP);
 8016488:	2218      	movs	r2, #24
 801648a:	6839      	ldr	r1, [r7, #0]
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f7ee fcf5 	bl	8004e7c <lv_obj_get_style_prop>
 8016492:	4603      	mov	r3, r0
 8016494:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8016496:	68fb      	ldr	r3, [r7, #12]
}
 8016498:	4618      	mov	r0, r3
 801649a:	3710      	adds	r7, #16
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}

080164a0 <lv_obj_get_style_margin_bottom>:

static inline int32_t lv_obj_get_style_margin_bottom(const lv_obj_t * obj, uint32_t part)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_BOTTOM);
 80164aa:	2219      	movs	r2, #25
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f7ee fce4 	bl	8004e7c <lv_obj_get_style_prop>
 80164b4:	4603      	mov	r3, r0
 80164b6:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80164b8:	68fb      	ldr	r3, [r7, #12]
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}

080164c2 <lv_obj_get_style_margin_left>:

static inline int32_t lv_obj_get_style_margin_left(const lv_obj_t * obj, uint32_t part)
{
 80164c2:	b580      	push	{r7, lr}
 80164c4:	b084      	sub	sp, #16
 80164c6:	af00      	add	r7, sp, #0
 80164c8:	6078      	str	r0, [r7, #4]
 80164ca:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_LEFT);
 80164cc:	221a      	movs	r2, #26
 80164ce:	6839      	ldr	r1, [r7, #0]
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7ee fcd3 	bl	8004e7c <lv_obj_get_style_prop>
 80164d6:	4603      	mov	r3, r0
 80164d8:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80164da:	68fb      	ldr	r3, [r7, #12]
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3710      	adds	r7, #16
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}

080164e4 <lv_obj_get_style_margin_right>:

static inline int32_t lv_obj_get_style_margin_right(const lv_obj_t * obj, uint32_t part)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_RIGHT);
 80164ee:	221b      	movs	r2, #27
 80164f0:	6839      	ldr	r1, [r7, #0]
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f7ee fcc2 	bl	8004e7c <lv_obj_get_style_prop>
 80164f8:	4603      	mov	r3, r0
 80164fa:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80164fc:	68fb      	ldr	r3, [r7, #12]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3710      	adds	r7, #16
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}

08016506 <lv_obj_get_style_border_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
    return (lv_opa_t)v.num;
}

static inline int32_t lv_obj_get_style_border_width(const lv_obj_t * obj, uint32_t part)
{
 8016506:	b580      	push	{r7, lr}
 8016508:	b084      	sub	sp, #16
 801650a:	af00      	add	r7, sp, #0
 801650c:	6078      	str	r0, [r7, #4]
 801650e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016510:	2230      	movs	r2, #48	@ 0x30
 8016512:	6839      	ldr	r1, [r7, #0]
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f7ee fcb1 	bl	8004e7c <lv_obj_get_style_prop>
 801651a:	4603      	mov	r3, r0
 801651c:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 801651e:	68fb      	ldr	r3, [r7, #12]
}
 8016520:	4618      	mov	r0, r3
 8016522:	3710      	adds	r7, #16
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <lv_obj_get_style_border_side>:

static inline lv_border_side_t lv_obj_get_style_border_side(const lv_obj_t * obj, uint32_t part)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8016532:	2234      	movs	r2, #52	@ 0x34
 8016534:	6839      	ldr	r1, [r7, #0]
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7ee fca0 	bl	8004e7c <lv_obj_get_style_prop>
 801653c:	4603      	mov	r3, r0
 801653e:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	b2db      	uxtb	r3, r3
}
 8016544:	4618      	mov	r0, r3
 8016546:	3710      	adds	r7, #16
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}

0801654c <lv_obj_get_style_base_dir>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const lv_obj_t * obj, uint32_t part)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016556:	2227      	movs	r2, #39	@ 0x27
 8016558:	6839      	ldr	r1, [r7, #0]
 801655a:	6878      	ldr	r0, [r7, #4]
 801655c:	f7ee fc8e 	bl	8004e7c <lv_obj_get_style_prop>
 8016560:	4603      	mov	r3, r0
 8016562:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	b2db      	uxtb	r3, r3
}
 8016568:	4618      	mov	r0, r3
 801656a:	3710      	adds	r7, #16
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}

08016570 <lv_obj_get_style_flex_flow>:
}

#if LV_USE_FLEX

static inline lv_flex_flow_t lv_obj_get_style_flex_flow(const lv_obj_t * obj, uint32_t part)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 801657a:	227d      	movs	r2, #125	@ 0x7d
 801657c:	6839      	ldr	r1, [r7, #0]
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7ee fc7c 	bl	8004e7c <lv_obj_get_style_prop>
 8016584:	4603      	mov	r3, r0
 8016586:	60fb      	str	r3, [r7, #12]
    return (lv_flex_flow_t)v.num;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	b2db      	uxtb	r3, r3
}
 801658c:	4618      	mov	r0, r3
 801658e:	3710      	adds	r7, #16
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}

08016594 <lv_obj_get_style_flex_main_place>:

static inline lv_flex_align_t lv_obj_get_style_flex_main_place(const lv_obj_t * obj, uint32_t part)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b084      	sub	sp, #16
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 801659e:	227e      	movs	r2, #126	@ 0x7e
 80165a0:	6839      	ldr	r1, [r7, #0]
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f7ee fc6a 	bl	8004e7c <lv_obj_get_style_prop>
 80165a8:	4603      	mov	r3, r0
 80165aa:	60fb      	str	r3, [r7, #12]
    return (lv_flex_align_t)v.num;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	b2db      	uxtb	r3, r3
}
 80165b0:	4618      	mov	r0, r3
 80165b2:	3710      	adds	r7, #16
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <lv_obj_get_style_flex_cross_place>:

static inline lv_flex_align_t lv_obj_get_style_flex_cross_place(const lv_obj_t * obj, uint32_t part)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 80165c2:	227f      	movs	r2, #127	@ 0x7f
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7ee fc58 	bl	8004e7c <lv_obj_get_style_prop>
 80165cc:	4603      	mov	r3, r0
 80165ce:	60fb      	str	r3, [r7, #12]
    return (lv_flex_align_t)v.num;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	b2db      	uxtb	r3, r3
}
 80165d4:	4618      	mov	r0, r3
 80165d6:	3710      	adds	r7, #16
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}

080165dc <lv_obj_get_style_flex_track_place>:

static inline lv_flex_align_t lv_obj_get_style_flex_track_place(const lv_obj_t * obj, uint32_t part)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 80165e6:	2280      	movs	r2, #128	@ 0x80
 80165e8:	6839      	ldr	r1, [r7, #0]
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f7ee fc46 	bl	8004e7c <lv_obj_get_style_prop>
 80165f0:	4603      	mov	r3, r0
 80165f2:	60fb      	str	r3, [r7, #12]
    return (lv_flex_align_t)v.num;
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	b2db      	uxtb	r3, r3
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3710      	adds	r7, #16
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}

08016600 <lv_obj_get_style_flex_grow>:

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 801660a:	2281      	movs	r2, #129	@ 0x81
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f7ee fc34 	bl	8004e7c <lv_obj_get_style_prop>
 8016614:	4603      	mov	r3, r0
 8016616:	60fb      	str	r3, [r7, #12]
    return (uint8_t)v.num;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	b2db      	uxtb	r3, r3
}
 801661c:	4618      	mov	r0, r3
 801661e:	3710      	adds	r7, #16
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <lv_obj_get_style_space_left>:
    lv_obj_set_style_transform_scale_x(obj, value, selector);
    lv_obj_set_style_transform_scale_y(obj, value, selector);
}

static inline int32_t lv_obj_get_style_space_left(const lv_obj_t * obj, uint32_t part)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_left(obj, part);
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f7ff fef1 	bl	8016418 <lv_obj_get_style_pad_left>
 8016636:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8016638:	6839      	ldr	r1, [r7, #0]
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7ff ff63 	bl	8016506 <lv_obj_get_style_border_width>
 8016640:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8016642:	6839      	ldr	r1, [r7, #0]
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	f7ff ff6f 	bl	8016528 <lv_obj_get_style_border_side>
 801664a:	4603      	mov	r3, r0
 801664c:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_LEFT) ? padding + border_width : padding;
 801664e:	7bfb      	ldrb	r3, [r7, #15]
 8016650:	f003 0304 	and.w	r3, r3, #4
 8016654:	2b00      	cmp	r3, #0
 8016656:	d003      	beq.n	8016660 <lv_obj_get_style_space_left+0x3c>
 8016658:	697a      	ldr	r2, [r7, #20]
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	4413      	add	r3, r2
 801665e:	e000      	b.n	8016662 <lv_obj_get_style_space_left+0x3e>
 8016660:	697b      	ldr	r3, [r7, #20]
}
 8016662:	4618      	mov	r0, r3
 8016664:	3718      	adds	r7, #24
 8016666:	46bd      	mov	sp, r7
 8016668:	bd80      	pop	{r7, pc}

0801666a <lv_obj_get_style_space_top>:
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
    return (border_side & LV_BORDER_SIDE_RIGHT) ? padding + border_width : padding;
}

static inline int32_t lv_obj_get_style_space_top(const lv_obj_t * obj, uint32_t part)
{
 801666a:	b580      	push	{r7, lr}
 801666c:	b086      	sub	sp, #24
 801666e:	af00      	add	r7, sp, #0
 8016670:	6078      	str	r0, [r7, #4]
 8016672:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_top(obj, part);
 8016674:	6839      	ldr	r1, [r7, #0]
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f7ff febd 	bl	80163f6 <lv_obj_get_style_pad_top>
 801667c:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 801667e:	6839      	ldr	r1, [r7, #0]
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	f7ff ff40 	bl	8016506 <lv_obj_get_style_border_width>
 8016686:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8016688:	6839      	ldr	r1, [r7, #0]
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f7ff ff4c 	bl	8016528 <lv_obj_get_style_border_side>
 8016690:	4603      	mov	r3, r0
 8016692:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_TOP) ? padding + border_width : padding;
 8016694:	7bfb      	ldrb	r3, [r7, #15]
 8016696:	f003 0302 	and.w	r3, r3, #2
 801669a:	2b00      	cmp	r3, #0
 801669c:	d003      	beq.n	80166a6 <lv_obj_get_style_space_top+0x3c>
 801669e:	697a      	ldr	r2, [r7, #20]
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	4413      	add	r3, r2
 80166a4:	e000      	b.n	80166a8 <lv_obj_get_style_space_top+0x3e>
 80166a6:	697b      	ldr	r3, [r7, #20]
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3718      	adds	r7, #24
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <lv_flex_init>:
/*=====================
 * Setter functions
 *====================*/

void lv_flex_init(void)
{
 80166b0:	b480      	push	{r7}
 80166b2:	af00      	add	r7, sp, #0
    layout_list_def[LV_LAYOUT_FLEX].cb = flex_update;
 80166b4:	4b07      	ldr	r3, [pc, #28]	@ (80166d4 <lv_flex_init+0x24>)
 80166b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80166b8:	3308      	adds	r3, #8
 80166ba:	4a07      	ldr	r2, [pc, #28]	@ (80166d8 <lv_flex_init+0x28>)
 80166bc:	601a      	str	r2, [r3, #0]
    layout_list_def[LV_LAYOUT_FLEX].user_data = NULL;
 80166be:	4b05      	ldr	r3, [pc, #20]	@ (80166d4 <lv_flex_init+0x24>)
 80166c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80166c2:	3308      	adds	r3, #8
 80166c4:	2200      	movs	r2, #0
 80166c6:	605a      	str	r2, [r3, #4]

}
 80166c8:	bf00      	nop
 80166ca:	46bd      	mov	sp, r7
 80166cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d0:	4770      	bx	lr
 80166d2:	bf00      	nop
 80166d4:	2000008c 	.word	0x2000008c
 80166d8:	080166dd 	.word	0x080166dd

080166dc <flex_update>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void flex_update(lv_obj_t * cont, void * user_data)
{
 80166dc:	b590      	push	{r4, r7, lr}
 80166de:	b0a9      	sub	sp, #164	@ 0xa4
 80166e0:	af06      	add	r7, sp, #24
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	6039      	str	r1, [r7, #0]
    LV_LOG_INFO("update %p container", (void *)cont);
    LV_UNUSED(user_data);

    flex_t f;
    lv_flex_flow_t flow = lv_obj_get_style_flex_flow(cont, LV_PART_MAIN);
 80166e6:	2100      	movs	r1, #0
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7ff ff41 	bl	8016570 <lv_obj_get_style_flex_flow>
 80166ee:	4603      	mov	r3, r0
 80166f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 80166f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80166f8:	f003 0301 	and.w	r3, r3, #1
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	bf0c      	ite	eq
 8016700:	2301      	moveq	r3, #1
 8016702:	2300      	movne	r3, #0
 8016704:	b2da      	uxtb	r2, r3
 8016706:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801670a:	f362 0300 	bfi	r3, r2, #0, #1
 801670e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
 8016712:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016716:	109b      	asrs	r3, r3, #2
 8016718:	f003 0301 	and.w	r3, r3, #1
 801671c:	b2da      	uxtb	r2, r3
 801671e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016722:	f362 0341 	bfi	r3, r2, #1, #1
 8016726:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
 801672a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801672e:	10db      	asrs	r3, r3, #3
 8016730:	f003 0301 	and.w	r3, r3, #1
 8016734:	b2da      	uxtb	r2, r3
 8016736:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801673a:	f362 0382 	bfi	r3, r2, #2, #1
 801673e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 8016742:	2100      	movs	r1, #0
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f7ff ff25 	bl	8016594 <lv_obj_get_style_flex_main_place>
 801674a:	4603      	mov	r3, r0
 801674c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 8016750:	2100      	movs	r1, #0
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f7ff ff30 	bl	80165b8 <lv_obj_get_style_flex_cross_place>
 8016758:	4603      	mov	r3, r0
 801675a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 801675e:	2100      	movs	r1, #0
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f7ff ff3b 	bl	80165dc <lv_obj_get_style_flex_track_place>
 8016766:	4603      	mov	r3, r0
 8016768:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    bool rtl = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL;
 801676c:	2100      	movs	r1, #0
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f7ff feec 	bl	801654c <lv_obj_get_style_base_dir>
 8016774:	4603      	mov	r3, r0
 8016776:	2b01      	cmp	r3, #1
 8016778:	bf0c      	ite	eq
 801677a:	2301      	moveq	r3, #1
 801677c:	2300      	movne	r3, #0
 801677e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    int32_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8016782:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016786:	f003 0301 	and.w	r3, r3, #1
 801678a:	b2db      	uxtb	r3, r3
 801678c:	2b00      	cmp	r3, #0
 801678e:	d105      	bne.n	801679c <flex_update+0xc0>
 8016790:	2100      	movs	r1, #0
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f7ff fe62 	bl	801645c <lv_obj_get_style_pad_column>
 8016798:	4603      	mov	r3, r0
 801679a:	e004      	b.n	80167a6 <flex_update+0xca>
 801679c:	2100      	movs	r1, #0
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f7ff fe4b 	bl	801643a <lv_obj_get_style_pad_row>
 80167a4:	4603      	mov	r3, r0
 80167a6:	673b      	str	r3, [r7, #112]	@ 0x70
                                                                                                            LV_PART_MAIN);
    int32_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 80167a8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80167ac:	f003 0301 	and.w	r3, r3, #1
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d005      	beq.n	80167c2 <flex_update+0xe6>
 80167b6:	2100      	movs	r1, #0
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f7ff fe4f 	bl	801645c <lv_obj_get_style_pad_column>
 80167be:	4603      	mov	r3, r0
 80167c0:	e004      	b.n	80167cc <flex_update+0xf0>
 80167c2:	2100      	movs	r1, #0
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7ff fe38 	bl	801643a <lv_obj_get_style_pad_row>
 80167ca:	4603      	mov	r3, r0
 80167cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
                                                                                                          LV_PART_MAIN);
    int32_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 80167ce:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80167d2:	f003 0301 	and.w	r3, r3, #1
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d004      	beq.n	80167e6 <flex_update+0x10a>
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f7ec fb20 	bl	8002e22 <lv_obj_get_content_width>
 80167e2:	4603      	mov	r3, r0
 80167e4:	e003      	b.n	80167ee <flex_update+0x112>
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f7ec fb35 	bl	8002e56 <lv_obj_get_content_height>
 80167ec:	4603      	mov	r3, r0
 80167ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    int32_t abs_y = cont->coords.y1 + lv_obj_get_style_space_top(cont,
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	699c      	ldr	r4, [r3, #24]
 80167f4:	2100      	movs	r1, #0
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f7ff ff37 	bl	801666a <lv_obj_get_style_space_top>
 80167fc:	4603      	mov	r3, r0
 80167fe:	441c      	add	r4, r3
                                                                 LV_PART_MAIN) - lv_obj_get_scroll_y(cont);
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f7ed fb0d 	bl	8003e20 <lv_obj_get_scroll_y>
 8016806:	4603      	mov	r3, r0
 8016808:	1ae3      	subs	r3, r4, r3
    int32_t abs_y = cont->coords.y1 + lv_obj_get_style_space_top(cont,
 801680a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int32_t abs_x = cont->coords.x1 + lv_obj_get_style_space_left(cont,
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	695c      	ldr	r4, [r3, #20]
 8016810:	2100      	movs	r1, #0
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f7ff ff06 	bl	8016624 <lv_obj_get_style_space_left>
 8016818:	4603      	mov	r3, r0
 801681a:	441c      	add	r4, r3
                                                                  LV_PART_MAIN) - lv_obj_get_scroll_x(cont);
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f7ed faeb 	bl	8003df8 <lv_obj_get_scroll_x>
 8016822:	4603      	mov	r3, r0
 8016824:	1ae3      	subs	r3, r4, r3
    int32_t abs_x = cont->coords.x1 + lv_obj_get_style_space_left(cont,
 8016826:	64bb      	str	r3, [r7, #72]	@ 0x48

    lv_flex_align_t track_cross_place = f.track_place;
 8016828:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 801682c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    int32_t * cross_pos = (f.row ? &abs_y : &abs_x);
 8016830:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	b2db      	uxtb	r3, r3
 801683a:	2b00      	cmp	r3, #0
 801683c:	d002      	beq.n	8016844 <flex_update+0x168>
 801683e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016842:	e001      	b.n	8016848 <flex_update+0x16c>
 8016844:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016848:	667b      	str	r3, [r7, #100]	@ 0x64

    int32_t w_set = lv_obj_get_style_width(cont, LV_PART_MAIN);
 801684a:	2100      	movs	r1, #0
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7ff fd4a 	bl	80162e6 <lv_obj_get_style_width>
 8016852:	6638      	str	r0, [r7, #96]	@ 0x60
    int32_t h_set = lv_obj_get_style_height(cont, LV_PART_MAIN);
 8016854:	2100      	movs	r1, #0
 8016856:	6878      	ldr	r0, [r7, #4]
 8016858:	f7ff fd78 	bl	801634c <lv_obj_get_style_height>
 801685c:	65f8      	str	r0, [r7, #92]	@ 0x5c

    /*Content sized objects should squeeze the gap between the children, therefore any alignment will look like `START`*/
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 801685e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016862:	f003 0301 	and.w	r3, r3, #1
 8016866:	b2db      	uxtb	r3, r3
 8016868:	2b00      	cmp	r3, #0
 801686a:	d00b      	beq.n	8016884 <flex_update+0x1a8>
 801686c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801686e:	4aa1      	ldr	r2, [pc, #644]	@ (8016af4 <flex_update+0x418>)
 8016870:	4293      	cmp	r3, r2
 8016872:	d107      	bne.n	8016884 <flex_update+0x1a8>
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 801687a:	f003 0304 	and.w	r3, r3, #4
 801687e:	b2db      	uxtb	r3, r3
 8016880:	2b00      	cmp	r3, #0
 8016882:	d012      	beq.n	80168aa <flex_update+0x1ce>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8016884:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016888:	f003 0301 	and.w	r3, r3, #1
 801688c:	b2db      	uxtb	r3, r3
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 801688e:	2b00      	cmp	r3, #0
 8016890:	d10e      	bne.n	80168b0 <flex_update+0x1d4>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8016892:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016894:	4a97      	ldr	r2, [pc, #604]	@ (8016af4 <flex_update+0x418>)
 8016896:	4293      	cmp	r3, r2
 8016898:	d10a      	bne.n	80168b0 <flex_update+0x1d4>
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80168a0:	f003 0308 	and.w	r3, r3, #8
 80168a4:	b2db      	uxtb	r3, r3
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d102      	bne.n	80168b0 <flex_update+0x1d4>
        track_cross_place = LV_FLEX_ALIGN_START;
 80168aa:	2300      	movs	r3, #0
 80168ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    if(rtl && !f.row) {
 80168b0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d015      	beq.n	80168e4 <flex_update+0x208>
 80168b8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80168bc:	f003 0301 	and.w	r3, r3, #1
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d10e      	bne.n	80168e4 <flex_update+0x208>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 80168c6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d103      	bne.n	80168d6 <flex_update+0x1fa>
 80168ce:	2301      	movs	r3, #1
 80168d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80168d4:	e006      	b.n	80168e4 <flex_update+0x208>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 80168d6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80168da:	2b01      	cmp	r3, #1
 80168dc:	d102      	bne.n	80168e4 <flex_update+0x208>
 80168de:	2300      	movs	r3, #0
 80168e0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    int32_t total_track_cross_size = 0;
 80168e4:	2300      	movs	r3, #0
 80168e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    int32_t gap = 0;
 80168ea:	2300      	movs	r3, #0
 80168ec:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t track_cnt = 0;
 80168ee:	2300      	movs	r3, #0
 80168f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t track_first_item;
    int32_t next_track_first_item;

    if(track_cross_place != LV_FLEX_ALIGN_START) {
 80168f2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d060      	beq.n	80169bc <flex_update+0x2e0>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80168fa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80168fe:	f003 0304 	and.w	r3, r3, #4
 8016902:	b2db      	uxtb	r3, r3
 8016904:	2b00      	cmp	r3, #0
 8016906:	d004      	beq.n	8016912 <flex_update+0x236>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	689b      	ldr	r3, [r3, #8]
 801690c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801690e:	3b01      	subs	r3, #1
 8016910:	e000      	b.n	8016914 <flex_update+0x238>
 8016912:	2300      	movs	r3, #0
 8016914:	67bb      	str	r3, [r7, #120]	@ 0x78
        track_t t;
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016916:	e01f      	b.n	8016958 <flex_update+0x27c>
            /*Search the first item of the next row*/
            t.grow_dsc_calc = 0;
 8016918:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801691c:	f36f 0300 	bfc	r3, #0, #1
 8016920:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8016924:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8016928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801692c:	9301      	str	r3, [sp, #4]
 801692e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016930:	9300      	str	r3, [sp, #0]
 8016932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016934:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f000 f8de 	bl	8016af8 <find_track_end>
 801693c:	65b8      	str	r0, [r7, #88]	@ 0x58
            total_track_cross_size += t.track_cross_size + track_gap;
 801693e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016940:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016942:	4413      	add	r3, r2
 8016944:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016948:	4413      	add	r3, r2
 801694a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            track_cnt++;
 801694e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016950:	3301      	adds	r3, #1
 8016952:	67fb      	str	r3, [r7, #124]	@ 0x7c
            track_first_item = next_track_first_item;
 8016954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016956:	67bb      	str	r3, [r7, #120]	@ 0x78
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	689b      	ldr	r3, [r3, #8]
 801695c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801695e:	461a      	mov	r2, r3
 8016960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016962:	4293      	cmp	r3, r2
 8016964:	da02      	bge.n	801696c <flex_update+0x290>
 8016966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016968:	2b00      	cmp	r3, #0
 801696a:	dad5      	bge.n	8016918 <flex_update+0x23c>
        }

        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 801696c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801696e:	2b00      	cmp	r3, #0
 8016970:	d005      	beq.n	801697e <flex_update+0x2a2>
 8016972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016978:	1ad3      	subs	r3, r2, r3
 801697a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        /*Place the tracks to get the start position*/
        int32_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 801697e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016982:	f003 0301 	and.w	r3, r3, #1
 8016986:	b2db      	uxtb	r3, r3
 8016988:	2b00      	cmp	r3, #0
 801698a:	d004      	beq.n	8016996 <flex_update+0x2ba>
 801698c:	6878      	ldr	r0, [r7, #4]
 801698e:	f7ec fa62 	bl	8002e56 <lv_obj_get_content_height>
 8016992:	4603      	mov	r3, r0
 8016994:	e003      	b.n	801699e <flex_update+0x2c2>
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	f7ec fa43 	bl	8002e22 <lv_obj_get_content_width>
 801699c:	4603      	mov	r3, r0
 801699e:	657b      	str	r3, [r7, #84]	@ 0x54
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 80169a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80169a2:	f897 0087 	ldrb.w	r0, [r7, #135]	@ 0x87
 80169a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80169aa:	9301      	str	r3, [sp, #4]
 80169ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169ae:	9300      	str	r3, [sp, #0]
 80169b0:	4613      	mov	r3, r2
 80169b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80169b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80169b8:	f000 fe12 	bl	80175e0 <place_content>
    }

    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80169bc:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80169c0:	f003 0304 	and.w	r3, r3, #4
 80169c4:	b2db      	uxtb	r3, r3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d004      	beq.n	80169d4 <flex_update+0x2f8>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	689b      	ldr	r3, [r3, #8]
 80169ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169d0:	3b01      	subs	r3, #1
 80169d2:	e000      	b.n	80169d6 <flex_update+0x2fa>
 80169d4:	2300      	movs	r3, #0
 80169d6:	67bb      	str	r3, [r7, #120]	@ 0x78

    if(rtl && !f.row) {
 80169d8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d06b      	beq.n	8016ab8 <flex_update+0x3dc>
 80169e0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80169e4:	f003 0301 	and.w	r3, r3, #1
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d164      	bne.n	8016ab8 <flex_update+0x3dc>
        *cross_pos += total_track_cross_size;
 80169ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80169f6:	441a      	add	r2, r3
 80169f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80169fa:	601a      	str	r2, [r3, #0]
    }

    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80169fc:	e05c      	b.n	8016ab8 <flex_update+0x3dc>
        track_t t;
        t.grow_dsc_calc = 1;
 80169fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016a02:	f043 0301 	orr.w	r3, r3, #1
 8016a06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        /*Search the first item of the next row*/
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8016a0a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8016a0e:	f107 030c 	add.w	r3, r7, #12
 8016a12:	9301      	str	r3, [sp, #4]
 8016a14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016a16:	9300      	str	r3, [sp, #0]
 8016a18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016a1a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f000 f86b 	bl	8016af8 <find_track_end>
 8016a22:	65b8      	str	r0, [r7, #88]	@ 0x58

        if(rtl && !f.row) {
 8016a24:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d00c      	beq.n	8016a46 <flex_update+0x36a>
 8016a2c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016a30:	f003 0301 	and.w	r3, r3, #1
 8016a34:	b2db      	uxtb	r3, r3
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d105      	bne.n	8016a46 <flex_update+0x36a>
            *cross_pos -= t.track_cross_size;
 8016a3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a3c:	681a      	ldr	r2, [r3, #0]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	1ad2      	subs	r2, r2, r3
 8016a42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a44:	601a      	str	r2, [r3, #0]
        }
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 8016a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016a4a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8016a4e:	f107 010c 	add.w	r1, r7, #12
 8016a52:	9104      	str	r1, [sp, #16]
 8016a54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8016a56:	9103      	str	r1, [sp, #12]
 8016a58:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8016a5a:	9102      	str	r1, [sp, #8]
 8016a5c:	9201      	str	r2, [sp, #4]
 8016a5e:	9300      	str	r3, [sp, #0]
 8016a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a62:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8016a64:	4601      	mov	r1, r0
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f000 f9fc 	bl	8016e64 <children_repos>
        track_first_item = next_track_first_item;
 8016a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
        lv_free(t.grow_dsc);
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	4618      	mov	r0, r3
 8016a74:	f007 fb48 	bl	801e108 <lv_free>
        t.grow_dsc = NULL;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	61fb      	str	r3, [r7, #28]
        if(rtl && !f.row) {
 8016a7c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d00f      	beq.n	8016aa4 <flex_update+0x3c8>
 8016a84:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016a88:	f003 0301 	and.w	r3, r3, #1
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d108      	bne.n	8016aa4 <flex_update+0x3c8>
            *cross_pos -= gap + track_gap;
 8016a92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a9a:	440b      	add	r3, r1
 8016a9c:	1ad2      	subs	r2, r2, r3
 8016a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016aa0:	601a      	str	r2, [r3, #0]
 8016aa2:	e009      	b.n	8016ab8 <flex_update+0x3dc>
        }
        else {
            *cross_pos += t.track_cross_size + gap + track_gap;
 8016aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	68f9      	ldr	r1, [r7, #12]
 8016aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016aac:	4419      	add	r1, r3
 8016aae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016ab0:	440b      	add	r3, r1
 8016ab2:	441a      	add	r2, r3
 8016ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016ab6:	601a      	str	r2, [r3, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	689b      	ldr	r3, [r3, #8]
 8016abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016abe:	461a      	mov	r2, r3
 8016ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ac2:	4293      	cmp	r3, r2
 8016ac4:	da02      	bge.n	8016acc <flex_update+0x3f0>
 8016ac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	da98      	bge.n	80169fe <flex_update+0x322>
        }
    }
    LV_ASSERT_MEM_INTEGRITY();

    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8016acc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016ace:	4a09      	ldr	r2, [pc, #36]	@ (8016af4 <flex_update+0x418>)
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	d003      	beq.n	8016adc <flex_update+0x400>
 8016ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016ad6:	4a07      	ldr	r2, [pc, #28]	@ (8016af4 <flex_update+0x418>)
 8016ad8:	4293      	cmp	r3, r2
 8016ada:	d102      	bne.n	8016ae2 <flex_update+0x406>
        lv_obj_refr_size(cont);
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f7eb ff63 	bl	80029a8 <lv_obj_refr_size>
    }

    lv_obj_send_event(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	212d      	movs	r1, #45	@ 0x2d
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7eb fb79 	bl	80021de <lv_obj_send_event>

    LV_TRACE_LAYOUT("finished");
}
 8016aec:	bf00      	nop
 8016aee:	378c      	adds	r7, #140	@ 0x8c
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd90      	pop	{r4, r7, pc}
 8016af4:	200007d1 	.word	0x200007d1

08016af8 <find_track_end>:
/**
 * Find the last item of a track
 */
static int32_t find_track_end(lv_obj_t * cont, flex_t * f, int32_t item_start_id, int32_t max_main_size,
                              int32_t item_gap, track_t * t)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b08e      	sub	sp, #56	@ 0x38
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	60f8      	str	r0, [r7, #12]
 8016b00:	60b9      	str	r1, [r7, #8]
 8016b02:	607a      	str	r2, [r7, #4]
 8016b04:	603b      	str	r3, [r7, #0]
    int32_t w_set = lv_obj_get_style_width(cont, LV_PART_MAIN);
 8016b06:	2100      	movs	r1, #0
 8016b08:	68f8      	ldr	r0, [r7, #12]
 8016b0a:	f7ff fbec 	bl	80162e6 <lv_obj_get_style_width>
 8016b0e:	6338      	str	r0, [r7, #48]	@ 0x30
    int32_t h_set = lv_obj_get_style_height(cont, LV_PART_MAIN);
 8016b10:	2100      	movs	r1, #0
 8016b12:	68f8      	ldr	r0, [r7, #12]
 8016b14:	f7ff fc1a 	bl	801634c <lv_obj_get_style_height>
 8016b18:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /*Can't wrap if the size is auto (i.e. the size depends on the children)*/
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 8016b1a:	68bb      	ldr	r3, [r7, #8]
 8016b1c:	78db      	ldrb	r3, [r3, #3]
 8016b1e:	f003 0302 	and.w	r3, r3, #2
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d01a      	beq.n	8016b5e <find_track_end+0x66>
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	78db      	ldrb	r3, [r3, #3]
 8016b2c:	f003 0301 	and.w	r3, r3, #1
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d003      	beq.n	8016b3e <find_track_end+0x46>
 8016b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b38:	4aa0      	ldr	r2, [pc, #640]	@ (8016dbc <find_track_end+0x2c4>)
 8016b3a:	4293      	cmp	r3, r2
 8016b3c:	d00a      	beq.n	8016b54 <find_track_end+0x5c>
 8016b3e:	68bb      	ldr	r3, [r7, #8]
 8016b40:	78db      	ldrb	r3, [r3, #3]
 8016b42:	f003 0301 	and.w	r3, r3, #1
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d108      	bne.n	8016b5e <find_track_end+0x66>
 8016b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b4e:	4a9b      	ldr	r2, [pc, #620]	@ (8016dbc <find_track_end+0x2c4>)
 8016b50:	4293      	cmp	r3, r2
 8016b52:	d104      	bne.n	8016b5e <find_track_end+0x66>
        f->wrap = false;
 8016b54:	68ba      	ldr	r2, [r7, #8]
 8016b56:	78d3      	ldrb	r3, [r2, #3]
 8016b58:	f36f 0341 	bfc	r3, #1, #1
 8016b5c:	70d3      	strb	r3, [r2, #3]
    }
    int32_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width_with_margin : lv_obj_get_height_with_margin);
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	78db      	ldrb	r3, [r3, #3]
 8016b62:	f003 0301 	and.w	r3, r3, #1
 8016b66:	b2db      	uxtb	r3, r3
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d001      	beq.n	8016b70 <find_track_end+0x78>
 8016b6c:	4b94      	ldr	r3, [pc, #592]	@ (8016dc0 <find_track_end+0x2c8>)
 8016b6e:	e000      	b.n	8016b72 <find_track_end+0x7a>
 8016b70:	4b94      	ldr	r3, [pc, #592]	@ (8016dc4 <find_track_end+0x2cc>)
 8016b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width_with_margin :
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	78db      	ldrb	r3, [r3, #3]
 8016b78:	f003 0301 	and.w	r3, r3, #1
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d101      	bne.n	8016b86 <find_track_end+0x8e>
 8016b82:	4b8f      	ldr	r3, [pc, #572]	@ (8016dc0 <find_track_end+0x2c8>)
 8016b84:	e000      	b.n	8016b88 <find_track_end+0x90>
 8016b86:	4b8f      	ldr	r3, [pc, #572]	@ (8016dc4 <find_track_end+0x2cc>)
 8016b88:	627b      	str	r3, [r7, #36]	@ 0x24
                                                  lv_obj_get_height_with_margin);

    t->track_main_size = 0;
 8016b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	605a      	str	r2, [r3, #4]
    t->track_fix_main_size = 0;
 8016b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b92:	2200      	movs	r2, #0
 8016b94:	609a      	str	r2, [r3, #8]
    t->grow_item_cnt = 0;
 8016b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b98:	2200      	movs	r2, #0
 8016b9a:	615a      	str	r2, [r3, #20]
    t->track_cross_size = 0;
 8016b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	601a      	str	r2, [r3, #0]
    t->item_cnt = 0;
 8016ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	60da      	str	r2, [r3, #12]
    t->grow_dsc = NULL;
 8016ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016baa:	2200      	movs	r2, #0
 8016bac:	611a      	str	r2, [r3, #16]

    int32_t item_id = item_start_id;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	617b      	str	r3, [r7, #20]

    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 8016bb2:	697b      	ldr	r3, [r7, #20]
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f7ee fb69 	bl	800528e <lv_obj_get_child>
 8016bbc:	6378      	str	r0, [r7, #52]	@ 0x34
    while(item) {
 8016bbe:	e0f3      	b.n	8016da8 <find_track_end+0x2b0>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	687a      	ldr	r2, [r7, #4]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d008      	beq.n	8016bda <find_track_end+0xe2>
 8016bc8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016bcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016bce:	f7eb fa59 	bl	8002084 <lv_obj_has_flag>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	f040 80ec 	bne.w	8016db2 <find_track_end+0x2ba>

        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8016bda:	497b      	ldr	r1, [pc, #492]	@ (8016dc8 <find_track_end+0x2d0>)
 8016bdc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016bde:	f7eb fa66 	bl	80020ae <lv_obj_has_flag_any>
 8016be2:	4603      	mov	r3, r0
 8016be4:	f083 0301 	eor.w	r3, r3, #1
 8016be8:	b2db      	uxtb	r3, r3
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	f000 80c5 	beq.w	8016d7a <find_track_end+0x282>
            uint8_t grow_value = lv_obj_get_style_flex_grow(item, LV_PART_MAIN);
 8016bf0:	2100      	movs	r1, #0
 8016bf2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016bf4:	f7ff fd04 	bl	8016600 <lv_obj_get_style_flex_grow>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(grow_value) {
 8016bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	f000 8089 	beq.w	8016d1a <find_track_end+0x222>
                t->grow_item_cnt++;
 8016c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c0a:	695b      	ldr	r3, [r3, #20]
 8016c0c:	1c5a      	adds	r2, r3, #1
 8016c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c10:	615a      	str	r2, [r3, #20]
                t->track_fix_main_size += item_gap;
 8016c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c14:	689a      	ldr	r2, [r3, #8]
 8016c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c18:	441a      	add	r2, r3
 8016c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c1c:	609a      	str	r2, [r3, #8]
                if(t->grow_dsc_calc) {
 8016c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c20:	7e1b      	ldrb	r3, [r3, #24]
 8016c22:	f003 0301 	and.w	r3, r3, #1
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	f000 8090 	beq.w	8016d4e <find_track_end+0x256>
                    grow_dsc_t * new_dsc = lv_realloc(t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt));
 8016c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c30:	6918      	ldr	r0, [r3, #16]
 8016c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c34:	695a      	ldr	r2, [r3, #20]
 8016c36:	4613      	mov	r3, r2
 8016c38:	005b      	lsls	r3, r3, #1
 8016c3a:	4413      	add	r3, r2
 8016c3c:	00db      	lsls	r3, r3, #3
 8016c3e:	4619      	mov	r1, r3
 8016c40:	f007 fa7a 	bl	801e138 <lv_realloc>
 8016c44:	61b8      	str	r0, [r7, #24]
                    LV_ASSERT_MALLOC(new_dsc);
 8016c46:	69bb      	ldr	r3, [r7, #24]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d101      	bne.n	8016c50 <find_track_end+0x158>
 8016c4c:	bf00      	nop
 8016c4e:	e7fd      	b.n	8016c4c <find_track_end+0x154>
                    if(new_dsc == NULL) return item_id;
 8016c50:	69bb      	ldr	r3, [r7, #24]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d101      	bne.n	8016c5a <find_track_end+0x162>
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	e0ff      	b.n	8016e5a <find_track_end+0x362>

                    new_dsc[t->grow_item_cnt - 1].item = item;
 8016c5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c5c:	695a      	ldr	r2, [r3, #20]
 8016c5e:	4613      	mov	r3, r2
 8016c60:	005b      	lsls	r3, r3, #1
 8016c62:	4413      	add	r3, r2
 8016c64:	00db      	lsls	r3, r3, #3
 8016c66:	3b18      	subs	r3, #24
 8016c68:	69ba      	ldr	r2, [r7, #24]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016c6e:	601a      	str	r2, [r3, #0]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN)
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	78db      	ldrb	r3, [r3, #3]
 8016c74:	f003 0301 	and.w	r3, r3, #1
 8016c78:	b2db      	uxtb	r3, r3
                                                             : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d005      	beq.n	8016c8a <find_track_end+0x192>
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN)
 8016c7e:	2100      	movs	r1, #0
 8016c80:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016c82:	f7ff fb41 	bl	8016308 <lv_obj_get_style_min_width>
 8016c86:	4602      	mov	r2, r0
 8016c88:	e004      	b.n	8016c94 <find_track_end+0x19c>
                                                             : lv_obj_get_style_min_height(item, LV_PART_MAIN);
 8016c8a:	2100      	movs	r1, #0
 8016c8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016c8e:	f7ff fb6e 	bl	801636e <lv_obj_get_style_min_height>
 8016c92:	4602      	mov	r2, r0
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item, LV_PART_MAIN)
 8016c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c96:	6959      	ldr	r1, [r3, #20]
 8016c98:	460b      	mov	r3, r1
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	440b      	add	r3, r1
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	3b18      	subs	r3, #24
 8016ca2:	69b9      	ldr	r1, [r7, #24]
 8016ca4:	440b      	add	r3, r1
 8016ca6:	605a      	str	r2, [r3, #4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN)
 8016ca8:	68bb      	ldr	r3, [r7, #8]
 8016caa:	78db      	ldrb	r3, [r3, #3]
 8016cac:	f003 0301 	and.w	r3, r3, #1
 8016cb0:	b2db      	uxtb	r3, r3
                                                             : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d005      	beq.n	8016cc2 <find_track_end+0x1ca>
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN)
 8016cb6:	2100      	movs	r1, #0
 8016cb8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016cba:	f7ff fb36 	bl	801632a <lv_obj_get_style_max_width>
 8016cbe:	4602      	mov	r2, r0
 8016cc0:	e004      	b.n	8016ccc <find_track_end+0x1d4>
                                                             : lv_obj_get_style_max_height(item, LV_PART_MAIN);
 8016cc2:	2100      	movs	r1, #0
 8016cc4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016cc6:	f7ff fb63 	bl	8016390 <lv_obj_get_style_max_height>
 8016cca:	4602      	mov	r2, r0
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item, LV_PART_MAIN)
 8016ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cce:	6959      	ldr	r1, [r3, #20]
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	005b      	lsls	r3, r3, #1
 8016cd4:	440b      	add	r3, r1
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	3b18      	subs	r3, #24
 8016cda:	69b9      	ldr	r1, [r7, #24]
 8016cdc:	440b      	add	r3, r1
 8016cde:	609a      	str	r2, [r3, #8]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8016ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ce2:	695a      	ldr	r2, [r3, #20]
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	4413      	add	r3, r2
 8016cea:	00db      	lsls	r3, r3, #3
 8016cec:	3b18      	subs	r3, #24
 8016cee:	69ba      	ldr	r2, [r7, #24]
 8016cf0:	4413      	add	r3, r2
 8016cf2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8016cf6:	611a      	str	r2, [r3, #16]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8016cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cfa:	695a      	ldr	r2, [r3, #20]
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	005b      	lsls	r3, r3, #1
 8016d00:	4413      	add	r3, r2
 8016d02:	00db      	lsls	r3, r3, #3
 8016d04:	3b18      	subs	r3, #24
 8016d06:	69ba      	ldr	r2, [r7, #24]
 8016d08:	441a      	add	r2, r3
 8016d0a:	7d13      	ldrb	r3, [r2, #20]
 8016d0c:	f36f 0300 	bfc	r3, #0, #1
 8016d10:	7513      	strb	r3, [r2, #20]
                    t->grow_dsc = new_dsc;
 8016d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d14:	69ba      	ldr	r2, [r7, #24]
 8016d16:	611a      	str	r2, [r3, #16]
 8016d18:	e019      	b.n	8016d4e <find_track_end+0x256>
                }
            }
            else {
                int32_t item_size = get_main_size(item);
 8016d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016d1e:	4798      	blx	r3
 8016d20:	61f8      	str	r0, [r7, #28]
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	78db      	ldrb	r3, [r3, #3]
 8016d26:	f003 0302 	and.w	r3, r3, #2
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d006      	beq.n	8016d3e <find_track_end+0x246>
 8016d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d32:	689a      	ldr	r2, [r3, #8]
 8016d34:	69fb      	ldr	r3, [r7, #28]
 8016d36:	4413      	add	r3, r2
 8016d38:	683a      	ldr	r2, [r7, #0]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	db3b      	blt.n	8016db6 <find_track_end+0x2be>
                t->track_fix_main_size += item_size + item_gap;
 8016d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d40:	689a      	ldr	r2, [r3, #8]
 8016d42:	69f9      	ldr	r1, [r7, #28]
 8016d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d46:	440b      	add	r3, r1
 8016d48:	441a      	add	r2, r3
 8016d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d4c:	609a      	str	r2, [r3, #8]
            }

            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016d52:	4798      	blx	r3
 8016d54:	4602      	mov	r2, r0
 8016d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	dd04      	ble.n	8016d68 <find_track_end+0x270>
 8016d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016d62:	4798      	blx	r3
 8016d64:	4603      	mov	r3, r0
 8016d66:	e001      	b.n	8016d6c <find_track_end+0x274>
 8016d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016d6e:	6013      	str	r3, [r2, #0]
            t->item_cnt++;
 8016d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	1c5a      	adds	r2, r3, #1
 8016d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d78:	60da      	str	r2, [r3, #12]
        }

        item_id += f->rev ? -1 : +1;
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	78db      	ldrb	r3, [r3, #3]
 8016d7e:	f003 0304 	and.w	r3, r3, #4
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d002      	beq.n	8016d8e <find_track_end+0x296>
 8016d88:	f04f 32ff 	mov.w	r2, #4294967295
 8016d8c:	e000      	b.n	8016d90 <find_track_end+0x298>
 8016d8e:	2201      	movs	r2, #1
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	4413      	add	r3, r2
 8016d94:	617b      	str	r3, [r7, #20]
        if(item_id < 0) break;
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	db17      	blt.n	8016dcc <find_track_end+0x2d4>
        item = lv_obj_get_child(cont, item_id);
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	4619      	mov	r1, r3
 8016da0:	68f8      	ldr	r0, [r7, #12]
 8016da2:	f7ee fa74 	bl	800528e <lv_obj_get_child>
 8016da6:	6378      	str	r0, [r7, #52]	@ 0x34
    while(item) {
 8016da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	f47f af08 	bne.w	8016bc0 <find_track_end+0xc8>
 8016db0:	e00d      	b.n	8016dce <find_track_end+0x2d6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8016db2:	bf00      	nop
 8016db4:	e00b      	b.n	8016dce <find_track_end+0x2d6>
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 8016db6:	bf00      	nop
 8016db8:	e009      	b.n	8016dce <find_track_end+0x2d6>
 8016dba:	bf00      	nop
 8016dbc:	200007d1 	.word	0x200007d1
 8016dc0:	08017749 	.word	0x08017749
 8016dc4:	08017779 	.word	0x08017779
 8016dc8:	00060001 	.word	0x00060001
        if(item_id < 0) break;
 8016dcc:	bf00      	nop
    }

    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 8016dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016dd0:	689b      	ldr	r3, [r3, #8]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	dd05      	ble.n	8016de2 <find_track_end+0x2ea>
 8016dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016dd8:	689a      	ldr	r2, [r3, #8]
 8016dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ddc:	1ad2      	subs	r2, r2, r3
 8016dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016de0:	609a      	str	r2, [r3, #8]

    /*If there is at least one "grow item" the track takes the full space*/
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 8016de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016de4:	695b      	ldr	r3, [r3, #20]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d102      	bne.n	8016df0 <find_track_end+0x2f8>
 8016dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016dec:	689b      	ldr	r3, [r3, #8]
 8016dee:	e000      	b.n	8016df2 <find_track_end+0x2fa>
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016df4:	6053      	str	r3, [r2, #4]

    /*Have at least one item in a row*/
    if(item && item_id == item_start_id) {
 8016df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d02d      	beq.n	8016e58 <find_track_end+0x360>
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	687a      	ldr	r2, [r7, #4]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d129      	bne.n	8016e58 <find_track_end+0x360>
        item = cont->spec_attr->children[item_id];
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	689b      	ldr	r3, [r3, #8]
 8016e08:	681a      	ldr	r2, [r3, #0]
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	009b      	lsls	r3, r3, #2
 8016e0e:	4413      	add	r3, r2
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	637b      	str	r3, [r7, #52]	@ 0x34
        get_next_item(cont, f->rev, &item_id);
 8016e14:	68bb      	ldr	r3, [r7, #8]
 8016e16:	78db      	ldrb	r3, [r3, #3]
 8016e18:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016e1c:	b2db      	uxtb	r3, r3
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	bf14      	ite	ne
 8016e22:	2301      	movne	r3, #1
 8016e24:	2300      	moveq	r3, #0
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	f107 0214 	add.w	r2, r7, #20
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	68f8      	ldr	r0, [r7, #12]
 8016e30:	f000 fc50 	bl	80176d4 <get_next_item>
        if(item) {
 8016e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00e      	beq.n	8016e58 <find_track_end+0x360>
            t->track_cross_size = get_cross_size(item);
 8016e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016e3e:	4798      	blx	r3
 8016e40:	4602      	mov	r2, r0
 8016e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e44:	601a      	str	r2, [r3, #0]
            t->track_main_size = get_main_size(item);
 8016e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016e4a:	4798      	blx	r3
 8016e4c:	4602      	mov	r2, r0
 8016e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e50:	605a      	str	r2, [r3, #4]
            t->item_cnt = 1;
 8016e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e54:	2201      	movs	r2, #1
 8016e56:	60da      	str	r2, [r3, #12]
        }
    }

    return item_id;
 8016e58:	697b      	ldr	r3, [r7, #20]
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3738      	adds	r7, #56	@ 0x38
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop

08016e64 <children_repos>:
/**
 * Position the children in the same track
 */
static void children_repos(lv_obj_t * cont, flex_t * f, int32_t item_first_id, int32_t item_last_id, int32_t abs_x,
                           int32_t abs_y, int32_t max_main_size, int32_t item_gap, track_t * t)
{
 8016e64:	b590      	push	{r4, r7, lr}
 8016e66:	b0a7      	sub	sp, #156	@ 0x9c
 8016e68:	af02      	add	r7, sp, #8
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	603b      	str	r3, [r7, #0]
    void (*area_set_main_size)(lv_area_t *, int32_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	78db      	ldrb	r3, [r3, #3]
 8016e76:	f003 0301 	and.w	r3, r3, #1
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d001      	beq.n	8016e84 <children_repos+0x20>
 8016e80:	4b5a      	ldr	r3, [pc, #360]	@ (8016fec <children_repos+0x188>)
 8016e82:	e000      	b.n	8016e86 <children_repos+0x22>
 8016e84:	4b5a      	ldr	r3, [pc, #360]	@ (8016ff0 <children_repos+0x18c>)
 8016e86:	66bb      	str	r3, [r7, #104]	@ 0x68
    int32_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	78db      	ldrb	r3, [r3, #3]
 8016e8c:	f003 0301 	and.w	r3, r3, #1
 8016e90:	b2db      	uxtb	r3, r3
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d001      	beq.n	8016e9a <children_repos+0x36>
 8016e96:	4b57      	ldr	r3, [pc, #348]	@ (8016ff4 <children_repos+0x190>)
 8016e98:	e000      	b.n	8016e9c <children_repos+0x38>
 8016e9a:	4b57      	ldr	r3, [pc, #348]	@ (8016ff8 <children_repos+0x194>)
 8016e9c:	667b      	str	r3, [r7, #100]	@ 0x64
    int32_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 8016e9e:	68bb      	ldr	r3, [r7, #8]
 8016ea0:	78db      	ldrb	r3, [r3, #3]
 8016ea2:	f003 0301 	and.w	r3, r3, #1
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d101      	bne.n	8016eb0 <children_repos+0x4c>
 8016eac:	4b51      	ldr	r3, [pc, #324]	@ (8016ff4 <children_repos+0x190>)
 8016eae:	e000      	b.n	8016eb2 <children_repos+0x4e>
 8016eb0:	4b51      	ldr	r3, [pc, #324]	@ (8016ff8 <children_repos+0x194>)
 8016eb2:	663b      	str	r3, [r7, #96]	@ 0x60

    typedef int32_t (*margin_func_t)(const lv_obj_t *, uint32_t);
    margin_func_t get_margin_main_start = (f->row ? lv_obj_get_style_margin_left : lv_obj_get_style_margin_top);
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	78db      	ldrb	r3, [r3, #3]
 8016eb8:	f003 0301 	and.w	r3, r3, #1
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d001      	beq.n	8016ec6 <children_repos+0x62>
 8016ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8016ffc <children_repos+0x198>)
 8016ec4:	e000      	b.n	8016ec8 <children_repos+0x64>
 8016ec6:	4b4e      	ldr	r3, [pc, #312]	@ (8017000 <children_repos+0x19c>)
 8016ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    margin_func_t get_margin_main_end = (f->row ? lv_obj_get_style_margin_right : lv_obj_get_style_margin_bottom);
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	78db      	ldrb	r3, [r3, #3]
 8016ece:	f003 0301 	and.w	r3, r3, #1
 8016ed2:	b2db      	uxtb	r3, r3
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d001      	beq.n	8016edc <children_repos+0x78>
 8016ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8017004 <children_repos+0x1a0>)
 8016eda:	e000      	b.n	8016ede <children_repos+0x7a>
 8016edc:	4b4a      	ldr	r3, [pc, #296]	@ (8017008 <children_repos+0x1a4>)
 8016ede:	65bb      	str	r3, [r7, #88]	@ 0x58
    margin_func_t get_margin_cross_start = (!f->row ? lv_obj_get_style_margin_left : lv_obj_get_style_margin_top);
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	78db      	ldrb	r3, [r3, #3]
 8016ee4:	f003 0301 	and.w	r3, r3, #1
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d101      	bne.n	8016ef2 <children_repos+0x8e>
 8016eee:	4b43      	ldr	r3, [pc, #268]	@ (8016ffc <children_repos+0x198>)
 8016ef0:	e000      	b.n	8016ef4 <children_repos+0x90>
 8016ef2:	4b43      	ldr	r3, [pc, #268]	@ (8017000 <children_repos+0x19c>)
 8016ef4:	657b      	str	r3, [r7, #84]	@ 0x54
    margin_func_t get_margin_cross_end = (!f->row ? lv_obj_get_style_margin_right : lv_obj_get_style_margin_bottom);
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	78db      	ldrb	r3, [r3, #3]
 8016efa:	f003 0301 	and.w	r3, r3, #1
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d101      	bne.n	8016f08 <children_repos+0xa4>
 8016f04:	4b3f      	ldr	r3, [pc, #252]	@ (8017004 <children_repos+0x1a0>)
 8016f06:	e000      	b.n	8016f0a <children_repos+0xa6>
 8016f08:	4b3f      	ldr	r3, [pc, #252]	@ (8017008 <children_repos+0x1a4>)
 8016f0a:	653b      	str	r3, [r7, #80]	@ 0x50

    /*Calculate the size of grow items first*/
    uint32_t i;
    bool grow_reiterate  = true;
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    while(grow_reiterate && t->grow_item_cnt) {
 8016f12:	e0fe      	b.n	8017112 <children_repos+0x2ae>
        grow_reiterate = false;
 8016f14:	2300      	movs	r3, #0
 8016f16:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
        int32_t grow_value_sum = 0;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        int32_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 8016f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016f24:	685a      	ldr	r2, [r3, #4]
 8016f26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016f2a:	689b      	ldr	r3, [r3, #8]
 8016f2c:	1ad3      	subs	r3, r2, r3
 8016f2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016f32:	2300      	movs	r3, #0
 8016f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016f38:	e035      	b.n	8016fa6 <children_repos+0x142>
            if(t->grow_dsc[i].clamped == 0) {
 8016f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016f3e:	6919      	ldr	r1, [r3, #16]
 8016f40:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016f44:	4613      	mov	r3, r2
 8016f46:	005b      	lsls	r3, r3, #1
 8016f48:	4413      	add	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	440b      	add	r3, r1
 8016f4e:	7d1b      	ldrb	r3, [r3, #20]
 8016f50:	f003 0301 	and.w	r3, r3, #1
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d110      	bne.n	8016f7c <children_repos+0x118>
                grow_value_sum += t->grow_dsc[i].grow_value;
 8016f5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016f5e:	6919      	ldr	r1, [r3, #16]
 8016f60:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016f64:	4613      	mov	r3, r2
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	4413      	add	r3, r2
 8016f6a:	00db      	lsls	r3, r3, #3
 8016f6c:	440b      	add	r3, r1
 8016f6e:	691a      	ldr	r2, [r3, #16]
 8016f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016f74:	4413      	add	r3, r2
 8016f76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016f7a:	e00f      	b.n	8016f9c <children_repos+0x138>
            }
            else {
                grow_max_size -= t->grow_dsc[i].final_size;
 8016f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016f80:	6919      	ldr	r1, [r3, #16]
 8016f82:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016f86:	4613      	mov	r3, r2
 8016f88:	005b      	lsls	r3, r3, #1
 8016f8a:	4413      	add	r3, r2
 8016f8c:	00db      	lsls	r3, r3, #3
 8016f8e:	440b      	add	r3, r1
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016f96:	1ad3      	subs	r3, r2, r3
 8016f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016fa6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016faa:	695b      	ldr	r3, [r3, #20]
 8016fac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	d3c2      	bcc.n	8016f3a <children_repos+0xd6>
            }
        }
        int32_t grow_unit;

        for(i = 0; i < t->grow_item_cnt; i++) {
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016fba:	e0a2      	b.n	8017102 <children_repos+0x29e>
            if(t->grow_dsc[i].clamped == 0) {
 8016fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016fc0:	6919      	ldr	r1, [r3, #16]
 8016fc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	005b      	lsls	r3, r3, #1
 8016fca:	4413      	add	r3, r2
 8016fcc:	00db      	lsls	r3, r3, #3
 8016fce:	440b      	add	r3, r1
 8016fd0:	7d1b      	ldrb	r3, [r3, #20]
 8016fd2:	f003 0301 	and.w	r3, r3, #1
 8016fd6:	b2db      	uxtb	r3, r3
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	f040 808d 	bne.w	80170f8 <children_repos+0x294>
                LV_ASSERT(grow_value_sum != 0);
 8016fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d112      	bne.n	801700c <children_repos+0x1a8>
 8016fe6:	bf00      	nop
 8016fe8:	e7fd      	b.n	8016fe6 <children_repos+0x182>
 8016fea:	bf00      	nop
 8016fec:	0801a617 	.word	0x0801a617
 8016ff0:	0801a63b 	.word	0x0801a63b
 8016ff4:	080162a7 	.word	0x080162a7
 8016ff8:	080162c7 	.word	0x080162c7
 8016ffc:	080164c3 	.word	0x080164c3
 8017000:	0801647f 	.word	0x0801647f
 8017004:	080164e5 	.word	0x080164e5
 8017008:	080164a1 	.word	0x080164a1
                grow_unit = grow_max_size / grow_value_sum;
 801700c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017014:	fb92 f3f3 	sdiv	r3, r2, r3
 8017018:	64fb      	str	r3, [r7, #76]	@ 0x4c
                int32_t size = grow_unit * t->grow_dsc[i].grow_value;
 801701a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801701e:	6919      	ldr	r1, [r3, #16]
 8017020:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017024:	4613      	mov	r3, r2
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	4413      	add	r3, r2
 801702a:	00db      	lsls	r3, r3, #3
 801702c:	440b      	add	r3, r1
 801702e:	691b      	ldr	r3, [r3, #16]
 8017030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017032:	fb02 f303 	mul.w	r3, r2, r3
 8017036:	64bb      	str	r3, [r7, #72]	@ 0x48
                int32_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 8017038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801703c:	6919      	ldr	r1, [r3, #16]
 801703e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017042:	4613      	mov	r3, r2
 8017044:	005b      	lsls	r3, r3, #1
 8017046:	4413      	add	r3, r2
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	440b      	add	r3, r1
 801704c:	689a      	ldr	r2, [r3, #8]
 801704e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017050:	429a      	cmp	r2, r3
 8017052:	bfa8      	it	ge
 8017054:	461a      	movge	r2, r3
 8017056:	4611      	mov	r1, r2
 8017058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801705c:	6918      	ldr	r0, [r3, #16]
 801705e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017062:	4613      	mov	r3, r2
 8017064:	005b      	lsls	r3, r3, #1
 8017066:	4413      	add	r3, r2
 8017068:	00db      	lsls	r3, r3, #3
 801706a:	4403      	add	r3, r0
 801706c:	685b      	ldr	r3, [r3, #4]
 801706e:	428b      	cmp	r3, r1
 8017070:	bfb8      	it	lt
 8017072:	460b      	movlt	r3, r1
 8017074:	647b      	str	r3, [r7, #68]	@ 0x44

                if(size_clamp != size) {
 8017076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801707a:	429a      	cmp	r2, r3
 801707c:	d010      	beq.n	80170a0 <children_repos+0x23c>
                    t->grow_dsc[i].clamped = 1;
 801707e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017082:	6919      	ldr	r1, [r3, #16]
 8017084:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017088:	4613      	mov	r3, r2
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	4413      	add	r3, r2
 801708e:	00db      	lsls	r3, r3, #3
 8017090:	18ca      	adds	r2, r1, r3
 8017092:	7d13      	ldrb	r3, [r2, #20]
 8017094:	f043 0301 	orr.w	r3, r3, #1
 8017098:	7513      	strb	r3, [r2, #20]
                    grow_reiterate = true;
 801709a:	2301      	movs	r3, #1
 801709c:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                }
                t->grow_dsc[i].final_size = size_clamp;
 80170a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80170a4:	6919      	ldr	r1, [r3, #16]
 80170a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80170aa:	4613      	mov	r3, r2
 80170ac:	005b      	lsls	r3, r3, #1
 80170ae:	4413      	add	r3, r2
 80170b0:	00db      	lsls	r3, r3, #3
 80170b2:	440b      	add	r3, r1
 80170b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80170b6:	60da      	str	r2, [r3, #12]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 80170b8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80170bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80170c0:	6918      	ldr	r0, [r3, #16]
 80170c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80170c6:	4613      	mov	r3, r2
 80170c8:	005b      	lsls	r3, r3, #1
 80170ca:	4413      	add	r3, r2
 80170cc:	00db      	lsls	r3, r3, #3
 80170ce:	4403      	add	r3, r0
 80170d0:	691b      	ldr	r3, [r3, #16]
 80170d2:	1acb      	subs	r3, r1, r3
 80170d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                grow_max_size  -= t->grow_dsc[i].final_size;
 80170d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80170dc:	6919      	ldr	r1, [r3, #16]
 80170de:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80170e2:	4613      	mov	r3, r2
 80170e4:	005b      	lsls	r3, r3, #1
 80170e6:	4413      	add	r3, r2
 80170e8:	00db      	lsls	r3, r3, #3
 80170ea:	440b      	add	r3, r1
 80170ec:	68db      	ldr	r3, [r3, #12]
 80170ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        for(i = 0; i < t->grow_item_cnt; i++) {
 80170f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80170fc:	3301      	adds	r3, #1
 80170fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017106:	695b      	ldr	r3, [r3, #20]
 8017108:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801710c:	429a      	cmp	r2, r3
 801710e:	f4ff af55 	bcc.w	8016fbc <children_repos+0x158>
    while(grow_reiterate && t->grow_item_cnt) {
 8017112:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8017116:	2b00      	cmp	r3, #0
 8017118:	d005      	beq.n	8017126 <children_repos+0x2c2>
 801711a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801711e:	695b      	ldr	r3, [r3, #20]
 8017120:	2b00      	cmp	r3, #0
 8017122:	f47f aef7 	bne.w	8016f14 <children_repos+0xb0>
            }
        }
    }

    bool rtl = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL;
 8017126:	2100      	movs	r1, #0
 8017128:	68f8      	ldr	r0, [r7, #12]
 801712a:	f7ff fa0f 	bl	801654c <lv_obj_get_style_base_dir>
 801712e:	4603      	mov	r3, r0
 8017130:	2b01      	cmp	r3, #1
 8017132:	bf0c      	ite	eq
 8017134:	2301      	moveq	r3, #1
 8017136:	2300      	movne	r3, #0
 8017138:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    int32_t main_pos = 0;
 801713c:	2300      	movs	r3, #0
 801713e:	62bb      	str	r3, [r7, #40]	@ 0x28

    int32_t place_gap = 0;
 8017140:	2300      	movs	r3, #0
 8017142:	627b      	str	r3, [r7, #36]	@ 0x24
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	7818      	ldrb	r0, [r3, #0]
 8017148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801714c:	685a      	ldr	r2, [r3, #4]
 801714e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017152:	68db      	ldr	r3, [r3, #12]
 8017154:	4619      	mov	r1, r3
 8017156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801715a:	9301      	str	r3, [sp, #4]
 801715c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017160:	9300      	str	r3, [sp, #0]
 8017162:	460b      	mov	r3, r1
 8017164:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8017168:	f000 fa3a 	bl	80175e0 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	78db      	ldrb	r3, [r3, #3]
 8017170:	f003 0301 	and.w	r3, r3, #1
 8017174:	b2db      	uxtb	r3, r3
 8017176:	2b00      	cmp	r3, #0
 8017178:	d00a      	beq.n	8017190 <children_repos+0x32c>
 801717a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801717e:	2b00      	cmp	r3, #0
 8017180:	d006      	beq.n	8017190 <children_repos+0x32c>
 8017182:	68f8      	ldr	r0, [r7, #12]
 8017184:	f7eb fe4d 	bl	8002e22 <lv_obj_get_content_width>
 8017188:	4602      	mov	r2, r0
 801718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801718c:	4413      	add	r3, r2
 801718e:	62bb      	str	r3, [r7, #40]	@ 0x28

    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	4619      	mov	r1, r3
 8017194:	68f8      	ldr	r0, [r7, #12]
 8017196:	f7ee f87a 	bl	800528e <lv_obj_get_child>
 801719a:	67f8      	str	r0, [r7, #124]	@ 0x7c
    /*Reposition the children*/
    while(item && item_first_id != item_last_id) {
 801719c:	e212      	b.n	80175c4 <children_repos+0x760>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 801719e:	49b0      	ldr	r1, [pc, #704]	@ (8017460 <children_repos+0x5fc>)
 80171a0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80171a2:	f7ea ff84 	bl	80020ae <lv_obj_has_flag_any>
 80171a6:	4603      	mov	r3, r0
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d010      	beq.n	80171ce <children_repos+0x36a>
            item = get_next_item(cont, f->rev, &item_first_id);
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	78db      	ldrb	r3, [r3, #3]
 80171b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	bf14      	ite	ne
 80171ba:	2301      	movne	r3, #1
 80171bc:	2300      	moveq	r3, #0
 80171be:	b2db      	uxtb	r3, r3
 80171c0:	1d3a      	adds	r2, r7, #4
 80171c2:	4619      	mov	r1, r3
 80171c4:	68f8      	ldr	r0, [r7, #12]
 80171c6:	f000 fa85 	bl	80176d4 <get_next_item>
 80171ca:	67f8      	str	r0, [r7, #124]	@ 0x7c
            continue;
 80171cc:	e1fa      	b.n	80175c4 <children_repos+0x760>
        }
        int32_t grow_size = lv_obj_get_style_flex_grow(item, LV_PART_MAIN);
 80171ce:	2100      	movs	r1, #0
 80171d0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80171d2:	f7ff fa15 	bl	8016600 <lv_obj_get_style_flex_grow>
 80171d6:	4603      	mov	r3, r0
 80171d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if(grow_size) {
 80171da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171dc:	2b00      	cmp	r3, #0
 80171de:	f000 8082 	beq.w	80172e6 <children_repos+0x482>
            int32_t s = 0;
 80171e2:	2300      	movs	r3, #0
 80171e4:	67bb      	str	r3, [r7, #120]	@ 0x78
            for(i = 0; i < t->grow_item_cnt; i++) {
 80171e6:	2300      	movs	r3, #0
 80171e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80171ec:	e01f      	b.n	801722e <children_repos+0x3ca>
                if(t->grow_dsc[i].item == item) {
 80171ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80171f2:	6919      	ldr	r1, [r3, #16]
 80171f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80171f8:	4613      	mov	r3, r2
 80171fa:	005b      	lsls	r3, r3, #1
 80171fc:	4413      	add	r3, r2
 80171fe:	00db      	lsls	r3, r3, #3
 8017200:	440b      	add	r3, r1
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017206:	429a      	cmp	r2, r3
 8017208:	d10c      	bne.n	8017224 <children_repos+0x3c0>
                    s = t->grow_dsc[i].final_size;
 801720a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801720e:	6919      	ldr	r1, [r3, #16]
 8017210:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017214:	4613      	mov	r3, r2
 8017216:	005b      	lsls	r3, r3, #1
 8017218:	4413      	add	r3, r2
 801721a:	00db      	lsls	r3, r3, #3
 801721c:	440b      	add	r3, r1
 801721e:	68db      	ldr	r3, [r3, #12]
 8017220:	67bb      	str	r3, [r7, #120]	@ 0x78
                    break;
 8017222:	e00b      	b.n	801723c <children_repos+0x3d8>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8017224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017228:	3301      	adds	r3, #1
 801722a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801722e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017232:	695b      	ldr	r3, [r3, #20]
 8017234:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8017238:	429a      	cmp	r2, r3
 801723a:	d3d8      	bcc.n	80171ee <children_repos+0x38a>
                }
            }

            if(f->row) {
 801723c:	68bb      	ldr	r3, [r7, #8]
 801723e:	78db      	ldrb	r3, [r3, #3]
 8017240:	f003 0301 	and.w	r3, r3, #1
 8017244:	b2db      	uxtb	r3, r3
 8017246:	2b00      	cmp	r3, #0
 8017248:	d00e      	beq.n	8017268 <children_repos+0x404>
                item->w_layout = 1;
 801724a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801724c:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8017250:	f043 0308 	orr.w	r3, r3, #8
 8017254:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                item->h_layout = 0;
 8017258:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801725a:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 801725e:	f36f 0382 	bfc	r3, #2, #1
 8017262:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8017266:	e00d      	b.n	8017284 <children_repos+0x420>
            }
            else {
                item->h_layout = 1;
 8017268:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801726a:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 801726e:	f043 0304 	orr.w	r3, r3, #4
 8017272:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
                item->w_layout = 0;
 8017276:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017278:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 801727c:	f36f 03c3 	bfc	r3, #3, #1
 8017280:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            }

            if(s != area_get_main_size(&item->coords)) {
 8017284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017286:	f103 0214 	add.w	r2, r3, #20
 801728a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801728c:	4610      	mov	r0, r2
 801728e:	4798      	blx	r3
 8017290:	4602      	mov	r2, r0
 8017292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017294:	4293      	cmp	r3, r2
 8017296:	d034      	beq.n	8017302 <children_repos+0x49e>
                lv_obj_invalidate(item);
 8017298:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801729a:	f7eb ffaa 	bl	80031f2 <lv_obj_invalidate>

                lv_area_t old_coords;
                lv_area_copy(&old_coords, &item->coords);
 801729e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80172a0:	f103 0214 	add.w	r2, r3, #20
 80172a4:	f107 0314 	add.w	r3, r7, #20
 80172a8:	4611      	mov	r1, r2
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7fe ffe0 	bl	8016270 <lv_area_copy>
                area_set_main_size(&item->coords, s);
 80172b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80172b2:	f103 0214 	add.w	r2, r3, #20
 80172b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80172b8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80172ba:	4610      	mov	r0, r2
 80172bc:	4798      	blx	r3
                lv_obj_send_event(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 80172be:	f107 0314 	add.w	r3, r7, #20
 80172c2:	461a      	mov	r2, r3
 80172c4:	212b      	movs	r1, #43	@ 0x2b
 80172c6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80172c8:	f7ea ff89 	bl	80021de <lv_obj_send_event>
                lv_obj_send_event(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 80172cc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80172ce:	f7ed ffcd 	bl	800526c <lv_obj_get_parent>
 80172d2:	4603      	mov	r3, r0
 80172d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80172d6:	2124      	movs	r1, #36	@ 0x24
 80172d8:	4618      	mov	r0, r3
 80172da:	f7ea ff80 	bl	80021de <lv_obj_send_event>
                lv_obj_invalidate(item);
 80172de:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80172e0:	f7eb ff87 	bl	80031f2 <lv_obj_invalidate>
 80172e4:	e00d      	b.n	8017302 <children_repos+0x49e>
            }
        }
        else {
            item->w_layout = 0;
 80172e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80172e8:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 80172ec:	f36f 03c3 	bfc	r3, #3, #1
 80172f0:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            item->h_layout = 0;
 80172f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80172f6:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 80172fa:	f36f 0382 	bfc	r3, #2, #1
 80172fe:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
        }

        int32_t cross_pos = 0;
 8017302:	2300      	movs	r3, #0
 8017304:	677b      	str	r3, [r7, #116]	@ 0x74
        switch(f->cross_place) {
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	785b      	ldrb	r3, [r3, #1]
 801730a:	2b01      	cmp	r3, #1
 801730c:	d026      	beq.n	801735c <children_repos+0x4f8>
 801730e:	2b02      	cmp	r3, #2
 8017310:	d139      	bne.n	8017386 <children_repos+0x522>
            case LV_FLEX_ALIGN_CENTER:
                /*Round up the cross size to avoid rounding error when dividing by 2
                 *The issue comes up e,g, with column direction with center cross direction if an element's width changes*/
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 8017312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	3301      	adds	r3, #1
 801731a:	f023 0401 	bic.w	r4, r3, #1
 801731e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017320:	f103 0214 	add.w	r2, r3, #20
 8017324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017326:	4610      	mov	r0, r2
 8017328:	4798      	blx	r3
 801732a:	4603      	mov	r3, r0
 801732c:	1ae3      	subs	r3, r4, r3
 801732e:	0fda      	lsrs	r2, r3, #31
 8017330:	4413      	add	r3, r2
 8017332:	105b      	asrs	r3, r3, #1
 8017334:	677b      	str	r3, [r7, #116]	@ 0x74
                cross_pos += (get_margin_cross_start(item, LV_PART_MAIN) - get_margin_cross_end(item, LV_PART_MAIN)) / 2;
 8017336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017338:	2100      	movs	r1, #0
 801733a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801733c:	4798      	blx	r3
 801733e:	4604      	mov	r4, r0
 8017340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017342:	2100      	movs	r1, #0
 8017344:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017346:	4798      	blx	r3
 8017348:	4603      	mov	r3, r0
 801734a:	1ae3      	subs	r3, r4, r3
 801734c:	0fda      	lsrs	r2, r3, #31
 801734e:	4413      	add	r3, r2
 8017350:	105b      	asrs	r3, r3, #1
 8017352:	461a      	mov	r2, r3
 8017354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017356:	4413      	add	r3, r2
 8017358:	677b      	str	r3, [r7, #116]	@ 0x74
                break;
 801735a:	e01d      	b.n	8017398 <children_repos+0x534>
            case LV_FLEX_ALIGN_END:
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 801735c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017360:	681c      	ldr	r4, [r3, #0]
 8017362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017364:	f103 0214 	add.w	r2, r3, #20
 8017368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801736a:	4610      	mov	r0, r2
 801736c:	4798      	blx	r3
 801736e:	4603      	mov	r3, r0
 8017370:	1ae3      	subs	r3, r4, r3
 8017372:	677b      	str	r3, [r7, #116]	@ 0x74
                cross_pos -= get_margin_cross_end(item, LV_PART_MAIN);
 8017374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017376:	2100      	movs	r1, #0
 8017378:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801737a:	4798      	blx	r3
 801737c:	4602      	mov	r2, r0
 801737e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017380:	1a9b      	subs	r3, r3, r2
 8017382:	677b      	str	r3, [r7, #116]	@ 0x74
                break;
 8017384:	e008      	b.n	8017398 <children_repos+0x534>
            default:
                cross_pos += get_margin_cross_start(item, LV_PART_MAIN);
 8017386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017388:	2100      	movs	r1, #0
 801738a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801738c:	4798      	blx	r3
 801738e:	4602      	mov	r2, r0
 8017390:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017392:	4413      	add	r3, r2
 8017394:	677b      	str	r3, [r7, #116]	@ 0x74
                break;
 8017396:	bf00      	nop
        }

        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	78db      	ldrb	r3, [r3, #3]
 801739c:	f003 0301 	and.w	r3, r3, #1
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d00d      	beq.n	80173c2 <children_repos+0x55e>
 80173a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d009      	beq.n	80173c2 <children_repos+0x55e>
 80173ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80173b0:	f103 0214 	add.w	r2, r3, #20
 80173b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80173b6:	4610      	mov	r0, r2
 80173b8:	4798      	blx	r3
 80173ba:	4602      	mov	r2, r0
 80173bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173be:	1a9b      	subs	r3, r3, r2
 80173c0:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*Handle percentage value of translate*/
        int32_t tr_x = lv_obj_get_style_translate_x(item, LV_PART_MAIN);
 80173c2:	2100      	movs	r1, #0
 80173c4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80173c6:	f7fe fff4 	bl	80163b2 <lv_obj_get_style_translate_x>
 80173ca:	6738      	str	r0, [r7, #112]	@ 0x70
        int32_t tr_y = lv_obj_get_style_translate_y(item, LV_PART_MAIN);
 80173cc:	2100      	movs	r1, #0
 80173ce:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80173d0:	f7ff f800 	bl	80163d4 <lv_obj_get_style_translate_y>
 80173d4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        int32_t w = lv_obj_get_width(item);
 80173d6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80173d8:	f7eb fd07 	bl	8002dea <lv_obj_get_width>
 80173dc:	63b8      	str	r0, [r7, #56]	@ 0x38
        int32_t h = lv_obj_get_height(item);
 80173de:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80173e0:	f7eb fd11 	bl	8002e06 <lv_obj_get_height>
 80173e4:	6378      	str	r0, [r7, #52]	@ 0x34
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80173e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80173e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80173ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80173f0:	d11e      	bne.n	8017430 <children_repos+0x5cc>
 80173f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80173f4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80173f8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80173fc:	dc18      	bgt.n	8017430 <children_repos+0x5cc>
 80173fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017400:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8017404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017408:	dd05      	ble.n	8017416 <children_repos+0x5b2>
 801740a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801740c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8017410:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8017414:	e002      	b.n	801741c <children_repos+0x5b8>
 8017416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017418:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801741c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801741e:	fb02 f303 	mul.w	r3, r2, r3
 8017422:	4a10      	ldr	r2, [pc, #64]	@ (8017464 <children_repos+0x600>)
 8017424:	fb82 1203 	smull	r1, r2, r2, r3
 8017428:	1152      	asrs	r2, r2, #5
 801742a:	17db      	asrs	r3, r3, #31
 801742c:	1ad3      	subs	r3, r2, r3
 801742e:	673b      	str	r3, [r7, #112]	@ 0x70
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8017430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017432:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8017436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801743a:	d122      	bne.n	8017482 <children_repos+0x61e>
 801743c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801743e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8017442:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8017446:	dc1c      	bgt.n	8017482 <children_repos+0x61e>
 8017448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801744a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801744e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017452:	dd09      	ble.n	8017468 <children_repos+0x604>
 8017454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017456:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801745a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801745e:	e006      	b.n	801746e <children_repos+0x60a>
 8017460:	00060001 	.word	0x00060001
 8017464:	51eb851f 	.word	0x51eb851f
 8017468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801746a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801746e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017470:	fb02 f303 	mul.w	r3, r2, r3
 8017474:	4a59      	ldr	r2, [pc, #356]	@ (80175dc <children_repos+0x778>)
 8017476:	fb82 1203 	smull	r1, r2, r2, r3
 801747a:	1152      	asrs	r2, r2, #5
 801747c:	17db      	asrs	r3, r3, #31
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	66fb      	str	r3, [r7, #108]	@ 0x6c

        int32_t diff_x = abs_x - item->coords.x1 + tr_x;
 8017482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017484:	695b      	ldr	r3, [r3, #20]
 8017486:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801748a:	1ad3      	subs	r3, r2, r3
 801748c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801748e:	4413      	add	r3, r2
 8017490:	633b      	str	r3, [r7, #48]	@ 0x30
        int32_t diff_y = abs_y - item->coords.y1 + tr_y;
 8017492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017494:	699b      	ldr	r3, [r3, #24]
 8017496:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801749a:	1ad3      	subs	r3, r2, r3
 801749c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801749e:	4413      	add	r3, r2
 80174a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        diff_x += f->row ? main_pos + get_margin_main_start(item, LV_PART_MAIN) : cross_pos;
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	78db      	ldrb	r3, [r3, #3]
 80174a6:	f003 0301 	and.w	r3, r3, #1
 80174aa:	b2db      	uxtb	r3, r3
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d007      	beq.n	80174c0 <children_repos+0x65c>
 80174b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80174b2:	2100      	movs	r1, #0
 80174b4:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80174b6:	4798      	blx	r3
 80174b8:	4602      	mov	r2, r0
 80174ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174bc:	4413      	add	r3, r2
 80174be:	e000      	b.n	80174c2 <children_repos+0x65e>
 80174c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80174c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80174c4:	4413      	add	r3, r2
 80174c6:	633b      	str	r3, [r7, #48]	@ 0x30
        diff_y += f->row ? cross_pos : main_pos + get_margin_main_start(item, LV_PART_MAIN);
 80174c8:	68bb      	ldr	r3, [r7, #8]
 80174ca:	78db      	ldrb	r3, [r3, #3]
 80174cc:	f003 0301 	and.w	r3, r3, #1
 80174d0:	b2db      	uxtb	r3, r3
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d107      	bne.n	80174e6 <children_repos+0x682>
 80174d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80174d8:	2100      	movs	r1, #0
 80174da:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80174dc:	4798      	blx	r3
 80174de:	4602      	mov	r2, r0
 80174e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e2:	4413      	add	r3, r2
 80174e4:	e000      	b.n	80174e8 <children_repos+0x684>
 80174e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80174e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80174ea:	4413      	add	r3, r2
 80174ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if(diff_x || diff_y) {
 80174ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d102      	bne.n	80174fa <children_repos+0x696>
 80174f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d023      	beq.n	8017542 <children_repos+0x6de>
            lv_obj_invalidate(item);
 80174fa:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80174fc:	f7eb fe79 	bl	80031f2 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 8017500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017502:	695a      	ldr	r2, [r3, #20]
 8017504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017506:	441a      	add	r2, r3
 8017508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801750a:	615a      	str	r2, [r3, #20]
            item->coords.x2 += diff_x;
 801750c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801750e:	69da      	ldr	r2, [r3, #28]
 8017510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017512:	441a      	add	r2, r3
 8017514:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017516:	61da      	str	r2, [r3, #28]
            item->coords.y1 += diff_y;
 8017518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801751a:	699a      	ldr	r2, [r3, #24]
 801751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801751e:	441a      	add	r2, r3
 8017520:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017522:	619a      	str	r2, [r3, #24]
            item->coords.y2 += diff_y;
 8017524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017526:	6a1a      	ldr	r2, [r3, #32]
 8017528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801752a:	441a      	add	r2, r3
 801752c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801752e:	621a      	str	r2, [r3, #32]
            lv_obj_invalidate(item);
 8017530:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017532:	f7eb fe5e 	bl	80031f2 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 8017536:	2300      	movs	r3, #0
 8017538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801753a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801753c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801753e:	f7eb fd05 	bl	8002f4c <lv_obj_move_children_by>
        }

        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	78db      	ldrb	r3, [r3, #3]
 8017546:	f003 0301 	and.w	r3, r3, #1
 801754a:	b2db      	uxtb	r3, r3
 801754c:	2b00      	cmp	r3, #0
 801754e:	d006      	beq.n	801755e <children_repos+0x6fa>
 8017550:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8017554:	f083 0301 	eor.w	r3, r3, #1
 8017558:	b2db      	uxtb	r3, r3
 801755a:	2b00      	cmp	r3, #0
 801755c:	d01b      	beq.n	8017596 <children_repos+0x732>
 801755e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017560:	f103 0214 	add.w	r2, r3, #20
 8017564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017566:	4610      	mov	r0, r2
 8017568:	4798      	blx	r3
 801756a:	4602      	mov	r2, r0
 801756c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017570:	441a      	add	r2, r3
 8017572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017574:	18d4      	adds	r4, r2, r3
                                             + get_margin_main_start(item, LV_PART_MAIN)
 8017576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017578:	2100      	movs	r1, #0
 801757a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801757c:	4798      	blx	r3
 801757e:	4603      	mov	r3, r0
 8017580:	441c      	add	r4, r3
                                             + get_margin_main_end(item, LV_PART_MAIN);
 8017582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017584:	2100      	movs	r1, #0
 8017586:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8017588:	4798      	blx	r3
 801758a:	4603      	mov	r3, r0
 801758c:	18e2      	adds	r2, r4, r3
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap
 801758e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017590:	4413      	add	r3, r2
 8017592:	62bb      	str	r3, [r7, #40]	@ 0x28
                                             + get_margin_main_end(item, LV_PART_MAIN);
 8017594:	e006      	b.n	80175a4 <children_repos+0x740>
        else main_pos -= item_gap + place_gap;
 8017596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801759a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801759e:	440b      	add	r3, r1
 80175a0:	1ad3      	subs	r3, r2, r3
 80175a2:	62bb      	str	r3, [r7, #40]	@ 0x28

        item = get_next_item(cont, f->rev, &item_first_id);
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	78db      	ldrb	r3, [r3, #3]
 80175a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80175ac:	b2db      	uxtb	r3, r3
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	bf14      	ite	ne
 80175b2:	2301      	movne	r3, #1
 80175b4:	2300      	moveq	r3, #0
 80175b6:	b2db      	uxtb	r3, r3
 80175b8:	1d3a      	adds	r2, r7, #4
 80175ba:	4619      	mov	r1, r3
 80175bc:	68f8      	ldr	r0, [r7, #12]
 80175be:	f000 f889 	bl	80176d4 <get_next_item>
 80175c2:	67f8      	str	r0, [r7, #124]	@ 0x7c
    while(item && item_first_id != item_last_id) {
 80175c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d004      	beq.n	80175d4 <children_repos+0x770>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	683a      	ldr	r2, [r7, #0]
 80175ce:	429a      	cmp	r2, r3
 80175d0:	f47f ade5 	bne.w	801719e <children_repos+0x33a>
    }
}
 80175d4:	bf00      	nop
 80175d6:	3794      	adds	r7, #148	@ 0x94
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd90      	pop	{r4, r7, pc}
 80175dc:	51eb851f 	.word	0x51eb851f

080175e0 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, int32_t max_size, int32_t content_size, int32_t item_cnt,
                          int32_t * start_pos, int32_t * gap)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b085      	sub	sp, #20
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	60b9      	str	r1, [r7, #8]
 80175e8:	607a      	str	r2, [r7, #4]
 80175ea:	603b      	str	r3, [r7, #0]
 80175ec:	4603      	mov	r3, r0
 80175ee:	73fb      	strb	r3, [r7, #15]
    if(item_cnt <= 1) {
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	2b01      	cmp	r3, #1
 80175f4:	dc07      	bgt.n	8017606 <place_content+0x26>
        switch(place) {
 80175f6:	7bfb      	ldrb	r3, [r7, #15]
 80175f8:	3b03      	subs	r3, #3
 80175fa:	2b02      	cmp	r3, #2
 80175fc:	d802      	bhi.n	8017604 <place_content+0x24>
            case LV_FLEX_ALIGN_SPACE_BETWEEN:
            case LV_FLEX_ALIGN_SPACE_AROUND:
            case LV_FLEX_ALIGN_SPACE_EVENLY:
                place = LV_FLEX_ALIGN_CENTER;
 80175fe:	2302      	movs	r3, #2
 8017600:	73fb      	strb	r3, [r7, #15]
                break;
 8017602:	e000      	b.n	8017606 <place_content+0x26>
            default:
                break;
 8017604:	bf00      	nop
        }
    }

    switch(place) {
 8017606:	7bfb      	ldrb	r3, [r7, #15]
 8017608:	3b01      	subs	r3, #1
 801760a:	2b04      	cmp	r3, #4
 801760c:	d858      	bhi.n	80176c0 <place_content+0xe0>
 801760e:	a201      	add	r2, pc, #4	@ (adr r2, 8017614 <place_content+0x34>)
 8017610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017614:	08017647 	.word	0x08017647
 8017618:	08017629 	.word	0x08017629
 801761c:	0801769f 	.word	0x0801769f
 8017620:	08017673 	.word	0x08017673
 8017624:	0801765f 	.word	0x0801765f
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 8017628:	69fb      	ldr	r3, [r7, #28]
 801762a:	2200      	movs	r2, #0
 801762c:	601a      	str	r2, [r3, #0]
            *start_pos += (max_size - content_size) / 2;
 801762e:	69bb      	ldr	r3, [r7, #24]
 8017630:	681a      	ldr	r2, [r3, #0]
 8017632:	68b9      	ldr	r1, [r7, #8]
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	1acb      	subs	r3, r1, r3
 8017638:	0fd9      	lsrs	r1, r3, #31
 801763a:	440b      	add	r3, r1
 801763c:	105b      	asrs	r3, r3, #1
 801763e:	441a      	add	r2, r3
 8017640:	69bb      	ldr	r3, [r7, #24]
 8017642:	601a      	str	r2, [r3, #0]
            break;
 8017644:	e040      	b.n	80176c8 <place_content+0xe8>
        case LV_FLEX_ALIGN_END:
            *gap = 0;
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	2200      	movs	r2, #0
 801764a:	601a      	str	r2, [r3, #0]
            *start_pos += max_size - content_size;
 801764c:	69bb      	ldr	r3, [r7, #24]
 801764e:	681a      	ldr	r2, [r3, #0]
 8017650:	68b9      	ldr	r1, [r7, #8]
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	1acb      	subs	r3, r1, r3
 8017656:	441a      	add	r2, r3
 8017658:	69bb      	ldr	r3, [r7, #24]
 801765a:	601a      	str	r2, [r3, #0]
            break;
 801765c:	e034      	b.n	80176c8 <place_content+0xe8>
        case LV_FLEX_ALIGN_SPACE_BETWEEN:
            *gap = (int32_t)(max_size - content_size) / (int32_t)(item_cnt - 1);
 801765e:	68ba      	ldr	r2, [r7, #8]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	1ad2      	subs	r2, r2, r3
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	3b01      	subs	r3, #1
 8017668:	fb92 f2f3 	sdiv	r2, r2, r3
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	601a      	str	r2, [r3, #0]
            break;
 8017670:	e02a      	b.n	80176c8 <place_content+0xe8>
        case LV_FLEX_ALIGN_SPACE_AROUND:
            *gap += (int32_t)(max_size - content_size) / (int32_t)(item_cnt);
 8017672:	69fb      	ldr	r3, [r7, #28]
 8017674:	681a      	ldr	r2, [r3, #0]
 8017676:	68b9      	ldr	r1, [r7, #8]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	1ac9      	subs	r1, r1, r3
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	fb91 f3f3 	sdiv	r3, r1, r3
 8017682:	441a      	add	r2, r3
 8017684:	69fb      	ldr	r3, [r7, #28]
 8017686:	601a      	str	r2, [r3, #0]
            *start_pos += *gap / 2;
 8017688:	69bb      	ldr	r3, [r7, #24]
 801768a:	681a      	ldr	r2, [r3, #0]
 801768c:	69fb      	ldr	r3, [r7, #28]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	0fd9      	lsrs	r1, r3, #31
 8017692:	440b      	add	r3, r1
 8017694:	105b      	asrs	r3, r3, #1
 8017696:	441a      	add	r2, r3
 8017698:	69bb      	ldr	r3, [r7, #24]
 801769a:	601a      	str	r2, [r3, #0]
            break;
 801769c:	e014      	b.n	80176c8 <place_content+0xe8>
        case LV_FLEX_ALIGN_SPACE_EVENLY:
            *gap = (int32_t)(max_size - content_size) / (int32_t)(item_cnt + 1);
 801769e:	68ba      	ldr	r2, [r7, #8]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	1ad2      	subs	r2, r2, r3
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	3301      	adds	r3, #1
 80176a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	601a      	str	r2, [r3, #0]
            *start_pos += *gap;
 80176b0:	69bb      	ldr	r3, [r7, #24]
 80176b2:	681a      	ldr	r2, [r3, #0]
 80176b4:	69fb      	ldr	r3, [r7, #28]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	441a      	add	r2, r3
 80176ba:	69bb      	ldr	r3, [r7, #24]
 80176bc:	601a      	str	r2, [r3, #0]
            break;
 80176be:	e003      	b.n	80176c8 <place_content+0xe8>
        default:
            *gap = 0;
 80176c0:	69fb      	ldr	r3, [r7, #28]
 80176c2:	2200      	movs	r2, #0
 80176c4:	601a      	str	r2, [r3, #0]
    }
}
 80176c6:	bf00      	nop
 80176c8:	bf00      	nop
 80176ca:	3714      	adds	r7, #20
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr

080176d4 <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
 80176d4:	b480      	push	{r7}
 80176d6:	b085      	sub	sp, #20
 80176d8:	af00      	add	r7, sp, #0
 80176da:	60f8      	str	r0, [r7, #12]
 80176dc:	460b      	mov	r3, r1
 80176de:	607a      	str	r2, [r7, #4]
 80176e0:	72fb      	strb	r3, [r7, #11]
    if(rev) {
 80176e2:	7afb      	ldrb	r3, [r7, #11]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d013      	beq.n	8017710 <get_next_item+0x3c>
        (*item_id)--;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	1e5a      	subs	r2, r3, #1
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	601a      	str	r2, [r3, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	db08      	blt.n	801770c <get_next_item+0x38>
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	689b      	ldr	r3, [r3, #8]
 80176fe:	681a      	ldr	r2, [r3, #0]
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	009b      	lsls	r3, r3, #2
 8017706:	4413      	add	r3, r2
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	e017      	b.n	801773c <get_next_item+0x68>
        else return NULL;
 801770c:	2300      	movs	r3, #0
 801770e:	e015      	b.n	801773c <get_next_item+0x68>
    }
    else {
        (*item_id)++;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	1c5a      	adds	r2, r3, #1
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	601a      	str	r2, [r3, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	6892      	ldr	r2, [r2, #8]
 8017722:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017724:	4293      	cmp	r3, r2
 8017726:	da08      	bge.n	801773a <get_next_item+0x66>
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	689b      	ldr	r3, [r3, #8]
 801772c:	681a      	ldr	r2, [r3, #0]
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	4413      	add	r3, r2
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	e000      	b.n	801773c <get_next_item+0x68>
        else return NULL;
 801773a:	2300      	movs	r3, #0
    }
}
 801773c:	4618      	mov	r0, r3
 801773e:	3714      	adds	r7, #20
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr

08017748 <lv_obj_get_width_with_margin>:

static int32_t lv_obj_get_width_with_margin(const lv_obj_t * obj)
{
 8017748:	b590      	push	{r4, r7, lr}
 801774a:	b083      	sub	sp, #12
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_margin_left(obj, LV_PART_MAIN)
 8017750:	2100      	movs	r1, #0
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f7fe feb5 	bl	80164c2 <lv_obj_get_style_margin_left>
 8017758:	4604      	mov	r4, r0
           + lv_obj_get_width(obj)
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f7eb fb45 	bl	8002dea <lv_obj_get_width>
 8017760:	4603      	mov	r3, r0
 8017762:	441c      	add	r4, r3
           + lv_obj_get_style_margin_right(obj, LV_PART_MAIN);
 8017764:	2100      	movs	r1, #0
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f7fe febc 	bl	80164e4 <lv_obj_get_style_margin_right>
 801776c:	4603      	mov	r3, r0
 801776e:	4423      	add	r3, r4
}
 8017770:	4618      	mov	r0, r3
 8017772:	370c      	adds	r7, #12
 8017774:	46bd      	mov	sp, r7
 8017776:	bd90      	pop	{r4, r7, pc}

08017778 <lv_obj_get_height_with_margin>:

static int32_t lv_obj_get_height_with_margin(const lv_obj_t * obj)
{
 8017778:	b590      	push	{r4, r7, lr}
 801777a:	b083      	sub	sp, #12
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_margin_top(obj, LV_PART_MAIN)
 8017780:	2100      	movs	r1, #0
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7fe fe7b 	bl	801647e <lv_obj_get_style_margin_top>
 8017788:	4604      	mov	r4, r0
           + lv_obj_get_height(obj)
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f7eb fb3b 	bl	8002e06 <lv_obj_get_height>
 8017790:	4603      	mov	r3, r0
 8017792:	441c      	add	r4, r3
           + lv_obj_get_style_margin_bottom(obj, LV_PART_MAIN);
 8017794:	2100      	movs	r1, #0
 8017796:	6878      	ldr	r0, [r7, #4]
 8017798:	f7fe fe82 	bl	80164a0 <lv_obj_get_style_margin_bottom>
 801779c:	4603      	mov	r3, r0
 801779e:	4423      	add	r3, r4
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	370c      	adds	r7, #12
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd90      	pop	{r4, r7, pc}

080177a8 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b083      	sub	sp, #12
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
 80177b0:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	681a      	ldr	r2, [r3, #0]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	601a      	str	r2, [r3, #0]
    dest->y1 = src->y1;
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	685a      	ldr	r2, [r3, #4]
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	605a      	str	r2, [r3, #4]
    dest->x2 = src->x2;
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	689a      	ldr	r2, [r3, #8]
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	609a      	str	r2, [r3, #8]
    dest->y2 = src->y2;
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	68da      	ldr	r2, [r3, #12]
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	60da      	str	r2, [r3, #12]
}
 80177d2:	bf00      	nop
 80177d4:	370c      	adds	r7, #12
 80177d6:	46bd      	mov	sp, r7
 80177d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177dc:	4770      	bx	lr

080177de <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 80177de:	b480      	push	{r7}
 80177e0:	b083      	sub	sp, #12
 80177e2:	af00      	add	r7, sp, #0
 80177e4:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	689a      	ldr	r2, [r3, #8]
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	1ad3      	subs	r3, r2, r3
 80177f0:	3301      	adds	r3, #1
}
 80177f2:	4618      	mov	r0, r3
 80177f4:	370c      	adds	r7, #12
 80177f6:	46bd      	mov	sp, r7
 80177f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fc:	4770      	bx	lr

080177fe <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 80177fe:	b480      	push	{r7}
 8017800:	b083      	sub	sp, #12
 8017802:	af00      	add	r7, sp, #0
 8017804:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	68da      	ldr	r2, [r3, #12]
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	1ad3      	subs	r3, r2, r3
 8017810:	3301      	adds	r3, #1
}
 8017812:	4618      	mov	r0, r3
 8017814:	370c      	adds	r7, #12
 8017816:	46bd      	mov	sp, r7
 8017818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801781c:	4770      	bx	lr

0801781e <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 801781e:	b580      	push	{r7, lr}
 8017820:	b082      	sub	sp, #8
 8017822:	af00      	add	r7, sp, #0
 8017824:	6078      	str	r0, [r7, #4]
 8017826:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8017828:	683a      	ldr	r2, [r7, #0]
 801782a:	2100      	movs	r1, #0
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f005 fc96 	bl	801d15e <lv_memset>
}
 8017832:	bf00      	nop
 8017834:	3708      	adds	r7, #8
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}

0801783a <lv_obj_get_style_width>:
#include "../misc/lv_area.h"
#include "../misc/lv_style.h"
#include "../core/lv_obj_style.h"

static inline int32_t lv_obj_get_style_width(const lv_obj_t * obj, uint32_t part)
{
 801783a:	b580      	push	{r7, lr}
 801783c:	b084      	sub	sp, #16
 801783e:	af00      	add	r7, sp, #0
 8017840:	6078      	str	r0, [r7, #4]
 8017842:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8017844:	2201      	movs	r2, #1
 8017846:	6839      	ldr	r1, [r7, #0]
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f7ed fb17 	bl	8004e7c <lv_obj_get_style_prop>
 801784e:	4603      	mov	r3, r0
 8017850:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017852:	68fb      	ldr	r3, [r7, #12]
}
 8017854:	4618      	mov	r0, r3
 8017856:	3710      	adds	r7, #16
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}

0801785c <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_height(const lv_obj_t * obj, uint32_t part)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b084      	sub	sp, #16
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8017866:	2202      	movs	r2, #2
 8017868:	6839      	ldr	r1, [r7, #0]
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7ed fb06 	bl	8004e7c <lv_obj_get_style_prop>
 8017870:	4603      	mov	r3, r0
 8017872:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017874:	68fb      	ldr	r3, [r7, #12]
}
 8017876:	4618      	mov	r0, r3
 8017878:	3710      	adds	r7, #16
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}

0801787e <lv_obj_get_style_translate_x>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_translate_x(const lv_obj_t * obj, uint32_t part)
{
 801787e:	b580      	push	{r7, lr}
 8017880:	b084      	sub	sp, #16
 8017882:	af00      	add	r7, sp, #0
 8017884:	6078      	str	r0, [r7, #4]
 8017886:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8017888:	226a      	movs	r2, #106	@ 0x6a
 801788a:	6839      	ldr	r1, [r7, #0]
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f7ed faf5 	bl	8004e7c <lv_obj_get_style_prop>
 8017892:	4603      	mov	r3, r0
 8017894:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017896:	68fb      	ldr	r3, [r7, #12]
}
 8017898:	4618      	mov	r0, r3
 801789a:	3710      	adds	r7, #16
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <lv_obj_get_style_translate_y>:

static inline int32_t lv_obj_get_style_translate_y(const lv_obj_t * obj, uint32_t part)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80178aa:	226b      	movs	r2, #107	@ 0x6b
 80178ac:	6839      	ldr	r1, [r7, #0]
 80178ae:	6878      	ldr	r0, [r7, #4]
 80178b0:	f7ed fae4 	bl	8004e7c <lv_obj_get_style_prop>
 80178b4:	4603      	mov	r3, r0
 80178b6:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80178b8:	68fb      	ldr	r3, [r7, #12]
}
 80178ba:	4618      	mov	r0, r3
 80178bc:	3710      	adds	r7, #16
 80178be:	46bd      	mov	sp, r7
 80178c0:	bd80      	pop	{r7, pc}

080178c2 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_SKEW_Y);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_top(const lv_obj_t * obj, uint32_t part)
{
 80178c2:	b580      	push	{r7, lr}
 80178c4:	b084      	sub	sp, #16
 80178c6:	af00      	add	r7, sp, #0
 80178c8:	6078      	str	r0, [r7, #4]
 80178ca:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80178cc:	2210      	movs	r2, #16
 80178ce:	6839      	ldr	r1, [r7, #0]
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f7ed fad3 	bl	8004e7c <lv_obj_get_style_prop>
 80178d6:	4603      	mov	r3, r0
 80178d8:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80178da:	68fb      	ldr	r3, [r7, #12]
}
 80178dc:	4618      	mov	r0, r3
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_left(const lv_obj_t * obj, uint32_t part)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b084      	sub	sp, #16
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80178ee:	2212      	movs	r2, #18
 80178f0:	6839      	ldr	r1, [r7, #0]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f7ed fac2 	bl	8004e7c <lv_obj_get_style_prop>
 80178f8:	4603      	mov	r3, r0
 80178fa:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80178fc:	68fb      	ldr	r3, [r7, #12]
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3710      	adds	r7, #16
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}

08017906 <lv_obj_get_style_pad_row>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
    return (int32_t)v.num;
}

static inline int32_t lv_obj_get_style_pad_row(const lv_obj_t * obj, uint32_t part)
{
 8017906:	b580      	push	{r7, lr}
 8017908:	b084      	sub	sp, #16
 801790a:	af00      	add	r7, sp, #0
 801790c:	6078      	str	r0, [r7, #4]
 801790e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8017910:	2214      	movs	r2, #20
 8017912:	6839      	ldr	r1, [r7, #0]
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	f7ed fab1 	bl	8004e7c <lv_obj_get_style_prop>
 801791a:	4603      	mov	r3, r0
 801791c:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 801791e:	68fb      	ldr	r3, [r7, #12]
}
 8017920:	4618      	mov	r0, r3
 8017922:	3710      	adds	r7, #16
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <lv_obj_get_style_pad_column>:

static inline int32_t lv_obj_get_style_pad_column(const lv_obj_t * obj, uint32_t part)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b084      	sub	sp, #16
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8017932:	2215      	movs	r2, #21
 8017934:	6839      	ldr	r1, [r7, #0]
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f7ed faa0 	bl	8004e7c <lv_obj_get_style_prop>
 801793c:	4603      	mov	r3, r0
 801793e:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017940:	68fb      	ldr	r3, [r7, #12]
}
 8017942:	4618      	mov	r0, r3
 8017944:	3710      	adds	r7, #16
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}

0801794a <lv_obj_get_style_margin_top>:

static inline int32_t lv_obj_get_style_margin_top(const lv_obj_t * obj, uint32_t part)
{
 801794a:	b580      	push	{r7, lr}
 801794c:	b084      	sub	sp, #16
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_TOP);
 8017954:	2218      	movs	r2, #24
 8017956:	6839      	ldr	r1, [r7, #0]
 8017958:	6878      	ldr	r0, [r7, #4]
 801795a:	f7ed fa8f 	bl	8004e7c <lv_obj_get_style_prop>
 801795e:	4603      	mov	r3, r0
 8017960:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017962:	68fb      	ldr	r3, [r7, #12]
}
 8017964:	4618      	mov	r0, r3
 8017966:	3710      	adds	r7, #16
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}

0801796c <lv_obj_get_style_margin_bottom>:

static inline int32_t lv_obj_get_style_margin_bottom(const lv_obj_t * obj, uint32_t part)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b084      	sub	sp, #16
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_BOTTOM);
 8017976:	2219      	movs	r2, #25
 8017978:	6839      	ldr	r1, [r7, #0]
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f7ed fa7e 	bl	8004e7c <lv_obj_get_style_prop>
 8017980:	4603      	mov	r3, r0
 8017982:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017984:	68fb      	ldr	r3, [r7, #12]
}
 8017986:	4618      	mov	r0, r3
 8017988:	3710      	adds	r7, #16
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <lv_obj_get_style_margin_left>:

static inline int32_t lv_obj_get_style_margin_left(const lv_obj_t * obj, uint32_t part)
{
 801798e:	b580      	push	{r7, lr}
 8017990:	b084      	sub	sp, #16
 8017992:	af00      	add	r7, sp, #0
 8017994:	6078      	str	r0, [r7, #4]
 8017996:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_LEFT);
 8017998:	221a      	movs	r2, #26
 801799a:	6839      	ldr	r1, [r7, #0]
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f7ed fa6d 	bl	8004e7c <lv_obj_get_style_prop>
 80179a2:	4603      	mov	r3, r0
 80179a4:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80179a6:	68fb      	ldr	r3, [r7, #12]
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3710      	adds	r7, #16
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}

080179b0 <lv_obj_get_style_margin_right>:

static inline int32_t lv_obj_get_style_margin_right(const lv_obj_t * obj, uint32_t part)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b084      	sub	sp, #16
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	6078      	str	r0, [r7, #4]
 80179b8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MARGIN_RIGHT);
 80179ba:	221b      	movs	r2, #27
 80179bc:	6839      	ldr	r1, [r7, #0]
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f7ed fa5c 	bl	8004e7c <lv_obj_get_style_prop>
 80179c4:	4603      	mov	r3, r0
 80179c6:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80179c8:	68fb      	ldr	r3, [r7, #12]
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3710      	adds	r7, #16
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <lv_obj_get_style_border_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
    return (lv_opa_t)v.num;
}

static inline int32_t lv_obj_get_style_border_width(const lv_obj_t * obj, uint32_t part)
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b084      	sub	sp, #16
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	6078      	str	r0, [r7, #4]
 80179da:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80179dc:	2230      	movs	r2, #48	@ 0x30
 80179de:	6839      	ldr	r1, [r7, #0]
 80179e0:	6878      	ldr	r0, [r7, #4]
 80179e2:	f7ed fa4b 	bl	8004e7c <lv_obj_get_style_prop>
 80179e6:	4603      	mov	r3, r0
 80179e8:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 80179ea:	68fb      	ldr	r3, [r7, #12]
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3710      	adds	r7, #16
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <lv_obj_get_style_border_side>:

static inline lv_border_side_t lv_obj_get_style_border_side(const lv_obj_t * obj, uint32_t part)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b084      	sub	sp, #16
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
 80179fc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80179fe:	2234      	movs	r2, #52	@ 0x34
 8017a00:	6839      	ldr	r1, [r7, #0]
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f7ed fa3a 	bl	8004e7c <lv_obj_get_style_prop>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	b2db      	uxtb	r3, r3
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	3710      	adds	r7, #16
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <lv_obj_get_style_base_dir>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const lv_obj_t * obj, uint32_t part)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b084      	sub	sp, #16
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017a22:	2227      	movs	r2, #39	@ 0x27
 8017a24:	6839      	ldr	r1, [r7, #0]
 8017a26:	6878      	ldr	r0, [r7, #4]
 8017a28:	f7ed fa28 	bl	8004e7c <lv_obj_get_style_prop>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	b2db      	uxtb	r3, r3
}
 8017a34:	4618      	mov	r0, r3
 8017a36:	3710      	adds	r7, #16
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	bd80      	pop	{r7, pc}

08017a3c <lv_obj_get_style_grid_column_dsc_array>:
#endif /*LV_USE_FLEX*/

#if LV_USE_GRID

static inline const int32_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b084      	sub	sp, #16
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8017a46:	2285      	movs	r2, #133	@ 0x85
 8017a48:	6839      	ldr	r1, [r7, #0]
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f7ed fa16 	bl	8004e7c <lv_obj_get_style_prop>
 8017a50:	4603      	mov	r3, r0
 8017a52:	60fb      	str	r3, [r7, #12]
    return (const int32_t *)v.ptr;
 8017a54:	68fb      	ldr	r3, [r7, #12]
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	3710      	adds	r7, #16
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	bd80      	pop	{r7, pc}

08017a5e <lv_obj_get_style_grid_column_align>:

static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const lv_obj_t * obj, uint32_t part)
{
 8017a5e:	b580      	push	{r7, lr}
 8017a60:	b084      	sub	sp, #16
 8017a62:	af00      	add	r7, sp, #0
 8017a64:	6078      	str	r0, [r7, #4]
 8017a66:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 8017a68:	2282      	movs	r2, #130	@ 0x82
 8017a6a:	6839      	ldr	r1, [r7, #0]
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f7ed fa05 	bl	8004e7c <lv_obj_get_style_prop>
 8017a72:	4603      	mov	r3, r0
 8017a74:	60fb      	str	r3, [r7, #12]
    return (lv_grid_align_t)v.num;
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	b2db      	uxtb	r3, r3
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	3710      	adds	r7, #16
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	bd80      	pop	{r7, pc}

08017a82 <lv_obj_get_style_grid_row_dsc_array>:

static inline const int32_t * lv_obj_get_style_grid_row_dsc_array(const lv_obj_t * obj, uint32_t part)
{
 8017a82:	b580      	push	{r7, lr}
 8017a84:	b084      	sub	sp, #16
 8017a86:	af00      	add	r7, sp, #0
 8017a88:	6078      	str	r0, [r7, #4]
 8017a8a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 8017a8c:	2284      	movs	r2, #132	@ 0x84
 8017a8e:	6839      	ldr	r1, [r7, #0]
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f7ed f9f3 	bl	8004e7c <lv_obj_get_style_prop>
 8017a96:	4603      	mov	r3, r0
 8017a98:	60fb      	str	r3, [r7, #12]
    return (const int32_t *)v.ptr;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	3710      	adds	r7, #16
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <lv_obj_get_style_grid_row_align>:

static inline lv_grid_align_t lv_obj_get_style_grid_row_align(const lv_obj_t * obj, uint32_t part)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 8017aae:	2283      	movs	r2, #131	@ 0x83
 8017ab0:	6839      	ldr	r1, [r7, #0]
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f7ed f9e2 	bl	8004e7c <lv_obj_get_style_prop>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	60fb      	str	r3, [r7, #12]
    return (lv_grid_align_t)v.num;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	b2db      	uxtb	r3, r3
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3710      	adds	r7, #16
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <lv_obj_get_style_grid_cell_column_pos>:

static inline int32_t lv_obj_get_style_grid_cell_column_pos(const lv_obj_t * obj, uint32_t part)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
 8017ad0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8017ad2:	2286      	movs	r2, #134	@ 0x86
 8017ad4:	6839      	ldr	r1, [r7, #0]
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7ed f9d0 	bl	8004e7c <lv_obj_get_style_prop>
 8017adc:	4603      	mov	r3, r0
 8017ade:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017ae0:	68fb      	ldr	r3, [r7, #12]
}
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	3710      	adds	r7, #16
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}

08017aea <lv_obj_get_style_grid_cell_x_align>:

static inline lv_grid_align_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
 8017aea:	b580      	push	{r7, lr}
 8017aec:	b084      	sub	sp, #16
 8017aee:	af00      	add	r7, sp, #0
 8017af0:	6078      	str	r0, [r7, #4]
 8017af2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 8017af4:	2288      	movs	r2, #136	@ 0x88
 8017af6:	6839      	ldr	r1, [r7, #0]
 8017af8:	6878      	ldr	r0, [r7, #4]
 8017afa:	f7ed f9bf 	bl	8004e7c <lv_obj_get_style_prop>
 8017afe:	4603      	mov	r3, r0
 8017b00:	60fb      	str	r3, [r7, #12]
    return (lv_grid_align_t)v.num;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	b2db      	uxtb	r3, r3
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3710      	adds	r7, #16
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}

08017b0e <lv_obj_get_style_grid_cell_column_span>:

static inline int32_t lv_obj_get_style_grid_cell_column_span(const lv_obj_t * obj, uint32_t part)
{
 8017b0e:	b580      	push	{r7, lr}
 8017b10:	b084      	sub	sp, #16
 8017b12:	af00      	add	r7, sp, #0
 8017b14:	6078      	str	r0, [r7, #4]
 8017b16:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 8017b18:	2287      	movs	r2, #135	@ 0x87
 8017b1a:	6839      	ldr	r1, [r7, #0]
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f7ed f9ad 	bl	8004e7c <lv_obj_get_style_prop>
 8017b22:	4603      	mov	r3, r0
 8017b24:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017b26:	68fb      	ldr	r3, [r7, #12]
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3710      	adds	r7, #16
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <lv_obj_get_style_grid_cell_row_pos>:

static inline int32_t lv_obj_get_style_grid_cell_row_pos(const lv_obj_t * obj, uint32_t part)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8017b3a:	2289      	movs	r2, #137	@ 0x89
 8017b3c:	6839      	ldr	r1, [r7, #0]
 8017b3e:	6878      	ldr	r0, [r7, #4]
 8017b40:	f7ed f99c 	bl	8004e7c <lv_obj_get_style_prop>
 8017b44:	4603      	mov	r3, r0
 8017b46:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017b48:	68fb      	ldr	r3, [r7, #12]
}
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3710      	adds	r7, #16
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <lv_obj_get_style_grid_cell_y_align>:

static inline lv_grid_align_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
 8017b52:	b580      	push	{r7, lr}
 8017b54:	b084      	sub	sp, #16
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
 8017b5a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 8017b5c:	228b      	movs	r2, #139	@ 0x8b
 8017b5e:	6839      	ldr	r1, [r7, #0]
 8017b60:	6878      	ldr	r0, [r7, #4]
 8017b62:	f7ed f98b 	bl	8004e7c <lv_obj_get_style_prop>
 8017b66:	4603      	mov	r3, r0
 8017b68:	60fb      	str	r3, [r7, #12]
    return (lv_grid_align_t)v.num;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	b2db      	uxtb	r3, r3
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3710      	adds	r7, #16
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <lv_obj_get_style_grid_cell_row_span>:

static inline int32_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b084      	sub	sp, #16
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	6078      	str	r0, [r7, #4]
 8017b7e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 8017b80:	228a      	movs	r2, #138	@ 0x8a
 8017b82:	6839      	ldr	r1, [r7, #0]
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f7ed f979 	bl	8004e7c <lv_obj_get_style_prop>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	60fb      	str	r3, [r7, #12]
    return (int32_t)v.num;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
}
 8017b90:	4618      	mov	r0, r3
 8017b92:	3710      	adds	r7, #16
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}

08017b98 <lv_obj_get_style_space_left>:
    lv_obj_set_style_transform_scale_x(obj, value, selector);
    lv_obj_set_style_transform_scale_y(obj, value, selector);
}

static inline int32_t lv_obj_get_style_space_left(const lv_obj_t * obj, uint32_t part)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b086      	sub	sp, #24
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_left(obj, part);
 8017ba2:	6839      	ldr	r1, [r7, #0]
 8017ba4:	6878      	ldr	r0, [r7, #4]
 8017ba6:	f7ff fe9d 	bl	80178e4 <lv_obj_get_style_pad_left>
 8017baa:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8017bac:	6839      	ldr	r1, [r7, #0]
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f7ff ff0f 	bl	80179d2 <lv_obj_get_style_border_width>
 8017bb4:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8017bb6:	6839      	ldr	r1, [r7, #0]
 8017bb8:	6878      	ldr	r0, [r7, #4]
 8017bba:	f7ff ff1b 	bl	80179f4 <lv_obj_get_style_border_side>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_LEFT) ? padding + border_width : padding;
 8017bc2:	7bfb      	ldrb	r3, [r7, #15]
 8017bc4:	f003 0304 	and.w	r3, r3, #4
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d003      	beq.n	8017bd4 <lv_obj_get_style_space_left+0x3c>
 8017bcc:	697a      	ldr	r2, [r7, #20]
 8017bce:	693b      	ldr	r3, [r7, #16]
 8017bd0:	4413      	add	r3, r2
 8017bd2:	e000      	b.n	8017bd6 <lv_obj_get_style_space_left+0x3e>
 8017bd4:	697b      	ldr	r3, [r7, #20]
}
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	3718      	adds	r7, #24
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}

08017bde <lv_obj_get_style_space_top>:
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
    return (border_side & LV_BORDER_SIDE_RIGHT) ? padding + border_width : padding;
}

static inline int32_t lv_obj_get_style_space_top(const lv_obj_t * obj, uint32_t part)
{
 8017bde:	b580      	push	{r7, lr}
 8017be0:	b086      	sub	sp, #24
 8017be2:	af00      	add	r7, sp, #0
 8017be4:	6078      	str	r0, [r7, #4]
 8017be6:	6039      	str	r1, [r7, #0]
    int32_t padding = lv_obj_get_style_pad_top(obj, part);
 8017be8:	6839      	ldr	r1, [r7, #0]
 8017bea:	6878      	ldr	r0, [r7, #4]
 8017bec:	f7ff fe69 	bl	80178c2 <lv_obj_get_style_pad_top>
 8017bf0:	6178      	str	r0, [r7, #20]
    int32_t border_width = lv_obj_get_style_border_width(obj, part);
 8017bf2:	6839      	ldr	r1, [r7, #0]
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f7ff feec 	bl	80179d2 <lv_obj_get_style_border_width>
 8017bfa:	6138      	str	r0, [r7, #16]
    lv_border_side_t border_side = lv_obj_get_style_border_side(obj, part);
 8017bfc:	6839      	ldr	r1, [r7, #0]
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f7ff fef8 	bl	80179f4 <lv_obj_get_style_border_side>
 8017c04:	4603      	mov	r3, r0
 8017c06:	73fb      	strb	r3, [r7, #15]
    return (border_side & LV_BORDER_SIDE_TOP) ? padding + border_width : padding;
 8017c08:	7bfb      	ldrb	r3, [r7, #15]
 8017c0a:	f003 0302 	and.w	r3, r3, #2
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d003      	beq.n	8017c1a <lv_obj_get_style_space_top+0x3c>
 8017c12:	697a      	ldr	r2, [r7, #20]
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	4413      	add	r3, r2
 8017c18:	e000      	b.n	8017c1c <lv_obj_get_style_space_top+0x3e>
 8017c1a:	697b      	ldr	r3, [r7, #20]
}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3718      	adds	r7, #24
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}

08017c24 <get_col_dsc>:
                          uint32_t track_num,
                          int32_t * size_array, int32_t * pos_array, bool reverse);
static uint32_t count_tracks(const int32_t * templ);

static inline const int32_t * get_col_dsc(lv_obj_t * obj)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b082      	sub	sp, #8
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_column_dsc_array(obj, 0);
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7ff ff04 	bl	8017a3c <lv_obj_get_style_grid_column_dsc_array>
 8017c34:	4603      	mov	r3, r0
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3708      	adds	r7, #8
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}

08017c3e <get_row_dsc>:
static inline const int32_t * get_row_dsc(lv_obj_t * obj)
{
 8017c3e:	b580      	push	{r7, lr}
 8017c40:	b082      	sub	sp, #8
 8017c42:	af00      	add	r7, sp, #0
 8017c44:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_row_dsc_array(obj, 0);
 8017c46:	2100      	movs	r1, #0
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f7ff ff1a 	bl	8017a82 <lv_obj_get_style_grid_row_dsc_array>
 8017c4e:	4603      	mov	r3, r0
}
 8017c50:	4618      	mov	r0, r3
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <get_col_pos>:
static inline int32_t get_col_pos(lv_obj_t * obj)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_cell_column_pos(obj, 0);
 8017c60:	2100      	movs	r1, #0
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7ff ff30 	bl	8017ac8 <lv_obj_get_style_grid_cell_column_pos>
 8017c68:	4603      	mov	r3, r0
}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}

08017c72 <get_row_pos>:
static inline int32_t get_row_pos(lv_obj_t * obj)
{
 8017c72:	b580      	push	{r7, lr}
 8017c74:	b082      	sub	sp, #8
 8017c76:	af00      	add	r7, sp, #0
 8017c78:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_cell_row_pos(obj, 0);
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f7ff ff57 	bl	8017b30 <lv_obj_get_style_grid_cell_row_pos>
 8017c82:	4603      	mov	r3, r0
}
 8017c84:	4618      	mov	r0, r3
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <get_col_span>:
static inline int32_t get_col_span(lv_obj_t * obj)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_cell_column_span(obj, 0);
 8017c94:	2100      	movs	r1, #0
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f7ff ff39 	bl	8017b0e <lv_obj_get_style_grid_cell_column_span>
 8017c9c:	4603      	mov	r3, r0
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	3708      	adds	r7, #8
 8017ca2:	46bd      	mov	sp, r7
 8017ca4:	bd80      	pop	{r7, pc}

08017ca6 <get_row_span>:
static inline int32_t get_row_span(lv_obj_t * obj)
{
 8017ca6:	b580      	push	{r7, lr}
 8017ca8:	b082      	sub	sp, #8
 8017caa:	af00      	add	r7, sp, #0
 8017cac:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_cell_row_span(obj, 0);
 8017cae:	2100      	movs	r1, #0
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f7ff ff60 	bl	8017b76 <lv_obj_get_style_grid_cell_row_span>
 8017cb6:	4603      	mov	r3, r0
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3708      	adds	r7, #8
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}

08017cc0 <get_cell_col_align>:
static inline lv_grid_align_t get_cell_col_align(lv_obj_t * obj)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 8017cc8:	2100      	movs	r1, #0
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7ff ff0d 	bl	8017aea <lv_obj_get_style_grid_cell_x_align>
 8017cd0:	4603      	mov	r3, r0
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3708      	adds	r7, #8
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}

08017cda <get_cell_row_align>:
static inline lv_grid_align_t get_cell_row_align(lv_obj_t * obj)
{
 8017cda:	b580      	push	{r7, lr}
 8017cdc:	b082      	sub	sp, #8
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 8017ce2:	2100      	movs	r1, #0
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f7ff ff34 	bl	8017b52 <lv_obj_get_style_grid_cell_y_align>
 8017cea:	4603      	mov	r3, r0
}
 8017cec:	4618      	mov	r0, r3
 8017cee:	3708      	adds	r7, #8
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}

08017cf4 <get_grid_col_align>:
static inline lv_grid_align_t get_grid_col_align(lv_obj_t * obj)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_column_align(obj, 0);
 8017cfc:	2100      	movs	r1, #0
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f7ff fead 	bl	8017a5e <lv_obj_get_style_grid_column_align>
 8017d04:	4603      	mov	r3, r0
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3708      	adds	r7, #8
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <get_grid_row_align>:
static inline lv_grid_align_t get_grid_row_align(lv_obj_t * obj)
{
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b082      	sub	sp, #8
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_grid_row_align(obj, 0);
 8017d16:	2100      	movs	r1, #0
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f7ff fec3 	bl	8017aa4 <lv_obj_get_style_grid_row_align>
 8017d1e:	4603      	mov	r3, r0
}
 8017d20:	4618      	mov	r0, r3
 8017d22:	3708      	adds	r7, #8
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}

08017d28 <get_margin_hor>:
static inline int32_t get_margin_hor(lv_obj_t * obj)
{
 8017d28:	b590      	push	{r4, r7, lr}
 8017d2a:	b083      	sub	sp, #12
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_margin_left(obj, LV_PART_MAIN)
 8017d30:	2100      	movs	r1, #0
 8017d32:	6878      	ldr	r0, [r7, #4]
 8017d34:	f7ff fe2b 	bl	801798e <lv_obj_get_style_margin_left>
 8017d38:	4604      	mov	r4, r0
           + lv_obj_get_style_margin_right(obj, LV_PART_MAIN);
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f7ff fe37 	bl	80179b0 <lv_obj_get_style_margin_right>
 8017d42:	4603      	mov	r3, r0
 8017d44:	4423      	add	r3, r4
}
 8017d46:	4618      	mov	r0, r3
 8017d48:	370c      	adds	r7, #12
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	bd90      	pop	{r4, r7, pc}

08017d4e <get_margin_ver>:
static inline int32_t get_margin_ver(lv_obj_t * obj)
{
 8017d4e:	b590      	push	{r4, r7, lr}
 8017d50:	b083      	sub	sp, #12
 8017d52:	af00      	add	r7, sp, #0
 8017d54:	6078      	str	r0, [r7, #4]
    return lv_obj_get_style_margin_top(obj, LV_PART_MAIN)
 8017d56:	2100      	movs	r1, #0
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	f7ff fdf6 	bl	801794a <lv_obj_get_style_margin_top>
 8017d5e:	4604      	mov	r4, r0
           + lv_obj_get_style_margin_bottom(obj, LV_PART_MAIN);
 8017d60:	2100      	movs	r1, #0
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7ff fe02 	bl	801796c <lv_obj_get_style_margin_bottom>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	4423      	add	r3, r4
}
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	370c      	adds	r7, #12
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd90      	pop	{r4, r7, pc}

08017d74 <lv_grid_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_grid_init(void)
{
 8017d74:	b480      	push	{r7}
 8017d76:	af00      	add	r7, sp, #0
    layout_list_def[LV_LAYOUT_GRID].cb = grid_update;
 8017d78:	4b07      	ldr	r3, [pc, #28]	@ (8017d98 <lv_grid_init+0x24>)
 8017d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017d7c:	3310      	adds	r3, #16
 8017d7e:	4a07      	ldr	r2, [pc, #28]	@ (8017d9c <lv_grid_init+0x28>)
 8017d80:	601a      	str	r2, [r3, #0]
    layout_list_def[LV_LAYOUT_GRID].user_data = NULL;
 8017d82:	4b05      	ldr	r3, [pc, #20]	@ (8017d98 <lv_grid_init+0x24>)
 8017d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017d86:	3310      	adds	r3, #16
 8017d88:	2200      	movs	r2, #0
 8017d8a:	605a      	str	r2, [r3, #4]
}
 8017d8c:	bf00      	nop
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d94:	4770      	bx	lr
 8017d96:	bf00      	nop
 8017d98:	2000008c 	.word	0x2000008c
 8017d9c:	08017da1 	.word	0x08017da1

08017da0 <grid_update>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void grid_update(lv_obj_t * cont, void * user_data)
{
 8017da0:	b590      	push	{r4, r7, lr}
 8017da2:	b095      	sub	sp, #84	@ 0x54
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
 8017da8:	6039      	str	r1, [r7, #0]
    //    const int32_t * col_templ = get_col_dsc(cont);
    //    const int32_t * row_templ = get_row_dsc(cont);
    //    if(col_templ == NULL || row_templ == NULL) return;

    _lv_grid_calc_t c;
    calc(cont, &c);
 8017daa:	f107 0318 	add.w	r3, r7, #24
 8017dae:	4619      	mov	r1, r3
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f000 f867 	bl	8017e84 <calc>

    item_repos_hint_t hint;
    lv_memzero(&hint, sizeof(hint));
 8017db6:	f107 0308 	add.w	r3, r7, #8
 8017dba:	2110      	movs	r1, #16
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7ff fd2e 	bl	801781e <lv_memzero>

    /*Calculate the grids absolute x and y coordinates.
     *It will be used as helper during item repositioning to avoid calculating this value for every children*/
    int32_t pad_left = lv_obj_get_style_space_left(cont, LV_PART_MAIN);
 8017dc2:	2100      	movs	r1, #0
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7ff fee7 	bl	8017b98 <lv_obj_get_style_space_left>
 8017dca:	64b8      	str	r0, [r7, #72]	@ 0x48
    int32_t pad_top = lv_obj_get_style_space_top(cont, LV_PART_MAIN);
 8017dcc:	2100      	movs	r1, #0
 8017dce:	6878      	ldr	r0, [r7, #4]
 8017dd0:	f7ff ff05 	bl	8017bde <lv_obj_get_style_space_top>
 8017dd4:	6478      	str	r0, [r7, #68]	@ 0x44
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	695a      	ldr	r2, [r3, #20]
 8017dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017ddc:	18d4      	adds	r4, r2, r3
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f7ec f80a 	bl	8003df8 <lv_obj_get_scroll_x>
 8017de4:	4603      	mov	r3, r0
 8017de6:	1ae3      	subs	r3, r4, r3
 8017de8:	613b      	str	r3, [r7, #16]
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	699a      	ldr	r2, [r3, #24]
 8017dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017df0:	18d4      	adds	r4, r2, r3
 8017df2:	6878      	ldr	r0, [r7, #4]
 8017df4:	f7ec f814 	bl	8003e20 <lv_obj_get_scroll_y>
 8017df8:	4603      	mov	r3, r0
 8017dfa:	1ae3      	subs	r3, r4, r3
 8017dfc:	617b      	str	r3, [r7, #20]

    uint32_t i;
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8017dfe:	2300      	movs	r3, #0
 8017e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017e02:	e012      	b.n	8017e2a <grid_update+0x8a>
        lv_obj_t * item = cont->spec_attr->children[i];
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	689b      	ldr	r3, [r3, #8]
 8017e08:	681a      	ldr	r2, [r3, #0]
 8017e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e0c:	009b      	lsls	r3, r3, #2
 8017e0e:	4413      	add	r3, r2
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	63bb      	str	r3, [r7, #56]	@ 0x38
        item_repos(item, &c, &hint);
 8017e14:	f107 0208 	add.w	r2, r7, #8
 8017e18:	f107 0318 	add.w	r3, r7, #24
 8017e1c:	4619      	mov	r1, r3
 8017e1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017e20:	f000 fbc6 	bl	80185b0 <item_repos>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8017e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e26:	3301      	adds	r3, #1
 8017e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	689b      	ldr	r3, [r3, #8]
 8017e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017e30:	461a      	mov	r2, r3
 8017e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e34:	4293      	cmp	r3, r2
 8017e36:	d3e5      	bcc.n	8017e04 <grid_update+0x64>
    }
    calc_free(&c);
 8017e38:	f107 0318 	add.w	r3, r7, #24
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f000 f8c3 	bl	8017fc8 <calc_free>

    int32_t w_set = lv_obj_get_style_width(cont, LV_PART_MAIN);
 8017e42:	2100      	movs	r1, #0
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f7ff fcf8 	bl	801783a <lv_obj_get_style_width>
 8017e4a:	6438      	str	r0, [r7, #64]	@ 0x40
    int32_t h_set = lv_obj_get_style_height(cont, LV_PART_MAIN);
 8017e4c:	2100      	movs	r1, #0
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	f7ff fd04 	bl	801785c <lv_obj_get_style_height>
 8017e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8017e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017e58:	4a09      	ldr	r2, [pc, #36]	@ (8017e80 <grid_update+0xe0>)
 8017e5a:	4293      	cmp	r3, r2
 8017e5c:	d003      	beq.n	8017e66 <grid_update+0xc6>
 8017e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e60:	4a07      	ldr	r2, [pc, #28]	@ (8017e80 <grid_update+0xe0>)
 8017e62:	4293      	cmp	r3, r2
 8017e64:	d102      	bne.n	8017e6c <grid_update+0xcc>
        lv_obj_refr_size(cont);
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f7ea fd9e 	bl	80029a8 <lv_obj_refr_size>
    }

    lv_obj_send_event(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	212d      	movs	r1, #45	@ 0x2d
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7ea f9b4 	bl	80021de <lv_obj_send_event>

    LV_TRACE_LAYOUT("finished");
}
 8017e76:	bf00      	nop
 8017e78:	3754      	adds	r7, #84	@ 0x54
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd90      	pop	{r4, r7, pc}
 8017e7e:	bf00      	nop
 8017e80:	200007d1 	.word	0x200007d1

08017e84 <calc>:
 * @param cont an object that has a grid
 * @param calc store the calculated cells sizes here
 * @note `_lv_grid_calc_free(calc_out)` needs to be called when `calc_out` is not needed anymore
 */
static void calc(lv_obj_t * cont, _lv_grid_calc_t * calc_out)
{
 8017e84:	b5b0      	push	{r4, r5, r7, lr}
 8017e86:	b090      	sub	sp, #64	@ 0x40
 8017e88:	af04      	add	r7, sp, #16
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
    if(lv_obj_get_child(cont, 0) == NULL) {
 8017e8e:	2100      	movs	r1, #0
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7ed f9fc 	bl	800528e <lv_obj_get_child>
 8017e96:	4603      	mov	r3, r0
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d104      	bne.n	8017ea6 <calc+0x22>
        lv_memzero(calc_out, sizeof(_lv_grid_calc_t));
 8017e9c:	2120      	movs	r1, #32
 8017e9e:	6838      	ldr	r0, [r7, #0]
 8017ea0:	f7ff fcbd 	bl	801781e <lv_memzero>
        return;
 8017ea4:	e08b      	b.n	8017fbe <calc+0x13a>
    }

    calc_rows(cont, calc_out);
 8017ea6:	6839      	ldr	r1, [r7, #0]
 8017ea8:	6878      	ldr	r0, [r7, #4]
 8017eaa:	f000 fa15 	bl	80182d8 <calc_rows>
    calc_cols(cont, calc_out);
 8017eae:	6839      	ldr	r1, [r7, #0]
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	f000 f8a5 	bl	8018000 <calc_cols>

    int32_t col_gap = lv_obj_get_style_pad_column(cont, LV_PART_MAIN);
 8017eb6:	2100      	movs	r1, #0
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f7ff fd35 	bl	8017928 <lv_obj_get_style_pad_column>
 8017ebe:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t row_gap = lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 8017ec0:	2100      	movs	r1, #0
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f7ff fd1f 	bl	8017906 <lv_obj_get_style_pad_row>
 8017ec8:	62b8      	str	r0, [r7, #40]	@ 0x28

    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL;
 8017eca:	2100      	movs	r1, #0
 8017ecc:	6878      	ldr	r0, [r7, #4]
 8017ece:	f7ff fda3 	bl	8017a18 <lv_obj_get_style_base_dir>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	2b01      	cmp	r3, #1
 8017ed6:	bf0c      	ite	eq
 8017ed8:	2301      	moveq	r3, #1
 8017eda:	2300      	movne	r3, #0
 8017edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    int32_t w_set = lv_obj_get_style_width(cont, LV_PART_MAIN);
 8017ee0:	2100      	movs	r1, #0
 8017ee2:	6878      	ldr	r0, [r7, #4]
 8017ee4:	f7ff fca9 	bl	801783a <lv_obj_get_style_width>
 8017ee8:	6238      	str	r0, [r7, #32]
    int32_t h_set = lv_obj_get_style_height(cont, LV_PART_MAIN);
 8017eea:	2100      	movs	r1, #0
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f7ff fcb5 	bl	801785c <lv_obj_get_style_height>
 8017ef2:	61f8      	str	r0, [r7, #28]
    bool auto_w = w_set == LV_SIZE_CONTENT && !cont->w_layout;
 8017ef4:	6a3b      	ldr	r3, [r7, #32]
 8017ef6:	4a33      	ldr	r2, [pc, #204]	@ (8017fc4 <calc+0x140>)
 8017ef8:	4293      	cmp	r3, r2
 8017efa:	d109      	bne.n	8017f10 <calc+0x8c>
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8017f02:	f003 0308 	and.w	r3, r3, #8
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d101      	bne.n	8017f10 <calc+0x8c>
 8017f0c:	2301      	movs	r3, #1
 8017f0e:	e000      	b.n	8017f12 <calc+0x8e>
 8017f10:	2300      	movs	r3, #0
 8017f12:	76fb      	strb	r3, [r7, #27]
 8017f14:	7efb      	ldrb	r3, [r7, #27]
 8017f16:	f003 0301 	and.w	r3, r3, #1
 8017f1a:	76fb      	strb	r3, [r7, #27]
    int32_t cont_w = lv_obj_get_content_width(cont);
 8017f1c:	6878      	ldr	r0, [r7, #4]
 8017f1e:	f7ea ff80 	bl	8002e22 <lv_obj_get_content_width>
 8017f22:	6178      	str	r0, [r7, #20]
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f7ff fee5 	bl	8017cf4 <get_grid_col_align>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	461d      	mov	r5, r3
 8017f2e:	683b      	ldr	r3, [r7, #0]
 8017f30:	691b      	ldr	r3, [r3, #16]
 8017f32:	683a      	ldr	r2, [r7, #0]
 8017f34:	6892      	ldr	r2, [r2, #8]
 8017f36:	6839      	ldr	r1, [r7, #0]
 8017f38:	6809      	ldr	r1, [r1, #0]
 8017f3a:	7efc      	ldrb	r4, [r7, #27]
 8017f3c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8017f40:	9003      	str	r0, [sp, #12]
 8017f42:	9102      	str	r1, [sp, #8]
 8017f44:	9201      	str	r2, [sp, #4]
 8017f46:	9300      	str	r3, [sp, #0]
 8017f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f4a:	462a      	mov	r2, r5
 8017f4c:	4621      	mov	r1, r4
 8017f4e:	6978      	ldr	r0, [r7, #20]
 8017f50:	f000 fda8 	bl	8018aa4 <grid_align>
 8017f54:	4602      	mov	r2, r0
 8017f56:	683b      	ldr	r3, [r7, #0]
 8017f58:	619a      	str	r2, [r3, #24]
                                  calc_out->x, rev);

    bool auto_h = h_set == LV_SIZE_CONTENT && !cont->h_layout;
 8017f5a:	69fb      	ldr	r3, [r7, #28]
 8017f5c:	4a19      	ldr	r2, [pc, #100]	@ (8017fc4 <calc+0x140>)
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	d109      	bne.n	8017f76 <calc+0xf2>
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8017f68:	f003 0304 	and.w	r3, r3, #4
 8017f6c:	b2db      	uxtb	r3, r3
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d101      	bne.n	8017f76 <calc+0xf2>
 8017f72:	2301      	movs	r3, #1
 8017f74:	e000      	b.n	8017f78 <calc+0xf4>
 8017f76:	2300      	movs	r3, #0
 8017f78:	74fb      	strb	r3, [r7, #19]
 8017f7a:	7cfb      	ldrb	r3, [r7, #19]
 8017f7c:	f003 0301 	and.w	r3, r3, #1
 8017f80:	74fb      	strb	r3, [r7, #19]
    int32_t cont_h = lv_obj_get_content_height(cont);
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f7ea ff67 	bl	8002e56 <lv_obj_get_content_height>
 8017f88:	60f8      	str	r0, [r7, #12]
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	f7ff febf 	bl	8017d0e <get_grid_row_align>
 8017f90:	4603      	mov	r3, r0
 8017f92:	461d      	mov	r5, r3
 8017f94:	683b      	ldr	r3, [r7, #0]
 8017f96:	695b      	ldr	r3, [r3, #20]
 8017f98:	683a      	ldr	r2, [r7, #0]
 8017f9a:	68d2      	ldr	r2, [r2, #12]
 8017f9c:	6839      	ldr	r1, [r7, #0]
 8017f9e:	6849      	ldr	r1, [r1, #4]
 8017fa0:	7cf8      	ldrb	r0, [r7, #19]
 8017fa2:	2400      	movs	r4, #0
 8017fa4:	9403      	str	r4, [sp, #12]
 8017fa6:	9102      	str	r1, [sp, #8]
 8017fa8:	9201      	str	r2, [sp, #4]
 8017faa:	9300      	str	r3, [sp, #0]
 8017fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fae:	462a      	mov	r2, r5
 8017fb0:	4601      	mov	r1, r0
 8017fb2:	68f8      	ldr	r0, [r7, #12]
 8017fb4:	f000 fd76 	bl	8018aa4 <grid_align>
 8017fb8:	4602      	mov	r2, r0
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	61da      	str	r2, [r3, #28]
                                  calc_out->y, false);

    LV_ASSERT_MEM_INTEGRITY();
}
 8017fbe:	3730      	adds	r7, #48	@ 0x30
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8017fc4:	200007d1 	.word	0x200007d1

08017fc8 <calc_free>:
/**
 * Free the a grid calculation's data
 * @param calc pointer to the calculated grid cell coordinates
 */
static void calc_free(_lv_grid_calc_t * calc)
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b082      	sub	sp, #8
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
    lv_free(calc->x);
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f006 f897 	bl	801e108 <lv_free>
    lv_free(calc->y);
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f006 f892 	bl	801e108 <lv_free>
    lv_free(calc->w);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	689b      	ldr	r3, [r3, #8]
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f006 f88d 	bl	801e108 <lv_free>
    lv_free(calc->h);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	68db      	ldr	r3, [r3, #12]
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f006 f888 	bl	801e108 <lv_free>
}
 8017ff8:	bf00      	nop
 8017ffa:	3708      	adds	r7, #8
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}

08018000 <calc_cols>:

static void calc_cols(lv_obj_t * cont, _lv_grid_calc_t * c)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b098      	sub	sp, #96	@ 0x60
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
 8018008:	6039      	str	r1, [r7, #0]

    const int32_t * col_templ;
    col_templ = get_col_dsc(cont);
 801800a:	6878      	ldr	r0, [r7, #4]
 801800c:	f7ff fe0a 	bl	8017c24 <get_col_dsc>
 8018010:	65f8      	str	r0, [r7, #92]	@ 0x5c
    bool subgrid = false;
 8018012:	2300      	movs	r3, #0
 8018014:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    if(col_templ == NULL) {
 8018018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801801a:	2b00      	cmp	r3, #0
 801801c:	d130      	bne.n	8018080 <calc_cols+0x80>
        lv_obj_t * parent = lv_obj_get_parent(cont);
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	f7ed f924 	bl	800526c <lv_obj_get_parent>
 8018024:	6378      	str	r0, [r7, #52]	@ 0x34
        col_templ = get_col_dsc(parent);
 8018026:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018028:	f7ff fdfc 	bl	8017c24 <get_col_dsc>
 801802c:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if(col_templ == NULL) {
 801802e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018030:	2b00      	cmp	r3, #0
 8018032:	f000 8147 	beq.w	80182c4 <calc_cols+0x2c4>
            LV_LOG_WARN("No col descriptor found even on the parent");
            return;
        }

        int32_t pos = get_col_pos(cont);
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f7ff fe0e 	bl	8017c58 <get_col_pos>
 801803c:	6338      	str	r0, [r7, #48]	@ 0x30
        int32_t span = get_col_span(cont);
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f7ff fe24 	bl	8017c8c <get_col_span>
 8018044:	62f8      	str	r0, [r7, #44]	@ 0x2c

        int32_t * col_templ_sub = lv_malloc(sizeof(int32_t) * (span + 1));
 8018046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018048:	3301      	adds	r3, #1
 801804a:	009b      	lsls	r3, r3, #2
 801804c:	4618      	mov	r0, r3
 801804e:	f006 f823 	bl	801e098 <lv_malloc>
 8018052:	62b8      	str	r0, [r7, #40]	@ 0x28
        lv_memcpy(col_templ_sub, &col_templ[pos], sizeof(int32_t) * span);
 8018054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018056:	009b      	lsls	r3, r3, #2
 8018058:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801805a:	18d1      	adds	r1, r2, r3
 801805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801805e:	009b      	lsls	r3, r3, #2
 8018060:	461a      	mov	r2, r3
 8018062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018064:	f004 fe5e 	bl	801cd24 <lv_memcpy>
        col_templ_sub[span] = LV_GRID_TEMPLATE_LAST;
 8018068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801806a:	009b      	lsls	r3, r3, #2
 801806c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801806e:	4413      	add	r3, r2
 8018070:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8018074:	601a      	str	r2, [r3, #0]
        col_templ = col_templ_sub;
 8018076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018078:	65fb      	str	r3, [r7, #92]	@ 0x5c
        subgrid = true;
 801807a:	2301      	movs	r3, #1
 801807c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    }

    int32_t cont_w = lv_obj_get_content_width(cont);
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f7ea fece 	bl	8002e22 <lv_obj_get_content_width>
 8018086:	6278      	str	r0, [r7, #36]	@ 0x24

    c->col_num = count_tracks(col_templ);
 8018088:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801808a:	f000 fdef 	bl	8018c6c <count_tracks>
 801808e:	4602      	mov	r2, r0
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	611a      	str	r2, [r3, #16]
    c->x = lv_malloc(sizeof(int32_t) * c->col_num);
 8018094:	683b      	ldr	r3, [r7, #0]
 8018096:	691b      	ldr	r3, [r3, #16]
 8018098:	009b      	lsls	r3, r3, #2
 801809a:	4618      	mov	r0, r3
 801809c:	f005 fffc 	bl	801e098 <lv_malloc>
 80180a0:	4602      	mov	r2, r0
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	601a      	str	r2, [r3, #0]
    c->w = lv_malloc(sizeof(int32_t) * c->col_num);
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	4618      	mov	r0, r3
 80180ae:	f005 fff3 	bl	801e098 <lv_malloc>
 80180b2:	4602      	mov	r2, r0
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	609a      	str	r2, [r3, #8]

    /*Set sizes for CONTENT cells*/
    uint32_t i;
    for(i = 0; i < c->col_num; i++) {
 80180b8:	2300      	movs	r3, #0
 80180ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80180bc:	e05d      	b.n	801817a <calc_cols+0x17a>
        int32_t size = LV_COORD_MIN;
 80180be:	4b83      	ldr	r3, [pc, #524]	@ (80182cc <calc_cols+0x2cc>)
 80180c0:	653b      	str	r3, [r7, #80]	@ 0x50
        if(IS_CONTENT(col_templ[i])) {
 80180c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180c4:	009b      	lsls	r3, r3, #2
 80180c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80180c8:	4413      	add	r3, r2
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	4a80      	ldr	r2, [pc, #512]	@ (80182d0 <calc_cols+0x2d0>)
 80180ce:	4293      	cmp	r3, r2
 80180d0:	d150      	bne.n	8018174 <calc_cols+0x174>
            /*Check the size of children of this cell*/
            uint32_t ci;
            for(ci = 0; ci < lv_obj_get_child_count(cont); ci++) {
 80180d2:	2300      	movs	r3, #0
 80180d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80180d6:	e034      	b.n	8018142 <calc_cols+0x142>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80180d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180da:	4619      	mov	r1, r3
 80180dc:	6878      	ldr	r0, [r7, #4]
 80180de:	f7ed f8d6 	bl	800528e <lv_obj_get_child>
 80180e2:	6138      	str	r0, [r7, #16]
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80180e4:	497b      	ldr	r1, [pc, #492]	@ (80182d4 <calc_cols+0x2d4>)
 80180e6:	6938      	ldr	r0, [r7, #16]
 80180e8:	f7e9 ffe1 	bl	80020ae <lv_obj_has_flag_any>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d11f      	bne.n	8018132 <calc_cols+0x132>
                uint32_t col_span = get_col_span(item);
 80180f2:	6938      	ldr	r0, [r7, #16]
 80180f4:	f7ff fdca 	bl	8017c8c <get_col_span>
 80180f8:	4603      	mov	r3, r0
 80180fa:	60fb      	str	r3, [r7, #12]
                if(col_span != 1) continue;
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	2b01      	cmp	r3, #1
 8018100:	d119      	bne.n	8018136 <calc_cols+0x136>

                uint32_t col_pos = get_col_pos(item);
 8018102:	6938      	ldr	r0, [r7, #16]
 8018104:	f7ff fda8 	bl	8017c58 <get_col_pos>
 8018108:	4603      	mov	r3, r0
 801810a:	60bb      	str	r3, [r7, #8]
                if(col_pos != i) continue;
 801810c:	68ba      	ldr	r2, [r7, #8]
 801810e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018110:	429a      	cmp	r2, r3
 8018112:	d112      	bne.n	801813a <calc_cols+0x13a>

                size = LV_MAX(size, lv_obj_get_width(item));
 8018114:	6938      	ldr	r0, [r7, #16]
 8018116:	f7ea fe68 	bl	8002dea <lv_obj_get_width>
 801811a:	4602      	mov	r2, r0
 801811c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801811e:	4293      	cmp	r3, r2
 8018120:	dc04      	bgt.n	801812c <calc_cols+0x12c>
 8018122:	6938      	ldr	r0, [r7, #16]
 8018124:	f7ea fe61 	bl	8002dea <lv_obj_get_width>
 8018128:	4603      	mov	r3, r0
 801812a:	e000      	b.n	801812e <calc_cols+0x12e>
 801812c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801812e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018130:	e004      	b.n	801813c <calc_cols+0x13c>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8018132:	bf00      	nop
 8018134:	e002      	b.n	801813c <calc_cols+0x13c>
                if(col_span != 1) continue;
 8018136:	bf00      	nop
 8018138:	e000      	b.n	801813c <calc_cols+0x13c>
                if(col_pos != i) continue;
 801813a:	bf00      	nop
            for(ci = 0; ci < lv_obj_get_child_count(cont); ci++) {
 801813c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801813e:	3301      	adds	r3, #1
 8018140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f7ed f8d8 	bl	80052f8 <lv_obj_get_child_count>
 8018148:	4602      	mov	r2, r0
 801814a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801814c:	4293      	cmp	r3, r2
 801814e:	d3c3      	bcc.n	80180d8 <calc_cols+0xd8>
            }
            if(size >= 0) c->w[i] = size;
 8018150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018152:	2b00      	cmp	r3, #0
 8018154:	db07      	blt.n	8018166 <calc_cols+0x166>
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	689a      	ldr	r2, [r3, #8]
 801815a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801815c:	009b      	lsls	r3, r3, #2
 801815e:	4413      	add	r3, r2
 8018160:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018162:	601a      	str	r2, [r3, #0]
 8018164:	e006      	b.n	8018174 <calc_cols+0x174>
            else c->w[i] = 0;
 8018166:	683b      	ldr	r3, [r7, #0]
 8018168:	689a      	ldr	r2, [r3, #8]
 801816a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801816c:	009b      	lsls	r3, r3, #2
 801816e:	4413      	add	r3, r2
 8018170:	2200      	movs	r2, #0
 8018172:	601a      	str	r2, [r3, #0]
    for(i = 0; i < c->col_num; i++) {
 8018174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018176:	3301      	adds	r3, #1
 8018178:	657b      	str	r3, [r7, #84]	@ 0x54
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	691b      	ldr	r3, [r3, #16]
 801817e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018180:	429a      	cmp	r2, r3
 8018182:	d39c      	bcc.n	80180be <calc_cols+0xbe>
        }
    }

    uint32_t col_fr_cnt = 0;
 8018184:	2300      	movs	r3, #0
 8018186:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t grid_w = 0;
 8018188:	2300      	movs	r3, #0
 801818a:	647b      	str	r3, [r7, #68]	@ 0x44

    for(i = 0; i < c->col_num; i++) {
 801818c:	2300      	movs	r3, #0
 801818e:	657b      	str	r3, [r7, #84]	@ 0x54
 8018190:	e02d      	b.n	80181ee <calc_cols+0x1ee>
        int32_t x = col_templ[i];
 8018192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018194:	009b      	lsls	r3, r3, #2
 8018196:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018198:	4413      	add	r3, r2
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	617b      	str	r3, [r7, #20]
        if(IS_FR(x)) {
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	4a4b      	ldr	r2, [pc, #300]	@ (80182d0 <calc_cols+0x2d0>)
 80181a2:	4293      	cmp	r3, r2
 80181a4:	dd07      	ble.n	80181b6 <calc_cols+0x1b6>
            col_fr_cnt += GET_FR(x);
 80181a6:	697a      	ldr	r2, [r7, #20]
 80181a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80181aa:	4413      	add	r3, r2
 80181ac:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80181b0:	3365      	adds	r3, #101	@ 0x65
 80181b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80181b4:	e018      	b.n	80181e8 <calc_cols+0x1e8>
        }
        else if(IS_CONTENT(x)) {
 80181b6:	697b      	ldr	r3, [r7, #20]
 80181b8:	4a45      	ldr	r2, [pc, #276]	@ (80182d0 <calc_cols+0x2d0>)
 80181ba:	4293      	cmp	r3, r2
 80181bc:	d109      	bne.n	80181d2 <calc_cols+0x1d2>
            grid_w += c->w[i];
 80181be:	683b      	ldr	r3, [r7, #0]
 80181c0:	689a      	ldr	r2, [r3, #8]
 80181c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181c4:	009b      	lsls	r3, r3, #2
 80181c6:	4413      	add	r3, r2
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80181cc:	4413      	add	r3, r2
 80181ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80181d0:	e00a      	b.n	80181e8 <calc_cols+0x1e8>
        }
        else {
            c->w[i] = x;
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	689a      	ldr	r2, [r3, #8]
 80181d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181d8:	009b      	lsls	r3, r3, #2
 80181da:	4413      	add	r3, r2
 80181dc:	697a      	ldr	r2, [r7, #20]
 80181de:	601a      	str	r2, [r3, #0]
            grid_w += x;
 80181e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80181e2:	697b      	ldr	r3, [r7, #20]
 80181e4:	4413      	add	r3, r2
 80181e6:	647b      	str	r3, [r7, #68]	@ 0x44
    for(i = 0; i < c->col_num; i++) {
 80181e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181ea:	3301      	adds	r3, #1
 80181ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	691b      	ldr	r3, [r3, #16]
 80181f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d3cc      	bcc.n	8018192 <calc_cols+0x192>
        }
    }

    int32_t col_gap = lv_obj_get_style_pad_column(cont, LV_PART_MAIN);
 80181f8:	2100      	movs	r1, #0
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	f7ff fb94 	bl	8017928 <lv_obj_get_style_pad_column>
 8018200:	6238      	str	r0, [r7, #32]
    cont_w -= col_gap * (c->col_num - 1);
 8018202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018204:	683b      	ldr	r3, [r7, #0]
 8018206:	691b      	ldr	r3, [r3, #16]
 8018208:	3b01      	subs	r3, #1
 801820a:	6a39      	ldr	r1, [r7, #32]
 801820c:	fb01 f303 	mul.w	r3, r1, r3
 8018210:	1ad3      	subs	r3, r2, r3
 8018212:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t free_w = cont_w - grid_w;
 8018214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018218:	1ad3      	subs	r3, r2, r3
 801821a:	643b      	str	r3, [r7, #64]	@ 0x40
    if(free_w < 0) free_w = 0;
 801821c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801821e:	2b00      	cmp	r3, #0
 8018220:	da01      	bge.n	8018226 <calc_cols+0x226>
 8018222:	2300      	movs	r3, #0
 8018224:	643b      	str	r3, [r7, #64]	@ 0x40

    int32_t last_fr_i = -1;
 8018226:	f04f 33ff 	mov.w	r3, #4294967295
 801822a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t last_fr_x = 0;
 801822c:	2300      	movs	r3, #0
 801822e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(i = 0; i < c->col_num; i++) {
 8018230:	2300      	movs	r3, #0
 8018232:	657b      	str	r3, [r7, #84]	@ 0x54
 8018234:	e024      	b.n	8018280 <calc_cols+0x280>
        int32_t x = col_templ[i];
 8018236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018238:	009b      	lsls	r3, r3, #2
 801823a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801823c:	4413      	add	r3, r2
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	61fb      	str	r3, [r7, #28]
        if(IS_FR(x)) {
 8018242:	69fb      	ldr	r3, [r7, #28]
 8018244:	4a22      	ldr	r2, [pc, #136]	@ (80182d0 <calc_cols+0x2d0>)
 8018246:	4293      	cmp	r3, r2
 8018248:	dd17      	ble.n	801827a <calc_cols+0x27a>
            int32_t f = GET_FR(x);
 801824a:	69fb      	ldr	r3, [r7, #28]
 801824c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8018250:	3365      	adds	r3, #101	@ 0x65
 8018252:	61bb      	str	r3, [r7, #24]
            c->w[i] = (free_w * f) / col_fr_cnt;
 8018254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018256:	69ba      	ldr	r2, [r7, #24]
 8018258:	fb02 f303 	mul.w	r3, r2, r3
 801825c:	461a      	mov	r2, r3
 801825e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018260:	fbb2 f1f3 	udiv	r1, r2, r3
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	689a      	ldr	r2, [r3, #8]
 8018268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801826a:	009b      	lsls	r3, r3, #2
 801826c:	4413      	add	r3, r2
 801826e:	460a      	mov	r2, r1
 8018270:	601a      	str	r2, [r3, #0]
            last_fr_i = i;
 8018272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018274:	63fb      	str	r3, [r7, #60]	@ 0x3c
            last_fr_x = f;
 8018276:	69bb      	ldr	r3, [r7, #24]
 8018278:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(i = 0; i < c->col_num; i++) {
 801827a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801827c:	3301      	adds	r3, #1
 801827e:	657b      	str	r3, [r7, #84]	@ 0x54
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	691b      	ldr	r3, [r3, #16]
 8018284:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018286:	429a      	cmp	r2, r3
 8018288:	d3d5      	bcc.n	8018236 <calc_cols+0x236>
        }
    }

    /*To avoid rounding errors set the last FR track to the remaining size */
    if(last_fr_i >= 0) {
 801828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801828c:	2b00      	cmp	r3, #0
 801828e:	db11      	blt.n	80182b4 <calc_cols+0x2b4>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 8018290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018294:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8018296:	1acb      	subs	r3, r1, r3
 8018298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801829a:	fb03 f101 	mul.w	r1, r3, r1
 801829e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80182a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80182a4:	1ad1      	subs	r1, r2, r3
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	689a      	ldr	r2, [r3, #8]
 80182aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182ac:	009b      	lsls	r3, r3, #2
 80182ae:	4413      	add	r3, r2
 80182b0:	460a      	mov	r2, r1
 80182b2:	601a      	str	r2, [r3, #0]
    }

    if(subgrid) {
 80182b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d004      	beq.n	80182c6 <calc_cols+0x2c6>
        lv_free((void *)col_templ);
 80182bc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80182be:	f005 ff23 	bl	801e108 <lv_free>
 80182c2:	e000      	b.n	80182c6 <calc_cols+0x2c6>
            return;
 80182c4:	bf00      	nop
    }
}
 80182c6:	3760      	adds	r7, #96	@ 0x60
 80182c8:	46bd      	mov	sp, r7
 80182ca:	bd80      	pop	{r7, pc}
 80182cc:	e0000001 	.word	0xe0000001
 80182d0:	1fffff9a 	.word	0x1fffff9a
 80182d4:	00060001 	.word	0x00060001

080182d8 <calc_rows>:

static void calc_rows(lv_obj_t * cont, _lv_grid_calc_t * c)
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b098      	sub	sp, #96	@ 0x60
 80182dc:	af00      	add	r7, sp, #0
 80182de:	6078      	str	r0, [r7, #4]
 80182e0:	6039      	str	r1, [r7, #0]
    const int32_t * row_templ;
    row_templ = get_row_dsc(cont);
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	f7ff fcab 	bl	8017c3e <get_row_dsc>
 80182e8:	65f8      	str	r0, [r7, #92]	@ 0x5c
    bool subgrid = false;
 80182ea:	2300      	movs	r3, #0
 80182ec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    if(row_templ == NULL) {
 80182f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d130      	bne.n	8018358 <calc_rows+0x80>
        lv_obj_t * parent = lv_obj_get_parent(cont);
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f7ec ffb8 	bl	800526c <lv_obj_get_parent>
 80182fc:	6378      	str	r0, [r7, #52]	@ 0x34
        row_templ = get_row_dsc(parent);
 80182fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018300:	f7ff fc9d 	bl	8017c3e <get_row_dsc>
 8018304:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if(row_templ == NULL) {
 8018306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018308:	2b00      	cmp	r3, #0
 801830a:	f000 8147 	beq.w	801859c <calc_rows+0x2c4>
            LV_LOG_WARN("No row descriptor found even on the parent");
            return;
        }

        int32_t pos = get_row_pos(cont);
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f7ff fcaf 	bl	8017c72 <get_row_pos>
 8018314:	6338      	str	r0, [r7, #48]	@ 0x30
        int32_t span = get_row_span(cont);
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f7ff fcc5 	bl	8017ca6 <get_row_span>
 801831c:	62f8      	str	r0, [r7, #44]	@ 0x2c

        int32_t * row_templ_sub = lv_malloc(sizeof(int32_t) * (span + 1));
 801831e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018320:	3301      	adds	r3, #1
 8018322:	009b      	lsls	r3, r3, #2
 8018324:	4618      	mov	r0, r3
 8018326:	f005 feb7 	bl	801e098 <lv_malloc>
 801832a:	62b8      	str	r0, [r7, #40]	@ 0x28
        lv_memcpy(row_templ_sub, &row_templ[pos], sizeof(int32_t) * span);
 801832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801832e:	009b      	lsls	r3, r3, #2
 8018330:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018332:	18d1      	adds	r1, r2, r3
 8018334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018336:	009b      	lsls	r3, r3, #2
 8018338:	461a      	mov	r2, r3
 801833a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801833c:	f004 fcf2 	bl	801cd24 <lv_memcpy>
        row_templ_sub[span] = LV_GRID_TEMPLATE_LAST;
 8018340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018342:	009b      	lsls	r3, r3, #2
 8018344:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018346:	4413      	add	r3, r2
 8018348:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 801834c:	601a      	str	r2, [r3, #0]
        row_templ = row_templ_sub;
 801834e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018350:	65fb      	str	r3, [r7, #92]	@ 0x5c
        subgrid = true;
 8018352:	2301      	movs	r3, #1
 8018354:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    }

    c->row_num = count_tracks(row_templ);
 8018358:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801835a:	f000 fc87 	bl	8018c6c <count_tracks>
 801835e:	4602      	mov	r2, r0
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	615a      	str	r2, [r3, #20]
    c->y = lv_malloc(sizeof(int32_t) * c->row_num);
 8018364:	683b      	ldr	r3, [r7, #0]
 8018366:	695b      	ldr	r3, [r3, #20]
 8018368:	009b      	lsls	r3, r3, #2
 801836a:	4618      	mov	r0, r3
 801836c:	f005 fe94 	bl	801e098 <lv_malloc>
 8018370:	4602      	mov	r2, r0
 8018372:	683b      	ldr	r3, [r7, #0]
 8018374:	605a      	str	r2, [r3, #4]
    c->h = lv_malloc(sizeof(int32_t) * c->row_num);
 8018376:	683b      	ldr	r3, [r7, #0]
 8018378:	695b      	ldr	r3, [r3, #20]
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	4618      	mov	r0, r3
 801837e:	f005 fe8b 	bl	801e098 <lv_malloc>
 8018382:	4602      	mov	r2, r0
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	60da      	str	r2, [r3, #12]
    /*Set sizes for CONTENT cells*/
    uint32_t i;
    for(i = 0; i < c->row_num; i++) {
 8018388:	2300      	movs	r3, #0
 801838a:	657b      	str	r3, [r7, #84]	@ 0x54
 801838c:	e05d      	b.n	801844a <calc_rows+0x172>
        int32_t size = LV_COORD_MIN;
 801838e:	4b85      	ldr	r3, [pc, #532]	@ (80185a4 <calc_rows+0x2cc>)
 8018390:	653b      	str	r3, [r7, #80]	@ 0x50
        if(IS_CONTENT(row_templ[i])) {
 8018392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018394:	009b      	lsls	r3, r3, #2
 8018396:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018398:	4413      	add	r3, r2
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	4a82      	ldr	r2, [pc, #520]	@ (80185a8 <calc_rows+0x2d0>)
 801839e:	4293      	cmp	r3, r2
 80183a0:	d150      	bne.n	8018444 <calc_rows+0x16c>
            /*Check the size of children of this cell*/
            uint32_t ci;
            for(ci = 0; ci < lv_obj_get_child_count(cont); ci++) {
 80183a2:	2300      	movs	r3, #0
 80183a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80183a6:	e034      	b.n	8018412 <calc_rows+0x13a>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80183a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80183aa:	4619      	mov	r1, r3
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	f7ec ff6e 	bl	800528e <lv_obj_get_child>
 80183b2:	6138      	str	r0, [r7, #16]
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80183b4:	497d      	ldr	r1, [pc, #500]	@ (80185ac <calc_rows+0x2d4>)
 80183b6:	6938      	ldr	r0, [r7, #16]
 80183b8:	f7e9 fe79 	bl	80020ae <lv_obj_has_flag_any>
 80183bc:	4603      	mov	r3, r0
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d11f      	bne.n	8018402 <calc_rows+0x12a>
                uint32_t row_span = get_row_span(item);
 80183c2:	6938      	ldr	r0, [r7, #16]
 80183c4:	f7ff fc6f 	bl	8017ca6 <get_row_span>
 80183c8:	4603      	mov	r3, r0
 80183ca:	60fb      	str	r3, [r7, #12]
                if(row_span != 1) continue;
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	2b01      	cmp	r3, #1
 80183d0:	d119      	bne.n	8018406 <calc_rows+0x12e>

                uint32_t row_pos = get_row_pos(item);
 80183d2:	6938      	ldr	r0, [r7, #16]
 80183d4:	f7ff fc4d 	bl	8017c72 <get_row_pos>
 80183d8:	4603      	mov	r3, r0
 80183da:	60bb      	str	r3, [r7, #8]
                if(row_pos != i) continue;
 80183dc:	68ba      	ldr	r2, [r7, #8]
 80183de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d112      	bne.n	801840a <calc_rows+0x132>

                size = LV_MAX(size, lv_obj_get_height(item));
 80183e4:	6938      	ldr	r0, [r7, #16]
 80183e6:	f7ea fd0e 	bl	8002e06 <lv_obj_get_height>
 80183ea:	4602      	mov	r2, r0
 80183ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183ee:	4293      	cmp	r3, r2
 80183f0:	dc04      	bgt.n	80183fc <calc_rows+0x124>
 80183f2:	6938      	ldr	r0, [r7, #16]
 80183f4:	f7ea fd07 	bl	8002e06 <lv_obj_get_height>
 80183f8:	4603      	mov	r3, r0
 80183fa:	e000      	b.n	80183fe <calc_rows+0x126>
 80183fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80183fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8018400:	e004      	b.n	801840c <calc_rows+0x134>
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8018402:	bf00      	nop
 8018404:	e002      	b.n	801840c <calc_rows+0x134>
                if(row_span != 1) continue;
 8018406:	bf00      	nop
 8018408:	e000      	b.n	801840c <calc_rows+0x134>
                if(row_pos != i) continue;
 801840a:	bf00      	nop
            for(ci = 0; ci < lv_obj_get_child_count(cont); ci++) {
 801840c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801840e:	3301      	adds	r3, #1
 8018410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018412:	6878      	ldr	r0, [r7, #4]
 8018414:	f7ec ff70 	bl	80052f8 <lv_obj_get_child_count>
 8018418:	4602      	mov	r2, r0
 801841a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801841c:	4293      	cmp	r3, r2
 801841e:	d3c3      	bcc.n	80183a8 <calc_rows+0xd0>
            }
            if(size >= 0) c->h[i] = size;
 8018420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018422:	2b00      	cmp	r3, #0
 8018424:	db07      	blt.n	8018436 <calc_rows+0x15e>
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	68da      	ldr	r2, [r3, #12]
 801842a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801842c:	009b      	lsls	r3, r3, #2
 801842e:	4413      	add	r3, r2
 8018430:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018432:	601a      	str	r2, [r3, #0]
 8018434:	e006      	b.n	8018444 <calc_rows+0x16c>
            else c->h[i] = 0;
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	68da      	ldr	r2, [r3, #12]
 801843a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801843c:	009b      	lsls	r3, r3, #2
 801843e:	4413      	add	r3, r2
 8018440:	2200      	movs	r2, #0
 8018442:	601a      	str	r2, [r3, #0]
    for(i = 0; i < c->row_num; i++) {
 8018444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018446:	3301      	adds	r3, #1
 8018448:	657b      	str	r3, [r7, #84]	@ 0x54
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	695b      	ldr	r3, [r3, #20]
 801844e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018450:	429a      	cmp	r2, r3
 8018452:	d39c      	bcc.n	801838e <calc_rows+0xb6>
        }
    }

    uint32_t row_fr_cnt = 0;
 8018454:	2300      	movs	r3, #0
 8018456:	64bb      	str	r3, [r7, #72]	@ 0x48
    int32_t grid_h = 0;
 8018458:	2300      	movs	r3, #0
 801845a:	647b      	str	r3, [r7, #68]	@ 0x44

    for(i = 0; i < c->row_num; i++) {
 801845c:	2300      	movs	r3, #0
 801845e:	657b      	str	r3, [r7, #84]	@ 0x54
 8018460:	e02d      	b.n	80184be <calc_rows+0x1e6>
        int32_t x = row_templ[i];
 8018462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018464:	009b      	lsls	r3, r3, #2
 8018466:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018468:	4413      	add	r3, r2
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	617b      	str	r3, [r7, #20]
        if(IS_FR(x)) {
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	4a4d      	ldr	r2, [pc, #308]	@ (80185a8 <calc_rows+0x2d0>)
 8018472:	4293      	cmp	r3, r2
 8018474:	dd07      	ble.n	8018486 <calc_rows+0x1ae>
            row_fr_cnt += GET_FR(x);
 8018476:	697a      	ldr	r2, [r7, #20]
 8018478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801847a:	4413      	add	r3, r2
 801847c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8018480:	3365      	adds	r3, #101	@ 0x65
 8018482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018484:	e018      	b.n	80184b8 <calc_rows+0x1e0>
        }
        else if(IS_CONTENT(x)) {
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	4a47      	ldr	r2, [pc, #284]	@ (80185a8 <calc_rows+0x2d0>)
 801848a:	4293      	cmp	r3, r2
 801848c:	d109      	bne.n	80184a2 <calc_rows+0x1ca>
            grid_h += c->h[i];
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	68da      	ldr	r2, [r3, #12]
 8018492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018494:	009b      	lsls	r3, r3, #2
 8018496:	4413      	add	r3, r2
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801849c:	4413      	add	r3, r2
 801849e:	647b      	str	r3, [r7, #68]	@ 0x44
 80184a0:	e00a      	b.n	80184b8 <calc_rows+0x1e0>
        }
        else {
            c->h[i] = x;
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	68da      	ldr	r2, [r3, #12]
 80184a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	4413      	add	r3, r2
 80184ac:	697a      	ldr	r2, [r7, #20]
 80184ae:	601a      	str	r2, [r3, #0]
            grid_h += x;
 80184b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	4413      	add	r3, r2
 80184b6:	647b      	str	r3, [r7, #68]	@ 0x44
    for(i = 0; i < c->row_num; i++) {
 80184b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80184ba:	3301      	adds	r3, #1
 80184bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	695b      	ldr	r3, [r3, #20]
 80184c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d3cc      	bcc.n	8018462 <calc_rows+0x18a>
        }
    }

    int32_t row_gap = lv_obj_get_style_pad_row(cont, LV_PART_MAIN);
 80184c8:	2100      	movs	r1, #0
 80184ca:	6878      	ldr	r0, [r7, #4]
 80184cc:	f7ff fa1b 	bl	8017906 <lv_obj_get_style_pad_row>
 80184d0:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 80184d2:	6878      	ldr	r0, [r7, #4]
 80184d4:	f7ea fcbf 	bl	8002e56 <lv_obj_get_content_height>
 80184d8:	4603      	mov	r3, r0
 80184da:	4619      	mov	r1, r3
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	695b      	ldr	r3, [r3, #20]
 80184e0:	3b01      	subs	r3, #1
 80184e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80184e4:	fb02 f303 	mul.w	r3, r2, r3
 80184e8:	1acb      	subs	r3, r1, r3
 80184ea:	623b      	str	r3, [r7, #32]
    int32_t free_h = cont_h - grid_h;
 80184ec:	6a3a      	ldr	r2, [r7, #32]
 80184ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184f0:	1ad3      	subs	r3, r2, r3
 80184f2:	643b      	str	r3, [r7, #64]	@ 0x40
    if(free_h < 0) free_h = 0;
 80184f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	da01      	bge.n	80184fe <calc_rows+0x226>
 80184fa:	2300      	movs	r3, #0
 80184fc:	643b      	str	r3, [r7, #64]	@ 0x40

    int32_t last_fr_i = -1;
 80184fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018502:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int32_t last_fr_x = 0;
 8018504:	2300      	movs	r3, #0
 8018506:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(i = 0; i < c->row_num; i++) {
 8018508:	2300      	movs	r3, #0
 801850a:	657b      	str	r3, [r7, #84]	@ 0x54
 801850c:	e024      	b.n	8018558 <calc_rows+0x280>
        int32_t x = row_templ[i];
 801850e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018510:	009b      	lsls	r3, r3, #2
 8018512:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8018514:	4413      	add	r3, r2
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	61fb      	str	r3, [r7, #28]
        if(IS_FR(x)) {
 801851a:	69fb      	ldr	r3, [r7, #28]
 801851c:	4a22      	ldr	r2, [pc, #136]	@ (80185a8 <calc_rows+0x2d0>)
 801851e:	4293      	cmp	r3, r2
 8018520:	dd17      	ble.n	8018552 <calc_rows+0x27a>
            int32_t f = GET_FR(x);
 8018522:	69fb      	ldr	r3, [r7, #28]
 8018524:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8018528:	3365      	adds	r3, #101	@ 0x65
 801852a:	61bb      	str	r3, [r7, #24]
            c->h[i] = (free_h * f) / row_fr_cnt;
 801852c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801852e:	69ba      	ldr	r2, [r7, #24]
 8018530:	fb02 f303 	mul.w	r3, r2, r3
 8018534:	461a      	mov	r2, r3
 8018536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018538:	fbb2 f1f3 	udiv	r1, r2, r3
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	68da      	ldr	r2, [r3, #12]
 8018540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018542:	009b      	lsls	r3, r3, #2
 8018544:	4413      	add	r3, r2
 8018546:	460a      	mov	r2, r1
 8018548:	601a      	str	r2, [r3, #0]
            last_fr_i = i;
 801854a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            last_fr_x = f;
 801854e:	69bb      	ldr	r3, [r7, #24]
 8018550:	63bb      	str	r3, [r7, #56]	@ 0x38
    for(i = 0; i < c->row_num; i++) {
 8018552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018554:	3301      	adds	r3, #1
 8018556:	657b      	str	r3, [r7, #84]	@ 0x54
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	695b      	ldr	r3, [r3, #20]
 801855c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801855e:	429a      	cmp	r2, r3
 8018560:	d3d5      	bcc.n	801850e <calc_rows+0x236>
        }
    }

    /*To avoid rounding errors set the last FR track to the remaining size */
    if(last_fr_i >= 0) {
 8018562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018564:	2b00      	cmp	r3, #0
 8018566:	db11      	blt.n	801858c <calc_rows+0x2b4>
        c->h[last_fr_i] = free_h - ((free_h * (row_fr_cnt - last_fr_x)) / row_fr_cnt);
 8018568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801856a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801856c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801856e:	1acb      	subs	r3, r1, r3
 8018570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018572:	fb03 f101 	mul.w	r1, r3, r1
 8018576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018578:	fbb1 f3f3 	udiv	r3, r1, r3
 801857c:	1ad1      	subs	r1, r2, r3
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	68da      	ldr	r2, [r3, #12]
 8018582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018584:	009b      	lsls	r3, r3, #2
 8018586:	4413      	add	r3, r2
 8018588:	460a      	mov	r2, r1
 801858a:	601a      	str	r2, [r3, #0]
    }

    if(subgrid) {
 801858c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8018590:	2b00      	cmp	r3, #0
 8018592:	d004      	beq.n	801859e <calc_rows+0x2c6>
        lv_free((void *)row_templ);
 8018594:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8018596:	f005 fdb7 	bl	801e108 <lv_free>
 801859a:	e000      	b.n	801859e <calc_rows+0x2c6>
            return;
 801859c:	bf00      	nop
    }
}
 801859e:	3760      	adds	r7, #96	@ 0x60
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	e0000001 	.word	0xe0000001
 80185a8:	1fffff9a 	.word	0x1fffff9a
 80185ac:	00060001 	.word	0x00060001

080185b0 <item_repos>:
 * @param calc the calculated grid of `cont`
 * @param child_id_ext helper value if the ID of the child is know (order from the oldest) else -1
 * @param grid_abs helper value, the absolute position of the grid, NULL if unknown
 */
static void item_repos(lv_obj_t * item, _lv_grid_calc_t * c, item_repos_hint_t * hint)
{
 80185b0:	b5b0      	push	{r4, r5, r7, lr}
 80185b2:	b09e      	sub	sp, #120	@ 0x78
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 80185bc:	49a7      	ldr	r1, [pc, #668]	@ (801885c <item_repos+0x2ac>)
 80185be:	68f8      	ldr	r0, [r7, #12]
 80185c0:	f7e9 fd75 	bl	80020ae <lv_obj_has_flag_any>
 80185c4:	4603      	mov	r3, r0
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	f040 8263 	bne.w	8018a92 <item_repos+0x4e2>
    uint32_t col_span = get_col_span(item);
 80185cc:	68f8      	ldr	r0, [r7, #12]
 80185ce:	f7ff fb5d 	bl	8017c8c <get_col_span>
 80185d2:	4603      	mov	r3, r0
 80185d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t row_span = get_row_span(item);
 80185d6:	68f8      	ldr	r0, [r7, #12]
 80185d8:	f7ff fb65 	bl	8017ca6 <get_row_span>
 80185dc:	4603      	mov	r3, r0
 80185de:	657b      	str	r3, [r7, #84]	@ 0x54
    if(row_span == 0 || col_span == 0) return;
 80185e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	f000 8257 	beq.w	8018a96 <item_repos+0x4e6>
 80185e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	f000 8253 	beq.w	8018a96 <item_repos+0x4e6>

    uint32_t col_pos = get_col_pos(item);
 80185f0:	68f8      	ldr	r0, [r7, #12]
 80185f2:	f7ff fb31 	bl	8017c58 <get_col_pos>
 80185f6:	4603      	mov	r3, r0
 80185f8:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t row_pos = get_row_pos(item);
 80185fa:	68f8      	ldr	r0, [r7, #12]
 80185fc:	f7ff fb39 	bl	8017c72 <get_row_pos>
 8018600:	4603      	mov	r3, r0
 8018602:	64fb      	str	r3, [r7, #76]	@ 0x4c
    lv_grid_align_t col_align = get_cell_col_align(item);
 8018604:	68f8      	ldr	r0, [r7, #12]
 8018606:	f7ff fb5b 	bl	8017cc0 <get_cell_col_align>
 801860a:	4603      	mov	r3, r0
 801860c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    lv_grid_align_t row_align = get_cell_row_align(item);
 8018610:	68f8      	ldr	r0, [r7, #12]
 8018612:	f7ff fb62 	bl	8017cda <get_cell_row_align>
 8018616:	4603      	mov	r3, r0
 8018618:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    int32_t col_x1 = c->x[col_pos];
 801861c:	68bb      	ldr	r3, [r7, #8]
 801861e:	681a      	ldr	r2, [r3, #0]
 8018620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018622:	009b      	lsls	r3, r3, #2
 8018624:	4413      	add	r3, r2
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	647b      	str	r3, [r7, #68]	@ 0x44
    int32_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 801862a:	68bb      	ldr	r3, [r7, #8]
 801862c:	681a      	ldr	r2, [r3, #0]
 801862e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8018630:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018632:	440b      	add	r3, r1
 8018634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018638:	3b01      	subs	r3, #1
 801863a:	009b      	lsls	r3, r3, #2
 801863c:	4413      	add	r3, r2
 801863e:	681a      	ldr	r2, [r3, #0]
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	6899      	ldr	r1, [r3, #8]
 8018644:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018648:	4403      	add	r3, r0
 801864a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801864e:	3b01      	subs	r3, #1
 8018650:	009b      	lsls	r3, r3, #2
 8018652:	440b      	add	r3, r1
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	4413      	add	r3, r2
 8018658:	643b      	str	r3, [r7, #64]	@ 0x40
    int32_t col_w = col_x2 - col_x1;
 801865a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801865c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801865e:	1ad3      	subs	r3, r2, r3
 8018660:	63fb      	str	r3, [r7, #60]	@ 0x3c

    int32_t row_y1 = c->y[row_pos];
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	685a      	ldr	r2, [r3, #4]
 8018666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018668:	009b      	lsls	r3, r3, #2
 801866a:	4413      	add	r3, r2
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8018670:	68bb      	ldr	r3, [r7, #8]
 8018672:	685a      	ldr	r2, [r3, #4]
 8018674:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8018676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018678:	440b      	add	r3, r1
 801867a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801867e:	3b01      	subs	r3, #1
 8018680:	009b      	lsls	r3, r3, #2
 8018682:	4413      	add	r3, r2
 8018684:	681a      	ldr	r2, [r3, #0]
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	68d9      	ldr	r1, [r3, #12]
 801868a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801868c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801868e:	4403      	add	r3, r0
 8018690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018694:	3b01      	subs	r3, #1
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	440b      	add	r3, r1
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	4413      	add	r3, r2
 801869e:	637b      	str	r3, [r7, #52]	@ 0x34
    int32_t row_h = row_y2 - row_y1;
 80186a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80186a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186a4:	1ad3      	subs	r3, r2, r3
 80186a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /*If the item has RTL base dir switch start and end*/
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80186a8:	2100      	movs	r1, #0
 80186aa:	68f8      	ldr	r0, [r7, #12]
 80186ac:	f7ff f9b4 	bl	8017a18 <lv_obj_get_style_base_dir>
 80186b0:	4603      	mov	r3, r0
 80186b2:	2b01      	cmp	r3, #1
 80186b4:	d10e      	bne.n	80186d4 <item_repos+0x124>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 80186b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d103      	bne.n	80186c6 <item_repos+0x116>
 80186be:	2302      	movs	r3, #2
 80186c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80186c4:	e006      	b.n	80186d4 <item_repos+0x124>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 80186c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80186ca:	2b02      	cmp	r3, #2
 80186cc:	d102      	bne.n	80186d4 <item_repos+0x124>
 80186ce:	2300      	movs	r3, #0
 80186d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    }

    int32_t x;
    int32_t y;
    int32_t item_w = lv_area_get_width(&item->coords);
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	3314      	adds	r3, #20
 80186d8:	4618      	mov	r0, r3
 80186da:	f7ff f880 	bl	80177de <lv_area_get_width>
 80186de:	66b8      	str	r0, [r7, #104]	@ 0x68
    int32_t item_h = lv_area_get_height(&item->coords);
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	3314      	adds	r3, #20
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7ff f88a 	bl	80177fe <lv_area_get_height>
 80186ea:	6678      	str	r0, [r7, #100]	@ 0x64

    switch(col_align) {
 80186ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80186f0:	2b03      	cmp	r3, #3
 80186f2:	d01a      	beq.n	801872a <item_repos+0x17a>
 80186f4:	2b03      	cmp	r3, #3
 80186f6:	dc03      	bgt.n	8018700 <item_repos+0x150>
 80186f8:	2b01      	cmp	r3, #1
 80186fa:	d032      	beq.n	8018762 <item_repos+0x1b2>
 80186fc:	2b02      	cmp	r3, #2
 80186fe:	d055      	beq.n	80187ac <item_repos+0x1fc>
        default:
        case LV_GRID_ALIGN_START:
            x = c->x[col_pos] + lv_obj_get_style_margin_left(item, LV_PART_MAIN);
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	681a      	ldr	r2, [r3, #0]
 8018704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	4413      	add	r3, r2
 801870a:	681c      	ldr	r4, [r3, #0]
 801870c:	2100      	movs	r1, #0
 801870e:	68f8      	ldr	r0, [r7, #12]
 8018710:	f7ff f93d 	bl	801798e <lv_obj_get_style_margin_left>
 8018714:	4603      	mov	r3, r0
 8018716:	4423      	add	r3, r4
 8018718:	673b      	str	r3, [r7, #112]	@ 0x70
            item->w_layout = 0;
 801871a:	68fa      	ldr	r2, [r7, #12]
 801871c:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8018720:	f36f 03c3 	bfc	r3, #3, #1
 8018724:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 8018728:	e05c      	b.n	80187e4 <item_repos+0x234>
        case LV_GRID_ALIGN_STRETCH:
            x = c->x[col_pos] + lv_obj_get_style_margin_left(item, LV_PART_MAIN);
 801872a:	68bb      	ldr	r3, [r7, #8]
 801872c:	681a      	ldr	r2, [r3, #0]
 801872e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018730:	009b      	lsls	r3, r3, #2
 8018732:	4413      	add	r3, r2
 8018734:	681c      	ldr	r4, [r3, #0]
 8018736:	2100      	movs	r1, #0
 8018738:	68f8      	ldr	r0, [r7, #12]
 801873a:	f7ff f928 	bl	801798e <lv_obj_get_style_margin_left>
 801873e:	4603      	mov	r3, r0
 8018740:	4423      	add	r3, r4
 8018742:	673b      	str	r3, [r7, #112]	@ 0x70
            item_w = col_w - get_margin_hor(item);
 8018744:	68f8      	ldr	r0, [r7, #12]
 8018746:	f7ff faef 	bl	8017d28 <get_margin_hor>
 801874a:	4602      	mov	r2, r0
 801874c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801874e:	1a9b      	subs	r3, r3, r2
 8018750:	66bb      	str	r3, [r7, #104]	@ 0x68
            item->w_layout = 1;
 8018752:	68fa      	ldr	r2, [r7, #12]
 8018754:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8018758:	f043 0308 	orr.w	r3, r3, #8
 801875c:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 8018760:	e040      	b.n	80187e4 <item_repos+0x234>
        case LV_GRID_ALIGN_CENTER:
            x = c->x[col_pos] + (col_w - item_w) / 2 + (lv_obj_get_style_margin_left(item, LV_PART_MAIN) -
 8018762:	68bb      	ldr	r3, [r7, #8]
 8018764:	681a      	ldr	r2, [r3, #0]
 8018766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018768:	009b      	lsls	r3, r3, #2
 801876a:	4413      	add	r3, r2
 801876c:	681a      	ldr	r2, [r3, #0]
 801876e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018772:	1acb      	subs	r3, r1, r3
 8018774:	0fd9      	lsrs	r1, r3, #31
 8018776:	440b      	add	r3, r1
 8018778:	105b      	asrs	r3, r3, #1
 801877a:	18d4      	adds	r4, r2, r3
 801877c:	2100      	movs	r1, #0
 801877e:	68f8      	ldr	r0, [r7, #12]
 8018780:	f7ff f905 	bl	801798e <lv_obj_get_style_margin_left>
 8018784:	4605      	mov	r5, r0
                                                        lv_obj_get_style_margin_right(item, LV_PART_MAIN)) / 2;
 8018786:	2100      	movs	r1, #0
 8018788:	68f8      	ldr	r0, [r7, #12]
 801878a:	f7ff f911 	bl	80179b0 <lv_obj_get_style_margin_right>
 801878e:	4603      	mov	r3, r0
            x = c->x[col_pos] + (col_w - item_w) / 2 + (lv_obj_get_style_margin_left(item, LV_PART_MAIN) -
 8018790:	1aeb      	subs	r3, r5, r3
                                                        lv_obj_get_style_margin_right(item, LV_PART_MAIN)) / 2;
 8018792:	0fda      	lsrs	r2, r3, #31
 8018794:	4413      	add	r3, r2
 8018796:	105b      	asrs	r3, r3, #1
            x = c->x[col_pos] + (col_w - item_w) / 2 + (lv_obj_get_style_margin_left(item, LV_PART_MAIN) -
 8018798:	4423      	add	r3, r4
 801879a:	673b      	str	r3, [r7, #112]	@ 0x70
            item->w_layout = 0;
 801879c:	68fa      	ldr	r2, [r7, #12]
 801879e:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 80187a2:	f36f 03c3 	bfc	r3, #3, #1
 80187a6:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 80187aa:	e01b      	b.n	80187e4 <item_repos+0x234>
        case LV_GRID_ALIGN_END:
            x = c->x[col_pos] + col_w - lv_obj_get_width(item) - lv_obj_get_style_margin_right(item, LV_PART_MAIN);
 80187ac:	68bb      	ldr	r3, [r7, #8]
 80187ae:	681a      	ldr	r2, [r3, #0]
 80187b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	4413      	add	r3, r2
 80187b6:	681a      	ldr	r2, [r3, #0]
 80187b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187ba:	18d4      	adds	r4, r2, r3
 80187bc:	68f8      	ldr	r0, [r7, #12]
 80187be:	f7ea fb14 	bl	8002dea <lv_obj_get_width>
 80187c2:	4603      	mov	r3, r0
 80187c4:	1ae4      	subs	r4, r4, r3
 80187c6:	2100      	movs	r1, #0
 80187c8:	68f8      	ldr	r0, [r7, #12]
 80187ca:	f7ff f8f1 	bl	80179b0 <lv_obj_get_style_margin_right>
 80187ce:	4603      	mov	r3, r0
 80187d0:	1ae3      	subs	r3, r4, r3
 80187d2:	673b      	str	r3, [r7, #112]	@ 0x70
            item->w_layout = 0;
 80187d4:	68fa      	ldr	r2, [r7, #12]
 80187d6:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 80187da:	f36f 03c3 	bfc	r3, #3, #1
 80187de:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 80187e2:	bf00      	nop
    }

    switch(row_align) {
 80187e4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80187e8:	2b03      	cmp	r3, #3
 80187ea:	d01a      	beq.n	8018822 <item_repos+0x272>
 80187ec:	2b03      	cmp	r3, #3
 80187ee:	dc03      	bgt.n	80187f8 <item_repos+0x248>
 80187f0:	2b01      	cmp	r3, #1
 80187f2:	d035      	beq.n	8018860 <item_repos+0x2b0>
 80187f4:	2b02      	cmp	r3, #2
 80187f6:	d058      	beq.n	80188aa <item_repos+0x2fa>
        default:
        case LV_GRID_ALIGN_START:
            y = c->y[row_pos] + lv_obj_get_style_margin_top(item, LV_PART_MAIN);
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	685a      	ldr	r2, [r3, #4]
 80187fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80187fe:	009b      	lsls	r3, r3, #2
 8018800:	4413      	add	r3, r2
 8018802:	681c      	ldr	r4, [r3, #0]
 8018804:	2100      	movs	r1, #0
 8018806:	68f8      	ldr	r0, [r7, #12]
 8018808:	f7ff f89f 	bl	801794a <lv_obj_get_style_margin_top>
 801880c:	4603      	mov	r3, r0
 801880e:	4423      	add	r3, r4
 8018810:	66fb      	str	r3, [r7, #108]	@ 0x6c
            item->h_layout = 0;
 8018812:	68fa      	ldr	r2, [r7, #12]
 8018814:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8018818:	f36f 0382 	bfc	r3, #2, #1
 801881c:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 8018820:	e05f      	b.n	80188e2 <item_repos+0x332>
        case LV_GRID_ALIGN_STRETCH:
            y = c->y[row_pos] + lv_obj_get_style_margin_top(item, LV_PART_MAIN);
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	685a      	ldr	r2, [r3, #4]
 8018826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	4413      	add	r3, r2
 801882c:	681c      	ldr	r4, [r3, #0]
 801882e:	2100      	movs	r1, #0
 8018830:	68f8      	ldr	r0, [r7, #12]
 8018832:	f7ff f88a 	bl	801794a <lv_obj_get_style_margin_top>
 8018836:	4603      	mov	r3, r0
 8018838:	4423      	add	r3, r4
 801883a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            item_h = row_h - get_margin_ver(item);
 801883c:	68f8      	ldr	r0, [r7, #12]
 801883e:	f7ff fa86 	bl	8017d4e <get_margin_ver>
 8018842:	4602      	mov	r2, r0
 8018844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018846:	1a9b      	subs	r3, r3, r2
 8018848:	667b      	str	r3, [r7, #100]	@ 0x64
            item->h_layout = 1;
 801884a:	68fa      	ldr	r2, [r7, #12]
 801884c:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8018850:	f043 0304 	orr.w	r3, r3, #4
 8018854:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 8018858:	e043      	b.n	80188e2 <item_repos+0x332>
 801885a:	bf00      	nop
 801885c:	00060001 	.word	0x00060001
        case LV_GRID_ALIGN_CENTER:
            y = c->y[row_pos] + (row_h - item_h) / 2 + (lv_obj_get_style_margin_top(item, LV_PART_MAIN) -
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	685a      	ldr	r2, [r3, #4]
 8018864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018866:	009b      	lsls	r3, r3, #2
 8018868:	4413      	add	r3, r2
 801886a:	681a      	ldr	r2, [r3, #0]
 801886c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801886e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018870:	1acb      	subs	r3, r1, r3
 8018872:	0fd9      	lsrs	r1, r3, #31
 8018874:	440b      	add	r3, r1
 8018876:	105b      	asrs	r3, r3, #1
 8018878:	18d4      	adds	r4, r2, r3
 801887a:	2100      	movs	r1, #0
 801887c:	68f8      	ldr	r0, [r7, #12]
 801887e:	f7ff f864 	bl	801794a <lv_obj_get_style_margin_top>
 8018882:	4605      	mov	r5, r0
                                                        lv_obj_get_style_margin_bottom(item, LV_PART_MAIN)) / 2;
 8018884:	2100      	movs	r1, #0
 8018886:	68f8      	ldr	r0, [r7, #12]
 8018888:	f7ff f870 	bl	801796c <lv_obj_get_style_margin_bottom>
 801888c:	4603      	mov	r3, r0
            y = c->y[row_pos] + (row_h - item_h) / 2 + (lv_obj_get_style_margin_top(item, LV_PART_MAIN) -
 801888e:	1aeb      	subs	r3, r5, r3
                                                        lv_obj_get_style_margin_bottom(item, LV_PART_MAIN)) / 2;
 8018890:	0fda      	lsrs	r2, r3, #31
 8018892:	4413      	add	r3, r2
 8018894:	105b      	asrs	r3, r3, #1
            y = c->y[row_pos] + (row_h - item_h) / 2 + (lv_obj_get_style_margin_top(item, LV_PART_MAIN) -
 8018896:	4423      	add	r3, r4
 8018898:	66fb      	str	r3, [r7, #108]	@ 0x6c
            item->h_layout = 0;
 801889a:	68fa      	ldr	r2, [r7, #12]
 801889c:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 80188a0:	f36f 0382 	bfc	r3, #2, #1
 80188a4:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 80188a8:	e01b      	b.n	80188e2 <item_repos+0x332>
        case LV_GRID_ALIGN_END:
            y = c->y[row_pos] + row_h - lv_obj_get_height(item) - lv_obj_get_style_margin_bottom(item, LV_PART_MAIN);
 80188aa:	68bb      	ldr	r3, [r7, #8]
 80188ac:	685a      	ldr	r2, [r3, #4]
 80188ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80188b0:	009b      	lsls	r3, r3, #2
 80188b2:	4413      	add	r3, r2
 80188b4:	681a      	ldr	r2, [r3, #0]
 80188b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b8:	18d4      	adds	r4, r2, r3
 80188ba:	68f8      	ldr	r0, [r7, #12]
 80188bc:	f7ea faa3 	bl	8002e06 <lv_obj_get_height>
 80188c0:	4603      	mov	r3, r0
 80188c2:	1ae4      	subs	r4, r4, r3
 80188c4:	2100      	movs	r1, #0
 80188c6:	68f8      	ldr	r0, [r7, #12]
 80188c8:	f7ff f850 	bl	801796c <lv_obj_get_style_margin_bottom>
 80188cc:	4603      	mov	r3, r0
 80188ce:	1ae3      	subs	r3, r4, r3
 80188d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            item->h_layout = 0;
 80188d2:	68fa      	ldr	r2, [r7, #12]
 80188d4:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 80188d8:	f36f 0382 	bfc	r3, #2, #1
 80188dc:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
            break;
 80188e0:	bf00      	nop
    }

    /*Set a new size if required*/
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 80188e2:	68f8      	ldr	r0, [r7, #12]
 80188e4:	f7ea fa81 	bl	8002dea <lv_obj_get_width>
 80188e8:	4602      	mov	r2, r0
 80188ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80188ec:	4293      	cmp	r3, r2
 80188ee:	d106      	bne.n	80188fe <item_repos+0x34e>
 80188f0:	68f8      	ldr	r0, [r7, #12]
 80188f2:	f7ea fa88 	bl	8002e06 <lv_obj_get_height>
 80188f6:	4602      	mov	r2, r0
 80188f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188fa:	4293      	cmp	r3, r2
 80188fc:	d02a      	beq.n	8018954 <item_repos+0x3a4>
        lv_area_t old_coords;
        lv_area_copy(&old_coords, &item->coords);
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	f103 0214 	add.w	r2, r3, #20
 8018904:	f107 0310 	add.w	r3, r7, #16
 8018908:	4611      	mov	r1, r2
 801890a:	4618      	mov	r0, r3
 801890c:	f7fe ff4c 	bl	80177a8 <lv_area_copy>
        lv_obj_invalidate(item);
 8018910:	68f8      	ldr	r0, [r7, #12]
 8018912:	f7ea fc6e 	bl	80031f2 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	3314      	adds	r3, #20
 801891a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801891c:	4618      	mov	r0, r3
 801891e:	f001 fe7a 	bl	801a616 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	3314      	adds	r3, #20
 8018926:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8018928:	4618      	mov	r0, r3
 801892a:	f001 fe86 	bl	801a63a <lv_area_set_height>
        lv_obj_invalidate(item);
 801892e:	68f8      	ldr	r0, [r7, #12]
 8018930:	f7ea fc5f 	bl	80031f2 <lv_obj_invalidate>
        lv_obj_send_event(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8018934:	f107 0310 	add.w	r3, r7, #16
 8018938:	461a      	mov	r2, r3
 801893a:	212b      	movs	r1, #43	@ 0x2b
 801893c:	68f8      	ldr	r0, [r7, #12]
 801893e:	f7e9 fc4e 	bl	80021de <lv_obj_send_event>
        lv_obj_send_event(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 8018942:	68f8      	ldr	r0, [r7, #12]
 8018944:	f7ec fc92 	bl	800526c <lv_obj_get_parent>
 8018948:	4603      	mov	r3, r0
 801894a:	68fa      	ldr	r2, [r7, #12]
 801894c:	2124      	movs	r1, #36	@ 0x24
 801894e:	4618      	mov	r0, r3
 8018950:	f7e9 fc45 	bl	80021de <lv_obj_send_event>

    }

    /*Handle percentage value of translate*/
    int32_t tr_x = lv_obj_get_style_translate_x(item, LV_PART_MAIN);
 8018954:	2100      	movs	r1, #0
 8018956:	68f8      	ldr	r0, [r7, #12]
 8018958:	f7fe ff91 	bl	801787e <lv_obj_get_style_translate_x>
 801895c:	6638      	str	r0, [r7, #96]	@ 0x60
    int32_t tr_y = lv_obj_get_style_translate_y(item, LV_PART_MAIN);
 801895e:	2100      	movs	r1, #0
 8018960:	68f8      	ldr	r0, [r7, #12]
 8018962:	f7fe ff9d 	bl	80178a0 <lv_obj_get_style_translate_y>
 8018966:	65f8      	str	r0, [r7, #92]	@ 0x5c
    int32_t w = lv_obj_get_width(item);
 8018968:	68f8      	ldr	r0, [r7, #12]
 801896a:	f7ea fa3e 	bl	8002dea <lv_obj_get_width>
 801896e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    int32_t h = lv_obj_get_height(item);
 8018970:	68f8      	ldr	r0, [r7, #12]
 8018972:	f7ea fa48 	bl	8002e06 <lv_obj_get_height>
 8018976:	62b8      	str	r0, [r7, #40]	@ 0x28
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8018978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801897a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801897e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018982:	d11e      	bne.n	80189c2 <item_repos+0x412>
 8018984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018986:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801898a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801898e:	dc18      	bgt.n	80189c2 <item_repos+0x412>
 8018990:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018992:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8018996:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801899a:	dd05      	ble.n	80189a8 <item_repos+0x3f8>
 801899c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801899e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80189a2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80189a6:	e002      	b.n	80189ae <item_repos+0x3fe>
 80189a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80189aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80189ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80189b0:	fb02 f303 	mul.w	r3, r2, r3
 80189b4:	4a3a      	ldr	r2, [pc, #232]	@ (8018aa0 <item_repos+0x4f0>)
 80189b6:	fb82 1203 	smull	r1, r2, r2, r3
 80189ba:	1152      	asrs	r2, r2, #5
 80189bc:	17db      	asrs	r3, r3, #31
 80189be:	1ad3      	subs	r3, r2, r3
 80189c0:	663b      	str	r3, [r7, #96]	@ 0x60
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80189c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80189c4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80189c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80189cc:	d11e      	bne.n	8018a0c <item_repos+0x45c>
 80189ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80189d0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80189d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80189d8:	dc18      	bgt.n	8018a0c <item_repos+0x45c>
 80189da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80189dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80189e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80189e4:	dd05      	ble.n	80189f2 <item_repos+0x442>
 80189e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80189e8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80189ec:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 80189f0:	e002      	b.n	80189f8 <item_repos+0x448>
 80189f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80189f4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80189f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80189fa:	fb02 f303 	mul.w	r3, r2, r3
 80189fe:	4a28      	ldr	r2, [pc, #160]	@ (8018aa0 <item_repos+0x4f0>)
 8018a00:	fb82 1203 	smull	r1, r2, r2, r3
 8018a04:	1152      	asrs	r2, r2, #5
 8018a06:	17db      	asrs	r3, r3, #31
 8018a08:	1ad3      	subs	r3, r2, r3
 8018a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    x += tr_x;
 8018a0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018a10:	4413      	add	r3, r2
 8018a12:	673b      	str	r3, [r7, #112]	@ 0x70
    y += tr_y;
 8018a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a18:	4413      	add	r3, r2
 8018a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    int32_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	689a      	ldr	r2, [r3, #8]
 8018a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018a22:	441a      	add	r2, r3
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	695b      	ldr	r3, [r3, #20]
 8018a28:	1ad3      	subs	r3, r2, r3
 8018a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	68da      	ldr	r2, [r3, #12]
 8018a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018a32:	441a      	add	r2, r3
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	699b      	ldr	r3, [r3, #24]
 8018a38:	1ad3      	subs	r3, r2, r3
 8018a3a:	623b      	str	r3, [r7, #32]
    if(diff_x || diff_y) {
 8018a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d102      	bne.n	8018a48 <item_repos+0x498>
 8018a42:	6a3b      	ldr	r3, [r7, #32]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d027      	beq.n	8018a98 <item_repos+0x4e8>
        lv_obj_invalidate(item);
 8018a48:	68f8      	ldr	r0, [r7, #12]
 8018a4a:	f7ea fbd2 	bl	80031f2 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	695a      	ldr	r2, [r3, #20]
 8018a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a54:	441a      	add	r2, r3
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	615a      	str	r2, [r3, #20]
        item->coords.x2 += diff_x;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	69da      	ldr	r2, [r3, #28]
 8018a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a60:	441a      	add	r2, r3
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	61da      	str	r2, [r3, #28]
        item->coords.y1 += diff_y;
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	699a      	ldr	r2, [r3, #24]
 8018a6a:	6a3b      	ldr	r3, [r7, #32]
 8018a6c:	441a      	add	r2, r3
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	619a      	str	r2, [r3, #24]
        item->coords.y2 += diff_y;
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	6a1a      	ldr	r2, [r3, #32]
 8018a76:	6a3b      	ldr	r3, [r7, #32]
 8018a78:	441a      	add	r2, r3
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	621a      	str	r2, [r3, #32]
        lv_obj_invalidate(item);
 8018a7e:	68f8      	ldr	r0, [r7, #12]
 8018a80:	f7ea fbb7 	bl	80031f2 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, false);
 8018a84:	2300      	movs	r3, #0
 8018a86:	6a3a      	ldr	r2, [r7, #32]
 8018a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018a8a:	68f8      	ldr	r0, [r7, #12]
 8018a8c:	f7ea fa5e 	bl	8002f4c <lv_obj_move_children_by>
 8018a90:	e002      	b.n	8018a98 <item_repos+0x4e8>
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 8018a92:	bf00      	nop
 8018a94:	e000      	b.n	8018a98 <item_repos+0x4e8>
    if(row_span == 0 || col_span == 0) return;
 8018a96:	bf00      	nop
    }
}
 8018a98:	3778      	adds	r7, #120	@ 0x78
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	51eb851f 	.word	0x51eb851f

08018aa4 <grid_align>:
 * @return the total size of the grid
 */
static int32_t grid_align(int32_t cont_size,  bool auto_size, lv_grid_align_t align, int32_t gap,
                          uint32_t track_num,
                          int32_t * size_array, int32_t * pos_array, bool reverse)
{
 8018aa4:	b480      	push	{r7}
 8018aa6:	b089      	sub	sp, #36	@ 0x24
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	60f8      	str	r0, [r7, #12]
 8018aac:	607b      	str	r3, [r7, #4]
 8018aae:	460b      	mov	r3, r1
 8018ab0:	72fb      	strb	r3, [r7, #11]
 8018ab2:	4613      	mov	r3, r2
 8018ab4:	72bb      	strb	r3, [r7, #10]
    int32_t grid_size = 0;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	61fb      	str	r3, [r7, #28]
    uint32_t i;

    if(auto_size) {
 8018aba:	7afb      	ldrb	r3, [r7, #11]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d003      	beq.n	8018ac8 <grid_align+0x24>
        pos_array[0] = 0;
 8018ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	601a      	str	r2, [r3, #0]
 8018ac6:	e077      	b.n	8018bb8 <grid_align+0x114>
    }
    else {
        /*With spaced alignment gap will be calculated from the remaining space*/
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 8018ac8:	7abb      	ldrb	r3, [r7, #10]
 8018aca:	2b05      	cmp	r3, #5
 8018acc:	d005      	beq.n	8018ada <grid_align+0x36>
 8018ace:	7abb      	ldrb	r3, [r7, #10]
 8018ad0:	2b06      	cmp	r3, #6
 8018ad2:	d002      	beq.n	8018ada <grid_align+0x36>
 8018ad4:	7abb      	ldrb	r3, [r7, #10]
 8018ad6:	2b04      	cmp	r3, #4
 8018ad8:	d106      	bne.n	8018ae8 <grid_align+0x44>
            gap = 0;
 8018ada:	2300      	movs	r3, #0
 8018adc:	607b      	str	r3, [r7, #4]
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 8018ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ae0:	2b01      	cmp	r3, #1
 8018ae2:	d101      	bne.n	8018ae8 <grid_align+0x44>
 8018ae4:	2301      	movs	r3, #1
 8018ae6:	72bb      	strb	r3, [r7, #10]
        }

        /*Get the full grid size with gap*/
        for(i = 0; i < track_num; i++) {
 8018ae8:	2300      	movs	r3, #0
 8018aea:	61bb      	str	r3, [r7, #24]
 8018aec:	e00c      	b.n	8018b08 <grid_align+0x64>
            grid_size += size_array[i] + gap;
 8018aee:	69bb      	ldr	r3, [r7, #24]
 8018af0:	009b      	lsls	r3, r3, #2
 8018af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018af4:	4413      	add	r3, r2
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	4413      	add	r3, r2
 8018afc:	69fa      	ldr	r2, [r7, #28]
 8018afe:	4413      	add	r3, r2
 8018b00:	61fb      	str	r3, [r7, #28]
        for(i = 0; i < track_num; i++) {
 8018b02:	69bb      	ldr	r3, [r7, #24]
 8018b04:	3301      	adds	r3, #1
 8018b06:	61bb      	str	r3, [r7, #24]
 8018b08:	69ba      	ldr	r2, [r7, #24]
 8018b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d3ee      	bcc.n	8018aee <grid_align+0x4a>
        }
        grid_size -= gap;
 8018b10:	69fa      	ldr	r2, [r7, #28]
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	1ad3      	subs	r3, r2, r3
 8018b16:	61fb      	str	r3, [r7, #28]

        /*Calculate the position of the first item and set gap is necessary*/
        switch(align) {
 8018b18:	7abb      	ldrb	r3, [r7, #10]
 8018b1a:	2b06      	cmp	r3, #6
 8018b1c:	d84b      	bhi.n	8018bb6 <grid_align+0x112>
 8018b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8018b24 <grid_align+0x80>)
 8018b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b24:	08018b41 	.word	0x08018b41
 8018b28:	08018b49 	.word	0x08018b49
 8018b2c:	08018b5d 	.word	0x08018b5d
 8018b30:	08018bb7 	.word	0x08018bb7
 8018b34:	08018b9f 	.word	0x08018b9f
 8018b38:	08018b81 	.word	0x08018b81
 8018b3c:	08018b69 	.word	0x08018b69
            case LV_GRID_ALIGN_START:
                pos_array[0] = 0;
 8018b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b42:	2200      	movs	r2, #0
 8018b44:	601a      	str	r2, [r3, #0]
                break;
 8018b46:	e037      	b.n	8018bb8 <grid_align+0x114>
            case LV_GRID_ALIGN_CENTER:
                pos_array[0] = (cont_size - grid_size) / 2;
 8018b48:	68fa      	ldr	r2, [r7, #12]
 8018b4a:	69fb      	ldr	r3, [r7, #28]
 8018b4c:	1ad3      	subs	r3, r2, r3
 8018b4e:	0fda      	lsrs	r2, r3, #31
 8018b50:	4413      	add	r3, r2
 8018b52:	105b      	asrs	r3, r3, #1
 8018b54:	461a      	mov	r2, r3
 8018b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b58:	601a      	str	r2, [r3, #0]
                break;
 8018b5a:	e02d      	b.n	8018bb8 <grid_align+0x114>
            case LV_GRID_ALIGN_END:
                pos_array[0] = cont_size - grid_size;
 8018b5c:	68fa      	ldr	r2, [r7, #12]
 8018b5e:	69fb      	ldr	r3, [r7, #28]
 8018b60:	1ad2      	subs	r2, r2, r3
 8018b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b64:	601a      	str	r2, [r3, #0]
                break;
 8018b66:	e027      	b.n	8018bb8 <grid_align+0x114>
            case LV_GRID_ALIGN_SPACE_BETWEEN:
                pos_array[0] = 0;
 8018b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	601a      	str	r2, [r3, #0]
                gap = (int32_t)(cont_size - grid_size) / (int32_t)(track_num - 1);
 8018b6e:	68fa      	ldr	r2, [r7, #12]
 8018b70:	69fb      	ldr	r3, [r7, #28]
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018b76:	3a01      	subs	r2, #1
 8018b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8018b7c:	607b      	str	r3, [r7, #4]
                break;
 8018b7e:	e01b      	b.n	8018bb8 <grid_align+0x114>
            case LV_GRID_ALIGN_SPACE_AROUND:
                gap = (int32_t)(cont_size - grid_size) / (int32_t)(track_num);
 8018b80:	68fa      	ldr	r2, [r7, #12]
 8018b82:	69fb      	ldr	r3, [r7, #28]
 8018b84:	1ad2      	subs	r2, r2, r3
 8018b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b8c:	607b      	str	r3, [r7, #4]
                pos_array[0] = gap / 2;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	0fda      	lsrs	r2, r3, #31
 8018b92:	4413      	add	r3, r2
 8018b94:	105b      	asrs	r3, r3, #1
 8018b96:	461a      	mov	r2, r3
 8018b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b9a:	601a      	str	r2, [r3, #0]
                break;
 8018b9c:	e00c      	b.n	8018bb8 <grid_align+0x114>
            case LV_GRID_ALIGN_SPACE_EVENLY:
                gap = (int32_t)(cont_size - grid_size) / (int32_t)(track_num + 1);
 8018b9e:	68fa      	ldr	r2, [r7, #12]
 8018ba0:	69fb      	ldr	r3, [r7, #28]
 8018ba2:	1ad3      	subs	r3, r2, r3
 8018ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ba6:	3201      	adds	r2, #1
 8018ba8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018bac:	607b      	str	r3, [r7, #4]
                pos_array[0] = gap;
 8018bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018bb0:	687a      	ldr	r2, [r7, #4]
 8018bb2:	601a      	str	r2, [r3, #0]
                break;
 8018bb4:	e000      	b.n	8018bb8 <grid_align+0x114>
            default:
                break;
 8018bb6:	bf00      	nop
        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 8018bb8:	2300      	movs	r3, #0
 8018bba:	61bb      	str	r3, [r7, #24]
 8018bbc:	e015      	b.n	8018bea <grid_align+0x146>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 8018bbe:	69bb      	ldr	r3, [r7, #24]
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018bc4:	4413      	add	r3, r2
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	69bb      	ldr	r3, [r7, #24]
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018bce:	440b      	add	r3, r1
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	18d1      	adds	r1, r2, r3
 8018bd4:	69bb      	ldr	r3, [r7, #24]
 8018bd6:	3301      	adds	r3, #1
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018bdc:	4413      	add	r3, r2
 8018bde:	687a      	ldr	r2, [r7, #4]
 8018be0:	440a      	add	r2, r1
 8018be2:	601a      	str	r2, [r3, #0]
    for(i = 0; i < track_num - 1; i++) {
 8018be4:	69bb      	ldr	r3, [r7, #24]
 8018be6:	3301      	adds	r3, #1
 8018be8:	61bb      	str	r3, [r7, #24]
 8018bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bec:	3b01      	subs	r3, #1
 8018bee:	69ba      	ldr	r2, [r7, #24]
 8018bf0:	429a      	cmp	r2, r3
 8018bf2:	d3e4      	bcc.n	8018bbe <grid_align+0x11a>
    }

    int32_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 8018bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018bfa:	3b01      	subs	r3, #1
 8018bfc:	009b      	lsls	r3, r3, #2
 8018bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018c00:	4413      	add	r3, r2
 8018c02:	681a      	ldr	r2, [r3, #0]
 8018c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018c0a:	3b01      	subs	r3, #1
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018c10:	440b      	add	r3, r1
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	441a      	add	r2, r3
 8018c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	1ad3      	subs	r3, r2, r3
 8018c1c:	617b      	str	r3, [r7, #20]

    if(reverse) {
 8018c1e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d01b      	beq.n	8018c5e <grid_align+0x1ba>
        for(i = 0; i < track_num; i++) {
 8018c26:	2300      	movs	r3, #0
 8018c28:	61bb      	str	r3, [r7, #24]
 8018c2a:	e014      	b.n	8018c56 <grid_align+0x1b2>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 8018c2c:	69bb      	ldr	r3, [r7, #24]
 8018c2e:	009b      	lsls	r3, r3, #2
 8018c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018c32:	4413      	add	r3, r2
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	68fa      	ldr	r2, [r7, #12]
 8018c38:	1ad1      	subs	r1, r2, r3
 8018c3a:	69bb      	ldr	r3, [r7, #24]
 8018c3c:	009b      	lsls	r3, r3, #2
 8018c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018c40:	4413      	add	r3, r2
 8018c42:	681a      	ldr	r2, [r3, #0]
 8018c44:	69bb      	ldr	r3, [r7, #24]
 8018c46:	009b      	lsls	r3, r3, #2
 8018c48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018c4a:	4403      	add	r3, r0
 8018c4c:	1a8a      	subs	r2, r1, r2
 8018c4e:	601a      	str	r2, [r3, #0]
        for(i = 0; i < track_num; i++) {
 8018c50:	69bb      	ldr	r3, [r7, #24]
 8018c52:	3301      	adds	r3, #1
 8018c54:	61bb      	str	r3, [r7, #24]
 8018c56:	69ba      	ldr	r2, [r7, #24]
 8018c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d3e6      	bcc.n	8018c2c <grid_align+0x188>
        }

    }

    /*Return the full size of the grid*/
    return total_gird_size;
 8018c5e:	697b      	ldr	r3, [r7, #20]
}
 8018c60:	4618      	mov	r0, r3
 8018c62:	3724      	adds	r7, #36	@ 0x24
 8018c64:	46bd      	mov	sp, r7
 8018c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6a:	4770      	bx	lr

08018c6c <count_tracks>:

static uint32_t count_tracks(const int32_t * templ)
{
 8018c6c:	b480      	push	{r7}
 8018c6e:	b085      	sub	sp, #20
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8018c74:	2300      	movs	r3, #0
 8018c76:	60fb      	str	r3, [r7, #12]
 8018c78:	e002      	b.n	8018c80 <count_tracks+0x14>
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	60fb      	str	r3, [r7, #12]
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	009b      	lsls	r3, r3, #2
 8018c84:	687a      	ldr	r2, [r7, #4]
 8018c86:	4413      	add	r3, r2
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d1f3      	bne.n	8018c7a <count_tracks+0xe>

    return i;
 8018c92:	68fb      	ldr	r3, [r7, #12]
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3714      	adds	r7, #20
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <_lv_layout_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_layout_init(void)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	af00      	add	r7, sp, #0
    /*Malloc a list for the built in layouts*/
    layout_list_def = lv_malloc(layout_cnt * sizeof(lv_layout_dsc_t));
 8018ca4:	4b07      	ldr	r3, [pc, #28]	@ (8018cc4 <_lv_layout_init+0x24>)
 8018ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018ca8:	00db      	lsls	r3, r3, #3
 8018caa:	4618      	mov	r0, r3
 8018cac:	f005 f9f4 	bl	801e098 <lv_malloc>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	4a04      	ldr	r2, [pc, #16]	@ (8018cc4 <_lv_layout_init+0x24>)
 8018cb4:	65d3      	str	r3, [r2, #92]	@ 0x5c

#if LV_USE_FLEX
    lv_flex_init();
 8018cb6:	f7fd fcfb 	bl	80166b0 <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
 8018cba:	f7ff f85b 	bl	8017d74 <lv_grid_init>
#endif
}
 8018cbe:	bf00      	nop
 8018cc0:	bd80      	pop	{r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	2000008c 	.word	0x2000008c

08018cc8 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 8018cc8:	b480      	push	{r7}
 8018cca:	b083      	sub	sp, #12
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	689a      	ldr	r2, [r3, #8]
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	1ad3      	subs	r3, r2, r3
 8018cda:	3301      	adds	r3, #1
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	370c      	adds	r7, #12
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr

08018ce8 <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b082      	sub	sp, #8
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8018cf2:	683a      	ldr	r2, [r7, #0]
 8018cf4:	2100      	movs	r1, #0
 8018cf6:	6878      	ldr	r0, [r7, #4]
 8018cf8:	f004 fa31 	bl	801d15e <lv_memset>
}
 8018cfc:	bf00      	nop
 8018cfe:	3708      	adds	r7, #8
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}

08018d04 <lv_draw_buf_from_image>:
 * As of now, draw buf share same definition as `lv_image_dsc_t`.
 * And is interchangeable with `lv_image_dsc_t`.
 */

static inline void lv_draw_buf_from_image(lv_draw_buf_t * buf, const lv_image_dsc_t * img)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
 8018d0c:	6039      	str	r1, [r7, #0]
    lv_memcpy(buf, img, sizeof(lv_image_dsc_t));
 8018d0e:	2218      	movs	r2, #24
 8018d10:	6839      	ldr	r1, [r7, #0]
 8018d12:	6878      	ldr	r0, [r7, #4]
 8018d14:	f004 f806 	bl	801cd24 <lv_memcpy>
    buf->unaligned_data = buf->data;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	691a      	ldr	r2, [r3, #16]
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	615a      	str	r2, [r3, #20]
}
 8018d20:	bf00      	nop
 8018d22:	3708      	adds	r7, #8
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}

08018d28 <lv_bin_decoder_init>:

/**
 * Initialize the lvgl binary image decoder module
 */
void lv_bin_decoder_init(void)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
    lv_image_decoder_t * decoder;

    decoder = lv_image_decoder_create();
 8018d2e:	f7ee fe75 	bl	8007a1c <lv_image_decoder_create>
 8018d32:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d101      	bne.n	8018d3e <lv_bin_decoder_init+0x16>
 8018d3a:	bf00      	nop
 8018d3c:	e7fd      	b.n	8018d3a <lv_bin_decoder_init+0x12>
    if(decoder == NULL) {
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d014      	beq.n	8018d6e <lv_bin_decoder_init+0x46>
        LV_LOG_WARN("Out of memory");
        return;
    }

    lv_image_decoder_set_info_cb(decoder, lv_bin_decoder_info);
 8018d44:	490c      	ldr	r1, [pc, #48]	@ (8018d78 <lv_bin_decoder_init+0x50>)
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f7ee fe84 	bl	8007a54 <lv_image_decoder_set_info_cb>
    lv_image_decoder_set_open_cb(decoder, lv_bin_decoder_open);
 8018d4c:	490b      	ldr	r1, [pc, #44]	@ (8018d7c <lv_bin_decoder_init+0x54>)
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f7ee fe8e 	bl	8007a70 <lv_image_decoder_set_open_cb>
    lv_image_decoder_set_get_area_cb(decoder, lv_bin_decoder_get_area);
 8018d54:	490a      	ldr	r1, [pc, #40]	@ (8018d80 <lv_bin_decoder_init+0x58>)
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7ee fe98 	bl	8007a8c <lv_image_decoder_set_get_area_cb>
    lv_image_decoder_set_close_cb(decoder, lv_bin_decoder_close);
 8018d5c:	4909      	ldr	r1, [pc, #36]	@ (8018d84 <lv_bin_decoder_init+0x5c>)
 8018d5e:	6878      	ldr	r0, [r7, #4]
 8018d60:	f7ee fea2 	bl	8007aa8 <lv_image_decoder_set_close_cb>
    lv_image_decoder_set_cache_free_cb(decoder, NULL); /*Use general cache free method*/
 8018d64:	2100      	movs	r1, #0
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f7ee feac 	bl	8007ac4 <lv_image_decoder_set_cache_free_cb>
 8018d6c:	e000      	b.n	8018d70 <lv_bin_decoder_init+0x48>
        return;
 8018d6e:	bf00      	nop
}
 8018d70:	3708      	adds	r7, #8
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}
 8018d76:	bf00      	nop
 8018d78:	08018d89 	.word	0x08018d89
 8018d7c:	08018e95 	.word	0x08018e95
 8018d80:	08019199 	.word	0x08019199
 8018d84:	08019145 	.word	0x08019145

08018d88 <lv_bin_decoder_info>:

lv_result_t lv_bin_decoder_info(lv_image_decoder_t * decoder, const void * src, lv_image_header_t * header)
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b08a      	sub	sp, #40	@ 0x28
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	60f8      	str	r0, [r7, #12]
 8018d90:	60b9      	str	r1, [r7, #8]
 8018d92:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_image_src_t src_type = lv_image_src_get_type(src);
 8018d94:	68b8      	ldr	r0, [r7, #8]
 8018d96:	f7ed fc5a 	bl	800664e <lv_image_src_get_type>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(src_type == LV_IMAGE_SRC_VARIABLE) {
 8018da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d108      	bne.n	8018dba <lv_bin_decoder_info+0x32>
        lv_image_dsc_t * image = (lv_image_dsc_t *)src;
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	623b      	str	r3, [r7, #32]
        lv_memcpy(header, &image->header, sizeof(lv_image_header_t));
 8018dac:	6a3b      	ldr	r3, [r7, #32]
 8018dae:	220c      	movs	r2, #12
 8018db0:	4619      	mov	r1, r3
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f003 ffb6 	bl	801cd24 <lv_memcpy>
 8018db8:	e05a      	b.n	8018e70 <lv_bin_decoder_info+0xe8>
    }
    else if(src_type == LV_IMAGE_SRC_FILE) {
 8018dba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018dbe:	2b01      	cmp	r3, #1
 8018dc0:	d146      	bne.n	8018e50 <lv_bin_decoder_info+0xc8>
        /*Support only "*.bin" files*/
        if(lv_strcmp(lv_fs_get_ext(src), "bin")) return LV_RESULT_INVALID;
 8018dc2:	68b8      	ldr	r0, [r7, #8]
 8018dc4:	f002 ff3c 	bl	801bc40 <lv_fs_get_ext>
 8018dc8:	4603      	mov	r3, r0
 8018dca:	4931      	ldr	r1, [pc, #196]	@ (8018e90 <lv_bin_decoder_info+0x108>)
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f004 faa9 	bl	801d324 <lv_strcmp>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d001      	beq.n	8018ddc <lv_bin_decoder_info+0x54>
 8018dd8:	2300      	movs	r3, #0
 8018dda:	e055      	b.n	8018e88 <lv_bin_decoder_info+0x100>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8018ddc:	f107 0314 	add.w	r3, r7, #20
 8018de0:	2202      	movs	r2, #2
 8018de2:	68b9      	ldr	r1, [r7, #8]
 8018de4:	4618      	mov	r0, r3
 8018de6:	f002 fbdb 	bl	801b5a0 <lv_fs_open>
 8018dea:	4603      	mov	r3, r0
 8018dec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        if(res == LV_FS_RES_OK) {
 8018df0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d13b      	bne.n	8018e70 <lv_bin_decoder_info+0xe8>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_image_header_t), &rn);
 8018df8:	f107 0310 	add.w	r3, r7, #16
 8018dfc:	f107 0014 	add.w	r0, r7, #20
 8018e00:	220c      	movs	r2, #12
 8018e02:	6879      	ldr	r1, [r7, #4]
 8018e04:	f002 fdd6 	bl	801b9b4 <lv_fs_read>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            lv_fs_close(&f);
 8018e0e:	f107 0314 	add.w	r3, r7, #20
 8018e12:	4618      	mov	r0, r3
 8018e14:	f002 fc51 	bl	801b6ba <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_image_header_t)) {
 8018e18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d102      	bne.n	8018e26 <lv_bin_decoder_info+0x9e>
 8018e20:	693b      	ldr	r3, [r7, #16]
 8018e22:	2b0c      	cmp	r3, #12
 8018e24:	d001      	beq.n	8018e2a <lv_bin_decoder_info+0xa2>
                LV_LOG_WARN("Read file header failed: %d", res);
                return LV_RESULT_INVALID;
 8018e26:	2300      	movs	r3, #0
        if(lv_strcmp(lv_fs_get_ext(src), "bin")) return LV_RESULT_INVALID;
 8018e28:	e02e      	b.n	8018e88 <lv_bin_decoder_info+0x100>
            /**
             * @todo
             * This is a temp backward compatibility solution after adding
             * magic in image header.
             */
            if(header->magic != LV_IMAGE_HEADER_MAGIC) {
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	781b      	ldrb	r3, [r3, #0]
 8018e2e:	2b19      	cmp	r3, #25
 8018e30:	d006      	beq.n	8018e40 <lv_bin_decoder_info+0xb8>
                LV_LOG_WARN("Legacy bin image detected: %s", (char *)src);
                header->cf = header->magic;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	781a      	ldrb	r2, [r3, #0]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	705a      	strb	r2, [r3, #1]
                header->magic = LV_IMAGE_HEADER_MAGIC;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2219      	movs	r2, #25
 8018e3e:	701a      	strb	r2, [r3, #0]
            }

            /*File is always read to buf, thus data can be modified.*/
            header->flags |= LV_IMAGE_FLAGS_MODIFIABLE;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	885b      	ldrh	r3, [r3, #2]
 8018e44:	f043 0320 	orr.w	r3, r3, #32
 8018e48:	b29a      	uxth	r2, r3
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	805a      	strh	r2, [r3, #2]
 8018e4e:	e00f      	b.n	8018e70 <lv_bin_decoder_info+0xe8>
        }
    }
    else if(src_type == LV_IMAGE_SRC_SYMBOL) {
 8018e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018e54:	2b02      	cmp	r3, #2
 8018e56:	d109      	bne.n	8018e6c <lv_bin_decoder_info+0xe4>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	2201      	movs	r2, #1
 8018e5c:	809a      	strh	r2, [r3, #4]
        header->h = 1;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	2201      	movs	r2, #1
 8018e62:	80da      	strh	r2, [r3, #6]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_COLOR_FORMAT_A8;
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	220e      	movs	r2, #14
 8018e68:	705a      	strb	r2, [r3, #1]
 8018e6a:	e001      	b.n	8018e70 <lv_bin_decoder_info+0xe8>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RESULT_INVALID;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	e00b      	b.n	8018e88 <lv_bin_decoder_info+0x100>
    }

    /*For backward compatibility, all images are not premultiplied for now.*/
    if(header->magic != LV_IMAGE_HEADER_MAGIC) {
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	2b19      	cmp	r3, #25
 8018e76:	d006      	beq.n	8018e86 <lv_bin_decoder_info+0xfe>
        header->flags &= ~LV_IMAGE_FLAGS_PREMULTIPLIED;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	885b      	ldrh	r3, [r3, #2]
 8018e7c:	f023 0301 	bic.w	r3, r3, #1
 8018e80:	b29a      	uxth	r2, r3
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	805a      	strh	r2, [r3, #2]
    }

    return LV_RESULT_OK;
 8018e86:	2301      	movs	r3, #1
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3728      	adds	r7, #40	@ 0x28
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}
 8018e90:	0801e2d4 	.word	0x0801e2d4

08018e94 <lv_bin_decoder_open>:
 * @param decoder pointer to the decoder
 * @param dsc     pointer to the decoder descriptor
 * @return LV_RESULT_OK: no error; LV_RESULT_INVALID: can't open the image
 */
lv_result_t lv_bin_decoder_open(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b090      	sub	sp, #64	@ 0x40
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
 8018e9c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder);

    lv_fs_res_t res = LV_RESULT_INVALID;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bool use_directly = false; /*If the image is already decoded and can be used directly*/
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMAGE_SRC_FILE) {
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	7b1b      	ldrb	r3, [r3, #12]
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	d17c      	bne.n	8018fac <lv_bin_decoder_open+0x118>
        /*Support only "*.bin" files*/
        if(lv_strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RESULT_INVALID;
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	689b      	ldr	r3, [r3, #8]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f002 fec2 	bl	801bc40 <lv_fs_get_ext>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	49a0      	ldr	r1, [pc, #640]	@ (8019140 <lv_bin_decoder_open+0x2ac>)
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f004 fa2f 	bl	801d324 <lv_strcmp>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d001      	beq.n	8018ed0 <lv_bin_decoder_open+0x3c>
 8018ecc:	2300      	movs	r3, #0
 8018ece:	e132      	b.n	8019136 <lv_bin_decoder_open+0x2a2>

        /*If the file was open successfully save the file descriptor*/
        decoder_data_t * decoder_data = get_decoder_data(dsc);
 8018ed0:	6838      	ldr	r0, [r7, #0]
 8018ed2:	f000 fb55 	bl	8019580 <get_decoder_data>
 8018ed6:	6238      	str	r0, [r7, #32]
        if(decoder_data == NULL) {
 8018ed8:	6a3b      	ldr	r3, [r7, #32]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d101      	bne.n	8018ee2 <lv_bin_decoder_open+0x4e>
            return LV_RESULT_INVALID;
 8018ede:	2300      	movs	r3, #0
 8018ee0:	e129      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
        }

        dsc->user_data = decoder_data;
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	6a3a      	ldr	r2, [r7, #32]
 8018ee6:	639a      	str	r2, [r3, #56]	@ 0x38
        lv_fs_file_t * f = lv_malloc(sizeof(*f));
 8018ee8:	200c      	movs	r0, #12
 8018eea:	f005 f8d5 	bl	801e098 <lv_malloc>
 8018eee:	61f8      	str	r0, [r7, #28]
        if(f == NULL) {
 8018ef0:	69fb      	ldr	r3, [r7, #28]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d104      	bne.n	8018f00 <lv_bin_decoder_open+0x6c>
            free_decoder_data(dsc);
 8018ef6:	6838      	ldr	r0, [r7, #0]
 8018ef8:	f000 fb62 	bl	80195c0 <free_decoder_data>
            return LV_RESULT_INVALID;
 8018efc:	2300      	movs	r3, #0
 8018efe:	e11a      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
        }

        res = lv_fs_open(f, dsc->src, LV_FS_MODE_RD);
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	689b      	ldr	r3, [r3, #8]
 8018f04:	2202      	movs	r2, #2
 8018f06:	4619      	mov	r1, r3
 8018f08:	69f8      	ldr	r0, [r7, #28]
 8018f0a:	f002 fb49 	bl	801b5a0 <lv_fs_open>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if(res != LV_FS_RES_OK) {
 8018f14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d007      	beq.n	8018f2c <lv_bin_decoder_open+0x98>
            LV_LOG_WARN("Open file failed: %d", res);
            lv_free(f);
 8018f1c:	69f8      	ldr	r0, [r7, #28]
 8018f1e:	f005 f8f3 	bl	801e108 <lv_free>
            free_decoder_data(dsc);
 8018f22:	6838      	ldr	r0, [r7, #0]
 8018f24:	f000 fb4c 	bl	80195c0 <free_decoder_data>
            return LV_RESULT_INVALID;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	e104      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
        }

        decoder_data->f = f;    /*Now free_decoder_data will take care of the file*/
 8018f2c:	6a3b      	ldr	r3, [r7, #32]
 8018f2e:	69fa      	ldr	r2, [r7, #28]
 8018f30:	601a      	str	r2, [r3, #0]

        lv_color_format_t cf = dsc->header.cf;
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	7c5b      	ldrb	r3, [r3, #17]
 8018f36:	76fb      	strb	r3, [r7, #27]

        if(dsc->header.flags & LV_IMAGE_FLAGS_COMPRESSED) {
 8018f38:	683b      	ldr	r3, [r7, #0]
 8018f3a:	8a5b      	ldrh	r3, [r3, #18]
 8018f3c:	f003 0308 	and.w	r3, r3, #8
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d007      	beq.n	8018f54 <lv_bin_decoder_open+0xc0>
            res = decode_compressed(decoder, dsc);
 8018f44:	6839      	ldr	r1, [r7, #0]
 8018f46:	6878      	ldr	r0, [r7, #4]
 8018f48:	f000 fd27 	bl	801999a <decode_compressed>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8018f52:	e0b1      	b.n	80190b8 <lv_bin_decoder_open+0x224>
        }
        else if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 8018f54:	7efb      	ldrb	r3, [r7, #27]
 8018f56:	2b06      	cmp	r3, #6
 8018f58:	d916      	bls.n	8018f88 <lv_bin_decoder_open+0xf4>
 8018f5a:	7efb      	ldrb	r3, [r7, #27]
 8018f5c:	2b0a      	cmp	r3, #10
 8018f5e:	d813      	bhi.n	8018f88 <lv_bin_decoder_open+0xf4>
            if(dsc->args.use_indexed) {
 8018f60:	683b      	ldr	r3, [r7, #0]
 8018f62:	79db      	ldrb	r3, [r3, #7]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d007      	beq.n	8018f78 <lv_bin_decoder_open+0xe4>
                /*Palette for indexed image and whole image of A8 image are always loaded to RAM for simplicity*/
                res = load_indexed(decoder, dsc);
 8018f68:	6839      	ldr	r1, [r7, #0]
 8018f6a:	6878      	ldr	r0, [r7, #4]
 8018f6c:	f000 fc0d 	bl	801978a <load_indexed>
 8018f70:	4603      	mov	r3, r0
 8018f72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            if(dsc->args.use_indexed) {
 8018f76:	e09f      	b.n	80190b8 <lv_bin_decoder_open+0x224>
            }
            else {
                res = decode_indexed(decoder, dsc);
 8018f78:	6839      	ldr	r1, [r7, #0]
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f000 fb5a 	bl	8019634 <decode_indexed>
 8018f80:	4603      	mov	r3, r0
 8018f82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            if(dsc->args.use_indexed) {
 8018f86:	e097      	b.n	80190b8 <lv_bin_decoder_open+0x224>
            }
        }
        else if(LV_COLOR_FORMAT_IS_ALPHA_ONLY(cf)) {
 8018f88:	7efb      	ldrb	r3, [r7, #27]
 8018f8a:	2b0a      	cmp	r3, #10
 8018f8c:	d90a      	bls.n	8018fa4 <lv_bin_decoder_open+0x110>
 8018f8e:	7efb      	ldrb	r3, [r7, #27]
 8018f90:	2b0e      	cmp	r3, #14
 8018f92:	d807      	bhi.n	8018fa4 <lv_bin_decoder_open+0x110>
            res = decode_alpha_only(decoder, dsc);
 8018f94:	6839      	ldr	r1, [r7, #0]
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f000 fc2f 	bl	80197fa <decode_alpha_only>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8018fa2:	e089      	b.n	80190b8 <lv_bin_decoder_open+0x224>
            res = decode_rgb(decoder, dsc);
        }
#else
        else {
            /* decode them in get_area_cb */
            res = LV_RESULT_OK;
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8018faa:	e085      	b.n	80190b8 <lv_bin_decoder_open+0x224>
        }
#endif
    }

    else if(dsc->src_type == LV_IMAGE_SRC_VARIABLE) {
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	7b1b      	ldrb	r3, [r3, #12]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f040 8081 	bne.w	80190b8 <lv_bin_decoder_open+0x224>
        /*The variables should have valid data*/
        lv_image_dsc_t * image = (lv_image_dsc_t *)dsc->src;
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	689b      	ldr	r3, [r3, #8]
 8018fba:	637b      	str	r3, [r7, #52]	@ 0x34
        if(image->data == NULL) {
 8018fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fbe:	691b      	ldr	r3, [r3, #16]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d101      	bne.n	8018fc8 <lv_bin_decoder_open+0x134>
            return LV_RESULT_INVALID;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	e0b6      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
        }

        lv_color_format_t cf = image->header.cf;
 8018fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fca:	785b      	ldrb	r3, [r3, #1]
 8018fcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if(dsc->header.flags & LV_IMAGE_FLAGS_COMPRESSED) {
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	8a5b      	ldrh	r3, [r3, #18]
 8018fd4:	f003 0308 	and.w	r3, r3, #8
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d007      	beq.n	8018fec <lv_bin_decoder_open+0x158>
            res = decode_compressed(decoder, dsc);
 8018fdc:	6839      	ldr	r1, [r7, #0]
 8018fde:	6878      	ldr	r0, [r7, #4]
 8018fe0:	f000 fcdb 	bl	801999a <decode_compressed>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8018fea:	e065      	b.n	80190b8 <lv_bin_decoder_open+0x224>
        }
        else if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 8018fec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018ff0:	2b06      	cmp	r3, #6
 8018ff2:	d923      	bls.n	801903c <lv_bin_decoder_open+0x1a8>
 8018ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018ff8:	2b0a      	cmp	r3, #10
 8018ffa:	d81f      	bhi.n	801903c <lv_bin_decoder_open+0x1a8>
            /*Need decoder data to store converted image*/
            decoder_data_t * decoder_data = get_decoder_data(dsc);
 8018ffc:	6838      	ldr	r0, [r7, #0]
 8018ffe:	f000 fabf 	bl	8019580 <get_decoder_data>
 8019002:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if(decoder_data == NULL) {
 8019004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019006:	2b00      	cmp	r3, #0
 8019008:	d101      	bne.n	801900e <lv_bin_decoder_open+0x17a>
                return LV_RESULT_INVALID;
 801900a:	2300      	movs	r3, #0
 801900c:	e093      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
            }

            if(dsc->args.use_indexed) {
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	79db      	ldrb	r3, [r3, #7]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d00a      	beq.n	801902c <lv_bin_decoder_open+0x198>
                /*Palette for indexed image and whole image of A8 image are always loaded to RAM for simplicity*/
                res = load_indexed(decoder, dsc);
 8019016:	6839      	ldr	r1, [r7, #0]
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f000 fbb6 	bl	801978a <load_indexed>
 801901e:	4603      	mov	r3, r0
 8019020:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                use_directly = true; /*If draw unit supports indexed image, it can be used directly.*/
 8019024:	2301      	movs	r3, #1
 8019026:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        else if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 801902a:	e045      	b.n	80190b8 <lv_bin_decoder_open+0x224>
            }
            else {
                res = decode_indexed(decoder, dsc);
 801902c:	6839      	ldr	r1, [r7, #0]
 801902e:	6878      	ldr	r0, [r7, #4]
 8019030:	f000 fb00 	bl	8019634 <decode_indexed>
 8019034:	4603      	mov	r3, r0
 8019036:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        else if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 801903a:	e03d      	b.n	80190b8 <lv_bin_decoder_open+0x224>
            }
        }
        else if(LV_COLOR_FORMAT_IS_ALPHA_ONLY(cf)) {
 801903c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019040:	2b0a      	cmp	r3, #10
 8019042:	d914      	bls.n	801906e <lv_bin_decoder_open+0x1da>
 8019044:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019048:	2b0e      	cmp	r3, #14
 801904a:	d810      	bhi.n	801906e <lv_bin_decoder_open+0x1da>
            /*Alpha only image will need decoder data to store pointer to decoded image, to free it when decoder closes*/
            decoder_data_t * decoder_data = get_decoder_data(dsc);
 801904c:	6838      	ldr	r0, [r7, #0]
 801904e:	f000 fa97 	bl	8019580 <get_decoder_data>
 8019052:	62b8      	str	r0, [r7, #40]	@ 0x28
            if(decoder_data == NULL) {
 8019054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019056:	2b00      	cmp	r3, #0
 8019058:	d101      	bne.n	801905e <lv_bin_decoder_open+0x1ca>
                return LV_RESULT_INVALID;
 801905a:	2300      	movs	r3, #0
 801905c:	e06b      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
            }

            res = decode_alpha_only(decoder, dsc);
 801905e:	6839      	ldr	r1, [r7, #0]
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	f000 fbca 	bl	80197fa <decode_alpha_only>
 8019066:	4603      	mov	r3, r0
 8019068:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        else if(LV_COLOR_FORMAT_IS_ALPHA_ONLY(cf)) {
 801906c:	e024      	b.n	80190b8 <lv_bin_decoder_open+0x224>
        }
        else {
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/

            decoder_data_t * decoder_data = get_decoder_data(dsc);
 801906e:	6838      	ldr	r0, [r7, #0]
 8019070:	f000 fa86 	bl	8019580 <get_decoder_data>
 8019074:	6278      	str	r0, [r7, #36]	@ 0x24
            lv_draw_buf_t * decoded;
            if(image->header.flags & LV_IMAGE_FLAGS_ALLOCATED) {
 8019076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019078:	885b      	ldrh	r3, [r3, #2]
 801907a:	f003 0310 	and.w	r3, r3, #16
 801907e:	2b00      	cmp	r3, #0
 8019080:	d002      	beq.n	8019088 <lv_bin_decoder_open+0x1f4>
                decoded = (lv_draw_buf_t *)image;
 8019082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019086:	e006      	b.n	8019096 <lv_bin_decoder_open+0x202>
            }
            else {
                decoded = &decoder_data->c_array;
 8019088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801908a:	3324      	adds	r3, #36	@ 0x24
 801908c:	63bb      	str	r3, [r7, #56]	@ 0x38
                lv_draw_buf_from_image(decoded, image);
 801908e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019090:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019092:	f7ff fe37 	bl	8018d04 <lv_draw_buf_from_image>
            }

            dsc->decoded = decoded;
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801909a:	61da      	str	r2, [r3, #28]

            if(decoded->header.stride == 0) {
 801909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801909e:	891b      	ldrh	r3, [r3, #8]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d103      	bne.n	80190ac <lv_bin_decoder_open+0x218>
                /*Use the auto calculated value from decoder_info callback*/
                decoded->header.stride = dsc->header.stride;
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	8b1a      	ldrh	r2, [r3, #24]
 80190a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190aa:	811a      	strh	r2, [r3, #8]
            }

            res = LV_RESULT_OK;
 80190ac:	2301      	movs	r3, #1
 80190ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            use_directly = true; /*A variable image that can be used directly.*/
 80190b2:	2301      	movs	r3, #1
 80190b4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        }
    }

    if(res != LV_RESULT_OK) {
 80190b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80190bc:	2b01      	cmp	r3, #1
 80190be:	d005      	beq.n	80190cc <lv_bin_decoder_open+0x238>
        free_decoder_data(dsc);
 80190c0:	6838      	ldr	r0, [r7, #0]
 80190c2:	f000 fa7d 	bl	80195c0 <free_decoder_data>
        return res;
 80190c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80190ca:	e034      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
    }

    if(dsc->decoded == NULL) return LV_RESULT_OK; /*Need to read via get_area_cb*/
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	69db      	ldr	r3, [r3, #28]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d101      	bne.n	80190d8 <lv_bin_decoder_open+0x244>
 80190d4:	2301      	movs	r3, #1
 80190d6:	e02e      	b.n	8019136 <lv_bin_decoder_open+0x2a2>

    lv_draw_buf_t * decoded = (lv_draw_buf_t *)dsc->decoded;
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	69db      	ldr	r3, [r3, #28]
 80190dc:	617b      	str	r3, [r7, #20]
    lv_draw_buf_t * adjusted = lv_image_decoder_post_process(dsc, decoded);
 80190de:	6979      	ldr	r1, [r7, #20]
 80190e0:	6838      	ldr	r0, [r7, #0]
 80190e2:	f7ee fcfd 	bl	8007ae0 <lv_image_decoder_post_process>
 80190e6:	6138      	str	r0, [r7, #16]
    if(adjusted == NULL) {
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d104      	bne.n	80190f8 <lv_bin_decoder_open+0x264>
        free_decoder_data(dsc);
 80190ee:	6838      	ldr	r0, [r7, #0]
 80190f0:	f000 fa66 	bl	80195c0 <free_decoder_data>
        return LV_RESULT_INVALID;
 80190f4:	2300      	movs	r3, #0
 80190f6:	e01e      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
    }

    /*The adjusted draw buffer is newly allocated.*/
    if(adjusted != decoded) {
 80190f8:	693a      	ldr	r2, [r7, #16]
 80190fa:	697b      	ldr	r3, [r7, #20]
 80190fc:	429a      	cmp	r2, r3
 80190fe:	d00c      	beq.n	801911a <lv_bin_decoder_open+0x286>
        use_directly = false; /*Cannot use original image directly*/
 8019100:	2300      	movs	r3, #0
 8019102:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        free_decoder_data(dsc);
 8019106:	6838      	ldr	r0, [r7, #0]
 8019108:	f000 fa5a 	bl	80195c0 <free_decoder_data>
        decoder_data_t * decoder_data = get_decoder_data(dsc);
 801910c:	6838      	ldr	r0, [r7, #0]
 801910e:	f000 fa37 	bl	8019580 <get_decoder_data>
 8019112:	60f8      	str	r0, [r7, #12]
        decoder_data->decoded = adjusted; /*Now this new buffer need to be free'd on decoder close*/
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	693a      	ldr	r2, [r7, #16]
 8019118:	61da      	str	r2, [r3, #28]
    }
    dsc->decoded = adjusted;
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	693a      	ldr	r2, [r7, #16]
 801911e:	61da      	str	r2, [r3, #28]

    if(use_directly || dsc->args.no_cache) return LV_RESULT_OK; /*Do not put image to cache if it can be used directly.*/
 8019120:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8019124:	2b00      	cmp	r3, #0
 8019126:	d103      	bne.n	8019130 <lv_bin_decoder_open+0x29c>
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	799b      	ldrb	r3, [r3, #6]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d001      	beq.n	8019134 <lv_bin_decoder_open+0x2a0>
 8019130:	2301      	movs	r3, #1
 8019132:	e000      	b.n	8019136 <lv_bin_decoder_open+0x2a2>
    dsc->cache_entry = cache_entry;
    decoder_data_t * decoder_data = get_decoder_data(dsc);
    decoder_data->decoded = NULL; /*Cache will take care of it*/
#endif

    return LV_RESULT_OK;
 8019134:	2301      	movs	r3, #1
}
 8019136:	4618      	mov	r0, r3
 8019138:	3740      	adds	r7, #64	@ 0x40
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	0801e2d4 	.word	0x0801e2d4

08019144 <lv_bin_decoder_close>:

void lv_bin_decoder_close(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b084      	sub	sp, #16
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
 801914c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    decoder_data_t * decoder_data = dsc->user_data;
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019152:	60fb      	str	r3, [r7, #12]
    if(decoder_data && decoder_data->decoded_partial) {
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d00b      	beq.n	8019172 <lv_bin_decoder_close+0x2e>
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801915e:	2b00      	cmp	r3, #0
 8019160:	d007      	beq.n	8019172 <lv_bin_decoder_close+0x2e>
        lv_draw_buf_destroy(decoder_data->decoded_partial);
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019166:	4618      	mov	r0, r3
 8019168:	f7ec ff3a 	bl	8005fe0 <lv_draw_buf_destroy>
        decoder_data->decoded_partial = NULL;
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	2200      	movs	r2, #0
 8019170:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    free_decoder_data(dsc);
 8019172:	6838      	ldr	r0, [r7, #0]
 8019174:	f000 fa24 	bl	80195c0 <free_decoder_data>

    if(dsc->cache_entry) {
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801917c:	2b00      	cmp	r3, #0
 801917e:	d007      	beq.n	8019190 <lv_bin_decoder_close+0x4c>
        /*Decoded data is in cache, release it from cache's callback*/
        lv_cache_release(dsc->cache, dsc->cache_entry, NULL);
 8019180:	683b      	ldr	r3, [r7, #0]
 8019182:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019188:	2200      	movs	r2, #0
 801918a:	4619      	mov	r1, r3
 801918c:	f000 feb4 	bl	8019ef8 <lv_cache_release>
    }

}
 8019190:	bf00      	nop
 8019192:	3710      	adds	r7, #16
 8019194:	46bd      	mov	sp, r7
 8019196:	bd80      	pop	{r7, pc}

08019198 <lv_bin_decoder_get_area>:

lv_result_t lv_bin_decoder_get_area(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc,
                                    const lv_area_t * full_area, lv_area_t * decoded_area)
{
 8019198:	b590      	push	{r4, r7, lr}
 801919a:	b097      	sub	sp, #92	@ 0x5c
 801919c:	af02      	add	r7, sp, #8
 801919e:	60f8      	str	r0, [r7, #12]
 80191a0:	60b9      	str	r1, [r7, #8]
 80191a2:	607a      	str	r2, [r7, #4]
 80191a4:	603b      	str	r3, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_color_format_t cf = dsc->header.cf;
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	7c5b      	ldrb	r3, [r3, #17]
 80191aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                     || cf == LV_COLOR_FORMAT_ARGB8888  \
                     || cf == LV_COLOR_FORMAT_XRGB8888  \
                     || cf == LV_COLOR_FORMAT_RGB888    \
                     || cf == LV_COLOR_FORMAT_RGB565    \
                     || cf == LV_COLOR_FORMAT_ARGB8565  \
                     || cf == LV_COLOR_FORMAT_RGB565A8;
 80191ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191b2:	2b06      	cmp	r3, #6
 80191b4:	d903      	bls.n	80191be <lv_bin_decoder_get_area+0x26>
    bool supported = LV_COLOR_FORMAT_IS_INDEXED(cf)
 80191b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191ba:	2b0a      	cmp	r3, #10
 80191bc:	d917      	bls.n	80191ee <lv_bin_decoder_get_area+0x56>
                     || cf == LV_COLOR_FORMAT_ARGB8888  \
 80191be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191c2:	2b10      	cmp	r3, #16
 80191c4:	d013      	beq.n	80191ee <lv_bin_decoder_get_area+0x56>
                     || cf == LV_COLOR_FORMAT_XRGB8888  \
 80191c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191ca:	2b11      	cmp	r3, #17
 80191cc:	d00f      	beq.n	80191ee <lv_bin_decoder_get_area+0x56>
                     || cf == LV_COLOR_FORMAT_RGB888    \
 80191ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191d2:	2b0f      	cmp	r3, #15
 80191d4:	d00b      	beq.n	80191ee <lv_bin_decoder_get_area+0x56>
                     || cf == LV_COLOR_FORMAT_RGB565    \
 80191d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191da:	2b12      	cmp	r3, #18
 80191dc:	d007      	beq.n	80191ee <lv_bin_decoder_get_area+0x56>
                     || cf == LV_COLOR_FORMAT_ARGB8565  \
 80191de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191e2:	2b13      	cmp	r3, #19
 80191e4:	d003      	beq.n	80191ee <lv_bin_decoder_get_area+0x56>
                     || cf == LV_COLOR_FORMAT_RGB565A8;
 80191e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80191ea:	2b14      	cmp	r3, #20
 80191ec:	d101      	bne.n	80191f2 <lv_bin_decoder_get_area+0x5a>
 80191ee:	2301      	movs	r3, #1
 80191f0:	e000      	b.n	80191f4 <lv_bin_decoder_get_area+0x5c>
 80191f2:	2300      	movs	r3, #0
    bool supported = LV_COLOR_FORMAT_IS_INDEXED(cf)
 80191f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80191f8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80191fc:	f003 0301 	and.w	r3, r3, #1
 8019200:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    if(!supported) {
 8019204:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8019208:	f083 0301 	eor.w	r3, r3, #1
 801920c:	b2db      	uxtb	r3, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	d001      	beq.n	8019216 <lv_bin_decoder_get_area+0x7e>
        LV_LOG_WARN("CF: %d is not supported", cf);
        return LV_RESULT_INVALID;
 8019212:	2300      	movs	r3, #0
 8019214:	e1b0      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
    }

    lv_result_t res = LV_RESULT_INVALID;
 8019216:	2300      	movs	r3, #0
 8019218:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    decoder_data_t * decoder_data = dsc->user_data;
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019220:	643b      	str	r3, [r7, #64]	@ 0x40
    if(decoder_data == NULL) {
 8019222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019224:	2b00      	cmp	r3, #0
 8019226:	d101      	bne.n	801922c <lv_bin_decoder_get_area+0x94>
        LV_LOG_ERROR("Unexpected null decoder data");
        return LV_RESULT_INVALID;
 8019228:	2300      	movs	r3, #0
 801922a:	e1a5      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
    }

    lv_fs_file_t * f = decoder_data->f;
 801922c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t bpp = lv_color_format_get_bpp(cf);
 8019232:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019236:	4618      	mov	r0, r3
 8019238:	f002 f83a 	bl	801b2b0 <lv_color_format_get_bpp>
 801923c:	4603      	mov	r3, r0
 801923e:	63bb      	str	r3, [r7, #56]	@ 0x38
    int32_t w_px = lv_area_get_width(full_area);
 8019240:	6878      	ldr	r0, [r7, #4]
 8019242:	f7ff fd41 	bl	8018cc8 <lv_area_get_width>
 8019246:	6378      	str	r0, [r7, #52]	@ 0x34
    uint8_t * img_data = NULL;
 8019248:	2300      	movs	r3, #0
 801924a:	633b      	str	r3, [r7, #48]	@ 0x30
    lv_draw_buf_t * decoded = NULL;
 801924c:	2300      	movs	r3, #0
 801924e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint32_t offset = 0;
 8019250:	2300      	movs	r3, #0
 8019252:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*We only support read line by line for now*/
    if(decoded_area->y1 == LV_COORD_MIN) {
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	685b      	ldr	r3, [r3, #4]
 8019258:	4a93      	ldr	r2, [pc, #588]	@ (80194a8 <lv_bin_decoder_get_area+0x310>)
 801925a:	4293      	cmp	r3, r2
 801925c:	d146      	bne.n	80192ec <lv_bin_decoder_get_area+0x154>
        /*Indexed image is converted to ARGB888*/
        uint32_t len = LV_COLOR_FORMAT_IS_INDEXED(cf) ? sizeof(lv_color32_t) * 8 : bpp;
 801925e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019262:	2b06      	cmp	r3, #6
 8019264:	d903      	bls.n	801926e <lv_bin_decoder_get_area+0xd6>
 8019266:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801926a:	2b0a      	cmp	r3, #10
 801926c:	d901      	bls.n	8019272 <lv_bin_decoder_get_area+0xda>
 801926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019270:	e000      	b.n	8019274 <lv_bin_decoder_get_area+0xdc>
 8019272:	2320      	movs	r3, #32
 8019274:	62bb      	str	r3, [r7, #40]	@ 0x28
        lv_color_format_t cf_decoded = LV_COLOR_FORMAT_IS_INDEXED(cf) ? LV_COLOR_FORMAT_ARGB8888 : cf;
 8019276:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801927a:	2b06      	cmp	r3, #6
 801927c:	d903      	bls.n	8019286 <lv_bin_decoder_get_area+0xee>
 801927e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019282:	2b0a      	cmp	r3, #10
 8019284:	d902      	bls.n	801928c <lv_bin_decoder_get_area+0xf4>
 8019286:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801928a:	e000      	b.n	801928e <lv_bin_decoder_get_area+0xf6>
 801928c:	2310      	movs	r3, #16
 801928e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        len = (len * w_px) / 8;
 8019292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019296:	fb02 f303 	mul.w	r3, r2, r3
 801929a:	08db      	lsrs	r3, r3, #3
 801929c:	62bb      	str	r3, [r7, #40]	@ 0x28
        decoded = decoder_data->decoded_partial;
 801929e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80192a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if(decoded && decoded->header.w == w_px) {
 80192a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d005      	beq.n	80192b6 <lv_bin_decoder_get_area+0x11e>
 80192aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192ac:	889b      	ldrh	r3, [r3, #4]
 80192ae:	461a      	mov	r2, r3
 80192b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192b2:	4293      	cmp	r3, r2
 80192b4:	d00c      	beq.n	80192d0 <lv_bin_decoder_get_area+0x138>
            /*Use existing one directly*/
        }
        else {
            decoded = lv_draw_buf_create(w_px, 1, cf_decoded, LV_STRIDE_AUTO);
 80192b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80192b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80192bc:	2300      	movs	r3, #0
 80192be:	2101      	movs	r1, #1
 80192c0:	f7ec fdbc 	bl	8005e3c <lv_draw_buf_create>
 80192c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if(decoded == NULL)
 80192c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d101      	bne.n	80192d0 <lv_bin_decoder_get_area+0x138>
                return LV_RESULT_INVALID;
 80192cc:	2300      	movs	r3, #0
 80192ce:	e153      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
        }

        *decoded_area = *full_area;
 80192d0:	683a      	ldr	r2, [r7, #0]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	4614      	mov	r4, r2
 80192d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80192d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        decoded_area->y2 = decoded_area->y1;
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	685a      	ldr	r2, [r3, #4]
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	60da      	str	r2, [r3, #12]
        decoder_data->decoded_partial = decoded; /*Free on decoder close*/
 80192e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80192e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80192ea:	e00c      	b.n	8019306 <lv_bin_decoder_get_area+0x16e>
    }
    else {
        decoded_area->y1++;
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	685b      	ldr	r3, [r3, #4]
 80192f0:	1c5a      	adds	r2, r3, #1
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	605a      	str	r2, [r3, #4]
        decoded_area->y2++;
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	68db      	ldr	r3, [r3, #12]
 80192fa:	1c5a      	adds	r2, r3, #1
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	60da      	str	r2, [r3, #12]
        decoded = decoder_data->decoded_partial; /*Already alloced*/
 8019300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019304:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    img_data = decoded->data; /*Get the buffer to operate on*/
 8019306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019308:	691b      	ldr	r3, [r3, #16]
 801930a:	633b      	str	r3, [r7, #48]	@ 0x30

    if(decoded_area->y1 > full_area->y2) {
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	685a      	ldr	r2, [r3, #4]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	68db      	ldr	r3, [r3, #12]
 8019314:	429a      	cmp	r2, r3
 8019316:	dd01      	ble.n	801931c <lv_bin_decoder_get_area+0x184>
        return LV_RESULT_INVALID;
 8019318:	2300      	movs	r3, #0
 801931a:	e12d      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
    }

    if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 801931c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019320:	2b06      	cmp	r3, #6
 8019322:	d97d      	bls.n	8019420 <lv_bin_decoder_get_area+0x288>
 8019324:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019328:	2b0a      	cmp	r3, #10
 801932a:	d879      	bhi.n	8019420 <lv_bin_decoder_get_area+0x288>
        int32_t x_fraction = decoded_area->x1 % (8 / bpp);
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	461a      	mov	r2, r3
 8019332:	2108      	movs	r1, #8
 8019334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019336:	fbb1 f3f3 	udiv	r3, r1, r3
 801933a:	fbb2 f1f3 	udiv	r1, r2, r3
 801933e:	fb01 f303 	mul.w	r3, r1, r3
 8019342:	1ad3      	subs	r3, r2, r3
 8019344:	623b      	str	r3, [r7, #32]
        uint32_t len = (w_px * bpp + 7) / 8 + 1; /*10px for 1bpp may across 3bytes*/
 8019346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801934a:	fb02 f303 	mul.w	r3, r2, r3
 801934e:	3307      	adds	r3, #7
 8019350:	08db      	lsrs	r3, r3, #3
 8019352:	3301      	adds	r3, #1
 8019354:	61fb      	str	r3, [r7, #28]
        uint8_t * buf = NULL;
 8019356:	2300      	movs	r3, #0
 8019358:	64bb      	str	r3, [r7, #72]	@ 0x48

        offset += dsc->palette_size * 4; /*Skip palette*/
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801935e:	009b      	lsls	r3, r3, #2
 8019360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019362:	4413      	add	r3, r2
 8019364:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += decoded_area->y1 * dsc->header.stride;
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	685b      	ldr	r3, [r3, #4]
 801936a:	68ba      	ldr	r2, [r7, #8]
 801936c:	8b12      	ldrh	r2, [r2, #24]
 801936e:	fb02 f303 	mul.w	r3, r2, r3
 8019372:	461a      	mov	r2, r3
 8019374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019376:	4413      	add	r3, r2
 8019378:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += decoded_area->x1 * bpp / 8; /*Move to x1*/
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	461a      	mov	r2, r3
 8019380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019382:	fb02 f303 	mul.w	r3, r2, r3
 8019386:	08db      	lsrs	r3, r3, #3
 8019388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801938a:	4413      	add	r3, r2
 801938c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(dsc->src_type == LV_IMAGE_SRC_FILE) {
 801938e:	68bb      	ldr	r3, [r7, #8]
 8019390:	7b1b      	ldrb	r3, [r3, #12]
 8019392:	2b01      	cmp	r3, #1
 8019394:	d124      	bne.n	80193e0 <lv_bin_decoder_get_area+0x248>
            offset += sizeof(lv_image_header_t); /*File image starts with image header*/
 8019396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019398:	330c      	adds	r3, #12
 801939a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            buf = lv_malloc(len);
 801939c:	69f8      	ldr	r0, [r7, #28]
 801939e:	f004 fe7b 	bl	801e098 <lv_malloc>
 80193a2:	64b8      	str	r0, [r7, #72]	@ 0x48
            LV_ASSERT_NULL(buf);
 80193a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d101      	bne.n	80193ae <lv_bin_decoder_get_area+0x216>
 80193aa:	bf00      	nop
 80193ac:	e7fd      	b.n	80193aa <lv_bin_decoder_get_area+0x212>
            if(buf == NULL)
 80193ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d101      	bne.n	80193b8 <lv_bin_decoder_get_area+0x220>
                return LV_RESULT_INVALID;
 80193b4:	2300      	movs	r3, #0
 80193b6:	e0df      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>

            res = fs_read_file_at(f, offset, buf, len, NULL);
 80193b8:	2300      	movs	r3, #0
 80193ba:	9300      	str	r3, [sp, #0]
 80193bc:	69fb      	ldr	r3, [r7, #28]
 80193be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80193c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80193c2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80193c4:	f000 fc84 	bl	8019cd0 <fs_read_file_at>
 80193c8:	4603      	mov	r3, r0
 80193ca:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if(res != LV_FS_RES_OK) {
 80193ce:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d00c      	beq.n	80193f0 <lv_bin_decoder_get_area+0x258>
                lv_free(buf);
 80193d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80193d8:	f004 fe96 	bl	801e108 <lv_free>
                return LV_RESULT_INVALID;
 80193dc:	2300      	movs	r3, #0
 80193de:	e0cb      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
            }
        }
        else {
            const lv_image_dsc_t * image = dsc->src;
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	689b      	ldr	r3, [r3, #8]
 80193e4:	61bb      	str	r3, [r7, #24]
            buf = (void *)(image->data + offset);
 80193e6:	69bb      	ldr	r3, [r7, #24]
 80193e8:	691a      	ldr	r2, [r3, #16]
 80193ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193ec:	4413      	add	r3, r2
 80193ee:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        decode_indexed_line(cf, dsc->palette, x_fraction, w_px, buf, (lv_color32_t *)img_data);
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	6a19      	ldr	r1, [r3, #32]
 80193f4:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 80193f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193fa:	9301      	str	r3, [sp, #4]
 80193fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80193fe:	9300      	str	r3, [sp, #0]
 8019400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019402:	6a3a      	ldr	r2, [r7, #32]
 8019404:	f000 fbc0 	bl	8019b88 <decode_indexed_line>

        if(dsc->src_type == LV_IMAGE_SRC_FILE) lv_free((void *)buf);
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	7b1b      	ldrb	r3, [r3, #12]
 801940c:	2b01      	cmp	r3, #1
 801940e:	d102      	bne.n	8019416 <lv_bin_decoder_get_area+0x27e>
 8019410:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019412:	f004 fe79 	bl	801e108 <lv_free>

        dsc->decoded = decoded; /*Return decoded image*/
 8019416:	68bb      	ldr	r3, [r7, #8]
 8019418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801941a:	61da      	str	r2, [r3, #28]
        return LV_RESULT_OK;
 801941c:	2301      	movs	r3, #1
 801941e:	e0ab      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
    }

    if(cf == LV_COLOR_FORMAT_ARGB8888 || cf == LV_COLOR_FORMAT_XRGB8888 || cf == LV_COLOR_FORMAT_RGB888
 8019420:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019424:	2b10      	cmp	r3, #16
 8019426:	d00f      	beq.n	8019448 <lv_bin_decoder_get_area+0x2b0>
 8019428:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801942c:	2b11      	cmp	r3, #17
 801942e:	d00b      	beq.n	8019448 <lv_bin_decoder_get_area+0x2b0>
 8019430:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019434:	2b0f      	cmp	r3, #15
 8019436:	d007      	beq.n	8019448 <lv_bin_decoder_get_area+0x2b0>
       || cf == LV_COLOR_FORMAT_RGB565 || cf == LV_COLOR_FORMAT_ARGB8565) {
 8019438:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801943c:	2b12      	cmp	r3, #18
 801943e:	d003      	beq.n	8019448 <lv_bin_decoder_get_area+0x2b0>
 8019440:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019444:	2b13      	cmp	r3, #19
 8019446:	d131      	bne.n	80194ac <lv_bin_decoder_get_area+0x314>
        uint32_t len = (w_px * bpp) / 8;
 8019448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801944a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801944c:	fb02 f303 	mul.w	r3, r2, r3
 8019450:	08db      	lsrs	r3, r3, #3
 8019452:	613b      	str	r3, [r7, #16]
        offset += decoded_area->y1 * dsc->header.stride;
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	685b      	ldr	r3, [r3, #4]
 8019458:	68ba      	ldr	r2, [r7, #8]
 801945a:	8b12      	ldrh	r2, [r2, #24]
 801945c:	fb02 f303 	mul.w	r3, r2, r3
 8019460:	461a      	mov	r2, r3
 8019462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019464:	4413      	add	r3, r2
 8019466:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += decoded_area->x1 * bpp / 8; /*Move to x1*/
 8019468:	683b      	ldr	r3, [r7, #0]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	461a      	mov	r2, r3
 801946e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019470:	fb02 f303 	mul.w	r3, r2, r3
 8019474:	08db      	lsrs	r3, r3, #3
 8019476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019478:	4413      	add	r3, r2
 801947a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        res = fs_read_file_at(f, offset, img_data, len, NULL);
 801947c:	2300      	movs	r3, #0
 801947e:	9300      	str	r3, [sp, #0]
 8019480:	693b      	ldr	r3, [r7, #16]
 8019482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019486:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019488:	f000 fc22 	bl	8019cd0 <fs_read_file_at>
 801948c:	4603      	mov	r3, r0
 801948e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        if(res != LV_FS_RES_OK) {
 8019492:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8019496:	2b00      	cmp	r3, #0
 8019498:	d001      	beq.n	801949e <lv_bin_decoder_get_area+0x306>
            return LV_RESULT_INVALID;
 801949a:	2300      	movs	r3, #0
 801949c:	e06c      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
        }

        dsc->decoded = decoded; /*Return decoded image*/
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80194a2:	61da      	str	r2, [r3, #28]
        return LV_RESULT_OK;
 80194a4:	2301      	movs	r3, #1
 80194a6:	e067      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
 80194a8:	e0000001 	.word	0xe0000001
    }

    if(cf == LV_COLOR_FORMAT_RGB565A8) {
 80194ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80194b0:	2b14      	cmp	r3, #20
 80194b2:	d160      	bne.n	8019576 <lv_bin_decoder_get_area+0x3de>
        bpp = 16; /* RGB565 + A8 mask*/
 80194b4:	2310      	movs	r3, #16
 80194b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t len = decoded->header.stride;
 80194b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194ba:	891b      	ldrh	r3, [r3, #8]
 80194bc:	617b      	str	r3, [r7, #20]
        offset += decoded_area->y1 * dsc->header.stride; /*Move to y1*/
 80194be:	683b      	ldr	r3, [r7, #0]
 80194c0:	685b      	ldr	r3, [r3, #4]
 80194c2:	68ba      	ldr	r2, [r7, #8]
 80194c4:	8b12      	ldrh	r2, [r2, #24]
 80194c6:	fb02 f303 	mul.w	r3, r2, r3
 80194ca:	461a      	mov	r2, r3
 80194cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194ce:	4413      	add	r3, r2
 80194d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += decoded_area->x1 * bpp / 8; /*Move to x1*/
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	461a      	mov	r2, r3
 80194d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80194da:	fb02 f303 	mul.w	r3, r2, r3
 80194de:	08db      	lsrs	r3, r3, #3
 80194e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194e2:	4413      	add	r3, r2
 80194e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        res = fs_read_file_at(f, offset, img_data, len, NULL);
 80194e6:	2300      	movs	r3, #0
 80194e8:	9300      	str	r3, [sp, #0]
 80194ea:	697b      	ldr	r3, [r7, #20]
 80194ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80194ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80194f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80194f2:	f000 fbed 	bl	8019cd0 <fs_read_file_at>
 80194f6:	4603      	mov	r3, r0
 80194f8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        if(res != LV_FS_RES_OK) {
 80194fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8019500:	2b00      	cmp	r3, #0
 8019502:	d001      	beq.n	8019508 <lv_bin_decoder_get_area+0x370>
            return LV_RESULT_INVALID;
 8019504:	2300      	movs	r3, #0
 8019506:	e037      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
        }

        /*Now the A8 mask*/
        offset = sizeof(lv_image_header_t);
 8019508:	230c      	movs	r3, #12
 801950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += dsc->header.h * dsc->header.stride; /*Move to A8 map*/
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	8adb      	ldrh	r3, [r3, #22]
 8019510:	461a      	mov	r2, r3
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	8b1b      	ldrh	r3, [r3, #24]
 8019516:	fb02 f303 	mul.w	r3, r2, r3
 801951a:	461a      	mov	r2, r3
 801951c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801951e:	4413      	add	r3, r2
 8019520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += decoded_area->y1 * (dsc->header.stride / 2); /*Move to y1*/
 8019522:	683b      	ldr	r3, [r7, #0]
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	68ba      	ldr	r2, [r7, #8]
 8019528:	8b12      	ldrh	r2, [r2, #24]
 801952a:	0852      	lsrs	r2, r2, #1
 801952c:	b292      	uxth	r2, r2
 801952e:	fb02 f303 	mul.w	r3, r2, r3
 8019532:	461a      	mov	r2, r3
 8019534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019536:	4413      	add	r3, r2
 8019538:	62fb      	str	r3, [r7, #44]	@ 0x2c
        offset += decoded_area->x1 * 1; /*Move to x1*/
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	461a      	mov	r2, r3
 8019540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019542:	4413      	add	r3, r2
 8019544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        res = fs_read_file_at(f, offset, img_data + len, w_px * 1, NULL);
 8019546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019548:	697b      	ldr	r3, [r7, #20]
 801954a:	441a      	add	r2, r3
 801954c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801954e:	2100      	movs	r1, #0
 8019550:	9100      	str	r1, [sp, #0]
 8019552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019554:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019556:	f000 fbbb 	bl	8019cd0 <fs_read_file_at>
 801955a:	4603      	mov	r3, r0
 801955c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        if(res != LV_FS_RES_OK) {
 8019560:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8019564:	2b00      	cmp	r3, #0
 8019566:	d001      	beq.n	801956c <lv_bin_decoder_get_area+0x3d4>
            return LV_RESULT_INVALID;
 8019568:	2300      	movs	r3, #0
 801956a:	e005      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
        }

        dsc->decoded = decoded; /*Return decoded image*/
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019570:	61da      	str	r2, [r3, #28]
        return LV_RESULT_OK;
 8019572:	2301      	movs	r3, #1
 8019574:	e000      	b.n	8019578 <lv_bin_decoder_get_area+0x3e0>
    }

    return LV_RESULT_INVALID;
 8019576:	2300      	movs	r3, #0
}
 8019578:	4618      	mov	r0, r3
 801957a:	3754      	adds	r7, #84	@ 0x54
 801957c:	46bd      	mov	sp, r7
 801957e:	bd90      	pop	{r4, r7, pc}

08019580 <get_decoder_data>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static decoder_data_t * get_decoder_data(lv_image_decoder_dsc_t * dsc)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b084      	sub	sp, #16
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
    decoder_data_t * data = dsc->user_data;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801958c:	60fb      	str	r3, [r7, #12]
    if(data == NULL) {
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d110      	bne.n	80195b6 <get_decoder_data+0x36>
        data = lv_malloc_zeroed(sizeof(decoder_data_t));
 8019594:	2040      	movs	r0, #64	@ 0x40
 8019596:	f004 fd99 	bl	801e0cc <lv_malloc_zeroed>
 801959a:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MALLOC(data);
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d101      	bne.n	80195a6 <get_decoder_data+0x26>
 80195a2:	bf00      	nop
 80195a4:	e7fd      	b.n	80195a2 <get_decoder_data+0x22>
        if(data == NULL) {
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d101      	bne.n	80195b0 <get_decoder_data+0x30>
            LV_LOG_ERROR("Out of memory");
            return NULL;
 80195ac:	2300      	movs	r3, #0
 80195ae:	e003      	b.n	80195b8 <get_decoder_data+0x38>
        }

        dsc->user_data = data;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	68fa      	ldr	r2, [r7, #12]
 80195b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    return data;
 80195b6:	68fb      	ldr	r3, [r7, #12]
}
 80195b8:	4618      	mov	r0, r3
 80195ba:	3710      	adds	r7, #16
 80195bc:	46bd      	mov	sp, r7
 80195be:	bd80      	pop	{r7, pc}

080195c0 <free_decoder_data>:

static void free_decoder_data(lv_image_decoder_dsc_t * dsc)
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
    decoder_data_t * decoder_data = dsc->user_data;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80195cc:	60fb      	str	r3, [r7, #12]
    if(decoder_data == NULL) return;
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d02b      	beq.n	801962c <free_decoder_data+0x6c>

    if(decoder_data->f) {
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d009      	beq.n	80195f0 <free_decoder_data+0x30>
        lv_fs_close(decoder_data->f);
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	4618      	mov	r0, r3
 80195e2:	f002 f86a 	bl	801b6ba <lv_fs_close>
        lv_free(decoder_data->f);
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	4618      	mov	r0, r3
 80195ec:	f004 fd8c 	bl	801e108 <lv_free>
    }

    if(decoder_data->decoded) lv_draw_buf_destroy(decoder_data->decoded);
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	69db      	ldr	r3, [r3, #28]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d004      	beq.n	8019602 <free_decoder_data+0x42>
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	69db      	ldr	r3, [r3, #28]
 80195fc:	4618      	mov	r0, r3
 80195fe:	f7ec fcef 	bl	8005fe0 <lv_draw_buf_destroy>
    if(decoder_data->decompressed) lv_draw_buf_destroy(decoder_data->decompressed);
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	6a1b      	ldr	r3, [r3, #32]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d004      	beq.n	8019614 <free_decoder_data+0x54>
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	6a1b      	ldr	r3, [r3, #32]
 801960e:	4618      	mov	r0, r3
 8019610:	f7ec fce6 	bl	8005fe0 <lv_draw_buf_destroy>
    lv_free(decoder_data->palette);
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	4618      	mov	r0, r3
 801961a:	f004 fd75 	bl	801e108 <lv_free>
    lv_free(decoder_data);
 801961e:	68f8      	ldr	r0, [r7, #12]
 8019620:	f004 fd72 	bl	801e108 <lv_free>
    dsc->user_data = NULL;
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	2200      	movs	r2, #0
 8019628:	639a      	str	r2, [r3, #56]	@ 0x38
 801962a:	e000      	b.n	801962e <free_decoder_data+0x6e>
    if(decoder_data == NULL) return;
 801962c:	bf00      	nop
}
 801962e:	3710      	adds	r7, #16
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}

08019634 <decode_indexed>:

static lv_result_t decode_indexed(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b092      	sub	sp, #72	@ 0x48
 8019638:	af02      	add	r7, sp, #8
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/
    lv_result_t res;
    uint32_t rn;
    decoder_data_t * decoder_data = dsc->user_data;
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019642:	63bb      	str	r3, [r7, #56]	@ 0x38
    lv_fs_file_t * f = decoder_data->f;
 8019644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	637b      	str	r3, [r7, #52]	@ 0x34
    lv_color_format_t cf = dsc->header.cf;
 801964a:	683b      	ldr	r3, [r7, #0]
 801964c:	7c5b      	ldrb	r3, [r3, #17]
 801964e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint32_t palette_len = sizeof(lv_color32_t) * LV_COLOR_INDEXED_PALETTE_SIZE(cf);
 8019652:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019656:	2b07      	cmp	r3, #7
 8019658:	d014      	beq.n	8019684 <decode_indexed+0x50>
 801965a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801965e:	2b08      	cmp	r3, #8
 8019660:	d00e      	beq.n	8019680 <decode_indexed+0x4c>
 8019662:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019666:	2b09      	cmp	r3, #9
 8019668:	d008      	beq.n	801967c <decode_indexed+0x48>
 801966a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801966e:	2b0a      	cmp	r3, #10
 8019670:	d102      	bne.n	8019678 <decode_indexed+0x44>
 8019672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019676:	e006      	b.n	8019686 <decode_indexed+0x52>
 8019678:	2300      	movs	r3, #0
 801967a:	e004      	b.n	8019686 <decode_indexed+0x52>
 801967c:	2340      	movs	r3, #64	@ 0x40
 801967e:	e002      	b.n	8019686 <decode_indexed+0x52>
 8019680:	2310      	movs	r3, #16
 8019682:	e000      	b.n	8019686 <decode_indexed+0x52>
 8019684:	2308      	movs	r3, #8
 8019686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const lv_color32_t * palette;
    const uint8_t * indexed_data = NULL;
 8019688:	2300      	movs	r3, #0
 801968a:	62bb      	str	r3, [r7, #40]	@ 0x28
    lv_draw_buf_t * draw_buf_indexed = NULL;
 801968c:	2300      	movs	r3, #0
 801968e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t stride = dsc->header.stride;
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	8b1b      	ldrh	r3, [r3, #24]
 8019694:	623b      	str	r3, [r7, #32]

    bool is_compressed = dsc->header.flags & LV_IMAGE_FLAGS_COMPRESSED;
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	8a5b      	ldrh	r3, [r3, #18]
 801969a:	f003 0308 	and.w	r3, r3, #8
 801969e:	2b00      	cmp	r3, #0
 80196a0:	bf14      	ite	ne
 80196a2:	2301      	movne	r3, #1
 80196a4:	2300      	moveq	r3, #0
 80196a6:	77fb      	strb	r3, [r7, #31]
    if(is_compressed) {
 80196a8:	7ffb      	ldrb	r3, [r7, #31]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d00a      	beq.n	80196c4 <decode_indexed+0x90>
        uint8_t * data = decoder_data->decompressed->data;
 80196ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196b0:	6a1b      	ldr	r3, [r3, #32]
 80196b2:	691b      	ldr	r3, [r3, #16]
 80196b4:	613b      	str	r3, [r7, #16]
        palette = (lv_color32_t *)data;
 80196b6:	693b      	ldr	r3, [r7, #16]
 80196b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        indexed_data = data + palette_len;
 80196ba:	693a      	ldr	r2, [r7, #16]
 80196bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196be:	4413      	add	r3, r2
 80196c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80196c2:	e03e      	b.n	8019742 <decode_indexed+0x10e>
    }
    else if(dsc->src_type == LV_IMAGE_SRC_FILE) {
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	7b1b      	ldrb	r3, [r3, #12]
 80196c8:	2b01      	cmp	r3, #1
 80196ca:	d128      	bne.n	801971e <decode_indexed+0xea>
        /*read palette for indexed image*/
        palette = lv_malloc(palette_len);
 80196cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80196ce:	f004 fce3 	bl	801e098 <lv_malloc>
 80196d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        LV_ASSERT_MALLOC(palette);
 80196d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d101      	bne.n	80196de <decode_indexed+0xaa>
 80196da:	bf00      	nop
 80196dc:	e7fd      	b.n	80196da <decode_indexed+0xa6>
        if(palette == NULL) {
 80196de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d101      	bne.n	80196e8 <decode_indexed+0xb4>
            LV_LOG_ERROR("Out of memory");
            return LV_RESULT_INVALID;
 80196e4:	2300      	movs	r3, #0
 80196e6:	e04c      	b.n	8019782 <decode_indexed+0x14e>
        }

        res = fs_read_file_at(f, sizeof(lv_image_header_t), (uint8_t *)palette, palette_len, &rn);
 80196e8:	f107 030c 	add.w	r3, r7, #12
 80196ec:	9300      	str	r3, [sp, #0]
 80196ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80196f2:	210c      	movs	r1, #12
 80196f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80196f6:	f000 faeb 	bl	8019cd0 <fs_read_file_at>
 80196fa:	4603      	mov	r3, r0
 80196fc:	75fb      	strb	r3, [r7, #23]
        if(res != LV_FS_RES_OK || rn != palette_len) {
 80196fe:	7dfb      	ldrb	r3, [r7, #23]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d103      	bne.n	801970c <decode_indexed+0xd8>
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019708:	429a      	cmp	r2, r3
 801970a:	d004      	beq.n	8019716 <decode_indexed+0xe2>
            LV_LOG_WARN("Read palette failed: %d", res);
            lv_free((void *)palette);
 801970c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801970e:	f004 fcfb 	bl	801e108 <lv_free>
            return LV_RESULT_INVALID;
 8019712:	2300      	movs	r3, #0
 8019714:	e035      	b.n	8019782 <decode_indexed+0x14e>
        }

        decoder_data->palette = (void *)palette; /*Need to free when decoder closes*/
 8019716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801971a:	605a      	str	r2, [r3, #4]
 801971c:	e011      	b.n	8019742 <decode_indexed+0x10e>
            LV_LOG_WARN("Read indexed image failed: %d", res);
            goto exit_with_buf;
        }
#endif
    }
    else if(dsc->src_type == LV_IMAGE_SRC_VARIABLE) {
 801971e:	683b      	ldr	r3, [r7, #0]
 8019720:	7b1b      	ldrb	r3, [r3, #12]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d10b      	bne.n	801973e <decode_indexed+0x10a>
        lv_image_dsc_t * image = (lv_image_dsc_t *)dsc->src;
 8019726:	683b      	ldr	r3, [r7, #0]
 8019728:	689b      	ldr	r3, [r3, #8]
 801972a:	61bb      	str	r3, [r7, #24]
        palette = (lv_color32_t *)image->data;
 801972c:	69bb      	ldr	r3, [r7, #24]
 801972e:	691b      	ldr	r3, [r3, #16]
 8019730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        indexed_data = image->data + palette_len;
 8019732:	69bb      	ldr	r3, [r7, #24]
 8019734:	691a      	ldr	r2, [r3, #16]
 8019736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019738:	4413      	add	r3, r2
 801973a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801973c:	e001      	b.n	8019742 <decode_indexed+0x10e>
    }
    else {
        return LV_RESULT_INVALID;
 801973e:	2300      	movs	r3, #0
 8019740:	e01f      	b.n	8019782 <decode_indexed+0x14e>
    }

    dsc->palette = palette;
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019746:	621a      	str	r2, [r3, #32]
    dsc->palette_size = LV_COLOR_INDEXED_PALETTE_SIZE(cf);
 8019748:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801974c:	2b07      	cmp	r3, #7
 801974e:	d014      	beq.n	801977a <decode_indexed+0x146>
 8019750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019754:	2b08      	cmp	r3, #8
 8019756:	d00e      	beq.n	8019776 <decode_indexed+0x142>
 8019758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801975c:	2b09      	cmp	r3, #9
 801975e:	d008      	beq.n	8019772 <decode_indexed+0x13e>
 8019760:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019764:	2b0a      	cmp	r3, #10
 8019766:	d102      	bne.n	801976e <decode_indexed+0x13a>
 8019768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801976c:	e006      	b.n	801977c <decode_indexed+0x148>
 801976e:	2300      	movs	r3, #0
 8019770:	e004      	b.n	801977c <decode_indexed+0x148>
 8019772:	2310      	movs	r3, #16
 8019774:	e002      	b.n	801977c <decode_indexed+0x148>
 8019776:	2304      	movs	r3, #4
 8019778:	e000      	b.n	801977c <decode_indexed+0x148>
 801977a:	2302      	movs	r3, #2
 801977c:	683a      	ldr	r2, [r7, #0]
 801977e:	6253      	str	r3, [r2, #36]	@ 0x24
#else
    LV_UNUSED(stride);
    LV_UNUSED(indexed_data);
    LV_UNUSED(draw_buf_indexed);
    /*It needs to be read by get_area_cb later*/
    return LV_RESULT_OK;
 8019780:	2301      	movs	r3, #1
#endif
}
 8019782:	4618      	mov	r0, r3
 8019784:	3740      	adds	r7, #64	@ 0x40
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}

0801978a <load_indexed>:

static lv_result_t load_indexed(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
{
 801978a:	b480      	push	{r7}
 801978c:	b083      	sub	sp, #12
 801978e:	af00      	add	r7, sp, #0
 8019790:	6078      	str	r0, [r7, #4]
 8019792:	6039      	str	r1, [r7, #0]
#if LV_BIN_DECODER_RAM_LOAD == 0
    LV_UNUSED(decoder); /*Unused*/
    LV_UNUSED(dsc); /*Unused*/
    LV_LOG_ERROR("LV_BIN_DECODER_RAM_LOAD is disabled");
    return LV_RESULT_INVALID;
 8019794:	2300      	movs	r3, #0
    }

    LV_LOG_ERROR("Unknown src type: %d", dsc->src_type);
    return LV_RESULT_INVALID;
#endif
}
 8019796:	4618      	mov	r0, r3
 8019798:	370c      	adds	r7, #12
 801979a:	46bd      	mov	sp, r7
 801979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a0:	4770      	bx	lr

080197a2 <bit_extend>:

/**
 * Extend A1/2/4 to A8 with interpolation to reduce rounding error.
 */
static inline uint8_t bit_extend(uint8_t value, uint8_t bpp)
{
 80197a2:	b480      	push	{r7}
 80197a4:	b085      	sub	sp, #20
 80197a6:	af00      	add	r7, sp, #0
 80197a8:	4603      	mov	r3, r0
 80197aa:	460a      	mov	r2, r1
 80197ac:	71fb      	strb	r3, [r7, #7]
 80197ae:	4613      	mov	r3, r2
 80197b0:	71bb      	strb	r3, [r7, #6]
    if(value == 0) return 0;
 80197b2:	79fb      	ldrb	r3, [r7, #7]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d101      	bne.n	80197bc <bit_extend+0x1a>
 80197b8:	2300      	movs	r3, #0
 80197ba:	e018      	b.n	80197ee <bit_extend+0x4c>

    uint8_t res = value;
 80197bc:	79fb      	ldrb	r3, [r7, #7]
 80197be:	73fb      	strb	r3, [r7, #15]
    uint8_t bpp_now = bpp;
 80197c0:	79bb      	ldrb	r3, [r7, #6]
 80197c2:	73bb      	strb	r3, [r7, #14]
    while(bpp_now < 8) {
 80197c4:	e00f      	b.n	80197e6 <bit_extend+0x44>
        res |= value << (8 - bpp_now);
 80197c6:	79fa      	ldrb	r2, [r7, #7]
 80197c8:	7bbb      	ldrb	r3, [r7, #14]
 80197ca:	f1c3 0308 	rsb	r3, r3, #8
 80197ce:	fa02 f303 	lsl.w	r3, r2, r3
 80197d2:	b25a      	sxtb	r2, r3
 80197d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197d8:	4313      	orrs	r3, r2
 80197da:	b25b      	sxtb	r3, r3
 80197dc:	73fb      	strb	r3, [r7, #15]
        bpp_now += bpp;
 80197de:	7bba      	ldrb	r2, [r7, #14]
 80197e0:	79bb      	ldrb	r3, [r7, #6]
 80197e2:	4413      	add	r3, r2
 80197e4:	73bb      	strb	r3, [r7, #14]
    while(bpp_now < 8) {
 80197e6:	7bbb      	ldrb	r3, [r7, #14]
 80197e8:	2b07      	cmp	r3, #7
 80197ea:	d9ec      	bls.n	80197c6 <bit_extend+0x24>
    };

    return res;
 80197ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80197ee:	4618      	mov	r0, r3
 80197f0:	3714      	adds	r7, #20
 80197f2:	46bd      	mov	sp, r7
 80197f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f8:	4770      	bx	lr

080197fa <decode_alpha_only>:

static lv_result_t decode_alpha_only(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
{
 80197fa:	b580      	push	{r7, lr}
 80197fc:	b092      	sub	sp, #72	@ 0x48
 80197fe:	af02      	add	r7, sp, #8
 8019800:	6078      	str	r0, [r7, #4]
 8019802:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder);
    lv_result_t res;
    uint32_t rn;
    decoder_data_t * decoder_data = dsc->user_data;
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bpp = lv_color_format_get_bpp(dsc->header.cf);
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	7c5b      	ldrb	r3, [r3, #17]
 801980e:	4618      	mov	r0, r3
 8019810:	f001 fd4e 	bl	801b2b0 <lv_color_format_get_bpp>
 8019814:	4603      	mov	r3, r0
 8019816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint32_t w = (dsc->header.stride * 8) / bpp;
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	8b1b      	ldrh	r3, [r3, #24]
 801981e:	00da      	lsls	r2, r3, #3
 8019820:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019824:	fb92 f3f3 	sdiv	r3, r2, r3
 8019828:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t buf_stride = (w * 8 + 7) >> 3; /*stride for img_data*/
 801982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801982c:	00db      	lsls	r3, r3, #3
 801982e:	3307      	adds	r3, #7
 8019830:	08db      	lsrs	r3, r3, #3
 8019832:	623b      	str	r3, [r7, #32]
    uint32_t buf_len = w * dsc->header.h; /*always decode to A8 format*/
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	8adb      	ldrh	r3, [r3, #22]
 8019838:	461a      	mov	r2, r3
 801983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801983c:	fb02 f303 	mul.w	r3, r2, r3
 8019840:	61fb      	str	r3, [r7, #28]
    lv_draw_buf_t * decoded;
    uint32_t file_len = (uint32_t)dsc->header.stride * dsc->header.h;
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	8b1b      	ldrh	r3, [r3, #24]
 8019846:	461a      	mov	r2, r3
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	8adb      	ldrh	r3, [r3, #22]
 801984c:	fb02 f303 	mul.w	r3, r2, r3
 8019850:	61bb      	str	r3, [r7, #24]

    decoded = lv_draw_buf_create(dsc->header.w, dsc->header.h, LV_COLOR_FORMAT_A8, buf_stride);
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	8a9b      	ldrh	r3, [r3, #20]
 8019856:	4618      	mov	r0, r3
 8019858:	683b      	ldr	r3, [r7, #0]
 801985a:	8adb      	ldrh	r3, [r3, #22]
 801985c:	4619      	mov	r1, r3
 801985e:	6a3b      	ldr	r3, [r7, #32]
 8019860:	220e      	movs	r2, #14
 8019862:	f7ec faeb 	bl	8005e3c <lv_draw_buf_create>
 8019866:	6178      	str	r0, [r7, #20]
    if(decoded == NULL) {
 8019868:	697b      	ldr	r3, [r7, #20]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d101      	bne.n	8019872 <decode_alpha_only+0x78>
        LV_LOG_ERROR("Out of memory");
        return LV_RESULT_INVALID;
 801986e:	2300      	movs	r3, #0
 8019870:	e08f      	b.n	8019992 <decode_alpha_only+0x198>
    }

    uint8_t * img_data = decoded->data;
 8019872:	697b      	ldr	r3, [r7, #20]
 8019874:	691b      	ldr	r3, [r3, #16]
 8019876:	613b      	str	r3, [r7, #16]

    if(dsc->header.flags & LV_IMAGE_FLAGS_COMPRESSED) {
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	8a5b      	ldrh	r3, [r3, #18]
 801987c:	f003 0308 	and.w	r3, r3, #8
 8019880:	2b00      	cmp	r3, #0
 8019882:	d008      	beq.n	8019896 <decode_alpha_only+0x9c>
        /*Copy from image data*/
        lv_memcpy(img_data, decoder_data->decompressed->data, file_len);
 8019884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019886:	6a1b      	ldr	r3, [r3, #32]
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	69ba      	ldr	r2, [r7, #24]
 801988c:	4619      	mov	r1, r3
 801988e:	6938      	ldr	r0, [r7, #16]
 8019890:	f003 fa48 	bl	801cd24 <lv_memcpy>
 8019894:	e027      	b.n	80198e6 <decode_alpha_only+0xec>
    }
    else if(dsc->src_type == LV_IMAGE_SRC_FILE) {
 8019896:	683b      	ldr	r3, [r7, #0]
 8019898:	7b1b      	ldrb	r3, [r3, #12]
 801989a:	2b01      	cmp	r3, #1
 801989c:	d117      	bne.n	80198ce <decode_alpha_only+0xd4>
        res = fs_read_file_at(decoder_data->f, sizeof(lv_image_header_t), img_data, file_len, &rn);
 801989e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198a0:	6818      	ldr	r0, [r3, #0]
 80198a2:	f107 0308 	add.w	r3, r7, #8
 80198a6:	9300      	str	r3, [sp, #0]
 80198a8:	69bb      	ldr	r3, [r7, #24]
 80198aa:	693a      	ldr	r2, [r7, #16]
 80198ac:	210c      	movs	r1, #12
 80198ae:	f000 fa0f 	bl	8019cd0 <fs_read_file_at>
 80198b2:	4603      	mov	r3, r0
 80198b4:	73fb      	strb	r3, [r7, #15]
        if(res != LV_FS_RES_OK || rn != file_len) {
 80198b6:	7bfb      	ldrb	r3, [r7, #15]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d103      	bne.n	80198c4 <decode_alpha_only+0xca>
 80198bc:	68bb      	ldr	r3, [r7, #8]
 80198be:	69ba      	ldr	r2, [r7, #24]
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d010      	beq.n	80198e6 <decode_alpha_only+0xec>
            LV_LOG_WARN("Read header failed: %d", res);
            lv_draw_buf_destroy(decoded);
 80198c4:	6978      	ldr	r0, [r7, #20]
 80198c6:	f7ec fb8b 	bl	8005fe0 <lv_draw_buf_destroy>
            return LV_RESULT_INVALID;
 80198ca:	2300      	movs	r3, #0
 80198cc:	e061      	b.n	8019992 <decode_alpha_only+0x198>
        }
    }
    else if(dsc->src_type == LV_IMAGE_SRC_VARIABLE) {
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	7b1b      	ldrb	r3, [r3, #12]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d107      	bne.n	80198e6 <decode_alpha_only+0xec>
        /*Copy from image data*/
        lv_memcpy(img_data, ((lv_image_dsc_t *)dsc->src)->data, file_len);
 80198d6:	683b      	ldr	r3, [r7, #0]
 80198d8:	689b      	ldr	r3, [r3, #8]
 80198da:	691b      	ldr	r3, [r3, #16]
 80198dc:	69ba      	ldr	r2, [r7, #24]
 80198de:	4619      	mov	r1, r3
 80198e0:	6938      	ldr	r0, [r7, #16]
 80198e2:	f003 fa1f 	bl	801cd24 <lv_memcpy>
    }

    if(dsc->header.cf != LV_COLOR_FORMAT_A8) {
 80198e6:	683b      	ldr	r3, [r7, #0]
 80198e8:	7c5b      	ldrb	r3, [r3, #17]
 80198ea:	2b0e      	cmp	r3, #14
 80198ec:	d04a      	beq.n	8019984 <decode_alpha_only+0x18a>
        /*Convert A1/2/4 to A8 from last pixel to first pixel*/
        uint8_t * in = img_data + file_len - 1;
 80198ee:	69bb      	ldr	r3, [r7, #24]
 80198f0:	3b01      	subs	r3, #1
 80198f2:	693a      	ldr	r2, [r7, #16]
 80198f4:	4413      	add	r3, r2
 80198f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t * out = img_data + buf_len - 1;
 80198f8:	69fb      	ldr	r3, [r7, #28]
 80198fa:	3b01      	subs	r3, #1
 80198fc:	693a      	ldr	r2, [r7, #16]
 80198fe:	4413      	add	r3, r2
 8019900:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t mask = (1 << bpp) - 1;
 8019902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019906:	2201      	movs	r2, #1
 8019908:	fa02 f303 	lsl.w	r3, r2, r3
 801990c:	b2db      	uxtb	r3, r3
 801990e:	3b01      	subs	r3, #1
 8019910:	73bb      	strb	r3, [r7, #14]
        uint8_t shift = 0;
 8019912:	2300      	movs	r3, #0
 8019914:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        for(uint32_t i = 0; i < buf_len; i++) {
 8019918:	2300      	movs	r3, #0
 801991a:	633b      	str	r3, [r7, #48]	@ 0x30
 801991c:	e02e      	b.n	801997c <decode_alpha_only+0x182>
             * thus causes error. We can simply interpolate the value to fix it.
             *
             * Equation: *out = ((*in >> shift) & mask) << (8 - bpp);
             * Ideal: *out = ((*in >> shift) & mask) * 255 / ((1L << bpp) - 1)
             */
            uint8_t value = ((*in >> shift) & mask);
 801991e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	461a      	mov	r2, r3
 8019924:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019928:	fa42 f303 	asr.w	r3, r2, r3
 801992c:	b25a      	sxtb	r2, r3
 801992e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019932:	4013      	ands	r3, r2
 8019934:	b25b      	sxtb	r3, r3
 8019936:	737b      	strb	r3, [r7, #13]
            *out = bit_extend(value, bpp);
 8019938:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801993c:	7b7b      	ldrb	r3, [r7, #13]
 801993e:	4611      	mov	r1, r2
 8019940:	4618      	mov	r0, r3
 8019942:	f7ff ff2e 	bl	80197a2 <bit_extend>
 8019946:	4603      	mov	r3, r0
 8019948:	461a      	mov	r2, r3
 801994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801994c:	701a      	strb	r2, [r3, #0]
            shift += bpp;
 801994e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8019952:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019956:	4413      	add	r3, r2
 8019958:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if(shift >= 8) {
 801995c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019960:	2b07      	cmp	r3, #7
 8019962:	d905      	bls.n	8019970 <decode_alpha_only+0x176>
                shift = 0;
 8019964:	2300      	movs	r3, #0
 8019966:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                in--;
 801996a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801996c:	3b01      	subs	r3, #1
 801996e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            out--;
 8019970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019972:	3b01      	subs	r3, #1
 8019974:	63bb      	str	r3, [r7, #56]	@ 0x38
        for(uint32_t i = 0; i < buf_len; i++) {
 8019976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019978:	3301      	adds	r3, #1
 801997a:	633b      	str	r3, [r7, #48]	@ 0x30
 801997c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801997e:	69fb      	ldr	r3, [r7, #28]
 8019980:	429a      	cmp	r2, r3
 8019982:	d3cc      	bcc.n	801991e <decode_alpha_only+0x124>
        }
    }

    decoder_data->decoded = decoded;
 8019984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019986:	697a      	ldr	r2, [r7, #20]
 8019988:	61da      	str	r2, [r3, #28]
    dsc->decoded = decoded;
 801998a:	683b      	ldr	r3, [r7, #0]
 801998c:	697a      	ldr	r2, [r7, #20]
 801998e:	61da      	str	r2, [r3, #28]
    return LV_RESULT_OK;
 8019990:	2301      	movs	r3, #1
}
 8019992:	4618      	mov	r0, r3
 8019994:	3740      	adds	r7, #64	@ 0x40
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}

0801999a <decode_compressed>:

static lv_result_t decode_compressed(lv_image_decoder_t * decoder, lv_image_decoder_dsc_t * dsc)
{
 801999a:	b580      	push	{r7, lr}
 801999c:	b090      	sub	sp, #64	@ 0x40
 801999e:	af02      	add	r7, sp, #8
 80199a0:	6078      	str	r0, [r7, #4]
 80199a2:	6039      	str	r1, [r7, #0]
    uint32_t rn;
    uint32_t len;
    uint32_t compressed_len;
    decoder_data_t * decoder_data = get_decoder_data(dsc);
 80199a4:	6838      	ldr	r0, [r7, #0]
 80199a6:	f7ff fdeb 	bl	8019580 <get_decoder_data>
 80199aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    lv_result_t res;
    uint8_t * file_buf = NULL;
 80199ac:	2300      	movs	r3, #0
 80199ae:	633b      	str	r3, [r7, #48]	@ 0x30
    lv_image_compressed_t * compressed = &decoder_data->compressed;
 80199b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199b2:	330c      	adds	r3, #12
 80199b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    lv_memzero(compressed, sizeof(lv_image_compressed_t));
 80199b6:	2110      	movs	r1, #16
 80199b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80199ba:	f7ff f995 	bl	8018ce8 <lv_memzero>

    if(dsc->src_type == LV_IMAGE_SRC_FILE) {
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	7b1b      	ldrb	r3, [r3, #12]
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d15f      	bne.n	8019a86 <decode_compressed+0xec>
        lv_fs_file_t * f = decoder_data->f;
 80199c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	61fb      	str	r3, [r7, #28]

        if(lv_fs_seek(f, 0, LV_FS_SEEK_END) != LV_FS_RES_OK ||
 80199cc:	2202      	movs	r2, #2
 80199ce:	2100      	movs	r1, #0
 80199d0:	69f8      	ldr	r0, [r7, #28]
 80199d2:	f002 f834 	bl	801ba3e <lv_fs_seek>
 80199d6:	4603      	mov	r3, r0
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d108      	bne.n	80199ee <decode_compressed+0x54>
           lv_fs_tell(f, &compressed_len) != LV_FS_RES_OK) {
 80199dc:	f107 030c 	add.w	r3, r7, #12
 80199e0:	4619      	mov	r1, r3
 80199e2:	69f8      	ldr	r0, [r7, #28]
 80199e4:	f002 f8d5 	bl	801bb92 <lv_fs_tell>
 80199e8:	4603      	mov	r3, r0
        if(lv_fs_seek(f, 0, LV_FS_SEEK_END) != LV_FS_RES_OK ||
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d001      	beq.n	80199f2 <decode_compressed+0x58>
            LV_LOG_WARN("Failed to get compressed file len");
            return LV_RESULT_INVALID;
 80199ee:	2300      	movs	r3, #0
 80199f0:	e0c6      	b.n	8019b80 <decode_compressed+0x1e6>
        }

        compressed_len -= sizeof(lv_image_header_t);
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	3b0c      	subs	r3, #12
 80199f6:	60fb      	str	r3, [r7, #12]
        compressed_len -= 12;
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	3b0c      	subs	r3, #12
 80199fc:	60fb      	str	r3, [r7, #12]

        /*Read compress header*/
        len = 12;
 80199fe:	230c      	movs	r3, #12
 8019a00:	623b      	str	r3, [r7, #32]
        res = fs_read_file_at(f, sizeof(lv_image_header_t), compressed, len, &rn);
 8019a02:	f107 0310 	add.w	r3, r7, #16
 8019a06:	9300      	str	r3, [sp, #0]
 8019a08:	6a3b      	ldr	r3, [r7, #32]
 8019a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019a0c:	210c      	movs	r1, #12
 8019a0e:	69f8      	ldr	r0, [r7, #28]
 8019a10:	f000 f95e 	bl	8019cd0 <fs_read_file_at>
 8019a14:	4603      	mov	r3, r0
 8019a16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if(res != LV_FS_RES_OK || rn != len) {
 8019a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d103      	bne.n	8019a2a <decode_compressed+0x90>
 8019a22:	693b      	ldr	r3, [r7, #16]
 8019a24:	6a3a      	ldr	r2, [r7, #32]
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d001      	beq.n	8019a2e <decode_compressed+0x94>
            LV_LOG_WARN("Read compressed header failed: %d", res);
            return LV_RESULT_INVALID;
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	e0a8      	b.n	8019b80 <decode_compressed+0x1e6>
        }

        if(compressed->compressed_size != compressed_len) {
 8019a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a30:	685a      	ldr	r2, [r3, #4]
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d001      	beq.n	8019a3c <decode_compressed+0xa2>
            LV_LOG_WARN("Compressed size mismatch: %" LV_PRIu32" != %" LV_PRIu32, compressed->compressed_size, compressed_len);
            return LV_RESULT_INVALID;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	e0a1      	b.n	8019b80 <decode_compressed+0x1e6>
        }

        file_buf = lv_malloc(compressed_len);
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f004 fb2a 	bl	801e098 <lv_malloc>
 8019a44:	6338      	str	r0, [r7, #48]	@ 0x30
        if(file_buf == NULL) {
 8019a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d101      	bne.n	8019a50 <decode_compressed+0xb6>
            LV_LOG_WARN("No memory for compressed file");
            return LV_RESULT_INVALID;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	e097      	b.n	8019b80 <decode_compressed+0x1e6>

        }

        /*Continue to read the compressed data following compression header*/
        res = lv_fs_read(f, file_buf, compressed_len, &rn);
 8019a50:	68fa      	ldr	r2, [r7, #12]
 8019a52:	f107 0310 	add.w	r3, r7, #16
 8019a56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019a58:	69f8      	ldr	r0, [r7, #28]
 8019a5a:	f001 ffab 	bl	801b9b4 <lv_fs_read>
 8019a5e:	4603      	mov	r3, r0
 8019a60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if(res != LV_FS_RES_OK || rn != compressed_len) {
 8019a64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d103      	bne.n	8019a74 <decode_compressed+0xda>
 8019a6c:	693a      	ldr	r2, [r7, #16]
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d004      	beq.n	8019a7e <decode_compressed+0xe4>
            LV_LOG_WARN("Read compressed file failed: %d", res);
            lv_free(file_buf);
 8019a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019a76:	f004 fb47 	bl	801e108 <lv_free>
            return LV_RESULT_INVALID;
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	e080      	b.n	8019b80 <decode_compressed+0x1e6>
        }

        /*Decompress the image*/
        compressed->data = file_buf;
 8019a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019a82:	60da      	str	r2, [r3, #12]
 8019a84:	e025      	b.n	8019ad2 <decode_compressed+0x138>
    }
    else if(dsc->src_type == LV_IMAGE_SRC_VARIABLE) {
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	7b1b      	ldrb	r3, [r3, #12]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d11f      	bne.n	8019ace <decode_compressed+0x134>
        lv_image_dsc_t * image = (lv_image_dsc_t *)dsc->src;
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	689b      	ldr	r3, [r3, #8]
 8019a92:	627b      	str	r3, [r7, #36]	@ 0x24
        compressed_len = image->data_size;
 8019a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a96:	68db      	ldr	r3, [r3, #12]
 8019a98:	60fb      	str	r3, [r7, #12]

        /*Read compress header*/
        len = 12;
 8019a9a:	230c      	movs	r3, #12
 8019a9c:	623b      	str	r3, [r7, #32]
        compressed_len -= len;
 8019a9e:	68fa      	ldr	r2, [r7, #12]
 8019aa0:	6a3b      	ldr	r3, [r7, #32]
 8019aa2:	1ad3      	subs	r3, r2, r3
 8019aa4:	60fb      	str	r3, [r7, #12]
        lv_memcpy(compressed, image->data, len);
 8019aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aa8:	691b      	ldr	r3, [r3, #16]
 8019aaa:	6a3a      	ldr	r2, [r7, #32]
 8019aac:	4619      	mov	r1, r3
 8019aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019ab0:	f003 f938 	bl	801cd24 <lv_memcpy>
        compressed->data = image->data + len;
 8019ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ab6:	691a      	ldr	r2, [r3, #16]
 8019ab8:	6a3b      	ldr	r3, [r7, #32]
 8019aba:	441a      	add	r2, r3
 8019abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019abe:	60da      	str	r2, [r3, #12]
        if(compressed->compressed_size != compressed_len) {
 8019ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ac2:	685a      	ldr	r2, [r3, #4]
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	429a      	cmp	r2, r3
 8019ac8:	d003      	beq.n	8019ad2 <decode_compressed+0x138>
            LV_LOG_WARN("Compressed size mismatch: %" LV_PRIu32" != %" LV_PRIu32, compressed->compressed_size, compressed_len);
            return LV_RESULT_INVALID;
 8019aca:	2300      	movs	r3, #0
 8019acc:	e058      	b.n	8019b80 <decode_compressed+0x1e6>
        }
    }
    else {
        LV_LOG_WARN("Compressed image only support file or variable");
        return LV_RESULT_INVALID;
 8019ace:	2300      	movs	r3, #0
 8019ad0:	e056      	b.n	8019b80 <decode_compressed+0x1e6>
    }

    res = decompress_image(dsc, compressed);
 8019ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019ad4:	6838      	ldr	r0, [r7, #0]
 8019ad6:	f000 f929 	bl	8019d2c <decompress_image>
 8019ada:	4603      	mov	r3, r0
 8019adc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    compressed->data = NULL; /*No need to store the data any more*/
 8019ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	60da      	str	r2, [r3, #12]
    lv_free(file_buf);
 8019ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ae8:	f004 fb0e 	bl	801e108 <lv_free>
    if(res != LV_RESULT_OK) {
 8019aec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8019af0:	2b01      	cmp	r3, #1
 8019af2:	d001      	beq.n	8019af8 <decode_compressed+0x15e>
        LV_LOG_WARN("Decompress failed");
        return LV_RESULT_INVALID;
 8019af4:	2300      	movs	r3, #0
 8019af6:	e043      	b.n	8019b80 <decode_compressed+0x1e6>
    }

    /*Depends on the cf, need to further decode image like an C-array image*/
    lv_image_dsc_t * image = (lv_image_dsc_t *)dsc->src;
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	689b      	ldr	r3, [r3, #8]
 8019afc:	61bb      	str	r3, [r7, #24]
    if(image->data == NULL) {
 8019afe:	69bb      	ldr	r3, [r7, #24]
 8019b00:	691b      	ldr	r3, [r3, #16]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d101      	bne.n	8019b0a <decode_compressed+0x170>
        return LV_RESULT_INVALID;
 8019b06:	2300      	movs	r3, #0
 8019b08:	e03a      	b.n	8019b80 <decode_compressed+0x1e6>
    }

    lv_color_format_t cf = dsc->header.cf;
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	7c5b      	ldrb	r3, [r3, #17]
 8019b0e:	75fb      	strb	r3, [r7, #23]
    if(LV_COLOR_FORMAT_IS_INDEXED(cf)) {
 8019b10:	7dfb      	ldrb	r3, [r7, #23]
 8019b12:	2b06      	cmp	r3, #6
 8019b14:	d916      	bls.n	8019b44 <decode_compressed+0x1aa>
 8019b16:	7dfb      	ldrb	r3, [r7, #23]
 8019b18:	2b0a      	cmp	r3, #10
 8019b1a:	d813      	bhi.n	8019b44 <decode_compressed+0x1aa>
        if(dsc->args.use_indexed) res = load_indexed(decoder, dsc);
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	79db      	ldrb	r3, [r3, #7]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d007      	beq.n	8019b34 <decode_compressed+0x19a>
 8019b24:	6839      	ldr	r1, [r7, #0]
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f7ff fe2f 	bl	801978a <load_indexed>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8019b32:	e023      	b.n	8019b7c <decode_compressed+0x1e2>
        else res = decode_indexed(decoder, dsc);
 8019b34:	6839      	ldr	r1, [r7, #0]
 8019b36:	6878      	ldr	r0, [r7, #4]
 8019b38:	f7ff fd7c 	bl	8019634 <decode_indexed>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if(dsc->args.use_indexed) res = load_indexed(decoder, dsc);
 8019b42:	e01b      	b.n	8019b7c <decode_compressed+0x1e2>
    }
    else if(LV_COLOR_FORMAT_IS_ALPHA_ONLY(cf)) {
 8019b44:	7dfb      	ldrb	r3, [r7, #23]
 8019b46:	2b0a      	cmp	r3, #10
 8019b48:	d90a      	bls.n	8019b60 <decode_compressed+0x1c6>
 8019b4a:	7dfb      	ldrb	r3, [r7, #23]
 8019b4c:	2b0e      	cmp	r3, #14
 8019b4e:	d807      	bhi.n	8019b60 <decode_compressed+0x1c6>
        res = decode_alpha_only(decoder, dsc);
 8019b50:	6839      	ldr	r1, [r7, #0]
 8019b52:	6878      	ldr	r0, [r7, #4]
 8019b54:	f7ff fe51 	bl	80197fa <decode_alpha_only>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8019b5e:	e00d      	b.n	8019b7c <decode_compressed+0x1e2>
    }
    else {
        /*The decompressed data is the original image data.*/
        dsc->decoded = decoder_data->decompressed;
 8019b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b62:	6a1a      	ldr	r2, [r3, #32]
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	61da      	str	r2, [r3, #28]

        /*Transfer ownership of decompressed to `decoded` since it can be used directly*/
        decoder_data->decoded = decoder_data->decompressed;
 8019b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b6a:	6a1a      	ldr	r2, [r3, #32]
 8019b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b6e:	61da      	str	r2, [r3, #28]
        decoder_data->decompressed = NULL;
 8019b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b72:	2200      	movs	r2, #0
 8019b74:	621a      	str	r2, [r3, #32]
        res = LV_RESULT_OK;
 8019b76:	2301      	movs	r3, #1
 8019b78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    return res;
 8019b7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8019b80:	4618      	mov	r0, r3
 8019b82:	3738      	adds	r7, #56	@ 0x38
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <decode_indexed_line>:

static lv_result_t decode_indexed_line(lv_color_format_t color_format, const lv_color32_t * palette, int32_t x,
                                       int32_t w_px, const uint8_t * in, lv_color32_t * out)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b089      	sub	sp, #36	@ 0x24
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	60b9      	str	r1, [r7, #8]
 8019b90:	607a      	str	r2, [r7, #4]
 8019b92:	603b      	str	r3, [r7, #0]
 8019b94:	4603      	mov	r3, r0
 8019b96:	73fb      	strb	r3, [r7, #15]
    uint8_t px_size;
    uint16_t mask;

    int8_t shift   = 0;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	77bb      	strb	r3, [r7, #30]
    switch(color_format) {
 8019b9c:	7bfb      	ldrb	r3, [r7, #15]
 8019b9e:	3b07      	subs	r3, #7
 8019ba0:	2b03      	cmp	r3, #3
 8019ba2:	d850      	bhi.n	8019c46 <decode_indexed_line+0xbe>
 8019ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8019bac <decode_indexed_line+0x24>)
 8019ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019baa:	bf00      	nop
 8019bac:	08019bbd 	.word	0x08019bbd
 8019bb0:	08019be3 	.word	0x08019be3
 8019bb4:	08019c0d 	.word	0x08019c0d
 8019bb8:	08019c35 	.word	0x08019c35
        case LV_COLOR_FORMAT_I1:
            px_size = 1;
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	77fb      	strb	r3, [r7, #31]
            in += x / 8;                /*8pixel per byte*/
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	da00      	bge.n	8019bc8 <decode_indexed_line+0x40>
 8019bc6:	3307      	adds	r3, #7
 8019bc8:	10db      	asrs	r3, r3, #3
 8019bca:	461a      	mov	r2, r3
 8019bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bce:	4413      	add	r3, r2
 8019bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
            shift = 7 - (x & 0x7);
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	b25b      	sxtb	r3, r3
 8019bd6:	43db      	mvns	r3, r3
 8019bd8:	b25b      	sxtb	r3, r3
 8019bda:	f003 0307 	and.w	r3, r3, #7
 8019bde:	77bb      	strb	r3, [r7, #30]
            break;
 8019be0:	e033      	b.n	8019c4a <decode_indexed_line+0xc2>
        case LV_COLOR_FORMAT_I2:
            px_size = 2;
 8019be2:	2302      	movs	r3, #2
 8019be4:	77fb      	strb	r3, [r7, #31]
            in += x / 4;                /*4pixel per byte*/
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	da00      	bge.n	8019bee <decode_indexed_line+0x66>
 8019bec:	3303      	adds	r3, #3
 8019bee:	109b      	asrs	r3, r3, #2
 8019bf0:	461a      	mov	r2, r3
 8019bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bf4:	4413      	add	r3, r2
 8019bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
            shift = 6 - 2 * (x & 0x3);
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	43db      	mvns	r3, r3
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	f003 0303 	and.w	r3, r3, #3
 8019c02:	b2db      	uxtb	r3, r3
 8019c04:	005b      	lsls	r3, r3, #1
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	77bb      	strb	r3, [r7, #30]
            break;
 8019c0a:	e01e      	b.n	8019c4a <decode_indexed_line+0xc2>
        case LV_COLOR_FORMAT_I4:
            px_size = 4;
 8019c0c:	2304      	movs	r3, #4
 8019c0e:	77fb      	strb	r3, [r7, #31]
            in += x / 2;                /*2pixel per byte*/
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	0fda      	lsrs	r2, r3, #31
 8019c14:	4413      	add	r3, r2
 8019c16:	105b      	asrs	r3, r3, #1
 8019c18:	461a      	mov	r2, r3
 8019c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c1c:	4413      	add	r3, r2
 8019c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
            shift = 4 - 4 * (x & 0x1);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	f003 0301 	and.w	r3, r3, #1
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d101      	bne.n	8019c2e <decode_indexed_line+0xa6>
 8019c2a:	2304      	movs	r3, #4
 8019c2c:	e000      	b.n	8019c30 <decode_indexed_line+0xa8>
 8019c2e:	2300      	movs	r3, #0
 8019c30:	77bb      	strb	r3, [r7, #30]
            break;
 8019c32:	e00a      	b.n	8019c4a <decode_indexed_line+0xc2>
        case LV_COLOR_FORMAT_I8:
            px_size = 8;
 8019c34:	2308      	movs	r3, #8
 8019c36:	77fb      	strb	r3, [r7, #31]
            in += x;
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019c3c:	4413      	add	r3, r2
 8019c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
            shift = 0;
 8019c40:	2300      	movs	r3, #0
 8019c42:	77bb      	strb	r3, [r7, #30]
            break;
 8019c44:	e001      	b.n	8019c4a <decode_indexed_line+0xc2>
        default:
            return LV_RESULT_INVALID;
 8019c46:	2300      	movs	r3, #0
 8019c48:	e03b      	b.n	8019cc2 <decode_indexed_line+0x13a>
    }

    mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8019c4a:	7ffb      	ldrb	r3, [r7, #31]
 8019c4c:	2201      	movs	r2, #1
 8019c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c52:	b29b      	uxth	r3, r3
 8019c54:	3b01      	subs	r3, #1
 8019c56:	82fb      	strh	r3, [r7, #22]

    int32_t i;
    for(i = 0; i < w_px; i++) {
 8019c58:	2300      	movs	r3, #0
 8019c5a:	61bb      	str	r3, [r7, #24]
 8019c5c:	e02c      	b.n	8019cb8 <decode_indexed_line+0x130>
        uint8_t val_act = (*in >> shift) & mask;
 8019c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c60:	781b      	ldrb	r3, [r3, #0]
 8019c62:	461a      	mov	r2, r3
 8019c64:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019c68:	fa42 f303 	asr.w	r3, r2, r3
 8019c6c:	b25a      	sxtb	r2, r3
 8019c6e:	8afb      	ldrh	r3, [r7, #22]
 8019c70:	b25b      	sxtb	r3, r3
 8019c72:	4013      	ands	r3, r2
 8019c74:	b25b      	sxtb	r3, r3
 8019c76:	757b      	strb	r3, [r7, #21]
        out[i] = palette[val_act];
 8019c78:	7d7b      	ldrb	r3, [r7, #21]
 8019c7a:	009b      	lsls	r3, r3, #2
 8019c7c:	68ba      	ldr	r2, [r7, #8]
 8019c7e:	18d1      	adds	r1, r2, r3
 8019c80:	69bb      	ldr	r3, [r7, #24]
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019c86:	4413      	add	r3, r2
 8019c88:	461a      	mov	r2, r3
 8019c8a:	460b      	mov	r3, r1
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	6013      	str	r3, [r2, #0]

        shift -= px_size;
 8019c90:	7fba      	ldrb	r2, [r7, #30]
 8019c92:	7ffb      	ldrb	r3, [r7, #31]
 8019c94:	1ad3      	subs	r3, r2, r3
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	77bb      	strb	r3, [r7, #30]
        if(shift < 0) {
 8019c9a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	da07      	bge.n	8019cb2 <decode_indexed_line+0x12a>
            shift = 8 - px_size;
 8019ca2:	7ffb      	ldrb	r3, [r7, #31]
 8019ca4:	f1c3 0308 	rsb	r3, r3, #8
 8019ca8:	b2db      	uxtb	r3, r3
 8019caa:	77bb      	strb	r3, [r7, #30]
            in++;
 8019cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cae:	3301      	adds	r3, #1
 8019cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(i = 0; i < w_px; i++) {
 8019cb2:	69bb      	ldr	r3, [r7, #24]
 8019cb4:	3301      	adds	r3, #1
 8019cb6:	61bb      	str	r3, [r7, #24]
 8019cb8:	69ba      	ldr	r2, [r7, #24]
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	429a      	cmp	r2, r3
 8019cbe:	dbce      	blt.n	8019c5e <decode_indexed_line+0xd6>
        }
    }
    return LV_RESULT_OK;
 8019cc0:	2301      	movs	r3, #1
}
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	3724      	adds	r7, #36	@ 0x24
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ccc:	4770      	bx	lr
 8019cce:	bf00      	nop

08019cd0 <fs_read_file_at>:

static lv_fs_res_t fs_read_file_at(lv_fs_file_t * f, uint32_t pos, void * buff, uint32_t btr, uint32_t * br)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b086      	sub	sp, #24
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60f8      	str	r0, [r7, #12]
 8019cd8:	60b9      	str	r1, [r7, #8]
 8019cda:	607a      	str	r2, [r7, #4]
 8019cdc:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res;
    if(br) *br = 0;
 8019cde:	6a3b      	ldr	r3, [r7, #32]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d002      	beq.n	8019cea <fs_read_file_at+0x1a>
 8019ce4:	6a3b      	ldr	r3, [r7, #32]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	601a      	str	r2, [r3, #0]

    res = lv_fs_seek(f, pos, LV_FS_SEEK_SET);
 8019cea:	2200      	movs	r2, #0
 8019cec:	68b9      	ldr	r1, [r7, #8]
 8019cee:	68f8      	ldr	r0, [r7, #12]
 8019cf0:	f001 fea5 	bl	801ba3e <lv_fs_seek>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	75fb      	strb	r3, [r7, #23]
    if(res != LV_FS_RES_OK) {
 8019cf8:	7dfb      	ldrb	r3, [r7, #23]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d001      	beq.n	8019d02 <fs_read_file_at+0x32>
        return res;
 8019cfe:	7dfb      	ldrb	r3, [r7, #23]
 8019d00:	e010      	b.n	8019d24 <fs_read_file_at+0x54>
    }

    res |= lv_fs_read(f, buff, btr, br);
 8019d02:	6a3b      	ldr	r3, [r7, #32]
 8019d04:	683a      	ldr	r2, [r7, #0]
 8019d06:	6879      	ldr	r1, [r7, #4]
 8019d08:	68f8      	ldr	r0, [r7, #12]
 8019d0a:	f001 fe53 	bl	801b9b4 <lv_fs_read>
 8019d0e:	4603      	mov	r3, r0
 8019d10:	461a      	mov	r2, r3
 8019d12:	7dfb      	ldrb	r3, [r7, #23]
 8019d14:	4313      	orrs	r3, r2
 8019d16:	75fb      	strb	r3, [r7, #23]
    if(res != LV_FS_RES_OK) {
 8019d18:	7dfb      	ldrb	r3, [r7, #23]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d001      	beq.n	8019d22 <fs_read_file_at+0x52>
        return res;
 8019d1e:	7dfb      	ldrb	r3, [r7, #23]
 8019d20:	e000      	b.n	8019d24 <fs_read_file_at+0x54>
    }

    return LV_FS_RES_OK;
 8019d22:	2300      	movs	r3, #0
}
 8019d24:	4618      	mov	r0, r3
 8019d26:	3718      	adds	r7, #24
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	bd80      	pop	{r7, pc}

08019d2c <decompress_image>:

static lv_result_t decompress_image(lv_image_decoder_dsc_t * dsc, const lv_image_compressed_t * compressed)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b088      	sub	sp, #32
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
 8019d34:	6039      	str	r1, [r7, #0]
    /*Need to store decompressed data to decoder to free on close*/
    decoder_data_t * decoder_data = get_decoder_data(dsc);
 8019d36:	6878      	ldr	r0, [r7, #4]
 8019d38:	f7ff fc22 	bl	8019580 <get_decoder_data>
 8019d3c:	61f8      	str	r0, [r7, #28]
    if(decoder_data == NULL) {
 8019d3e:	69fb      	ldr	r3, [r7, #28]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d101      	bne.n	8019d48 <decompress_image+0x1c>
        return LV_RESULT_INVALID;
 8019d44:	2300      	movs	r3, #0
 8019d46:	e036      	b.n	8019db6 <decompress_image+0x8a>
    }

    uint8_t * img_data;
    uint32_t out_len = compressed->decompressed_size;
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	689b      	ldr	r3, [r3, #8]
 8019d4c:	61bb      	str	r3, [r7, #24]
    uint32_t input_len = compressed->compressed_size;
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	685b      	ldr	r3, [r3, #4]
 8019d52:	617b      	str	r3, [r7, #20]
    LV_UNUSED(input_len);
    LV_UNUSED(out_len);

    lv_draw_buf_t * decompressed = lv_draw_buf_create(dsc->header.w, dsc->header.h, dsc->header.cf,
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	8a9b      	ldrh	r3, [r3, #20]
 8019d58:	4618      	mov	r0, r3
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	8adb      	ldrh	r3, [r3, #22]
 8019d5e:	4619      	mov	r1, r3
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	7c5a      	ldrb	r2, [r3, #17]
                                                      dsc->header.stride);
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	8b1b      	ldrh	r3, [r3, #24]
    lv_draw_buf_t * decompressed = lv_draw_buf_create(dsc->header.w, dsc->header.h, dsc->header.cf,
 8019d68:	f7ec f868 	bl	8005e3c <lv_draw_buf_create>
 8019d6c:	6138      	str	r0, [r7, #16]
    if(decompressed == NULL) {
 8019d6e:	693b      	ldr	r3, [r7, #16]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d101      	bne.n	8019d78 <decompress_image+0x4c>
        LV_LOG_WARN("No memory for decompressed image, input: %" LV_PRIu32 ", output: %" LV_PRIu32, input_len, out_len);
        return LV_RESULT_INVALID;
 8019d74:	2300      	movs	r3, #0
 8019d76:	e01e      	b.n	8019db6 <decompress_image+0x8a>
    }

    img_data = decompressed->data;
 8019d78:	693b      	ldr	r3, [r7, #16]
 8019d7a:	691b      	ldr	r3, [r3, #16]
 8019d7c:	60fb      	str	r3, [r7, #12]

    if(compressed->method == LV_IMAGE_COMPRESS_RLE) {
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	781b      	ldrb	r3, [r3, #0]
 8019d82:	f003 030f 	and.w	r3, r3, #15
 8019d86:	b2db      	uxtb	r3, r3
 8019d88:	2b01      	cmp	r3, #1
 8019d8a:	d104      	bne.n	8019d96 <decompress_image+0x6a>
            lv_draw_buf_destroy(decompressed);
            return LV_RESULT_INVALID;
        }
#else
        LV_LOG_WARN("RLE decompress is not enabled");
        lv_draw_buf_destroy(decompressed);
 8019d8c:	6938      	ldr	r0, [r7, #16]
 8019d8e:	f7ec f927 	bl	8005fe0 <lv_draw_buf_destroy>
        return LV_RESULT_INVALID;
 8019d92:	2300      	movs	r3, #0
 8019d94:	e00f      	b.n	8019db6 <decompress_image+0x8a>
#endif
    }
    else if(compressed->method == LV_IMAGE_COMPRESS_LZ4) {
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	781b      	ldrb	r3, [r3, #0]
 8019d9a:	f003 030f 	and.w	r3, r3, #15
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	2b02      	cmp	r3, #2
 8019da2:	d104      	bne.n	8019dae <decompress_image+0x82>
            lv_draw_buf_destroy(decompressed);
            return LV_RESULT_INVALID;
        }
#else
        LV_LOG_WARN("LZ4 decompress is not enabled");
        lv_draw_buf_destroy(decompressed);
 8019da4:	6938      	ldr	r0, [r7, #16]
 8019da6:	f7ec f91b 	bl	8005fe0 <lv_draw_buf_destroy>
        return LV_RESULT_INVALID;
 8019daa:	2300      	movs	r3, #0
 8019dac:	e003      	b.n	8019db6 <decompress_image+0x8a>
#endif
    }
    else {
        LV_UNUSED(img_data);
        LV_LOG_WARN("Unknown compression method: %d", compressed->method);
        lv_draw_buf_destroy(decompressed);
 8019dae:	6938      	ldr	r0, [r7, #16]
 8019db0:	f7ec f916 	bl	8005fe0 <lv_draw_buf_destroy>
        return LV_RESULT_INVALID;
 8019db4:	2300      	movs	r3, #0
    }

    decoder_data->decompressed = decompressed; /*Free on decoder close*/
    return LV_RESULT_OK;
}
 8019db6:	4618      	mov	r0, r3
 8019db8:	3720      	adds	r7, #32
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	bd80      	pop	{r7, pc}

08019dbe <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 8019dbe:	b580      	push	{r7, lr}
 8019dc0:	b082      	sub	sp, #8
 8019dc2:	af00      	add	r7, sp, #0
 8019dc4:	6078      	str	r0, [r7, #4]
 8019dc6:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 8019dc8:	683a      	ldr	r2, [r7, #0]
 8019dca:	2100      	movs	r1, #0
 8019dcc:	6878      	ldr	r0, [r7, #4]
 8019dce:	f003 f9c6 	bl	801d15e <lv_memset>
}
 8019dd2:	bf00      	nop
 8019dd4:	3708      	adds	r7, #8
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bd80      	pop	{r7, pc}
	...

08019ddc <lv_global_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
static inline void lv_global_init(lv_global_t * global)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(global);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d101      	bne.n	8019dee <lv_global_init+0x12>
 8019dea:	bf00      	nop
 8019dec:	e7fd      	b.n	8019dea <lv_global_init+0xe>

    if(global == NULL) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d029      	beq.n	8019e48 <lv_global_init+0x6c>
        LV_LOG_ERROR("lv_global cannot be null");
        return;
    }

    lv_memzero(global, sizeof(lv_global_t));
 8019df4:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f7ff ffe0 	bl	8019dbe <lv_memzero>

    _lv_ll_init(&(global->disp_ll), sizeof(lv_display_t));
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	3304      	adds	r3, #4
 8019e02:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8019e06:	4618      	mov	r0, r3
 8019e08:	f001 ff5f 	bl	801bcca <_lv_ll_init>
    _lv_ll_init(&(global->indev_ll), sizeof(lv_indev_t));
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	3344      	adds	r3, #68	@ 0x44
 8019e10:	21b8      	movs	r1, #184	@ 0xb8
 8019e12:	4618      	mov	r0, r3
 8019e14:	f001 ff59 	bl	801bcca <_lv_ll_init>

    global->memory_zero = ZERO_MEM_SENTINEL;
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8019e50 <lv_global_init+0x74>)
 8019e1c:	665a      	str	r2, [r3, #100]	@ 0x64
    global->style_refresh = true;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	2201      	movs	r2, #1
 8019e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    global->layout_count = _LV_LAYOUT_LAST;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2203      	movs	r2, #3
 8019e2a:	659a      	str	r2, [r3, #88]	@ 0x58
    global->style_last_custom_prop_id = (uint32_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	228c      	movs	r2, #140	@ 0x8c
 8019e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    global->area_trans_cache.angle_prev = INT32_MIN;
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019e38:	66da      	str	r2, [r3, #108]	@ 0x6c
    global->event_last_register_id = _LV_EVENT_LAST;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	223c      	movs	r2, #60	@ 0x3c
 8019e3e:	67da      	str	r2, [r3, #124]	@ 0x7c
    lv_rand_set_seed(0x1234ABCD);
 8019e40:	4804      	ldr	r0, [pc, #16]	@ (8019e54 <lv_global_init+0x78>)
 8019e42:	f002 f923 	bl	801c08c <lv_rand_set_seed>
 8019e46:	e000      	b.n	8019e4a <lv_global_init+0x6e>
        return;
 8019e48:	bf00      	nop

#if defined(LV_DRAW_SW_SHADOW_CACHE_SIZE) && LV_DRAW_SW_SHADOW_CACHE_SIZE > 0
    global->sw_shadow_cache.cache_size = -1;
    global->sw_shadow_cache.cache_r = -1;
#endif
}
 8019e4a:	3708      	adds	r7, #8
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}
 8019e50:	a1b2c3d4 	.word	0xa1b2c3d4
 8019e54:	1234abcd 	.word	0x1234abcd

08019e58 <lv_init>:
    return lv_initialized;
#endif
}

void lv_init(void)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b086      	sub	sp, #24
 8019e5c:	af00      	add	r7, sp, #0
#ifdef LV_GC_INIT
    LV_GC_INIT();
#endif

    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8019e5e:	4b23      	ldr	r3, [pc, #140]	@ (8019eec <lv_init+0x94>)
 8019e60:	781b      	ldrb	r3, [r3, #0]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d13e      	bne.n	8019ee4 <lv_init+0x8c>
    }

    LV_LOG_INFO("begin");

    /*Initialize members of static variable lv_global */
    LV_GLOBAL_INIT(LV_GLOBAL_DEFAULT());
 8019e66:	4821      	ldr	r0, [pc, #132]	@ (8019eec <lv_init+0x94>)
 8019e68:	f7ff ffb8 	bl	8019ddc <lv_global_init>

    lv_mem_init();
 8019e6c:	f002 fe9c 	bl	801cba8 <lv_mem_init>

    _lv_draw_buf_init_handlers();
 8019e70:	f7eb fe9a 	bl	8005ba8 <_lv_draw_buf_init_handlers>

#if LV_USE_SPAN != 0
    lv_span_stack_init();
 8019e74:	f004 f9c4 	bl	801e200 <lv_span_stack_init>
    lv_profiler_builtin_config_t profiler_config;
    lv_profiler_builtin_config_init(&profiler_config);
    lv_profiler_builtin_init(&profiler_config);
#endif

    _lv_timer_core_init();
 8019e78:	f002 fd90 	bl	801c99c <_lv_timer_core_init>

    _lv_fs_init();
 8019e7c:	f001 fb86 	bl	801b58c <_lv_fs_init>

    _lv_layout_init();
 8019e80:	f7fe ff0e 	bl	8018ca0 <_lv_layout_init>

    _lv_anim_core_init();
 8019e84:	f000 f8ea 	bl	801a05c <_lv_anim_core_init>

    _lv_group_init();
 8019e88:	f7e8 f8f2 	bl	8002070 <_lv_group_init>

    lv_draw_init();
 8019e8c:	f7eb fcbb 	bl	8005806 <lv_draw_init>

#if LV_USE_DRAW_SW
    lv_draw_sw_init();
 8019e90:	f7f1 feb0 	bl	800bbf4 <lv_draw_sw_init>

#if LV_USE_WINDOWS
    lv_windows_platform_init();
#endif

    _lv_obj_style_init();
 8019e94:	f7ea fed8 	bl	8004c48 <_lv_obj_style_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8019e98:	f7eb fa5c 	bl	8005354 <_lv_refr_init>

#if LV_USE_SYSMON
    _lv_sysmon_builtin_init();
#endif

    _lv_image_decoder_init();
 8019e9c:	f7ed fd3a 	bl	8007914 <_lv_image_decoder_init>
    lv_bin_decoder_init();  /*LVGL built-in binary image decoder*/
 8019ea0:	f7fe ff42 	bl	8018d28 <lv_bin_decoder_init>
#if LV_USE_DRAW_VG_LITE
    lv_draw_vg_lite_init();
#endif

    /*Test if the IDE has UTF-8 encoding*/
    const char * txt = "Á";
 8019ea4:	4b12      	ldr	r3, [pc, #72]	@ (8019ef0 <lv_init+0x98>)
 8019ea6:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8019ea8:	697b      	ldr	r3, [r7, #20]
 8019eaa:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	781b      	ldrb	r3, [r3, #0]
 8019eb0:	2bc3      	cmp	r3, #195	@ 0xc3
 8019eb2:	d103      	bne.n	8019ebc <lv_init+0x64>
 8019eb4:	693b      	ldr	r3, [r7, #16]
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	2b81      	cmp	r3, #129	@ 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianness_test = 0x11223344;
 8019ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8019ef4 <lv_init+0x9c>)
 8019ebe:	607b      	str	r3, [r7, #4]
    uint8_t * endianness_test_p = (uint8_t *) &endianness_test;
 8019ec0:	1d3b      	adds	r3, r7, #4
 8019ec2:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianness_test_p[0] == 0x11;
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	2b11      	cmp	r3, #17
 8019eca:	bf0c      	ite	eq
 8019ecc:	2301      	moveq	r3, #1
 8019ece:	2300      	movne	r3, #0
 8019ed0:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 8019ed2:	7afb      	ldrb	r3, [r7, #11]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d001      	beq.n	8019edc <lv_init+0x84>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 8019ed8:	bf00      	nop
 8019eda:	e7fd      	b.n	8019ed8 <lv_init+0x80>

#if LV_USE_TINY_TTF
    lv_tiny_ttf_init();
#endif

    lv_initialized = true;
 8019edc:	4b03      	ldr	r3, [pc, #12]	@ (8019eec <lv_init+0x94>)
 8019ede:	2201      	movs	r2, #1
 8019ee0:	701a      	strb	r2, [r3, #0]
 8019ee2:	e000      	b.n	8019ee6 <lv_init+0x8e>
        return;
 8019ee4:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 8019ee6:	3718      	adds	r7, #24
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bd80      	pop	{r7, pc}
 8019eec:	2000008c 	.word	0x2000008c
 8019ef0:	0801e2d8 	.word	0x0801e2d8
 8019ef4:	11223344 	.word	0x11223344

08019ef8 <lv_cache_release>:
    }
    lv_mutex_unlock(&cache->lock);
    return entry;
}
void lv_cache_release(lv_cache_t * cache, lv_cache_entry_t * entry, void * user_data)
{
 8019ef8:	b590      	push	{r4, r7, lr}
 8019efa:	b085      	sub	sp, #20
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	60f8      	str	r0, [r7, #12]
 8019f00:	60b9      	str	r1, [r7, #8]
 8019f02:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(entry);
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d101      	bne.n	8019f0e <lv_cache_release+0x16>
 8019f0a:	bf00      	nop
 8019f0c:	e7fd      	b.n	8019f0a <lv_cache_release+0x12>

    lv_mutex_lock(&cache->lock);
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	331c      	adds	r3, #28
 8019f12:	4618      	mov	r0, r3
 8019f14:	f002 fe31 	bl	801cb7a <lv_mutex_lock>
    lv_cache_entry_release_data(entry, user_data);
 8019f18:	6879      	ldr	r1, [r7, #4]
 8019f1a:	68b8      	ldr	r0, [r7, #8]
 8019f1c:	f000 f872 	bl	801a004 <lv_cache_entry_release_data>

    if(lv_cache_entry_get_ref(entry) == 0 && lv_cache_entry_is_invalid(entry)) {
 8019f20:	68b8      	ldr	r0, [r7, #8]
 8019f22:	f000 f839 	bl	8019f98 <lv_cache_entry_get_ref>
 8019f26:	4603      	mov	r3, r0
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d111      	bne.n	8019f50 <lv_cache_release+0x58>
 8019f2c:	68b8      	ldr	r0, [r7, #8]
 8019f2e:	f000 f844 	bl	8019fba <lv_cache_entry_is_invalid>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d00b      	beq.n	8019f50 <lv_cache_release+0x58>
        cache->ops.free_cb(lv_cache_entry_get_data(entry), user_data);
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	699c      	ldr	r4, [r3, #24]
 8019f3c:	68b8      	ldr	r0, [r7, #8]
 8019f3e:	f000 f84d 	bl	8019fdc <lv_cache_entry_get_data>
 8019f42:	4603      	mov	r3, r0
 8019f44:	6879      	ldr	r1, [r7, #4]
 8019f46:	4618      	mov	r0, r3
 8019f48:	47a0      	blx	r4
        lv_cache_entry_delete(entry);
 8019f4a:	68b8      	ldr	r0, [r7, #8]
 8019f4c:	f000 f872 	bl	801a034 <lv_cache_entry_delete>
    }
    lv_mutex_unlock(&cache->lock);
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	331c      	adds	r3, #28
 8019f54:	4618      	mov	r0, r3
 8019f56:	f002 fe1b 	bl	801cb90 <lv_mutex_unlock>
}
 8019f5a:	bf00      	nop
 8019f5c:	3714      	adds	r7, #20
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd90      	pop	{r4, r7, pc}

08019f62 <lv_cache_entry_dec_ref>:
{
    LV_ASSERT_NULL(entry);
    entry->ref_cnt++;
}
void lv_cache_entry_dec_ref(lv_cache_entry_t * entry)
{
 8019f62:	b480      	push	{r7}
 8019f64:	b083      	sub	sp, #12
 8019f66:	af00      	add	r7, sp, #0
 8019f68:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(entry);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d101      	bne.n	8019f74 <lv_cache_entry_dec_ref+0x12>
 8019f70:	bf00      	nop
 8019f72:	e7fd      	b.n	8019f70 <lv_cache_entry_dec_ref+0xe>
    entry->ref_cnt--;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	685b      	ldr	r3, [r3, #4]
 8019f78:	1e5a      	subs	r2, r3, #1
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	605a      	str	r2, [r3, #4]
    if(entry->ref_cnt < 0) {
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	685b      	ldr	r3, [r3, #4]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	da02      	bge.n	8019f8c <lv_cache_entry_dec_ref+0x2a>
        LV_LOG_WARN("ref_cnt(%" LV_PRIu32 ") < 0", entry->ref_cnt);
        entry->ref_cnt = 0;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2200      	movs	r2, #0
 8019f8a:	605a      	str	r2, [r3, #4]
    }
}
 8019f8c:	bf00      	nop
 8019f8e:	370c      	adds	r7, #12
 8019f90:	46bd      	mov	sp, r7
 8019f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f96:	4770      	bx	lr

08019f98 <lv_cache_entry_get_ref>:
int32_t lv_cache_entry_get_ref(lv_cache_entry_t * entry)
{
 8019f98:	b480      	push	{r7}
 8019f9a:	b083      	sub	sp, #12
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(entry);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d101      	bne.n	8019faa <lv_cache_entry_get_ref+0x12>
 8019fa6:	bf00      	nop
 8019fa8:	e7fd      	b.n	8019fa6 <lv_cache_entry_get_ref+0xe>
    return entry->ref_cnt;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	685b      	ldr	r3, [r3, #4]
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	370c      	adds	r7, #12
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb8:	4770      	bx	lr

08019fba <lv_cache_entry_is_invalid>:
{
    LV_ASSERT_NULL(entry);
    entry->is_invalid = is_invalid;
}
bool lv_cache_entry_is_invalid(lv_cache_entry_t * entry)
{
 8019fba:	b480      	push	{r7}
 8019fbc:	b083      	sub	sp, #12
 8019fbe:	af00      	add	r7, sp, #0
 8019fc0:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(entry);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d101      	bne.n	8019fcc <lv_cache_entry_is_invalid+0x12>
 8019fc8:	bf00      	nop
 8019fca:	e7fd      	b.n	8019fc8 <lv_cache_entry_is_invalid+0xe>
    return entry->is_invalid;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	7b1b      	ldrb	r3, [r3, #12]
}
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	370c      	adds	r7, #12
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fda:	4770      	bx	lr

08019fdc <lv_cache_entry_get_data>:
void * lv_cache_entry_get_data(lv_cache_entry_t * entry)
{
 8019fdc:	b480      	push	{r7}
 8019fde:	b083      	sub	sp, #12
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(entry);
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d101      	bne.n	8019fee <lv_cache_entry_get_data+0x12>
 8019fea:	bf00      	nop
 8019fec:	e7fd      	b.n	8019fea <lv_cache_entry_get_data+0xe>
    return (uint8_t *)entry - entry->node_size;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	689b      	ldr	r3, [r3, #8]
 8019ff2:	425b      	negs	r3, r3
 8019ff4:	687a      	ldr	r2, [r7, #4]
 8019ff6:	4413      	add	r3, r2
}
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	370c      	adds	r7, #12
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a002:	4770      	bx	lr

0801a004 <lv_cache_entry_release_data>:

    lv_cache_entry_inc_ref(entry);
    return lv_cache_entry_get_data(entry);
}
void lv_cache_entry_release_data(lv_cache_entry_t * entry, void * user_data)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
 801a00c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(user_data);

    LV_ASSERT_NULL(entry);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d101      	bne.n	801a018 <lv_cache_entry_release_data+0x14>
 801a014:	bf00      	nop
 801a016:	e7fd      	b.n	801a014 <lv_cache_entry_release_data+0x10>
    if(lv_cache_entry_get_ref(entry) == 0) {
 801a018:	6878      	ldr	r0, [r7, #4]
 801a01a:	f7ff ffbd 	bl	8019f98 <lv_cache_entry_get_ref>
 801a01e:	4603      	mov	r3, r0
 801a020:	2b00      	cmp	r3, #0
 801a022:	d003      	beq.n	801a02c <lv_cache_entry_release_data+0x28>
        LV_LOG_ERROR("ref_cnt(%" LV_PRIu32 ") == 0", entry->ref_cnt);
        return;
    }

    lv_cache_entry_dec_ref(entry);
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	f7ff ff9c 	bl	8019f62 <lv_cache_entry_dec_ref>
 801a02a:	e000      	b.n	801a02e <lv_cache_entry_release_data+0x2a>
        return;
 801a02c:	bf00      	nop
}
 801a02e:	3708      	adds	r7, #8
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}

0801a034 <lv_cache_entry_delete>:
    entry->node_size = node_size;
    entry->ref_cnt = 0;
    entry->is_invalid = false;
}
void lv_cache_entry_delete(lv_cache_entry_t * entry)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b084      	sub	sp, #16
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(entry);
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d101      	bne.n	801a046 <lv_cache_entry_delete+0x12>
 801a042:	bf00      	nop
 801a044:	e7fd      	b.n	801a042 <lv_cache_entry_delete+0xe>

    void * data = lv_cache_entry_get_data(entry);
 801a046:	6878      	ldr	r0, [r7, #4]
 801a048:	f7ff ffc8 	bl	8019fdc <lv_cache_entry_get_data>
 801a04c:	60f8      	str	r0, [r7, #12]
    lv_free(data);
 801a04e:	68f8      	ldr	r0, [r7, #12]
 801a050:	f004 f85a 	bl	801e108 <lv_free>
}
 801a054:	bf00      	nop
 801a056:	3710      	adds	r7, #16
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}

0801a05c <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	af00      	add	r7, sp, #0
    _lv_ll_init(anim_ll_p, sizeof(lv_anim_t));
 801a060:	2158      	movs	r1, #88	@ 0x58
 801a062:	480c      	ldr	r0, [pc, #48]	@ (801a094 <_lv_anim_core_init+0x38>)
 801a064:	f001 fe31 	bl	801bcca <_lv_ll_init>
    state.timer = lv_timer_create(anim_timer, LV_DEF_REFR_PERIOD, NULL);
 801a068:	2200      	movs	r2, #0
 801a06a:	2121      	movs	r1, #33	@ 0x21
 801a06c:	480a      	ldr	r0, [pc, #40]	@ (801a098 <_lv_anim_core_init+0x3c>)
 801a06e:	f002 fca3 	bl	801c9b8 <lv_timer_create>
 801a072:	4603      	mov	r3, r0
 801a074:	4a09      	ldr	r2, [pc, #36]	@ (801a09c <_lv_anim_core_init+0x40>)
 801a076:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    anim_mark_list_change(); /*Turn off the animation timer*/
 801a07a:	f000 f981 	bl	801a380 <anim_mark_list_change>
    state.anim_list_changed = false;
 801a07e:	4b07      	ldr	r3, [pc, #28]	@ (801a09c <_lv_anim_core_init+0x40>)
 801a080:	2200      	movs	r2, #0
 801a082:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    state.anim_run_round = false;
 801a086:	4b05      	ldr	r3, [pc, #20]	@ (801a09c <_lv_anim_core_init+0x40>)
 801a088:	2200      	movs	r2, #0
 801a08a:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 801a08e:	bf00      	nop
 801a090:	bd80      	pop	{r7, pc}
 801a092:	bf00      	nop
 801a094:	20000144 	.word	0x20000144
 801a098:	0801a0a1 	.word	0x0801a0a1
 801a09c:	2000008c 	.word	0x2000008c

0801a0a0 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b086      	sub	sp, #24
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    /*Flip the run round*/
    state.anim_run_round = state.anim_run_round ? false : true;
 801a0a8:	4b6c      	ldr	r3, [pc, #432]	@ (801a25c <anim_timer+0x1bc>)
 801a0aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 801a0ae:	f083 0301 	eor.w	r3, r3, #1
 801a0b2:	b2da      	uxtb	r2, r3
 801a0b4:	4b69      	ldr	r3, [pc, #420]	@ (801a25c <anim_timer+0x1bc>)
 801a0b6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    lv_anim_t * a = _lv_ll_get_head(anim_ll_p);
 801a0ba:	4869      	ldr	r0, [pc, #420]	@ (801a260 <anim_timer+0x1c0>)
 801a0bc:	f001 fee3 	bl	801be86 <_lv_ll_get_head>
 801a0c0:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 801a0c2:	e0c1      	b.n	801a248 <anim_timer+0x1a8>

        //        printf("%p, %d\n", a, a->start_value);

        uint32_t elaps = lv_tick_elaps(a->last_timer_run);
 801a0c4:	697b      	ldr	r3, [r7, #20]
 801a0c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f004 f87d 	bl	801e1c8 <lv_tick_elaps>
 801a0ce:	6138      	str	r0, [r7, #16]
        a->act_time += elaps;
 801a0d0:	697b      	ldr	r3, [r7, #20]
 801a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0d4:	461a      	mov	r2, r3
 801a0d6:	693b      	ldr	r3, [r7, #16]
 801a0d8:	4413      	add	r3, r2
 801a0da:	461a      	mov	r2, r3
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	635a      	str	r2, [r3, #52]	@ 0x34

        a->last_timer_run = lv_tick_get();
 801a0e0:	f004 f852 	bl	801e188 <lv_tick_get>
 801a0e4:	4602      	mov	r2, r0
 801a0e6:	697b      	ldr	r3, [r7, #20]
 801a0e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /*It can be set by `lv_anim_delete()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_completed_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        state.anim_list_changed = false;
 801a0ea:	4b5c      	ldr	r3, [pc, #368]	@ (801a25c <anim_timer+0x1bc>)
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

        if(a->run_round != state.anim_run_round) {
 801a0f2:	697b      	ldr	r3, [r7, #20]
 801a0f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a0f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a0fc:	b2da      	uxtb	r2, r3
 801a0fe:	4b57      	ldr	r3, [pc, #348]	@ (801a25c <anim_timer+0x1bc>)
 801a100:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 801a104:	429a      	cmp	r2, r3
 801a106:	f000 8090 	beq.w	801a22a <anim_timer+0x18a>
            a->run_round = state.anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 801a10a:	4b54      	ldr	r3, [pc, #336]	@ (801a25c <anim_timer+0x1bc>)
 801a10c:	f893 10b1 	ldrb.w	r1, [r3, #177]	@ 0xb1
 801a110:	697a      	ldr	r2, [r7, #20]
 801a112:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 801a116:	f361 0341 	bfi	r3, r1, #1, #1
 801a11a:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54

            /*The animation will run now for the first time. Call `start_cb`*/
            if(!a->start_cb_called && a->act_time >= 0) {
 801a11e:	697b      	ldr	r3, [r7, #20]
 801a120:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a124:	f003 0304 	and.w	r3, r3, #4
 801a128:	b2db      	uxtb	r3, r3
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d135      	bne.n	801a19a <anim_timer+0xfa>
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a132:	2b00      	cmp	r3, #0
 801a134:	db31      	blt.n	801a19a <anim_timer+0xfa>

                if(a->early_apply == 0 && a->get_value_cb) {
 801a136:	697b      	ldr	r3, [r7, #20]
 801a138:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 801a13c:	f003 0301 	and.w	r3, r3, #1
 801a140:	b2db      	uxtb	r3, r3
 801a142:	2b00      	cmp	r3, #0
 801a144:	d114      	bne.n	801a170 <anim_timer+0xd0>
 801a146:	697b      	ldr	r3, [r7, #20]
 801a148:	699b      	ldr	r3, [r3, #24]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d010      	beq.n	801a170 <anim_timer+0xd0>
                    int32_t v_ofs = a->get_value_cb(a);
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	699b      	ldr	r3, [r3, #24]
 801a152:	6978      	ldr	r0, [r7, #20]
 801a154:	4798      	blx	r3
 801a156:	60f8      	str	r0, [r7, #12]
                    a->start_value += v_ofs;
 801a158:	697b      	ldr	r3, [r7, #20]
 801a15a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	441a      	add	r2, r3
 801a160:	697b      	ldr	r3, [r7, #20]
 801a162:	625a      	str	r2, [r3, #36]	@ 0x24
                    a->end_value += v_ofs;
 801a164:	697b      	ldr	r3, [r7, #20]
 801a166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	441a      	add	r2, r3
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                resolve_time(a);
 801a170:	6978      	ldr	r0, [r7, #20]
 801a172:	f000 f966 	bl	801a442 <resolve_time>

                if(a->start_cb) a->start_cb(a);
 801a176:	697b      	ldr	r3, [r7, #20]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d003      	beq.n	801a186 <anim_timer+0xe6>
 801a17e:	697b      	ldr	r3, [r7, #20]
 801a180:	68db      	ldr	r3, [r3, #12]
 801a182:	6978      	ldr	r0, [r7, #20]
 801a184:	4798      	blx	r3
                a->start_cb_called = 1;
 801a186:	697a      	ldr	r2, [r7, #20]
 801a188:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 801a18c:	f043 0304 	orr.w	r3, r3, #4
 801a190:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54

                /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
                remove_concurrent_anims(a);
 801a194:	6978      	ldr	r0, [r7, #20]
 801a196:	f000 f98f 	bl	801a4b8 <remove_concurrent_anims>
            }

            if(a->act_time >= 0) {
 801a19a:	697b      	ldr	r3, [r7, #20]
 801a19c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	db43      	blt.n	801a22a <anim_timer+0x18a>
                if(a->act_time > a->duration) a->act_time = a->duration;
 801a1a2:	697b      	ldr	r3, [r7, #20]
 801a1a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a1a6:	697b      	ldr	r3, [r7, #20]
 801a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a1aa:	429a      	cmp	r2, r3
 801a1ac:	dd03      	ble.n	801a1b6 <anim_timer+0x116>
 801a1ae:	697b      	ldr	r3, [r7, #20]
 801a1b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a1b2:	697b      	ldr	r3, [r7, #20]
 801a1b4:	635a      	str	r2, [r3, #52]	@ 0x34

                int32_t new_value;
                new_value = a->path_cb(a);
 801a1b6:	697b      	ldr	r3, [r7, #20]
 801a1b8:	6a1b      	ldr	r3, [r3, #32]
 801a1ba:	6978      	ldr	r0, [r7, #20]
 801a1bc:	4798      	blx	r3
 801a1be:	60b8      	str	r0, [r7, #8]

                if(new_value != a->current_value) {
 801a1c0:	697b      	ldr	r3, [r7, #20]
 801a1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a1c4:	68ba      	ldr	r2, [r7, #8]
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d01e      	beq.n	801a208 <anim_timer+0x168>
                    a->current_value = new_value;
 801a1ca:	697b      	ldr	r3, [r7, #20]
 801a1cc:	68ba      	ldr	r2, [r7, #8]
 801a1ce:	629a      	str	r2, [r3, #40]	@ 0x28
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d006      	beq.n	801a1e6 <anim_timer+0x146>
 801a1d8:	697b      	ldr	r3, [r7, #20]
 801a1da:	685b      	ldr	r3, [r3, #4]
 801a1dc:	697a      	ldr	r2, [r7, #20]
 801a1de:	6812      	ldr	r2, [r2, #0]
 801a1e0:	68b9      	ldr	r1, [r7, #8]
 801a1e2:	4610      	mov	r0, r2
 801a1e4:	4798      	blx	r3
                    if(!state.anim_list_changed && a->custom_exec_cb) a->custom_exec_cb(a, new_value);
 801a1e6:	4b1d      	ldr	r3, [pc, #116]	@ (801a25c <anim_timer+0x1bc>)
 801a1e8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 801a1ec:	f083 0301 	eor.w	r3, r3, #1
 801a1f0:	b2db      	uxtb	r3, r3
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d008      	beq.n	801a208 <anim_timer+0x168>
 801a1f6:	697b      	ldr	r3, [r7, #20]
 801a1f8:	689b      	ldr	r3, [r3, #8]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d004      	beq.n	801a208 <anim_timer+0x168>
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	689b      	ldr	r3, [r3, #8]
 801a202:	68b9      	ldr	r1, [r7, #8]
 801a204:	6978      	ldr	r0, [r7, #20]
 801a206:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(!state.anim_list_changed && a->act_time >= a->duration) {
 801a208:	4b14      	ldr	r3, [pc, #80]	@ (801a25c <anim_timer+0x1bc>)
 801a20a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 801a20e:	f083 0301 	eor.w	r3, r3, #1
 801a212:	b2db      	uxtb	r3, r3
 801a214:	2b00      	cmp	r3, #0
 801a216:	d008      	beq.n	801a22a <anim_timer+0x18a>
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a21c:	697b      	ldr	r3, [r7, #20]
 801a21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a220:	429a      	cmp	r2, r3
 801a222:	db02      	blt.n	801a22a <anim_timer+0x18a>
                    anim_completed_handler(a);
 801a224:	6978      	ldr	r0, [r7, #20]
 801a226:	f000 f81d 	bl	801a264 <anim_completed_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(state.anim_list_changed)
 801a22a:	4b0c      	ldr	r3, [pc, #48]	@ (801a25c <anim_timer+0x1bc>)
 801a22c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 801a230:	2b00      	cmp	r3, #0
 801a232:	d004      	beq.n	801a23e <anim_timer+0x19e>
            a = _lv_ll_get_head(anim_ll_p);
 801a234:	480a      	ldr	r0, [pc, #40]	@ (801a260 <anim_timer+0x1c0>)
 801a236:	f001 fe26 	bl	801be86 <_lv_ll_get_head>
 801a23a:	6178      	str	r0, [r7, #20]
 801a23c:	e004      	b.n	801a248 <anim_timer+0x1a8>
        else
            a = _lv_ll_get_next(anim_ll_p, a);
 801a23e:	6979      	ldr	r1, [r7, #20]
 801a240:	4807      	ldr	r0, [pc, #28]	@ (801a260 <anim_timer+0x1c0>)
 801a242:	f001 fe42 	bl	801beca <_lv_ll_get_next>
 801a246:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 801a248:	697b      	ldr	r3, [r7, #20]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	f47f af3a 	bne.w	801a0c4 <anim_timer+0x24>
    }

}
 801a250:	bf00      	nop
 801a252:	bf00      	nop
 801a254:	3718      	adds	r7, #24
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	2000008c 	.word	0x2000008c
 801a260:	20000144 	.word	0x20000144

0801a264 <anim_completed_handler>:
 * Called when an animation is completed to do the necessary things
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_completed_handler(lv_anim_t * a)
{
 801a264:	b580      	push	{r7, lr}
 801a266:	b084      	sub	sp, #16
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a272:	f003 0301 	and.w	r3, r3, #1
 801a276:	b2db      	uxtb	r3, r3
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d113      	bne.n	801a2a4 <anim_completed_handler+0x40>
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801a282:	2b00      	cmp	r3, #0
 801a284:	d00e      	beq.n	801a2a4 <anim_completed_handler+0x40>
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801a28c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a290:	4293      	cmp	r3, r2
 801a292:	d007      	beq.n	801a2a4 <anim_completed_handler+0x40>
        a->repeat_cnt--;
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801a29a:	3b01      	subs	r3, #1
 801a29c:	b29a      	uxth	r2, r3
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_duration == 0 || a->playback_now == 1)) {
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d125      	bne.n	801a2fa <anim_completed_handler+0x96>
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d007      	beq.n	801a2c6 <anim_completed_handler+0x62>
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a2bc:	f003 0301 	and.w	r3, r3, #1
 801a2c0:	b2db      	uxtb	r3, r3
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d019      	beq.n	801a2fa <anim_completed_handler+0x96>

        /*Delete the animation from the list.
         * This way the `completed_cb` will see the animations like it's animation is already deleted*/
        _lv_ll_remove(anim_ll_p, a);
 801a2c6:	6879      	ldr	r1, [r7, #4]
 801a2c8:	482c      	ldr	r0, [pc, #176]	@ (801a37c <anim_completed_handler+0x118>)
 801a2ca:	f001 fd7f 	bl	801bdcc <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 801a2ce:	f000 f857 	bl	801a380 <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->completed_cb != NULL) a->completed_cb(a);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	691b      	ldr	r3, [r3, #16]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d003      	beq.n	801a2e2 <anim_completed_handler+0x7e>
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	691b      	ldr	r3, [r3, #16]
 801a2de:	6878      	ldr	r0, [r7, #4]
 801a2e0:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	695b      	ldr	r3, [r3, #20]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d003      	beq.n	801a2f2 <anim_completed_handler+0x8e>
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	695b      	ldr	r3, [r3, #20]
 801a2ee:	6878      	ldr	r0, [r7, #4]
 801a2f0:	4798      	blx	r3
        lv_free(a);
 801a2f2:	6878      	ldr	r0, [r7, #4]
 801a2f4:	f003 ff08 	bl	801e108 <lv_free>
            tmp = a->duration;
            a->duration = a->playback_duration;
            a->playback_duration = tmp;
        }
    }
}
 801a2f8:	e03c      	b.n	801a374 <anim_completed_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a2fe:	425a      	negs	r2, r3
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	635a      	str	r2, [r3, #52]	@ 0x34
        if(a->playback_duration != 0) {
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d033      	beq.n	801a374 <anim_completed_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a312:	f003 0301 	and.w	r3, r3, #1
 801a316:	b2db      	uxtb	r3, r3
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d104      	bne.n	801a326 <anim_completed_handler+0xc2>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a320:	425a      	negs	r2, r3
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	635a      	str	r2, [r3, #52]	@ 0x34
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a32c:	f003 0301 	and.w	r3, r3, #1
 801a330:	b2db      	uxtb	r3, r3
 801a332:	2b00      	cmp	r3, #0
 801a334:	bf0c      	ite	eq
 801a336:	2301      	moveq	r3, #1
 801a338:	2300      	movne	r3, #0
 801a33a:	b2d9      	uxtb	r1, r3
 801a33c:	687a      	ldr	r2, [r7, #4]
 801a33e:	f892 3054 	ldrb.w	r3, [r2, #84]	@ 0x54
 801a342:	f361 0300 	bfi	r3, r1, #0, #1
 801a346:	f882 3054 	strb.w	r3, [r2, #84]	@ 0x54
            int32_t tmp    = a->start_value;
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a34e:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	625a      	str	r2, [r3, #36]	@ 0x24
            a->end_value   = tmp;
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	68fa      	ldr	r2, [r7, #12]
 801a35c:	62da      	str	r2, [r3, #44]	@ 0x2c
            tmp = a->duration;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a362:	60fb      	str	r3, [r7, #12]
            a->duration = a->playback_duration;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a368:	461a      	mov	r2, r3
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	631a      	str	r2, [r3, #48]	@ 0x30
            a->playback_duration = tmp;
 801a36e:	68fa      	ldr	r2, [r7, #12]
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 801a374:	bf00      	nop
 801a376:	3710      	adds	r7, #16
 801a378:	46bd      	mov	sp, r7
 801a37a:	bd80      	pop	{r7, pc}
 801a37c:	20000144 	.word	0x20000144

0801a380 <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	af00      	add	r7, sp, #0
    state.anim_list_changed = true;
 801a384:	4b0c      	ldr	r3, [pc, #48]	@ (801a3b8 <anim_mark_list_change+0x38>)
 801a386:	2201      	movs	r2, #1
 801a388:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    if(_lv_ll_get_head(anim_ll_p) == NULL)
 801a38c:	480b      	ldr	r0, [pc, #44]	@ (801a3bc <anim_mark_list_change+0x3c>)
 801a38e:	f001 fd7a 	bl	801be86 <_lv_ll_get_head>
 801a392:	4603      	mov	r3, r0
 801a394:	2b00      	cmp	r3, #0
 801a396:	d106      	bne.n	801a3a6 <anim_mark_list_change+0x26>
        lv_timer_pause(state.timer);
 801a398:	4b07      	ldr	r3, [pc, #28]	@ (801a3b8 <anim_mark_list_change+0x38>)
 801a39a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f002 fb4c 	bl	801ca3c <lv_timer_pause>
    else
        lv_timer_resume(state.timer);
}
 801a3a4:	e005      	b.n	801a3b2 <anim_mark_list_change+0x32>
        lv_timer_resume(state.timer);
 801a3a6:	4b04      	ldr	r3, [pc, #16]	@ (801a3b8 <anim_mark_list_change+0x38>)
 801a3a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	f002 fb59 	bl	801ca64 <lv_timer_resume>
}
 801a3b2:	bf00      	nop
 801a3b4:	bd80      	pop	{r7, pc}
 801a3b6:	bf00      	nop
 801a3b8:	2000008c 	.word	0x2000008c
 801a3bc:	20000144 	.word	0x20000144

0801a3c0 <convert_speed_to_time>:

    return new_value;
}

static uint32_t convert_speed_to_time(uint32_t speed_or_time, int32_t start, int32_t end)
{
 801a3c0:	b480      	push	{r7}
 801a3c2:	b08b      	sub	sp, #44	@ 0x2c
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	60f8      	str	r0, [r7, #12]
 801a3c8:	60b9      	str	r1, [r7, #8]
 801a3ca:	607a      	str	r2, [r7, #4]
    /*It was a simple time*/
    if((speed_or_time & 0x80000000) == 0) return speed_or_time;
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	db01      	blt.n	801a3d6 <convert_speed_to_time+0x16>
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	e02f      	b.n	801a436 <convert_speed_to_time+0x76>

    uint32_t d    = LV_ABS(start - end);
 801a3d6:	68ba      	ldr	r2, [r7, #8]
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	1ad3      	subs	r3, r2, r3
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	bfb8      	it	lt
 801a3e0:	425b      	neglt	r3, r3
 801a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t speed = speed_or_time & 0x3FF;
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a3ea:	623b      	str	r3, [r7, #32]
    uint32_t time = (d * 100) / speed; /*Speed is in 10 units per sec*/
 801a3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ee:	2264      	movs	r2, #100	@ 0x64
 801a3f0:	fb03 f202 	mul.w	r2, r3, r2
 801a3f4:	6a3b      	ldr	r3, [r7, #32]
 801a3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3fa:	61fb      	str	r3, [r7, #28]
    uint32_t max_time = (speed_or_time >> 20) & 0x3FF;
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	0d1b      	lsrs	r3, r3, #20
 801a400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a404:	61bb      	str	r3, [r7, #24]
    uint32_t min_time = (speed_or_time >> 10) & 0x3FF;
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	0a9b      	lsrs	r3, r3, #10
 801a40a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a40e:	617b      	str	r3, [r7, #20]

    return LV_CLAMP(min_time * 10, time, max_time * 10);
 801a410:	69ba      	ldr	r2, [r7, #24]
 801a412:	4613      	mov	r3, r2
 801a414:	009b      	lsls	r3, r3, #2
 801a416:	4413      	add	r3, r2
 801a418:	005b      	lsls	r3, r3, #1
 801a41a:	461a      	mov	r2, r3
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	429a      	cmp	r2, r3
 801a420:	bf28      	it	cs
 801a422:	461a      	movcs	r2, r3
 801a424:	4611      	mov	r1, r2
 801a426:	697a      	ldr	r2, [r7, #20]
 801a428:	4613      	mov	r3, r2
 801a42a:	009b      	lsls	r3, r3, #2
 801a42c:	4413      	add	r3, r2
 801a42e:	005b      	lsls	r3, r3, #1
 801a430:	428b      	cmp	r3, r1
 801a432:	bf38      	it	cc
 801a434:	460b      	movcc	r3, r1
}
 801a436:	4618      	mov	r0, r3
 801a438:	372c      	adds	r7, #44	@ 0x2c
 801a43a:	46bd      	mov	sp, r7
 801a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a440:	4770      	bx	lr

0801a442 <resolve_time>:

static void resolve_time(lv_anim_t * a)
{
 801a442:	b580      	push	{r7, lr}
 801a444:	b082      	sub	sp, #8
 801a446:	af00      	add	r7, sp, #0
 801a448:	6078      	str	r0, [r7, #4]
    a->duration = convert_speed_to_time(a->duration, a->start_value, a->end_value);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a44e:	4618      	mov	r0, r3
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a458:	461a      	mov	r2, r3
 801a45a:	f7ff ffb1 	bl	801a3c0 <convert_speed_to_time>
 801a45e:	4603      	mov	r3, r0
 801a460:	461a      	mov	r2, r3
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	631a      	str	r2, [r3, #48]	@ 0x30
    a->playback_duration = convert_speed_to_time(a->playback_duration, a->start_value, a->end_value);
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a472:	461a      	mov	r2, r3
 801a474:	f7ff ffa4 	bl	801a3c0 <convert_speed_to_time>
 801a478:	4602      	mov	r2, r0
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	63da      	str	r2, [r3, #60]	@ 0x3c
    a->playback_delay = convert_speed_to_time(a->playback_delay, a->start_value, a->end_value);
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a48a:	461a      	mov	r2, r3
 801a48c:	f7ff ff98 	bl	801a3c0 <convert_speed_to_time>
 801a490:	4602      	mov	r2, r0
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	639a      	str	r2, [r3, #56]	@ 0x38
    a->repeat_delay = convert_speed_to_time(a->repeat_delay, a->start_value, a->end_value);
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4a2:	461a      	mov	r2, r3
 801a4a4:	f7ff ff8c 	bl	801a3c0 <convert_speed_to_time>
 801a4a8:	4602      	mov	r2, r0
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801a4ae:	bf00      	nop
 801a4b0:	3708      	adds	r7, #8
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
	...

0801a4b8 <remove_concurrent_anims>:
 * and they are already running or they have early_apply
 * @param a_current     the current animation, use its var and exec_cb as reference to know what to remove
 * @return              true: at least one animation was delete
 */
static bool remove_concurrent_anims(lv_anim_t * a_current)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
    if(a_current->exec_cb == NULL && a_current->custom_exec_cb == NULL) return false;
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	685b      	ldr	r3, [r3, #4]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d105      	bne.n	801a4d4 <remove_concurrent_anims+0x1c>
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	689b      	ldr	r3, [r3, #8]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d101      	bne.n	801a4d4 <remove_concurrent_anims+0x1c>
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	e04f      	b.n	801a574 <remove_concurrent_anims+0xbc>

    lv_anim_t * a;
    bool del_any = false;
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	72fb      	strb	r3, [r7, #11]
    a = _lv_ll_get_head(anim_ll_p);
 801a4d8:	4828      	ldr	r0, [pc, #160]	@ (801a57c <remove_concurrent_anims+0xc4>)
 801a4da:	f001 fcd4 	bl	801be86 <_lv_ll_get_head>
 801a4de:	60f8      	str	r0, [r7, #12]
    while(a != NULL) {
 801a4e0:	e044      	b.n	801a56c <remove_concurrent_anims+0xb4>
        bool del = false;
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	72bb      	strb	r3, [r7, #10]
        /*We can't test for custom_exec_cb equality because in the MicroPython binding
         *a wrapper callback is used here an the real callback data is stored in the `user_data`.
         *Therefore equality check would remove all animations.*/
        if(a != a_current &&
 801a4e6:	68fa      	ldr	r2, [r7, #12]
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	429a      	cmp	r2, r3
 801a4ec:	d030      	beq.n	801a550 <remove_concurrent_anims+0x98>
           (a->act_time >= 0 || a->early_apply) &&
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if(a != a_current &&
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	da07      	bge.n	801a506 <remove_concurrent_anims+0x4e>
           (a->act_time >= 0 || a->early_apply) &&
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 801a4fc:	f003 0301 	and.w	r3, r3, #1
 801a500:	b2db      	uxtb	r3, r3
 801a502:	2b00      	cmp	r3, #0
 801a504:	d024      	beq.n	801a550 <remove_concurrent_anims+0x98>
           (a->var == a_current->var) &&
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	681a      	ldr	r2, [r3, #0]
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
           (a->act_time >= 0 || a->early_apply) &&
 801a50e:	429a      	cmp	r2, r3
 801a510:	d11e      	bne.n	801a550 <remove_concurrent_anims+0x98>
           ((a->exec_cb && a->exec_cb == a_current->exec_cb)
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	685b      	ldr	r3, [r3, #4]
           (a->var == a_current->var) &&
 801a516:	2b00      	cmp	r3, #0
 801a518:	d01a      	beq.n	801a550 <remove_concurrent_anims+0x98>
           ((a->exec_cb && a->exec_cb == a_current->exec_cb)
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	685a      	ldr	r2, [r3, #4]
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	685b      	ldr	r3, [r3, #4]
 801a522:	429a      	cmp	r2, r3
 801a524:	d114      	bne.n	801a550 <remove_concurrent_anims+0x98>
            /*|| (a->custom_exec_cb && a->custom_exec_cb == a_current->custom_exec_cb)*/)) {
            _lv_ll_remove(anim_ll_p, a);
 801a526:	68f9      	ldr	r1, [r7, #12]
 801a528:	4814      	ldr	r0, [pc, #80]	@ (801a57c <remove_concurrent_anims+0xc4>)
 801a52a:	f001 fc4f 	bl	801bdcc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	695b      	ldr	r3, [r3, #20]
 801a532:	2b00      	cmp	r3, #0
 801a534:	d003      	beq.n	801a53e <remove_concurrent_anims+0x86>
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	695b      	ldr	r3, [r3, #20]
 801a53a:	68f8      	ldr	r0, [r7, #12]
 801a53c:	4798      	blx	r3
            lv_free(a);
 801a53e:	68f8      	ldr	r0, [r7, #12]
 801a540:	f003 fde2 	bl	801e108 <lv_free>
            /*Read by `anim_timer`. It need to know if a delete occurred in the linked list*/
            anim_mark_list_change();
 801a544:	f7ff ff1c 	bl	801a380 <anim_mark_list_change>

            del_any = true;
 801a548:	2301      	movs	r3, #1
 801a54a:	72fb      	strb	r3, [r7, #11]
            del = true;
 801a54c:	2301      	movs	r3, #1
 801a54e:	72bb      	strb	r3, [r7, #10]
        }

        /*Always start from the head on delete, because we don't know
         *how `anim_ll_p` was changes in `a->deleted_cb` */
        a = del ? _lv_ll_get_head(anim_ll_p) : _lv_ll_get_next(anim_ll_p, a);
 801a550:	7abb      	ldrb	r3, [r7, #10]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d004      	beq.n	801a560 <remove_concurrent_anims+0xa8>
 801a556:	4809      	ldr	r0, [pc, #36]	@ (801a57c <remove_concurrent_anims+0xc4>)
 801a558:	f001 fc95 	bl	801be86 <_lv_ll_get_head>
 801a55c:	4603      	mov	r3, r0
 801a55e:	e004      	b.n	801a56a <remove_concurrent_anims+0xb2>
 801a560:	68f9      	ldr	r1, [r7, #12]
 801a562:	4806      	ldr	r0, [pc, #24]	@ (801a57c <remove_concurrent_anims+0xc4>)
 801a564:	f001 fcb1 	bl	801beca <_lv_ll_get_next>
 801a568:	4603      	mov	r3, r0
 801a56a:	60fb      	str	r3, [r7, #12]
    while(a != NULL) {
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d1b7      	bne.n	801a4e2 <remove_concurrent_anims+0x2a>
    }

    return del_any;
 801a572:	7afb      	ldrb	r3, [r7, #11]
}
 801a574:	4618      	mov	r0, r3
 801a576:	3710      	adds	r7, #16
 801a578:	46bd      	mov	sp, r7
 801a57a:	bd80      	pop	{r7, pc}
 801a57c:	20000144 	.word	0x20000144

0801a580 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
{
 801a580:	b480      	push	{r7}
 801a582:	b083      	sub	sp, #12
 801a584:	af00      	add	r7, sp, #0
 801a586:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->x2 - area_p->x1 + 1);
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	689a      	ldr	r2, [r3, #8]
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	1ad3      	subs	r3, r2, r3
 801a592:	3301      	adds	r3, #1
}
 801a594:	4618      	mov	r0, r3
 801a596:	370c      	adds	r7, #12
 801a598:	46bd      	mov	sp, r7
 801a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a59e:	4770      	bx	lr

0801a5a0 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b083      	sub	sp, #12
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
    return (int32_t)(area_p->y2 - area_p->y1 + 1);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	68da      	ldr	r2, [r3, #12]
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	1ad3      	subs	r3, r2, r3
 801a5b2:	3301      	adds	r3, #1
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	370c      	adds	r7, #12
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5be:	4770      	bx	lr

0801a5c0 <lv_point_set>:

    return point;
}

static inline void lv_point_set(lv_point_t * p, int32_t x, int32_t y)
{
 801a5c0:	b480      	push	{r7}
 801a5c2:	b085      	sub	sp, #20
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	60f8      	str	r0, [r7, #12]
 801a5c8:	60b9      	str	r1, [r7, #8]
 801a5ca:	607a      	str	r2, [r7, #4]
    p->x = x;
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	68ba      	ldr	r2, [r7, #8]
 801a5d0:	601a      	str	r2, [r3, #0]
    p->y = y;
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	687a      	ldr	r2, [r7, #4]
 801a5d6:	605a      	str	r2, [r3, #4]
}
 801a5d8:	bf00      	nop
 801a5da:	3714      	adds	r7, #20
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e2:	4770      	bx	lr

0801a5e4 <lv_area_set>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_area_set(lv_area_t * area_p, int32_t x1, int32_t y1, int32_t x2, int32_t y2)
{
 801a5e4:	b480      	push	{r7}
 801a5e6:	b085      	sub	sp, #20
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	60f8      	str	r0, [r7, #12]
 801a5ec:	60b9      	str	r1, [r7, #8]
 801a5ee:	607a      	str	r2, [r7, #4]
 801a5f0:	603b      	str	r3, [r7, #0]
    area_p->x1 = x1;
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	68ba      	ldr	r2, [r7, #8]
 801a5f6:	601a      	str	r2, [r3, #0]
    area_p->y1 = y1;
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	687a      	ldr	r2, [r7, #4]
 801a5fc:	605a      	str	r2, [r3, #4]
    area_p->x2 = x2;
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	683a      	ldr	r2, [r7, #0]
 801a602:	609a      	str	r2, [r3, #8]
    area_p->y2 = y2;
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	69ba      	ldr	r2, [r7, #24]
 801a608:	60da      	str	r2, [r3, #12]
}
 801a60a:	bf00      	nop
 801a60c:	3714      	adds	r7, #20
 801a60e:	46bd      	mov	sp, r7
 801a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a614:	4770      	bx	lr

0801a616 <lv_area_set_width>:

void lv_area_set_width(lv_area_t * area_p, int32_t w)
{
 801a616:	b480      	push	{r7}
 801a618:	b083      	sub	sp, #12
 801a61a:	af00      	add	r7, sp, #0
 801a61c:	6078      	str	r0, [r7, #4]
 801a61e:	6039      	str	r1, [r7, #0]
    area_p->x2 = area_p->x1 + w - 1;
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681a      	ldr	r2, [r3, #0]
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	4413      	add	r3, r2
 801a628:	1e5a      	subs	r2, r3, #1
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	609a      	str	r2, [r3, #8]
}
 801a62e:	bf00      	nop
 801a630:	370c      	adds	r7, #12
 801a632:	46bd      	mov	sp, r7
 801a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a638:	4770      	bx	lr

0801a63a <lv_area_set_height>:

void lv_area_set_height(lv_area_t * area_p, int32_t h)
{
 801a63a:	b480      	push	{r7}
 801a63c:	b083      	sub	sp, #12
 801a63e:	af00      	add	r7, sp, #0
 801a640:	6078      	str	r0, [r7, #4]
 801a642:	6039      	str	r1, [r7, #0]
    area_p->y2 = area_p->y1 + h - 1;
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	685a      	ldr	r2, [r3, #4]
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	4413      	add	r3, r2
 801a64c:	1e5a      	subs	r2, r3, #1
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	60da      	str	r2, [r3, #12]
}
 801a652:	bf00      	nop
 801a654:	370c      	adds	r7, #12
 801a656:	46bd      	mov	sp, r7
 801a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a65c:	4770      	bx	lr

0801a65e <lv_area_get_size>:
    lv_area_set_width(area_p, w);
    lv_area_set_height(area_p, h);
}

uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801a65e:	b480      	push	{r7}
 801a660:	b085      	sub	sp, #20
 801a662:	af00      	add	r7, sp, #0
 801a664:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	689a      	ldr	r2, [r3, #8]
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	1ad3      	subs	r3, r2, r3
 801a670:	3301      	adds	r3, #1
 801a672:	4619      	mov	r1, r3
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	68da      	ldr	r2, [r3, #12]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	685b      	ldr	r3, [r3, #4]
 801a67c:	1ad3      	subs	r3, r2, r3
 801a67e:	3301      	adds	r3, #1
 801a680:	fb01 f303 	mul.w	r3, r1, r3
 801a684:	60fb      	str	r3, [r7, #12]

    return size;
 801a686:	68fb      	ldr	r3, [r7, #12]
}
 801a688:	4618      	mov	r0, r3
 801a68a:	3714      	adds	r7, #20
 801a68c:	46bd      	mov	sp, r7
 801a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a692:	4770      	bx	lr

0801a694 <lv_area_increase>:

void lv_area_increase(lv_area_t * area, int32_t w_extra, int32_t h_extra)
{
 801a694:	b480      	push	{r7}
 801a696:	b085      	sub	sp, #20
 801a698:	af00      	add	r7, sp, #0
 801a69a:	60f8      	str	r0, [r7, #12]
 801a69c:	60b9      	str	r1, [r7, #8]
 801a69e:	607a      	str	r2, [r7, #4]
    area->x1 -= w_extra;
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	681a      	ldr	r2, [r3, #0]
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	1ad2      	subs	r2, r2, r3
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	601a      	str	r2, [r3, #0]
    area->x2 += w_extra;
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	689a      	ldr	r2, [r3, #8]
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	441a      	add	r2, r3
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	609a      	str	r2, [r3, #8]
    area->y1 -= h_extra;
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	685a      	ldr	r2, [r3, #4]
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	1ad2      	subs	r2, r2, r3
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	605a      	str	r2, [r3, #4]
    area->y2 += h_extra;
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	68da      	ldr	r2, [r3, #12]
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	441a      	add	r2, r3
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	60da      	str	r2, [r3, #12]
}
 801a6d0:	bf00      	nop
 801a6d2:	3714      	adds	r7, #20
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6da:	4770      	bx	lr

0801a6dc <lv_area_move>:

void lv_area_move(lv_area_t * area, int32_t x_ofs, int32_t y_ofs)
{
 801a6dc:	b480      	push	{r7}
 801a6de:	b085      	sub	sp, #20
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	60f8      	str	r0, [r7, #12]
 801a6e4:	60b9      	str	r1, [r7, #8]
 801a6e6:	607a      	str	r2, [r7, #4]
    area->x1 += x_ofs;
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	681a      	ldr	r2, [r3, #0]
 801a6ec:	68bb      	ldr	r3, [r7, #8]
 801a6ee:	441a      	add	r2, r3
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	601a      	str	r2, [r3, #0]
    area->x2 += x_ofs;
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	689a      	ldr	r2, [r3, #8]
 801a6f8:	68bb      	ldr	r3, [r7, #8]
 801a6fa:	441a      	add	r2, r3
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	609a      	str	r2, [r3, #8]
    area->y1 += y_ofs;
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	685a      	ldr	r2, [r3, #4]
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	441a      	add	r2, r3
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	605a      	str	r2, [r3, #4]
    area->y2 += y_ofs;
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	68da      	ldr	r2, [r3, #12]
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	441a      	add	r2, r3
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	60da      	str	r2, [r3, #12]
}
 801a718:	bf00      	nop
 801a71a:	3714      	adds	r7, #20
 801a71c:	46bd      	mov	sp, r7
 801a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a722:	4770      	bx	lr

0801a724 <_lv_area_intersect>:

bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801a724:	b480      	push	{r7}
 801a726:	b087      	sub	sp, #28
 801a728:	af00      	add	r7, sp, #0
 801a72a:	60f8      	str	r0, [r7, #12]
 801a72c:	60b9      	str	r1, [r7, #8]
 801a72e:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681a      	ldr	r2, [r3, #0]
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	429a      	cmp	r2, r3
 801a73a:	bfb8      	it	lt
 801a73c:	461a      	movlt	r2, r3
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	601a      	str	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	685a      	ldr	r2, [r3, #4]
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	685b      	ldr	r3, [r3, #4]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	bfb8      	it	lt
 801a74e:	461a      	movlt	r2, r3
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	605a      	str	r2, [r3, #4]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	689a      	ldr	r2, [r3, #8]
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	689b      	ldr	r3, [r3, #8]
 801a75c:	429a      	cmp	r2, r3
 801a75e:	bfa8      	it	ge
 801a760:	461a      	movge	r2, r3
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	609a      	str	r2, [r3, #8]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	68da      	ldr	r2, [r3, #12]
 801a76a:	68bb      	ldr	r3, [r7, #8]
 801a76c:	68db      	ldr	r3, [r3, #12]
 801a76e:	429a      	cmp	r2, r3
 801a770:	bfa8      	it	ge
 801a772:	461a      	movge	r2, r3
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	60da      	str	r2, [r3, #12]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 801a778:	2301      	movs	r3, #1
 801a77a:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	681a      	ldr	r2, [r3, #0]
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	689b      	ldr	r3, [r3, #8]
 801a784:	429a      	cmp	r2, r3
 801a786:	dc05      	bgt.n	801a794 <_lv_area_intersect+0x70>
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	685a      	ldr	r2, [r3, #4]
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	68db      	ldr	r3, [r3, #12]
 801a790:	429a      	cmp	r2, r3
 801a792:	dd01      	ble.n	801a798 <_lv_area_intersect+0x74>
        union_ok = false;
 801a794:	2300      	movs	r3, #0
 801a796:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 801a798:	7dfb      	ldrb	r3, [r7, #23]
}
 801a79a:	4618      	mov	r0, r3
 801a79c:	371c      	adds	r7, #28
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a4:	4770      	bx	lr

0801a7a6 <_lv_area_is_point_on>:
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
}

bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, int32_t radius)
{
 801a7a6:	b580      	push	{r7, lr}
 801a7a8:	b08c      	sub	sp, #48	@ 0x30
 801a7aa:	af00      	add	r7, sp, #0
 801a7ac:	60f8      	str	r0, [r7, #12]
 801a7ae:	60b9      	str	r1, [r7, #8]
 801a7b0:	607a      	str	r2, [r7, #4]
    /*First check the basic area*/
    bool is_on_rect = false;
 801a7b2:	2300      	movs	r3, #0
 801a7b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	681a      	ldr	r2, [r3, #0]
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	db14      	blt.n	801a7ee <_lv_area_is_point_on+0x48>
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	681a      	ldr	r2, [r3, #0]
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	689b      	ldr	r3, [r3, #8]
 801a7cc:	429a      	cmp	r2, r3
 801a7ce:	dc0e      	bgt.n	801a7ee <_lv_area_is_point_on+0x48>
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	685a      	ldr	r2, [r3, #4]
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	685b      	ldr	r3, [r3, #4]
 801a7d8:	429a      	cmp	r2, r3
 801a7da:	db08      	blt.n	801a7ee <_lv_area_is_point_on+0x48>
 801a7dc:	68bb      	ldr	r3, [r7, #8]
 801a7de:	685a      	ldr	r2, [r3, #4]
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	68db      	ldr	r3, [r3, #12]
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	dc02      	bgt.n	801a7ee <_lv_area_is_point_on+0x48>
        is_on_rect = true;
 801a7e8:	2301      	movs	r3, #1
 801a7ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    if(!is_on_rect)
 801a7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7f2:	f083 0301 	eor.w	r3, r3, #1
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d001      	beq.n	801a800 <_lv_area_is_point_on+0x5a>
        return false;
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	e0b1      	b.n	801a964 <_lv_area_is_point_on+0x1be>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	2b00      	cmp	r3, #0
 801a804:	dc01      	bgt.n	801a80a <_lv_area_is_point_on+0x64>
        /*No radius, it is within the rectangle*/
        return true;
 801a806:	2301      	movs	r3, #1
 801a808:	e0ac      	b.n	801a964 <_lv_area_is_point_on+0x1be>
    }
    int32_t w = lv_area_get_width(a_p) / 2;
 801a80a:	68f8      	ldr	r0, [r7, #12]
 801a80c:	f7ff feb8 	bl	801a580 <lv_area_get_width>
 801a810:	4603      	mov	r3, r0
 801a812:	0fda      	lsrs	r2, r3, #31
 801a814:	4413      	add	r3, r2
 801a816:	105b      	asrs	r3, r3, #1
 801a818:	62bb      	str	r3, [r7, #40]	@ 0x28
    int32_t h = lv_area_get_height(a_p) / 2;
 801a81a:	68f8      	ldr	r0, [r7, #12]
 801a81c:	f7ff fec0 	bl	801a5a0 <lv_area_get_height>
 801a820:	4603      	mov	r3, r0
 801a822:	0fda      	lsrs	r2, r3, #31
 801a824:	4413      	add	r3, r2
 801a826:	105b      	asrs	r3, r3, #1
 801a828:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t max_radius = LV_MIN(w, h);
 801a82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a82e:	4293      	cmp	r3, r2
 801a830:	bfa8      	it	ge
 801a832:	4613      	movge	r3, r2
 801a834:	623b      	str	r3, [r7, #32]
    if(radius > max_radius)
 801a836:	687a      	ldr	r2, [r7, #4]
 801a838:	6a3b      	ldr	r3, [r7, #32]
 801a83a:	429a      	cmp	r2, r3
 801a83c:	dd01      	ble.n	801a842 <_lv_area_is_point_on+0x9c>
        radius = max_radius;
 801a83e:	6a3b      	ldr	r3, [r7, #32]
 801a840:	607b      	str	r3, [r7, #4]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	613b      	str	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	681a      	ldr	r2, [r3, #0]
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	4413      	add	r3, r2
 801a850:	61bb      	str	r3, [r7, #24]
    corner_area.y1 = a_p->y1;
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	685b      	ldr	r3, [r3, #4]
 801a856:	617b      	str	r3, [r7, #20]
    corner_area.y2 = a_p->y1 + radius;
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	685a      	ldr	r2, [r3, #4]
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	4413      	add	r3, r2
 801a860:	61fb      	str	r3, [r7, #28]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801a862:	f107 0310 	add.w	r3, r7, #16
 801a866:	2200      	movs	r2, #0
 801a868:	68b9      	ldr	r1, [r7, #8]
 801a86a:	4618      	mov	r0, r3
 801a86c:	f7ff ff9b 	bl	801a7a6 <_lv_area_is_point_on>
 801a870:	4603      	mov	r3, r0
 801a872:	2b00      	cmp	r3, #0
 801a874:	d00f      	beq.n	801a896 <_lv_area_is_point_on+0xf0>
        corner_area.x2 += radius;
 801a876:	69ba      	ldr	r2, [r7, #24]
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	4413      	add	r3, r2
 801a87c:	61bb      	str	r3, [r7, #24]
        corner_area.y2 += radius;
 801a87e:	69fa      	ldr	r2, [r7, #28]
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	4413      	add	r3, r2
 801a884:	61fb      	str	r3, [r7, #28]
        return lv_point_within_circle(&corner_area, p_p);
 801a886:	f107 0310 	add.w	r3, r7, #16
 801a88a:	68b9      	ldr	r1, [r7, #8]
 801a88c:	4618      	mov	r0, r3
 801a88e:	f000 fcb3 	bl	801b1f8 <lv_point_within_circle>
 801a892:	4603      	mov	r3, r0
 801a894:	e066      	b.n	801a964 <_lv_area_is_point_on+0x1be>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	68da      	ldr	r2, [r3, #12]
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	1ad3      	subs	r3, r2, r3
 801a89e:	617b      	str	r3, [r7, #20]
    corner_area.y2 = a_p->y2;
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	68db      	ldr	r3, [r3, #12]
 801a8a4:	61fb      	str	r3, [r7, #28]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801a8a6:	f107 0310 	add.w	r3, r7, #16
 801a8aa:	2200      	movs	r2, #0
 801a8ac:	68b9      	ldr	r1, [r7, #8]
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7ff ff79 	bl	801a7a6 <_lv_area_is_point_on>
 801a8b4:	4603      	mov	r3, r0
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d00f      	beq.n	801a8da <_lv_area_is_point_on+0x134>
        corner_area.x2 += radius;
 801a8ba:	69ba      	ldr	r2, [r7, #24]
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	4413      	add	r3, r2
 801a8c0:	61bb      	str	r3, [r7, #24]
        corner_area.y1 -= radius;
 801a8c2:	697a      	ldr	r2, [r7, #20]
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	1ad3      	subs	r3, r2, r3
 801a8c8:	617b      	str	r3, [r7, #20]
        return lv_point_within_circle(&corner_area, p_p);
 801a8ca:	f107 0310 	add.w	r3, r7, #16
 801a8ce:	68b9      	ldr	r1, [r7, #8]
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f000 fc91 	bl	801b1f8 <lv_point_within_circle>
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	e044      	b.n	801a964 <_lv_area_is_point_on+0x1be>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	689a      	ldr	r2, [r3, #8]
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	1ad3      	subs	r3, r2, r3
 801a8e2:	613b      	str	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	689b      	ldr	r3, [r3, #8]
 801a8e8:	61bb      	str	r3, [r7, #24]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801a8ea:	f107 0310 	add.w	r3, r7, #16
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	68b9      	ldr	r1, [r7, #8]
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	f7ff ff57 	bl	801a7a6 <_lv_area_is_point_on>
 801a8f8:	4603      	mov	r3, r0
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d00f      	beq.n	801a91e <_lv_area_is_point_on+0x178>
        corner_area.x1 -= radius;
 801a8fe:	693a      	ldr	r2, [r7, #16]
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	1ad3      	subs	r3, r2, r3
 801a904:	613b      	str	r3, [r7, #16]
        corner_area.y1 -= radius;
 801a906:	697a      	ldr	r2, [r7, #20]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	1ad3      	subs	r3, r2, r3
 801a90c:	617b      	str	r3, [r7, #20]
        return lv_point_within_circle(&corner_area, p_p);
 801a90e:	f107 0310 	add.w	r3, r7, #16
 801a912:	68b9      	ldr	r1, [r7, #8]
 801a914:	4618      	mov	r0, r3
 801a916:	f000 fc6f 	bl	801b1f8 <lv_point_within_circle>
 801a91a:	4603      	mov	r3, r0
 801a91c:	e022      	b.n	801a964 <_lv_area_is_point_on+0x1be>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	617b      	str	r3, [r7, #20]
    corner_area.y2 = a_p->y1 + radius;
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	685a      	ldr	r2, [r3, #4]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	4413      	add	r3, r2
 801a92c:	61fb      	str	r3, [r7, #28]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801a92e:	f107 0310 	add.w	r3, r7, #16
 801a932:	2200      	movs	r2, #0
 801a934:	68b9      	ldr	r1, [r7, #8]
 801a936:	4618      	mov	r0, r3
 801a938:	f7ff ff35 	bl	801a7a6 <_lv_area_is_point_on>
 801a93c:	4603      	mov	r3, r0
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00f      	beq.n	801a962 <_lv_area_is_point_on+0x1bc>
        corner_area.x1 -= radius;
 801a942:	693a      	ldr	r2, [r7, #16]
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	1ad3      	subs	r3, r2, r3
 801a948:	613b      	str	r3, [r7, #16]
        corner_area.y2 += radius;
 801a94a:	69fa      	ldr	r2, [r7, #28]
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	4413      	add	r3, r2
 801a950:	61fb      	str	r3, [r7, #28]
        return lv_point_within_circle(&corner_area, p_p);
 801a952:	f107 0310 	add.w	r3, r7, #16
 801a956:	68b9      	ldr	r1, [r7, #8]
 801a958:	4618      	mov	r0, r3
 801a95a:	f000 fc4d 	bl	801b1f8 <lv_point_within_circle>
 801a95e:	4603      	mov	r3, r0
 801a960:	e000      	b.n	801a964 <_lv_area_is_point_on+0x1be>
    }
    /*Not within corners*/
    return true;
 801a962:	2301      	movs	r3, #1
}
 801a964:	4618      	mov	r0, r3
 801a966:	3730      	adds	r7, #48	@ 0x30
 801a968:	46bd      	mov	sp, r7
 801a96a:	bd80      	pop	{r7, pc}

0801a96c <_lv_area_is_in>:
        return false;
    }
}

bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, int32_t radius)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b088      	sub	sp, #32
 801a970:	af00      	add	r7, sp, #0
 801a972:	60f8      	str	r0, [r7, #12]
 801a974:	60b9      	str	r1, [r7, #8]
 801a976:	607a      	str	r2, [r7, #4]
    bool is_in = false;
 801a978:	2300      	movs	r3, #0
 801a97a:	77fb      	strb	r3, [r7, #31]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	681a      	ldr	r2, [r3, #0]
 801a980:	68bb      	ldr	r3, [r7, #8]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	429a      	cmp	r2, r3
 801a986:	db13      	blt.n	801a9b0 <_lv_area_is_in+0x44>
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	685a      	ldr	r2, [r3, #4]
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	685b      	ldr	r3, [r3, #4]
 801a990:	429a      	cmp	r2, r3
 801a992:	db0d      	blt.n	801a9b0 <_lv_area_is_in+0x44>
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	689a      	ldr	r2, [r3, #8]
 801a998:	68bb      	ldr	r3, [r7, #8]
 801a99a:	689b      	ldr	r3, [r3, #8]
 801a99c:	429a      	cmp	r2, r3
 801a99e:	dc07      	bgt.n	801a9b0 <_lv_area_is_in+0x44>
       ain_p->y2 <= aholder_p->y2) {
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	68da      	ldr	r2, [r3, #12]
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	68db      	ldr	r3, [r3, #12]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	dc01      	bgt.n	801a9b0 <_lv_area_is_in+0x44>
        is_in = true;
 801a9ac:	2301      	movs	r3, #1
 801a9ae:	77fb      	strb	r3, [r7, #31]
    }

    if(!is_in) return false;
 801a9b0:	7ffb      	ldrb	r3, [r7, #31]
 801a9b2:	f083 0301 	eor.w	r3, r3, #1
 801a9b6:	b2db      	uxtb	r3, r3
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d001      	beq.n	801a9c0 <_lv_area_is_in+0x54>
 801a9bc:	2300      	movs	r3, #0
 801a9be:	e065      	b.n	801aa8c <_lv_area_is_in+0x120>
    if(radius == 0) return true;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d101      	bne.n	801a9ca <_lv_area_is_in+0x5e>
 801a9c6:	2301      	movs	r3, #1
 801a9c8:	e060      	b.n	801aa8c <_lv_area_is_in+0x120>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    lv_point_set(&p, ain_p->x1, ain_p->y1);
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	6819      	ldr	r1, [r3, #0]
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	685a      	ldr	r2, [r3, #4]
 801a9d2:	f107 0314 	add.w	r3, r7, #20
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	f7ff fdf2 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801a9dc:	f107 0314 	add.w	r3, r7, #20
 801a9e0:	687a      	ldr	r2, [r7, #4]
 801a9e2:	4619      	mov	r1, r3
 801a9e4:	68b8      	ldr	r0, [r7, #8]
 801a9e6:	f7ff fede 	bl	801a7a6 <_lv_area_is_point_on>
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	f083 0301 	eor.w	r3, r3, #1
 801a9f0:	b2db      	uxtb	r3, r3
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d001      	beq.n	801a9fa <_lv_area_is_in+0x8e>
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	e048      	b.n	801aa8c <_lv_area_is_in+0x120>

    lv_point_set(&p, ain_p->x2, ain_p->y1);
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	6899      	ldr	r1, [r3, #8]
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	685a      	ldr	r2, [r3, #4]
 801aa02:	f107 0314 	add.w	r3, r7, #20
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7ff fdda 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801aa0c:	f107 0314 	add.w	r3, r7, #20
 801aa10:	687a      	ldr	r2, [r7, #4]
 801aa12:	4619      	mov	r1, r3
 801aa14:	68b8      	ldr	r0, [r7, #8]
 801aa16:	f7ff fec6 	bl	801a7a6 <_lv_area_is_point_on>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	f083 0301 	eor.w	r3, r3, #1
 801aa20:	b2db      	uxtb	r3, r3
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d001      	beq.n	801aa2a <_lv_area_is_in+0xbe>
 801aa26:	2300      	movs	r3, #0
 801aa28:	e030      	b.n	801aa8c <_lv_area_is_in+0x120>

    lv_point_set(&p, ain_p->x1, ain_p->y2);
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	6819      	ldr	r1, [r3, #0]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	68da      	ldr	r2, [r3, #12]
 801aa32:	f107 0314 	add.w	r3, r7, #20
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7ff fdc2 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801aa3c:	f107 0314 	add.w	r3, r7, #20
 801aa40:	687a      	ldr	r2, [r7, #4]
 801aa42:	4619      	mov	r1, r3
 801aa44:	68b8      	ldr	r0, [r7, #8]
 801aa46:	f7ff feae 	bl	801a7a6 <_lv_area_is_point_on>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	f083 0301 	eor.w	r3, r3, #1
 801aa50:	b2db      	uxtb	r3, r3
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d001      	beq.n	801aa5a <_lv_area_is_in+0xee>
 801aa56:	2300      	movs	r3, #0
 801aa58:	e018      	b.n	801aa8c <_lv_area_is_in+0x120>

    lv_point_set(&p, ain_p->x2, ain_p->y2);
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	6899      	ldr	r1, [r3, #8]
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	68da      	ldr	r2, [r3, #12]
 801aa62:	f107 0314 	add.w	r3, r7, #20
 801aa66:	4618      	mov	r0, r3
 801aa68:	f7ff fdaa 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801aa6c:	f107 0314 	add.w	r3, r7, #20
 801aa70:	687a      	ldr	r2, [r7, #4]
 801aa72:	4619      	mov	r1, r3
 801aa74:	68b8      	ldr	r0, [r7, #8]
 801aa76:	f7ff fe96 	bl	801a7a6 <_lv_area_is_point_on>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	f083 0301 	eor.w	r3, r3, #1
 801aa80:	b2db      	uxtb	r3, r3
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d001      	beq.n	801aa8a <_lv_area_is_in+0x11e>
 801aa86:	2300      	movs	r3, #0
 801aa88:	e000      	b.n	801aa8c <_lv_area_is_in+0x120>

    return true;
 801aa8a:	2301      	movs	r3, #1
}
 801aa8c:	4618      	mov	r0, r3
 801aa8e:	3720      	adds	r7, #32
 801aa90:	46bd      	mov	sp, r7
 801aa92:	bd80      	pop	{r7, pc}

0801aa94 <_lv_area_is_out>:

bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, int32_t radius)
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	b086      	sub	sp, #24
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	60f8      	str	r0, [r7, #12]
 801aa9c:	60b9      	str	r1, [r7, #8]
 801aa9e:	607a      	str	r2, [r7, #4]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	689a      	ldr	r2, [r3, #8]
 801aaa4:	68bb      	ldr	r3, [r7, #8]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	db11      	blt.n	801aad0 <_lv_area_is_out+0x3c>
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	68da      	ldr	r2, [r3, #12]
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	685b      	ldr	r3, [r3, #4]
 801aab4:	429a      	cmp	r2, r3
 801aab6:	db0b      	blt.n	801aad0 <_lv_area_is_out+0x3c>
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	681a      	ldr	r2, [r3, #0]
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	689b      	ldr	r3, [r3, #8]
 801aac0:	429a      	cmp	r2, r3
 801aac2:	dc05      	bgt.n	801aad0 <_lv_area_is_out+0x3c>
       aout_p->y1 > aholder_p->y2) {
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	685a      	ldr	r2, [r3, #4]
 801aac8:	68bb      	ldr	r3, [r7, #8]
 801aaca:	68db      	ldr	r3, [r3, #12]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 801aacc:	429a      	cmp	r2, r3
 801aace:	dd01      	ble.n	801aad4 <_lv_area_is_out+0x40>
        return true;
 801aad0:	2301      	movs	r3, #1
 801aad2:	e059      	b.n	801ab88 <_lv_area_is_out+0xf4>
    }

    if(radius == 0) return false;
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d101      	bne.n	801aade <_lv_area_is_out+0x4a>
 801aada:	2300      	movs	r3, #0
 801aadc:	e054      	b.n	801ab88 <_lv_area_is_out+0xf4>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    lv_point_set(&p, aout_p->x1, aout_p->y1);
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	6819      	ldr	r1, [r3, #0]
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	685a      	ldr	r2, [r3, #4]
 801aae6:	f107 0310 	add.w	r3, r7, #16
 801aaea:	4618      	mov	r0, r3
 801aaec:	f7ff fd68 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801aaf0:	f107 0310 	add.w	r3, r7, #16
 801aaf4:	687a      	ldr	r2, [r7, #4]
 801aaf6:	4619      	mov	r1, r3
 801aaf8:	68b8      	ldr	r0, [r7, #8]
 801aafa:	f7ff fe54 	bl	801a7a6 <_lv_area_is_point_on>
 801aafe:	4603      	mov	r3, r0
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d001      	beq.n	801ab08 <_lv_area_is_out+0x74>
 801ab04:	2300      	movs	r3, #0
 801ab06:	e03f      	b.n	801ab88 <_lv_area_is_out+0xf4>

    lv_point_set(&p, aout_p->x2, aout_p->y1);
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	6899      	ldr	r1, [r3, #8]
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	685a      	ldr	r2, [r3, #4]
 801ab10:	f107 0310 	add.w	r3, r7, #16
 801ab14:	4618      	mov	r0, r3
 801ab16:	f7ff fd53 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801ab1a:	f107 0310 	add.w	r3, r7, #16
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	4619      	mov	r1, r3
 801ab22:	68b8      	ldr	r0, [r7, #8]
 801ab24:	f7ff fe3f 	bl	801a7a6 <_lv_area_is_point_on>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d001      	beq.n	801ab32 <_lv_area_is_out+0x9e>
 801ab2e:	2300      	movs	r3, #0
 801ab30:	e02a      	b.n	801ab88 <_lv_area_is_out+0xf4>

    lv_point_set(&p, aout_p->x1, aout_p->y2);
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	6819      	ldr	r1, [r3, #0]
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	68da      	ldr	r2, [r3, #12]
 801ab3a:	f107 0310 	add.w	r3, r7, #16
 801ab3e:	4618      	mov	r0, r3
 801ab40:	f7ff fd3e 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801ab44:	f107 0310 	add.w	r3, r7, #16
 801ab48:	687a      	ldr	r2, [r7, #4]
 801ab4a:	4619      	mov	r1, r3
 801ab4c:	68b8      	ldr	r0, [r7, #8]
 801ab4e:	f7ff fe2a 	bl	801a7a6 <_lv_area_is_point_on>
 801ab52:	4603      	mov	r3, r0
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d001      	beq.n	801ab5c <_lv_area_is_out+0xc8>
 801ab58:	2300      	movs	r3, #0
 801ab5a:	e015      	b.n	801ab88 <_lv_area_is_out+0xf4>

    lv_point_set(&p, aout_p->x2, aout_p->y2);
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	6899      	ldr	r1, [r3, #8]
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	68da      	ldr	r2, [r3, #12]
 801ab64:	f107 0310 	add.w	r3, r7, #16
 801ab68:	4618      	mov	r0, r3
 801ab6a:	f7ff fd29 	bl	801a5c0 <lv_point_set>
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 801ab6e:	f107 0310 	add.w	r3, r7, #16
 801ab72:	687a      	ldr	r2, [r7, #4]
 801ab74:	4619      	mov	r1, r3
 801ab76:	68b8      	ldr	r0, [r7, #8]
 801ab78:	f7ff fe15 	bl	801a7a6 <_lv_area_is_point_on>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d001      	beq.n	801ab86 <_lv_area_is_out+0xf2>
 801ab82:	2300      	movs	r3, #0
 801ab84:	e000      	b.n	801ab88 <_lv_area_is_out+0xf4>

    return true;
 801ab86:	2301      	movs	r3, #1
}
 801ab88:	4618      	mov	r0, r3
 801ab8a:	3718      	adds	r7, #24
 801ab8c:	46bd      	mov	sp, r7
 801ab8e:	bd80      	pop	{r7, pc}

0801ab90 <lv_area_align>:
{
    return a->x1 == b->x1 && a->x2 == b->x2 && a->y1 == b->y1 && a->y2 == b->y2;
}

void lv_area_align(const lv_area_t * base, lv_area_t * to_align, lv_align_t align, int32_t ofs_x, int32_t ofs_y)
{
 801ab90:	b590      	push	{r4, r7, lr}
 801ab92:	b089      	sub	sp, #36	@ 0x24
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	60f8      	str	r0, [r7, #12]
 801ab98:	60b9      	str	r1, [r7, #8]
 801ab9a:	603b      	str	r3, [r7, #0]
 801ab9c:	4613      	mov	r3, r2
 801ab9e:	71fb      	strb	r3, [r7, #7]

    int32_t x;
    int32_t y;
    switch(align) {
 801aba0:	79fb      	ldrb	r3, [r7, #7]
 801aba2:	3b01      	subs	r3, #1
 801aba4:	2b14      	cmp	r3, #20
 801aba6:	f200 81aa 	bhi.w	801aefe <lv_area_align+0x36e>
 801abaa:	a201      	add	r2, pc, #4	@ (adr r2, 801abb0 <lv_area_align+0x20>)
 801abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abb0:	0801ac4f 	.word	0x0801ac4f
 801abb4:	0801ac59 	.word	0x0801ac59
 801abb8:	0801ac83 	.word	0x0801ac83
 801abbc:	0801ac9d 	.word	0x0801ac9d
 801abc0:	0801acb7 	.word	0x0801acb7
 801abc4:	0801acf1 	.word	0x0801acf1
 801abc8:	0801ad1b 	.word	0x0801ad1b
 801abcc:	0801ad45 	.word	0x0801ad45
 801abd0:	0801ac05 	.word	0x0801ac05
 801abd4:	0801ad7f 	.word	0x0801ad7f
 801abd8:	0801ad91 	.word	0x0801ad91
 801abdc:	0801adc3 	.word	0x0801adc3
 801abe0:	0801ade5 	.word	0x0801ade5
 801abe4:	0801adf3 	.word	0x0801adf3
 801abe8:	0801ae21 	.word	0x0801ae21
 801abec:	0801ae3f 	.word	0x0801ae3f
 801abf0:	0801ae51 	.word	0x0801ae51
 801abf4:	0801ae83 	.word	0x0801ae83
 801abf8:	0801aea5 	.word	0x0801aea5
 801abfc:	0801aeb3 	.word	0x0801aeb3
 801ac00:	0801aee1 	.word	0x0801aee1
        case LV_ALIGN_CENTER:
            x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801ac04:	68f8      	ldr	r0, [r7, #12]
 801ac06:	f7ff fcbb 	bl	801a580 <lv_area_get_width>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	0fda      	lsrs	r2, r3, #31
 801ac0e:	4413      	add	r3, r2
 801ac10:	105b      	asrs	r3, r3, #1
 801ac12:	461c      	mov	r4, r3
 801ac14:	68b8      	ldr	r0, [r7, #8]
 801ac16:	f7ff fcb3 	bl	801a580 <lv_area_get_width>
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	0fda      	lsrs	r2, r3, #31
 801ac1e:	4413      	add	r3, r2
 801ac20:	105b      	asrs	r3, r3, #1
 801ac22:	425b      	negs	r3, r3
 801ac24:	4423      	add	r3, r4
 801ac26:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801ac28:	68f8      	ldr	r0, [r7, #12]
 801ac2a:	f7ff fcb9 	bl	801a5a0 <lv_area_get_height>
 801ac2e:	4603      	mov	r3, r0
 801ac30:	0fda      	lsrs	r2, r3, #31
 801ac32:	4413      	add	r3, r2
 801ac34:	105b      	asrs	r3, r3, #1
 801ac36:	461c      	mov	r4, r3
 801ac38:	68b8      	ldr	r0, [r7, #8]
 801ac3a:	f7ff fcb1 	bl	801a5a0 <lv_area_get_height>
 801ac3e:	4603      	mov	r3, r0
 801ac40:	0fda      	lsrs	r2, r3, #31
 801ac42:	4413      	add	r3, r2
 801ac44:	105b      	asrs	r3, r3, #1
 801ac46:	425b      	negs	r3, r3
 801ac48:	4423      	add	r3, r4
 801ac4a:	61bb      	str	r3, [r7, #24]
            break;
 801ac4c:	e15c      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_TOP_LEFT:
            x = 0;
 801ac4e:	2300      	movs	r3, #0
 801ac50:	61fb      	str	r3, [r7, #28]
            y = 0;
 801ac52:	2300      	movs	r3, #0
 801ac54:	61bb      	str	r3, [r7, #24]
            break;
 801ac56:	e157      	b.n	801af08 <lv_area_align+0x378>
        case LV_ALIGN_TOP_MID:
            x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801ac58:	68f8      	ldr	r0, [r7, #12]
 801ac5a:	f7ff fc91 	bl	801a580 <lv_area_get_width>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	0fda      	lsrs	r2, r3, #31
 801ac62:	4413      	add	r3, r2
 801ac64:	105b      	asrs	r3, r3, #1
 801ac66:	461c      	mov	r4, r3
 801ac68:	68b8      	ldr	r0, [r7, #8]
 801ac6a:	f7ff fc89 	bl	801a580 <lv_area_get_width>
 801ac6e:	4603      	mov	r3, r0
 801ac70:	0fda      	lsrs	r2, r3, #31
 801ac72:	4413      	add	r3, r2
 801ac74:	105b      	asrs	r3, r3, #1
 801ac76:	425b      	negs	r3, r3
 801ac78:	4423      	add	r3, r4
 801ac7a:	61fb      	str	r3, [r7, #28]
            y = 0;
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	61bb      	str	r3, [r7, #24]
            break;
 801ac80:	e142      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_TOP_RIGHT:
            x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801ac82:	68f8      	ldr	r0, [r7, #12]
 801ac84:	f7ff fc7c 	bl	801a580 <lv_area_get_width>
 801ac88:	4604      	mov	r4, r0
 801ac8a:	68b8      	ldr	r0, [r7, #8]
 801ac8c:	f7ff fc78 	bl	801a580 <lv_area_get_width>
 801ac90:	4603      	mov	r3, r0
 801ac92:	1ae3      	subs	r3, r4, r3
 801ac94:	61fb      	str	r3, [r7, #28]
            y = 0;
 801ac96:	2300      	movs	r3, #0
 801ac98:	61bb      	str	r3, [r7, #24]
            break;
 801ac9a:	e135      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_BOTTOM_LEFT:
            x = 0;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801aca0:	68f8      	ldr	r0, [r7, #12]
 801aca2:	f7ff fc7d 	bl	801a5a0 <lv_area_get_height>
 801aca6:	4604      	mov	r4, r0
 801aca8:	68b8      	ldr	r0, [r7, #8]
 801acaa:	f7ff fc79 	bl	801a5a0 <lv_area_get_height>
 801acae:	4603      	mov	r3, r0
 801acb0:	1ae3      	subs	r3, r4, r3
 801acb2:	61bb      	str	r3, [r7, #24]
            break;
 801acb4:	e128      	b.n	801af08 <lv_area_align+0x378>
        case LV_ALIGN_BOTTOM_MID:
            x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801acb6:	68f8      	ldr	r0, [r7, #12]
 801acb8:	f7ff fc62 	bl	801a580 <lv_area_get_width>
 801acbc:	4603      	mov	r3, r0
 801acbe:	0fda      	lsrs	r2, r3, #31
 801acc0:	4413      	add	r3, r2
 801acc2:	105b      	asrs	r3, r3, #1
 801acc4:	461c      	mov	r4, r3
 801acc6:	68b8      	ldr	r0, [r7, #8]
 801acc8:	f7ff fc5a 	bl	801a580 <lv_area_get_width>
 801accc:	4603      	mov	r3, r0
 801acce:	0fda      	lsrs	r2, r3, #31
 801acd0:	4413      	add	r3, r2
 801acd2:	105b      	asrs	r3, r3, #1
 801acd4:	425b      	negs	r3, r3
 801acd6:	4423      	add	r3, r4
 801acd8:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801acda:	68f8      	ldr	r0, [r7, #12]
 801acdc:	f7ff fc60 	bl	801a5a0 <lv_area_get_height>
 801ace0:	4604      	mov	r4, r0
 801ace2:	68b8      	ldr	r0, [r7, #8]
 801ace4:	f7ff fc5c 	bl	801a5a0 <lv_area_get_height>
 801ace8:	4603      	mov	r3, r0
 801acea:	1ae3      	subs	r3, r4, r3
 801acec:	61bb      	str	r3, [r7, #24]
            break;
 801acee:	e10b      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_BOTTOM_RIGHT:
            x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801acf0:	68f8      	ldr	r0, [r7, #12]
 801acf2:	f7ff fc45 	bl	801a580 <lv_area_get_width>
 801acf6:	4604      	mov	r4, r0
 801acf8:	68b8      	ldr	r0, [r7, #8]
 801acfa:	f7ff fc41 	bl	801a580 <lv_area_get_width>
 801acfe:	4603      	mov	r3, r0
 801ad00:	1ae3      	subs	r3, r4, r3
 801ad02:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801ad04:	68f8      	ldr	r0, [r7, #12]
 801ad06:	f7ff fc4b 	bl	801a5a0 <lv_area_get_height>
 801ad0a:	4604      	mov	r4, r0
 801ad0c:	68b8      	ldr	r0, [r7, #8]
 801ad0e:	f7ff fc47 	bl	801a5a0 <lv_area_get_height>
 801ad12:	4603      	mov	r3, r0
 801ad14:	1ae3      	subs	r3, r4, r3
 801ad16:	61bb      	str	r3, [r7, #24]
            break;
 801ad18:	e0f6      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_LEFT_MID:
            x = 0;
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801ad1e:	68f8      	ldr	r0, [r7, #12]
 801ad20:	f7ff fc3e 	bl	801a5a0 <lv_area_get_height>
 801ad24:	4603      	mov	r3, r0
 801ad26:	0fda      	lsrs	r2, r3, #31
 801ad28:	4413      	add	r3, r2
 801ad2a:	105b      	asrs	r3, r3, #1
 801ad2c:	461c      	mov	r4, r3
 801ad2e:	68b8      	ldr	r0, [r7, #8]
 801ad30:	f7ff fc36 	bl	801a5a0 <lv_area_get_height>
 801ad34:	4603      	mov	r3, r0
 801ad36:	0fda      	lsrs	r2, r3, #31
 801ad38:	4413      	add	r3, r2
 801ad3a:	105b      	asrs	r3, r3, #1
 801ad3c:	425b      	negs	r3, r3
 801ad3e:	4423      	add	r3, r4
 801ad40:	61bb      	str	r3, [r7, #24]
            break;
 801ad42:	e0e1      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_RIGHT_MID:
            x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801ad44:	68f8      	ldr	r0, [r7, #12]
 801ad46:	f7ff fc1b 	bl	801a580 <lv_area_get_width>
 801ad4a:	4604      	mov	r4, r0
 801ad4c:	68b8      	ldr	r0, [r7, #8]
 801ad4e:	f7ff fc17 	bl	801a580 <lv_area_get_width>
 801ad52:	4603      	mov	r3, r0
 801ad54:	1ae3      	subs	r3, r4, r3
 801ad56:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801ad58:	68f8      	ldr	r0, [r7, #12]
 801ad5a:	f7ff fc21 	bl	801a5a0 <lv_area_get_height>
 801ad5e:	4603      	mov	r3, r0
 801ad60:	0fda      	lsrs	r2, r3, #31
 801ad62:	4413      	add	r3, r2
 801ad64:	105b      	asrs	r3, r3, #1
 801ad66:	461c      	mov	r4, r3
 801ad68:	68b8      	ldr	r0, [r7, #8]
 801ad6a:	f7ff fc19 	bl	801a5a0 <lv_area_get_height>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	0fda      	lsrs	r2, r3, #31
 801ad72:	4413      	add	r3, r2
 801ad74:	105b      	asrs	r3, r3, #1
 801ad76:	425b      	negs	r3, r3
 801ad78:	4423      	add	r3, r4
 801ad7a:	61bb      	str	r3, [r7, #24]
            break;
 801ad7c:	e0c4      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_TOP_LEFT:
            x = 0;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	61fb      	str	r3, [r7, #28]
            y = -lv_area_get_height(to_align);
 801ad82:	68b8      	ldr	r0, [r7, #8]
 801ad84:	f7ff fc0c 	bl	801a5a0 <lv_area_get_height>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	425b      	negs	r3, r3
 801ad8c:	61bb      	str	r3, [r7, #24]
            break;
 801ad8e:	e0bb      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_TOP_MID:
            x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801ad90:	68f8      	ldr	r0, [r7, #12]
 801ad92:	f7ff fbf5 	bl	801a580 <lv_area_get_width>
 801ad96:	4603      	mov	r3, r0
 801ad98:	0fda      	lsrs	r2, r3, #31
 801ad9a:	4413      	add	r3, r2
 801ad9c:	105b      	asrs	r3, r3, #1
 801ad9e:	461c      	mov	r4, r3
 801ada0:	68b8      	ldr	r0, [r7, #8]
 801ada2:	f7ff fbed 	bl	801a580 <lv_area_get_width>
 801ada6:	4603      	mov	r3, r0
 801ada8:	0fda      	lsrs	r2, r3, #31
 801adaa:	4413      	add	r3, r2
 801adac:	105b      	asrs	r3, r3, #1
 801adae:	425b      	negs	r3, r3
 801adb0:	4423      	add	r3, r4
 801adb2:	61fb      	str	r3, [r7, #28]
            y = -lv_area_get_height(to_align);
 801adb4:	68b8      	ldr	r0, [r7, #8]
 801adb6:	f7ff fbf3 	bl	801a5a0 <lv_area_get_height>
 801adba:	4603      	mov	r3, r0
 801adbc:	425b      	negs	r3, r3
 801adbe:	61bb      	str	r3, [r7, #24]
            break;
 801adc0:	e0a2      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_TOP_RIGHT:
            x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801adc2:	68f8      	ldr	r0, [r7, #12]
 801adc4:	f7ff fbdc 	bl	801a580 <lv_area_get_width>
 801adc8:	4604      	mov	r4, r0
 801adca:	68b8      	ldr	r0, [r7, #8]
 801adcc:	f7ff fbd8 	bl	801a580 <lv_area_get_width>
 801add0:	4603      	mov	r3, r0
 801add2:	1ae3      	subs	r3, r4, r3
 801add4:	61fb      	str	r3, [r7, #28]
            y = -lv_area_get_height(to_align);
 801add6:	68b8      	ldr	r0, [r7, #8]
 801add8:	f7ff fbe2 	bl	801a5a0 <lv_area_get_height>
 801addc:	4603      	mov	r3, r0
 801adde:	425b      	negs	r3, r3
 801ade0:	61bb      	str	r3, [r7, #24]
            break;
 801ade2:	e091      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            x = 0;
 801ade4:	2300      	movs	r3, #0
 801ade6:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base);
 801ade8:	68f8      	ldr	r0, [r7, #12]
 801adea:	f7ff fbd9 	bl	801a5a0 <lv_area_get_height>
 801adee:	61b8      	str	r0, [r7, #24]
            break;
 801adf0:	e08a      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_BOTTOM_MID:
            x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
 801adf2:	68f8      	ldr	r0, [r7, #12]
 801adf4:	f7ff fbc4 	bl	801a580 <lv_area_get_width>
 801adf8:	4603      	mov	r3, r0
 801adfa:	0fda      	lsrs	r2, r3, #31
 801adfc:	4413      	add	r3, r2
 801adfe:	105b      	asrs	r3, r3, #1
 801ae00:	461c      	mov	r4, r3
 801ae02:	68b8      	ldr	r0, [r7, #8]
 801ae04:	f7ff fbbc 	bl	801a580 <lv_area_get_width>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	0fda      	lsrs	r2, r3, #31
 801ae0c:	4413      	add	r3, r2
 801ae0e:	105b      	asrs	r3, r3, #1
 801ae10:	425b      	negs	r3, r3
 801ae12:	4423      	add	r3, r4
 801ae14:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base);
 801ae16:	68f8      	ldr	r0, [r7, #12]
 801ae18:	f7ff fbc2 	bl	801a5a0 <lv_area_get_height>
 801ae1c:	61b8      	str	r0, [r7, #24]
            break;
 801ae1e:	e073      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            x = lv_area_get_width(base) - lv_area_get_width(to_align);
 801ae20:	68f8      	ldr	r0, [r7, #12]
 801ae22:	f7ff fbad 	bl	801a580 <lv_area_get_width>
 801ae26:	4604      	mov	r4, r0
 801ae28:	68b8      	ldr	r0, [r7, #8]
 801ae2a:	f7ff fba9 	bl	801a580 <lv_area_get_width>
 801ae2e:	4603      	mov	r3, r0
 801ae30:	1ae3      	subs	r3, r4, r3
 801ae32:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base);
 801ae34:	68f8      	ldr	r0, [r7, #12]
 801ae36:	f7ff fbb3 	bl	801a5a0 <lv_area_get_height>
 801ae3a:	61b8      	str	r0, [r7, #24]
            break;
 801ae3c:	e064      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_LEFT_TOP:
            x = -lv_area_get_width(to_align);
 801ae3e:	68b8      	ldr	r0, [r7, #8]
 801ae40:	f7ff fb9e 	bl	801a580 <lv_area_get_width>
 801ae44:	4603      	mov	r3, r0
 801ae46:	425b      	negs	r3, r3
 801ae48:	61fb      	str	r3, [r7, #28]
            y = 0;
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	61bb      	str	r3, [r7, #24]
            break;
 801ae4e:	e05b      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_LEFT_MID:
            x = -lv_area_get_width(to_align);
 801ae50:	68b8      	ldr	r0, [r7, #8]
 801ae52:	f7ff fb95 	bl	801a580 <lv_area_get_width>
 801ae56:	4603      	mov	r3, r0
 801ae58:	425b      	negs	r3, r3
 801ae5a:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801ae5c:	68f8      	ldr	r0, [r7, #12]
 801ae5e:	f7ff fb9f 	bl	801a5a0 <lv_area_get_height>
 801ae62:	4603      	mov	r3, r0
 801ae64:	0fda      	lsrs	r2, r3, #31
 801ae66:	4413      	add	r3, r2
 801ae68:	105b      	asrs	r3, r3, #1
 801ae6a:	461c      	mov	r4, r3
 801ae6c:	68b8      	ldr	r0, [r7, #8]
 801ae6e:	f7ff fb97 	bl	801a5a0 <lv_area_get_height>
 801ae72:	4603      	mov	r3, r0
 801ae74:	0fda      	lsrs	r2, r3, #31
 801ae76:	4413      	add	r3, r2
 801ae78:	105b      	asrs	r3, r3, #1
 801ae7a:	425b      	negs	r3, r3
 801ae7c:	4423      	add	r3, r4
 801ae7e:	61bb      	str	r3, [r7, #24]
            break;
 801ae80:	e042      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            x = -lv_area_get_width(to_align);
 801ae82:	68b8      	ldr	r0, [r7, #8]
 801ae84:	f7ff fb7c 	bl	801a580 <lv_area_get_width>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	425b      	negs	r3, r3
 801ae8c:	61fb      	str	r3, [r7, #28]
            y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801ae8e:	68f8      	ldr	r0, [r7, #12]
 801ae90:	f7ff fb86 	bl	801a5a0 <lv_area_get_height>
 801ae94:	4604      	mov	r4, r0
 801ae96:	68b8      	ldr	r0, [r7, #8]
 801ae98:	f7ff fb82 	bl	801a5a0 <lv_area_get_height>
 801ae9c:	4603      	mov	r3, r0
 801ae9e:	1ae3      	subs	r3, r4, r3
 801aea0:	61bb      	str	r3, [r7, #24]
            break;
 801aea2:	e031      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_RIGHT_TOP:
            x = lv_area_get_width(base);
 801aea4:	68f8      	ldr	r0, [r7, #12]
 801aea6:	f7ff fb6b 	bl	801a580 <lv_area_get_width>
 801aeaa:	61f8      	str	r0, [r7, #28]
            y = 0;
 801aeac:	2300      	movs	r3, #0
 801aeae:	61bb      	str	r3, [r7, #24]
            break;
 801aeb0:	e02a      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_RIGHT_MID:
            x = lv_area_get_width(base);
 801aeb2:	68f8      	ldr	r0, [r7, #12]
 801aeb4:	f7ff fb64 	bl	801a580 <lv_area_get_width>
 801aeb8:	61f8      	str	r0, [r7, #28]
            y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	f7ff fb70 	bl	801a5a0 <lv_area_get_height>
 801aec0:	4603      	mov	r3, r0
 801aec2:	0fda      	lsrs	r2, r3, #31
 801aec4:	4413      	add	r3, r2
 801aec6:	105b      	asrs	r3, r3, #1
 801aec8:	461c      	mov	r4, r3
 801aeca:	68b8      	ldr	r0, [r7, #8]
 801aecc:	f7ff fb68 	bl	801a5a0 <lv_area_get_height>
 801aed0:	4603      	mov	r3, r0
 801aed2:	0fda      	lsrs	r2, r3, #31
 801aed4:	4413      	add	r3, r2
 801aed6:	105b      	asrs	r3, r3, #1
 801aed8:	425b      	negs	r3, r3
 801aeda:	4423      	add	r3, r4
 801aedc:	61bb      	str	r3, [r7, #24]
            break;
 801aede:	e013      	b.n	801af08 <lv_area_align+0x378>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            x = lv_area_get_width(base);
 801aee0:	68f8      	ldr	r0, [r7, #12]
 801aee2:	f7ff fb4d 	bl	801a580 <lv_area_get_width>
 801aee6:	61f8      	str	r0, [r7, #28]
            y = lv_area_get_height(base) - lv_area_get_height(to_align);
 801aee8:	68f8      	ldr	r0, [r7, #12]
 801aeea:	f7ff fb59 	bl	801a5a0 <lv_area_get_height>
 801aeee:	4604      	mov	r4, r0
 801aef0:	68b8      	ldr	r0, [r7, #8]
 801aef2:	f7ff fb55 	bl	801a5a0 <lv_area_get_height>
 801aef6:	4603      	mov	r3, r0
 801aef8:	1ae3      	subs	r3, r4, r3
 801aefa:	61bb      	str	r3, [r7, #24]
            break;
 801aefc:	e004      	b.n	801af08 <lv_area_align+0x378>
        default:
            x = 0;
 801aefe:	2300      	movs	r3, #0
 801af00:	61fb      	str	r3, [r7, #28]
            y = 0;
 801af02:	2300      	movs	r3, #0
 801af04:	61bb      	str	r3, [r7, #24]
            break;
 801af06:	bf00      	nop
    }

    x += base->x1;
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	69fa      	ldr	r2, [r7, #28]
 801af0e:	4413      	add	r3, r2
 801af10:	61fb      	str	r3, [r7, #28]
    y += base->y1;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	685b      	ldr	r3, [r3, #4]
 801af16:	69ba      	ldr	r2, [r7, #24]
 801af18:	4413      	add	r3, r2
 801af1a:	61bb      	str	r3, [r7, #24]

    int32_t w = lv_area_get_width(to_align);
 801af1c:	68b8      	ldr	r0, [r7, #8]
 801af1e:	f7ff fb2f 	bl	801a580 <lv_area_get_width>
 801af22:	6178      	str	r0, [r7, #20]
    int32_t h = lv_area_get_height(to_align);
 801af24:	68b8      	ldr	r0, [r7, #8]
 801af26:	f7ff fb3b 	bl	801a5a0 <lv_area_get_height>
 801af2a:	6138      	str	r0, [r7, #16]
    to_align->x1 = x + ofs_x;
 801af2c:	69fa      	ldr	r2, [r7, #28]
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	441a      	add	r2, r3
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	601a      	str	r2, [r3, #0]
    to_align->y1 = y + ofs_y;
 801af36:	69ba      	ldr	r2, [r7, #24]
 801af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af3a:	441a      	add	r2, r3
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	605a      	str	r2, [r3, #4]
    to_align->x2 = to_align->x1 + w - 1;
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	681a      	ldr	r2, [r3, #0]
 801af44:	697b      	ldr	r3, [r7, #20]
 801af46:	4413      	add	r3, r2
 801af48:	1e5a      	subs	r2, r3, #1
 801af4a:	68bb      	ldr	r3, [r7, #8]
 801af4c:	609a      	str	r2, [r3, #8]
    to_align->y2 = to_align->y1 + h - 1;
 801af4e:	68bb      	ldr	r3, [r7, #8]
 801af50:	685a      	ldr	r2, [r3, #4]
 801af52:	693b      	ldr	r3, [r7, #16]
 801af54:	4413      	add	r3, r2
 801af56:	1e5a      	subs	r2, r3, #1
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	60da      	str	r2, [r3, #12]
}
 801af5c:	bf00      	nop
 801af5e:	3724      	adds	r7, #36	@ 0x24
 801af60:	46bd      	mov	sp, r7
 801af62:	bd90      	pop	{r4, r7, pc}

0801af64 <lv_point_transform>:

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t scale_x, int32_t scale_y, const lv_point_t * pivot,
                        bool zoom_first)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b090      	sub	sp, #64	@ 0x40
 801af68:	af00      	add	r7, sp, #0
 801af6a:	60f8      	str	r0, [r7, #12]
 801af6c:	60b9      	str	r1, [r7, #8]
 801af6e:	607a      	str	r2, [r7, #4]
 801af70:	603b      	str	r3, [r7, #0]
    if(angle == 0 && scale_x == 256 && scale_y == 256) {
 801af72:	68bb      	ldr	r3, [r7, #8]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d108      	bne.n	801af8a <lv_point_transform+0x26>
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af7e:	d104      	bne.n	801af8a <lv_point_transform+0x26>
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af86:	f000 812f 	beq.w	801b1e8 <lv_point_transform+0x284>
        return;
    }

    p->x -= pivot->x;
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	681a      	ldr	r2, [r3, #0]
 801af8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	1ad2      	subs	r2, r2, r3
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	601a      	str	r2, [r3, #0]
    p->y -= pivot->y;
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	685a      	ldr	r2, [r3, #4]
 801af9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801af9e:	685b      	ldr	r3, [r3, #4]
 801afa0:	1ad2      	subs	r2, r2, r3
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	605a      	str	r2, [r3, #4]

    if(angle == 0) {
 801afa6:	68bb      	ldr	r3, [r7, #8]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d116      	bne.n	801afda <lv_point_transform+0x76>
        p->x = (((int32_t)(p->x) * scale_x) >> 8) + pivot->x;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	687a      	ldr	r2, [r7, #4]
 801afb2:	fb02 f303 	mul.w	r3, r2, r3
 801afb6:	121a      	asrs	r2, r3, #8
 801afb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	441a      	add	r2, r3
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	601a      	str	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * scale_y) >> 8) + pivot->y;
 801afc2:	68fb      	ldr	r3, [r7, #12]
 801afc4:	685b      	ldr	r3, [r3, #4]
 801afc6:	683a      	ldr	r2, [r7, #0]
 801afc8:	fb02 f303 	mul.w	r3, r2, r3
 801afcc:	121a      	asrs	r2, r3, #8
 801afce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afd0:	685b      	ldr	r3, [r3, #4]
 801afd2:	441a      	add	r2, r3
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	605a      	str	r2, [r3, #4]
        return;
 801afd8:	e107      	b.n	801b1ea <lv_point_transform+0x286>
    }
    lv_area_transform_cache_t * cache = &trans_cache;
 801afda:	4b85      	ldr	r3, [pc, #532]	@ (801b1f0 <lv_point_transform+0x28c>)
 801afdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if(cache->angle_prev != angle) {
 801afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	68ba      	ldr	r2, [r7, #8]
 801afe4:	429a      	cmp	r2, r3
 801afe6:	d074      	beq.n	801b0d2 <lv_point_transform+0x16e>
        int32_t angle_limited = angle;
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if(angle_limited > 3600) angle_limited -= 3600;
 801afec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801afee:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801aff2:	dd03      	ble.n	801affc <lv_point_transform+0x98>
 801aff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aff6:	f5a3 6361 	sub.w	r3, r3, #3600	@ 0xe10
 801affa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if(angle_limited < 0) angle_limited += 3600;
 801affc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801affe:	2b00      	cmp	r3, #0
 801b000:	da03      	bge.n	801b00a <lv_point_transform+0xa6>
 801b002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b004:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 801b008:	63fb      	str	r3, [r7, #60]	@ 0x3c

        int32_t angle_low = angle_limited / 10;
 801b00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b00c:	4a79      	ldr	r2, [pc, #484]	@ (801b1f4 <lv_point_transform+0x290>)
 801b00e:	fb82 1203 	smull	r1, r2, r2, r3
 801b012:	1092      	asrs	r2, r2, #2
 801b014:	17db      	asrs	r3, r3, #31
 801b016:	1ad3      	subs	r3, r2, r3
 801b018:	637b      	str	r3, [r7, #52]	@ 0x34
        int32_t angle_high = angle_low + 1;
 801b01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b01c:	3301      	adds	r3, #1
 801b01e:	633b      	str	r3, [r7, #48]	@ 0x30
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 801b020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b022:	f06f 0209 	mvn.w	r2, #9
 801b026:	fb02 f303 	mul.w	r3, r2, r3
 801b02a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b02c:	4413      	add	r3, r2
 801b02e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        int32_t s1 = lv_trigo_sin(angle_low);
 801b030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b032:	b21b      	sxth	r3, r3
 801b034:	4618      	mov	r0, r3
 801b036:	f000 ffb1 	bl	801bf9c <lv_trigo_sin>
 801b03a:	62b8      	str	r0, [r7, #40]	@ 0x28
        int32_t s2 = lv_trigo_sin(angle_high);
 801b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b03e:	b21b      	sxth	r3, r3
 801b040:	4618      	mov	r0, r3
 801b042:	f000 ffab 	bl	801bf9c <lv_trigo_sin>
 801b046:	6278      	str	r0, [r7, #36]	@ 0x24

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 801b048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b04a:	b29b      	uxth	r3, r3
 801b04c:	335a      	adds	r3, #90	@ 0x5a
 801b04e:	b29b      	uxth	r3, r3
 801b050:	b21b      	sxth	r3, r3
 801b052:	4618      	mov	r0, r3
 801b054:	f000 ffa2 	bl	801bf9c <lv_trigo_sin>
 801b058:	6238      	str	r0, [r7, #32]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 801b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b05c:	b29b      	uxth	r3, r3
 801b05e:	335a      	adds	r3, #90	@ 0x5a
 801b060:	b29b      	uxth	r3, r3
 801b062:	b21b      	sxth	r3, r3
 801b064:	4618      	mov	r0, r3
 801b066:	f000 ff99 	bl	801bf9c <lv_trigo_sin>
 801b06a:	61f8      	str	r0, [r7, #28]

        cache->sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801b06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b06e:	f1c3 030a 	rsb	r3, r3, #10
 801b072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b074:	fb03 f202 	mul.w	r2, r3, r2
 801b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b07a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b07c:	fb01 f303 	mul.w	r3, r1, r3
 801b080:	4413      	add	r3, r2
 801b082:	4a5c      	ldr	r2, [pc, #368]	@ (801b1f4 <lv_point_transform+0x290>)
 801b084:	fb82 1203 	smull	r1, r2, r2, r3
 801b088:	1092      	asrs	r2, r2, #2
 801b08a:	17db      	asrs	r3, r3, #31
 801b08c:	1ad2      	subs	r2, r2, r3
 801b08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b090:	605a      	str	r2, [r3, #4]
        cache->cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b094:	f1c3 030a 	rsb	r3, r3, #10
 801b098:	6a3a      	ldr	r2, [r7, #32]
 801b09a:	fb03 f202 	mul.w	r2, r3, r2
 801b09e:	69fb      	ldr	r3, [r7, #28]
 801b0a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b0a2:	fb01 f303 	mul.w	r3, r1, r3
 801b0a6:	4413      	add	r3, r2
 801b0a8:	4a52      	ldr	r2, [pc, #328]	@ (801b1f4 <lv_point_transform+0x290>)
 801b0aa:	fb82 1203 	smull	r1, r2, r2, r3
 801b0ae:	1092      	asrs	r2, r2, #2
 801b0b0:	17db      	asrs	r3, r3, #31
 801b0b2:	1ad2      	subs	r2, r2, r3
 801b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0b6:	609a      	str	r2, [r3, #8]
        cache->sinma = cache->sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ba:	685b      	ldr	r3, [r3, #4]
 801b0bc:	115a      	asrs	r2, r3, #5
 801b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0c0:	605a      	str	r2, [r3, #4]
        cache->cosma = cache->cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0c4:	689b      	ldr	r3, [r3, #8]
 801b0c6:	115a      	asrs	r2, r3, #5
 801b0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ca:	609a      	str	r2, [r3, #8]
        cache->angle_prev = angle;
 801b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ce:	68ba      	ldr	r2, [r7, #8]
 801b0d0:	601a      	str	r2, [r3, #0]
    }
    int32_t x = p->x;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	61bb      	str	r3, [r7, #24]
    int32_t y = p->y;
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	685b      	ldr	r3, [r3, #4]
 801b0dc:	617b      	str	r3, [r7, #20]
    if(scale_x == 256 && scale_y == 256) {
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b0e4:	d126      	bne.n	801b134 <lv_point_transform+0x1d0>
 801b0e6:	683b      	ldr	r3, [r7, #0]
 801b0e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b0ec:	d122      	bne.n	801b134 <lv_point_transform+0x1d0>
        p->x = ((cache->cosma * x - cache->sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0f0:	689b      	ldr	r3, [r3, #8]
 801b0f2:	69ba      	ldr	r2, [r7, #24]
 801b0f4:	fb03 f202 	mul.w	r2, r3, r2
 801b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0fa:	685b      	ldr	r3, [r3, #4]
 801b0fc:	6979      	ldr	r1, [r7, #20]
 801b0fe:	fb01 f303 	mul.w	r3, r1, r3
 801b102:	1ad3      	subs	r3, r2, r3
 801b104:	129a      	asrs	r2, r3, #10
 801b106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	441a      	add	r2, r3
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	601a      	str	r2, [r3, #0]
        p->y = ((cache->sinma * x + cache->cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801b110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b112:	685b      	ldr	r3, [r3, #4]
 801b114:	69ba      	ldr	r2, [r7, #24]
 801b116:	fb03 f202 	mul.w	r2, r3, r2
 801b11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b11c:	689b      	ldr	r3, [r3, #8]
 801b11e:	6979      	ldr	r1, [r7, #20]
 801b120:	fb01 f303 	mul.w	r3, r1, r3
 801b124:	4413      	add	r3, r2
 801b126:	129a      	asrs	r2, r3, #10
 801b128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b12a:	685b      	ldr	r3, [r3, #4]
 801b12c:	441a      	add	r2, r3
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	605a      	str	r2, [r3, #4]
 801b132:	e05a      	b.n	801b1ea <lv_point_transform+0x286>
    }
    else {
        if(zoom_first) {
 801b134:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d02c      	beq.n	801b196 <lv_point_transform+0x232>
            x *= scale_x;
 801b13c:	69bb      	ldr	r3, [r7, #24]
 801b13e:	687a      	ldr	r2, [r7, #4]
 801b140:	fb02 f303 	mul.w	r3, r2, r3
 801b144:	61bb      	str	r3, [r7, #24]
            y *= scale_y;
 801b146:	697b      	ldr	r3, [r7, #20]
 801b148:	683a      	ldr	r2, [r7, #0]
 801b14a:	fb02 f303 	mul.w	r3, r2, r3
 801b14e:	617b      	str	r3, [r7, #20]
            p->x = (((cache->cosma * x - cache->sinma * y)) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 801b150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b152:	689b      	ldr	r3, [r3, #8]
 801b154:	69ba      	ldr	r2, [r7, #24]
 801b156:	fb03 f202 	mul.w	r2, r3, r2
 801b15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b15c:	685b      	ldr	r3, [r3, #4]
 801b15e:	6979      	ldr	r1, [r7, #20]
 801b160:	fb01 f303 	mul.w	r3, r1, r3
 801b164:	1ad3      	subs	r3, r2, r3
 801b166:	149a      	asrs	r2, r3, #18
 801b168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	441a      	add	r2, r3
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	601a      	str	r2, [r3, #0]
            p->y = (((cache->sinma * x + cache->cosma * y)) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 801b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	69ba      	ldr	r2, [r7, #24]
 801b178:	fb03 f202 	mul.w	r2, r3, r2
 801b17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b17e:	689b      	ldr	r3, [r3, #8]
 801b180:	6979      	ldr	r1, [r7, #20]
 801b182:	fb01 f303 	mul.w	r3, r1, r3
 801b186:	4413      	add	r3, r2
 801b188:	149a      	asrs	r2, r3, #18
 801b18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b18c:	685b      	ldr	r3, [r3, #4]
 801b18e:	441a      	add	r2, r3
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	605a      	str	r2, [r3, #4]
 801b194:	e029      	b.n	801b1ea <lv_point_transform+0x286>
        }
        else {
            p->x = (((cache->cosma * x - cache->sinma * y) * scale_x) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 801b196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b198:	689b      	ldr	r3, [r3, #8]
 801b19a:	69ba      	ldr	r2, [r7, #24]
 801b19c:	fb03 f202 	mul.w	r2, r3, r2
 801b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1a2:	685b      	ldr	r3, [r3, #4]
 801b1a4:	6979      	ldr	r1, [r7, #20]
 801b1a6:	fb01 f303 	mul.w	r3, r1, r3
 801b1aa:	1ad3      	subs	r3, r2, r3
 801b1ac:	687a      	ldr	r2, [r7, #4]
 801b1ae:	fb02 f303 	mul.w	r3, r2, r3
 801b1b2:	149a      	asrs	r2, r3, #18
 801b1b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	441a      	add	r2, r3
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	601a      	str	r2, [r3, #0]
            p->y = (((cache->sinma * x + cache->cosma * y) * scale_y) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 801b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1c0:	685b      	ldr	r3, [r3, #4]
 801b1c2:	69ba      	ldr	r2, [r7, #24]
 801b1c4:	fb03 f202 	mul.w	r2, r3, r2
 801b1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ca:	689b      	ldr	r3, [r3, #8]
 801b1cc:	6979      	ldr	r1, [r7, #20]
 801b1ce:	fb01 f303 	mul.w	r3, r1, r3
 801b1d2:	4413      	add	r3, r2
 801b1d4:	683a      	ldr	r2, [r7, #0]
 801b1d6:	fb02 f303 	mul.w	r3, r2, r3
 801b1da:	149a      	asrs	r2, r3, #18
 801b1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b1de:	685b      	ldr	r3, [r3, #4]
 801b1e0:	441a      	add	r2, r3
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	605a      	str	r2, [r3, #4]
 801b1e6:	e000      	b.n	801b1ea <lv_point_transform+0x286>
        return;
 801b1e8:	bf00      	nop
        }

    }
}
 801b1ea:	3740      	adds	r7, #64	@ 0x40
 801b1ec:	46bd      	mov	sp, r7
 801b1ee:	bd80      	pop	{r7, pc}
 801b1f0:	200000f8 	.word	0x200000f8
 801b1f4:	66666667 	.word	0x66666667

0801b1f8 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 801b1f8:	b480      	push	{r7}
 801b1fa:	b08b      	sub	sp, #44	@ 0x2c
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
 801b200:	6039      	str	r1, [r7, #0]
    int32_t r = (area->x2 - area->x1) / 2;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	689a      	ldr	r2, [r3, #8]
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	1ad3      	subs	r3, r2, r3
 801b20c:	0fda      	lsrs	r2, r3, #31
 801b20e:	4413      	add	r3, r2
 801b210:	105b      	asrs	r3, r3, #1
 801b212:	627b      	str	r3, [r7, #36]	@ 0x24

    /*Circle center*/
    int32_t cx = area->x1 + r;
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b21a:	4413      	add	r3, r2
 801b21c:	623b      	str	r3, [r7, #32]
    int32_t cy = area->y1 + r;
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	685b      	ldr	r3, [r3, #4]
 801b222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b224:	4413      	add	r3, r2
 801b226:	61fb      	str	r3, [r7, #28]

    /*Simplify the code by moving everything to (0, 0)*/
    int32_t px = p->x - cx;
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	681a      	ldr	r2, [r3, #0]
 801b22c:	6a3b      	ldr	r3, [r7, #32]
 801b22e:	1ad3      	subs	r3, r2, r3
 801b230:	61bb      	str	r3, [r7, #24]
    int32_t py = p->y - cy;
 801b232:	683b      	ldr	r3, [r7, #0]
 801b234:	685a      	ldr	r2, [r3, #4]
 801b236:	69fb      	ldr	r3, [r7, #28]
 801b238:	1ad3      	subs	r3, r2, r3
 801b23a:	617b      	str	r3, [r7, #20]

    uint32_t r_sqrd = r * r;
 801b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b23e:	fb03 f303 	mul.w	r3, r3, r3
 801b242:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 801b244:	69bb      	ldr	r3, [r7, #24]
 801b246:	fb03 f203 	mul.w	r2, r3, r3
 801b24a:	697b      	ldr	r3, [r7, #20]
 801b24c:	fb03 f303 	mul.w	r3, r3, r3
 801b250:	4413      	add	r3, r2
 801b252:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 801b254:	68fa      	ldr	r2, [r7, #12]
 801b256:	693b      	ldr	r3, [r7, #16]
 801b258:	429a      	cmp	r2, r3
 801b25a:	d801      	bhi.n	801b260 <lv_point_within_circle+0x68>
        return true;
 801b25c:	2301      	movs	r3, #1
 801b25e:	e000      	b.n	801b262 <lv_point_within_circle+0x6a>
    else
        return false;
 801b260:	2300      	movs	r3, #0
}
 801b262:	4618      	mov	r0, r3
 801b264:	372c      	adds	r7, #44	@ 0x2c
 801b266:	46bd      	mov	sp, r7
 801b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26c:	4770      	bx	lr

0801b26e <lv_array_at>:
    array->size++;
    return LV_RESULT_OK;
}

void * lv_array_at(const lv_array_t * array, uint32_t index)
{
 801b26e:	b480      	push	{r7}
 801b270:	b083      	sub	sp, #12
 801b272:	af00      	add	r7, sp, #0
 801b274:	6078      	str	r0, [r7, #4]
 801b276:	6039      	str	r1, [r7, #0]
    if(index >= array->size) {
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	685b      	ldr	r3, [r3, #4]
 801b27c:	683a      	ldr	r2, [r7, #0]
 801b27e:	429a      	cmp	r2, r3
 801b280:	d301      	bcc.n	801b286 <lv_array_at+0x18>
        return NULL;
 801b282:	2300      	movs	r3, #0
 801b284:	e00d      	b.n	801b2a2 <lv_array_at+0x34>
    }

    LV_ASSERT_NULL(array->data);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d101      	bne.n	801b292 <lv_array_at+0x24>
 801b28e:	bf00      	nop
 801b290:	e7fd      	b.n	801b28e <lv_array_at+0x20>
    return array->data + index * array->element_size;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681a      	ldr	r2, [r3, #0]
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	68db      	ldr	r3, [r3, #12]
 801b29a:	6839      	ldr	r1, [r7, #0]
 801b29c:	fb01 f303 	mul.w	r3, r1, r3
 801b2a0:	4413      	add	r3, r2
}
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	370c      	adds	r7, #12
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ac:	4770      	bx	lr
	...

0801b2b0 <lv_color_format_get_bpp>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

uint8_t lv_color_format_get_bpp(lv_color_format_t cf)
{
 801b2b0:	b480      	push	{r7}
 801b2b2:	b083      	sub	sp, #12
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	71fb      	strb	r3, [r7, #7]
    switch(cf) {
 801b2ba:	79fb      	ldrb	r3, [r7, #7]
 801b2bc:	3b06      	subs	r3, #6
 801b2be:	2b0e      	cmp	r3, #14
 801b2c0:	d82e      	bhi.n	801b320 <lv_color_format_get_bpp+0x70>
 801b2c2:	a201      	add	r2, pc, #4	@ (adr r2, 801b2c8 <lv_color_format_get_bpp+0x18>)
 801b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2c8:	0801b311 	.word	0x0801b311
 801b2cc:	0801b305 	.word	0x0801b305
 801b2d0:	0801b309 	.word	0x0801b309
 801b2d4:	0801b30d 	.word	0x0801b30d
 801b2d8:	0801b311 	.word	0x0801b311
 801b2dc:	0801b305 	.word	0x0801b305
 801b2e0:	0801b309 	.word	0x0801b309
 801b2e4:	0801b30d 	.word	0x0801b30d
 801b2e8:	0801b311 	.word	0x0801b311
 801b2ec:	0801b319 	.word	0x0801b319
 801b2f0:	0801b31d 	.word	0x0801b31d
 801b2f4:	0801b31d 	.word	0x0801b31d
 801b2f8:	0801b315 	.word	0x0801b315
 801b2fc:	0801b319 	.word	0x0801b319
 801b300:	0801b315 	.word	0x0801b315
        case LV_COLOR_FORMAT_I1:
        case LV_COLOR_FORMAT_A1:
            return 1;
 801b304:	2301      	movs	r3, #1
 801b306:	e00c      	b.n	801b322 <lv_color_format_get_bpp+0x72>
        case LV_COLOR_FORMAT_I2:
        case LV_COLOR_FORMAT_A2:
            return 2;
 801b308:	2302      	movs	r3, #2
 801b30a:	e00a      	b.n	801b322 <lv_color_format_get_bpp+0x72>
        case LV_COLOR_FORMAT_I4:
        case LV_COLOR_FORMAT_A4:
            return 4;
 801b30c:	2304      	movs	r3, #4
 801b30e:	e008      	b.n	801b322 <lv_color_format_get_bpp+0x72>
        case LV_COLOR_FORMAT_L8:
        case LV_COLOR_FORMAT_A8:
        case LV_COLOR_FORMAT_I8:
            return 8;
 801b310:	2308      	movs	r3, #8
 801b312:	e006      	b.n	801b322 <lv_color_format_get_bpp+0x72>

        case LV_COLOR_FORMAT_RGB565A8:
        case LV_COLOR_FORMAT_RGB565:
            return 16;
 801b314:	2310      	movs	r3, #16
 801b316:	e004      	b.n	801b322 <lv_color_format_get_bpp+0x72>

        case LV_COLOR_FORMAT_ARGB8565:
        case LV_COLOR_FORMAT_RGB888:
            return 24;
 801b318:	2318      	movs	r3, #24
 801b31a:	e002      	b.n	801b322 <lv_color_format_get_bpp+0x72>
        case LV_COLOR_FORMAT_ARGB8888:
        case LV_COLOR_FORMAT_XRGB8888:
            return 32;
 801b31c:	2320      	movs	r3, #32
 801b31e:	e000      	b.n	801b322 <lv_color_format_get_bpp+0x72>

        case LV_COLOR_FORMAT_UNKNOWN:
        default:
            return 0;
 801b320:	2300      	movs	r3, #0
    }
}
 801b322:	4618      	mov	r0, r3
 801b324:	370c      	adds	r7, #12
 801b326:	46bd      	mov	sp, r7
 801b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32c:	4770      	bx	lr
 801b32e:	bf00      	nop

0801b330 <lv_color_format_has_alpha>:

bool lv_color_format_has_alpha(lv_color_format_t cf)
{
 801b330:	b480      	push	{r7}
 801b332:	b083      	sub	sp, #12
 801b334:	af00      	add	r7, sp, #0
 801b336:	4603      	mov	r3, r0
 801b338:	71fb      	strb	r3, [r7, #7]
    switch(cf) {
 801b33a:	79fb      	ldrb	r3, [r7, #7]
 801b33c:	3b07      	subs	r3, #7
 801b33e:	2b0d      	cmp	r3, #13
 801b340:	bf8c      	ite	hi
 801b342:	2201      	movhi	r2, #1
 801b344:	2200      	movls	r2, #0
 801b346:	b2d2      	uxtb	r2, r2
 801b348:	2a00      	cmp	r2, #0
 801b34a:	d10e      	bne.n	801b36a <lv_color_format_has_alpha+0x3a>
 801b34c:	f242 22ff 	movw	r2, #8959	@ 0x22ff
 801b350:	fa22 f303 	lsr.w	r3, r2, r3
 801b354:	f003 0301 	and.w	r3, r3, #1
 801b358:	2b00      	cmp	r3, #0
 801b35a:	bf14      	ite	ne
 801b35c:	2301      	movne	r3, #1
 801b35e:	2300      	moveq	r3, #0
 801b360:	b2db      	uxtb	r3, r3
 801b362:	2b00      	cmp	r3, #0
 801b364:	d001      	beq.n	801b36a <lv_color_format_has_alpha+0x3a>
        case LV_COLOR_FORMAT_I2:
        case LV_COLOR_FORMAT_I4:
        case LV_COLOR_FORMAT_I8:
        case LV_COLOR_FORMAT_RGB565A8:
        case LV_COLOR_FORMAT_ARGB8888:
            return true;
 801b366:	2301      	movs	r3, #1
 801b368:	e000      	b.n	801b36c <lv_color_format_has_alpha+0x3c>
        default:
            return false;
 801b36a:	2300      	movs	r3, #0
    }
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	370c      	adds	r7, #12
 801b370:	46bd      	mov	sp, r7
 801b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b376:	4770      	bx	lr

0801b378 <lv_color_to_32>:

lv_color32_t lv_color_to_32(lv_color_t color, lv_opa_t opa)
{
 801b378:	b480      	push	{r7}
 801b37a:	b085      	sub	sp, #20
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
 801b380:	460b      	mov	r3, r1
 801b382:	70fb      	strb	r3, [r7, #3]
    lv_color32_t c32;
    c32.red = color.red;
 801b384:	79bb      	ldrb	r3, [r7, #6]
 801b386:	72bb      	strb	r3, [r7, #10]
    c32.green = color.green;
 801b388:	797b      	ldrb	r3, [r7, #5]
 801b38a:	727b      	strb	r3, [r7, #9]
    c32.blue = color.blue;
 801b38c:	793b      	ldrb	r3, [r7, #4]
 801b38e:	723b      	strb	r3, [r7, #8]
    c32.alpha = opa;
 801b390:	78fb      	ldrb	r3, [r7, #3]
 801b392:	72fb      	strb	r3, [r7, #11]
    return c32;
 801b394:	68bb      	ldr	r3, [r7, #8]
 801b396:	60fb      	str	r3, [r7, #12]
 801b398:	2300      	movs	r3, #0
 801b39a:	7b3a      	ldrb	r2, [r7, #12]
 801b39c:	f362 0307 	bfi	r3, r2, #0, #8
 801b3a0:	7b7a      	ldrb	r2, [r7, #13]
 801b3a2:	f362 230f 	bfi	r3, r2, #8, #8
 801b3a6:	7bba      	ldrb	r2, [r7, #14]
 801b3a8:	f362 4317 	bfi	r3, r2, #16, #8
 801b3ac:	7bfa      	ldrb	r2, [r7, #15]
 801b3ae:	f362 631f 	bfi	r3, r2, #24, #8
}
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	3714      	adds	r7, #20
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3bc:	4770      	bx	lr

0801b3be <lv_color_to_u16>:

uint16_t lv_color_to_u16(lv_color_t color)
{
 801b3be:	b480      	push	{r7}
 801b3c0:	b083      	sub	sp, #12
 801b3c2:	af00      	add	r7, sp, #0
 801b3c4:	6078      	str	r0, [r7, #4]
    return ((color.red & 0xF8) << 8) + ((color.green & 0xFC) << 3) + ((color.blue & 0xF8) >> 3);
 801b3c6:	79bb      	ldrb	r3, [r7, #6]
 801b3c8:	021b      	lsls	r3, r3, #8
 801b3ca:	b21b      	sxth	r3, r3
 801b3cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 801b3d0:	f023 0307 	bic.w	r3, r3, #7
 801b3d4:	b21a      	sxth	r2, r3
 801b3d6:	797b      	ldrb	r3, [r7, #5]
 801b3d8:	00db      	lsls	r3, r3, #3
 801b3da:	b21b      	sxth	r3, r3
 801b3dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801b3e0:	b21b      	sxth	r3, r3
 801b3e2:	4313      	orrs	r3, r2
 801b3e4:	b21b      	sxth	r3, r3
 801b3e6:	b29b      	uxth	r3, r3
 801b3e8:	793a      	ldrb	r2, [r7, #4]
 801b3ea:	08d2      	lsrs	r2, r2, #3
 801b3ec:	b2d2      	uxtb	r2, r2
 801b3ee:	4413      	add	r3, r2
 801b3f0:	b29b      	uxth	r3, r3
}
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	370c      	adds	r7, #12
 801b3f6:	46bd      	mov	sp, r7
 801b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fc:	4770      	bx	lr

0801b3fe <lv_color_to_u32>:

uint32_t lv_color_to_u32(lv_color_t color)
{
 801b3fe:	b480      	push	{r7}
 801b400:	b083      	sub	sp, #12
 801b402:	af00      	add	r7, sp, #0
 801b404:	6078      	str	r0, [r7, #4]
    return (uint32_t)((uint32_t)0xff << 24) + (color.red << 16) + (color.green << 8) + (color.blue);
 801b406:	79bb      	ldrb	r3, [r7, #6]
 801b408:	041a      	lsls	r2, r3, #16
 801b40a:	797b      	ldrb	r3, [r7, #5]
 801b40c:	021b      	lsls	r3, r3, #8
 801b40e:	4413      	add	r3, r2
 801b410:	793a      	ldrb	r2, [r7, #4]
 801b412:	4413      	add	r3, r2
 801b414:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
}
 801b418:	4618      	mov	r0, r3
 801b41a:	370c      	adds	r7, #12
 801b41c:	46bd      	mov	sp, r7
 801b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b422:	4770      	bx	lr

0801b424 <lv_array_size>:
 * Return how many elements are stored in the array.
 * @param array pointer to an `lv_array_t` variable
 * @return the number of elements stored in the array
 */
static inline uint32_t lv_array_size(const lv_array_t * array)
{
 801b424:	b480      	push	{r7}
 801b426:	b083      	sub	sp, #12
 801b428:	af00      	add	r7, sp, #0
 801b42a:	6078      	str	r0, [r7, #4]
    return array->size;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	685b      	ldr	r3, [r3, #4]
}
 801b430:	4618      	mov	r0, r3
 801b432:	370c      	adds	r7, #12
 801b434:	46bd      	mov	sp, r7
 801b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b43a:	4770      	bx	lr

0801b43c <lv_array_front>:
 * Returns a pointer to the first element in the array.
 * @param array pointer to an `lv_array_t` variable
 * @return a pointer to the first element in the array
 */
static inline void * lv_array_front(const lv_array_t * array)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b082      	sub	sp, #8
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
    return lv_array_at(array, 0);
 801b444:	2100      	movs	r1, #0
 801b446:	6878      	ldr	r0, [r7, #4]
 801b448:	f7ff ff11 	bl	801b26e <lv_array_at>
 801b44c:	4603      	mov	r3, r0
}
 801b44e:	4618      	mov	r0, r3
 801b450:	3708      	adds	r7, #8
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
	...

0801b458 <_lv_event_push>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_event_push(lv_event_t * e)
{
 801b458:	b480      	push	{r7}
 801b45a:	b083      	sub	sp, #12
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e->prev = event_head;
 801b460:	4b06      	ldr	r3, [pc, #24]	@ (801b47c <_lv_event_push+0x24>)
 801b462:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	615a      	str	r2, [r3, #20]
    event_head = e;
 801b468:	4a04      	ldr	r2, [pc, #16]	@ (801b47c <_lv_event_push+0x24>)
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6793      	str	r3, [r2, #120]	@ 0x78

}
 801b46e:	bf00      	nop
 801b470:	370c      	adds	r7, #12
 801b472:	46bd      	mov	sp, r7
 801b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b478:	4770      	bx	lr
 801b47a:	bf00      	nop
 801b47c:	2000008c 	.word	0x2000008c

0801b480 <_lv_event_pop>:

void _lv_event_pop(lv_event_t * e)
{
 801b480:	b480      	push	{r7}
 801b482:	b083      	sub	sp, #12
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
    event_head = e->prev;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	695b      	ldr	r3, [r3, #20]
 801b48c:	4a03      	ldr	r2, [pc, #12]	@ (801b49c <_lv_event_pop+0x1c>)
 801b48e:	6793      	str	r3, [r2, #120]	@ 0x78
}
 801b490:	bf00      	nop
 801b492:	370c      	adds	r7, #12
 801b494:	46bd      	mov	sp, r7
 801b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b49a:	4770      	bx	lr
 801b49c:	2000008c 	.word	0x2000008c

0801b4a0 <lv_event_send>:

lv_result_t lv_event_send(lv_event_list_t * list, lv_event_t * e, bool preprocess)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b088      	sub	sp, #32
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	60f8      	str	r0, [r7, #12]
 801b4a8:	60b9      	str	r1, [r7, #8]
 801b4aa:	4613      	mov	r3, r2
 801b4ac:	71fb      	strb	r3, [r7, #7]
    if(list == NULL) return LV_RESULT_OK;
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d101      	bne.n	801b4b8 <lv_event_send+0x18>
 801b4b4:	2301      	movs	r3, #1
 801b4b6:	e064      	b.n	801b582 <lv_event_send+0xe2>

    uint32_t i = 0;
 801b4b8:	2300      	movs	r3, #0
 801b4ba:	61fb      	str	r3, [r7, #28]
    lv_event_dsc_t ** dsc = lv_array_front(list);
 801b4bc:	68f8      	ldr	r0, [r7, #12]
 801b4be:	f7ff ffbd 	bl	801b43c <lv_array_front>
 801b4c2:	61b8      	str	r0, [r7, #24]
    uint32_t size = lv_array_size(list);
 801b4c4:	68f8      	ldr	r0, [r7, #12]
 801b4c6:	f7ff ffad 	bl	801b424 <lv_array_size>
 801b4ca:	6178      	str	r0, [r7, #20]
    for(i = 0; i < size; i++) {
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	61fb      	str	r3, [r7, #28]
 801b4d0:	e052      	b.n	801b578 <lv_event_send+0xd8>
        if(dsc[i]->cb == NULL) continue;
 801b4d2:	69fb      	ldr	r3, [r7, #28]
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	69ba      	ldr	r2, [r7, #24]
 801b4d8:	4413      	add	r3, r2
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d044      	beq.n	801b56c <lv_event_send+0xcc>
        bool is_preprocessed = (dsc[i]->filter & LV_EVENT_PREPROCESS) != 0;
 801b4e2:	69fb      	ldr	r3, [r7, #28]
 801b4e4:	009b      	lsls	r3, r3, #2
 801b4e6:	69ba      	ldr	r2, [r7, #24]
 801b4e8:	4413      	add	r3, r2
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	689b      	ldr	r3, [r3, #8]
 801b4ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	bf14      	ite	ne
 801b4f6:	2301      	movne	r3, #1
 801b4f8:	2300      	moveq	r3, #0
 801b4fa:	74fb      	strb	r3, [r7, #19]
        if(is_preprocessed != preprocess) continue;
 801b4fc:	7cfa      	ldrb	r2, [r7, #19]
 801b4fe:	79fb      	ldrb	r3, [r7, #7]
 801b500:	429a      	cmp	r2, r3
 801b502:	d135      	bne.n	801b570 <lv_event_send+0xd0>
        lv_event_code_t filter = dsc[i]->filter & ~LV_EVENT_PREPROCESS;
 801b504:	69fb      	ldr	r3, [r7, #28]
 801b506:	009b      	lsls	r3, r3, #2
 801b508:	69ba      	ldr	r2, [r7, #24]
 801b50a:	4413      	add	r3, r2
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	689b      	ldr	r3, [r3, #8]
 801b510:	b29b      	uxth	r3, r3
 801b512:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801b516:	823b      	strh	r3, [r7, #16]
        if(filter == LV_EVENT_ALL || filter == e->code) {
 801b518:	8a3b      	ldrh	r3, [r7, #16]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d004      	beq.n	801b528 <lv_event_send+0x88>
 801b51e:	68bb      	ldr	r3, [r7, #8]
 801b520:	891b      	ldrh	r3, [r3, #8]
 801b522:	8a3a      	ldrh	r2, [r7, #16]
 801b524:	429a      	cmp	r2, r3
 801b526:	d124      	bne.n	801b572 <lv_event_send+0xd2>
            e->user_data = dsc[i]->user_data;
 801b528:	69fb      	ldr	r3, [r7, #28]
 801b52a:	009b      	lsls	r3, r3, #2
 801b52c:	69ba      	ldr	r2, [r7, #24]
 801b52e:	4413      	add	r3, r2
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	685a      	ldr	r2, [r3, #4]
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	60da      	str	r2, [r3, #12]
            dsc[i]->cb(e);
 801b538:	69fb      	ldr	r3, [r7, #28]
 801b53a:	009b      	lsls	r3, r3, #2
 801b53c:	69ba      	ldr	r2, [r7, #24]
 801b53e:	4413      	add	r3, r2
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	68b8      	ldr	r0, [r7, #8]
 801b546:	4798      	blx	r3
            if(e->stop_processing) return LV_RESULT_OK;
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	7e1b      	ldrb	r3, [r3, #24]
 801b54c:	f003 0302 	and.w	r3, r3, #2
 801b550:	b2db      	uxtb	r3, r3
 801b552:	2b00      	cmp	r3, #0
 801b554:	d001      	beq.n	801b55a <lv_event_send+0xba>
 801b556:	2301      	movs	r3, #1
 801b558:	e013      	b.n	801b582 <lv_event_send+0xe2>

            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RESULT_INVALID;
 801b55a:	68bb      	ldr	r3, [r7, #8]
 801b55c:	7e1b      	ldrb	r3, [r3, #24]
 801b55e:	f003 0301 	and.w	r3, r3, #1
 801b562:	b2db      	uxtb	r3, r3
 801b564:	2b00      	cmp	r3, #0
 801b566:	d004      	beq.n	801b572 <lv_event_send+0xd2>
 801b568:	2300      	movs	r3, #0
 801b56a:	e00a      	b.n	801b582 <lv_event_send+0xe2>
        if(dsc[i]->cb == NULL) continue;
 801b56c:	bf00      	nop
 801b56e:	e000      	b.n	801b572 <lv_event_send+0xd2>
        if(is_preprocessed != preprocess) continue;
 801b570:	bf00      	nop
    for(i = 0; i < size; i++) {
 801b572:	69fb      	ldr	r3, [r7, #28]
 801b574:	3301      	adds	r3, #1
 801b576:	61fb      	str	r3, [r7, #28]
 801b578:	69fa      	ldr	r2, [r7, #28]
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d3a8      	bcc.n	801b4d2 <lv_event_send+0x32>

        }
    }
    return LV_RESULT_OK;
 801b580:	2301      	movs	r3, #1
}
 801b582:	4618      	mov	r0, r3
 801b584:	3720      	adds	r7, #32
 801b586:	46bd      	mov	sp, r7
 801b588:	bd80      	pop	{r7, pc}
	...

0801b58c <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	af00      	add	r7, sp, #0
    _lv_ll_init(fsdrv_ll_p, sizeof(lv_fs_drv_t *));
 801b590:	2104      	movs	r1, #4
 801b592:	4802      	ldr	r0, [pc, #8]	@ (801b59c <_lv_fs_init+0x10>)
 801b594:	f000 fb99 	bl	801bcca <_lv_ll_init>
}
 801b598:	bf00      	nop
 801b59a:	bd80      	pop	{r7, pc}
 801b59c:	20000228 	.word	0x20000228

0801b5a0 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b08a      	sub	sp, #40	@ 0x28
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	60f8      	str	r0, [r7, #12]
 801b5a8:	60b9      	str	r1, [r7, #8]
 801b5aa:	4613      	mov	r3, r2
 801b5ac:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d101      	bne.n	801b5b8 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 801b5b4:	230b      	movs	r3, #11
 801b5b6:	e07c      	b.n	801b6b2 <lv_fs_open+0x112>
    }

    char letter = path[0];
 801b5b8:	68bb      	ldr	r3, [r7, #8]
 801b5ba:	781b      	ldrb	r3, [r3, #0]
 801b5bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 801b5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f000 fb19 	bl	801bbfc <lv_fs_get_drv>
 801b5ca:	6238      	str	r0, [r7, #32]

    if(drv == NULL) {
 801b5cc:	6a3b      	ldr	r3, [r7, #32]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d101      	bne.n	801b5d6 <lv_fs_open+0x36>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 801b5d2:	2303      	movs	r3, #3
 801b5d4:	e06d      	b.n	801b6b2 <lv_fs_open+0x112>
    }

    if(drv->ready_cb) {
 801b5d6:	6a3b      	ldr	r3, [r7, #32]
 801b5d8:	689b      	ldr	r3, [r3, #8]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d00b      	beq.n	801b5f6 <lv_fs_open+0x56>
        if(drv->ready_cb(drv) == false) {
 801b5de:	6a3b      	ldr	r3, [r7, #32]
 801b5e0:	689b      	ldr	r3, [r3, #8]
 801b5e2:	6a38      	ldr	r0, [r7, #32]
 801b5e4:	4798      	blx	r3
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	f083 0301 	eor.w	r3, r3, #1
 801b5ec:	b2db      	uxtb	r3, r3
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d001      	beq.n	801b5f6 <lv_fs_open+0x56>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 801b5f2:	2301      	movs	r3, #1
 801b5f4:	e05d      	b.n	801b6b2 <lv_fs_open+0x112>
        }
    }

    if(drv->open_cb == NULL) {
 801b5f6:	6a3b      	ldr	r3, [r7, #32]
 801b5f8:	68db      	ldr	r3, [r3, #12]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d101      	bne.n	801b602 <lv_fs_open+0x62>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 801b5fe:	2309      	movs	r3, #9
 801b600:	e057      	b.n	801b6b2 <lv_fs_open+0x112>
    }

    file_p->drv = drv;
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	6a3a      	ldr	r2, [r7, #32]
 801b606:	605a      	str	r2, [r3, #4]

    /* For memory-mapped files we set the file handle to our file descriptor so that we can access the cache from the file operations */
    if(drv->cache_size == LV_FS_CACHE_FROM_BUFFER) {
 801b608:	6a3b      	ldr	r3, [r7, #32]
 801b60a:	685b      	ldr	r3, [r3, #4]
 801b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b610:	d103      	bne.n	801b61a <lv_fs_open+0x7a>
        file_p->file_d = file_p;
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	68fa      	ldr	r2, [r7, #12]
 801b616:	601a      	str	r2, [r3, #0]
 801b618:	e016      	b.n	801b648 <lv_fs_open+0xa8>
    }
    else {
        const char * real_path = lv_fs_get_real_path(path);
 801b61a:	68b8      	ldr	r0, [r7, #8]
 801b61c:	f000 fb40 	bl	801bca0 <lv_fs_get_real_path>
 801b620:	61f8      	str	r0, [r7, #28]
        void * file_d = drv->open_cb(drv, real_path, mode);
 801b622:	6a3b      	ldr	r3, [r7, #32]
 801b624:	68db      	ldr	r3, [r3, #12]
 801b626:	79fa      	ldrb	r2, [r7, #7]
 801b628:	69f9      	ldr	r1, [r7, #28]
 801b62a:	6a38      	ldr	r0, [r7, #32]
 801b62c:	4798      	blx	r3
 801b62e:	61b8      	str	r0, [r7, #24]
        if(file_d == NULL || file_d == (void *)(-1)) {
 801b630:	69bb      	ldr	r3, [r7, #24]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d003      	beq.n	801b63e <lv_fs_open+0x9e>
 801b636:	69bb      	ldr	r3, [r7, #24]
 801b638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b63c:	d101      	bne.n	801b642 <lv_fs_open+0xa2>
            return LV_FS_RES_UNKNOWN;
 801b63e:	230c      	movs	r3, #12
 801b640:	e037      	b.n	801b6b2 <lv_fs_open+0x112>
        }
        file_p->file_d = file_d;
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	69ba      	ldr	r2, [r7, #24]
 801b646:	601a      	str	r2, [r3, #0]
    }

    if(drv->cache_size) {
 801b648:	6a3b      	ldr	r3, [r7, #32]
 801b64a:	685b      	ldr	r3, [r3, #4]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d02f      	beq.n	801b6b0 <lv_fs_open+0x110>
        file_p->cache = lv_malloc_zeroed(sizeof(lv_fs_file_cache_t));
 801b650:	2010      	movs	r0, #16
 801b652:	f002 fd3b 	bl	801e0cc <lv_malloc_zeroed>
 801b656:	4602      	mov	r2, r0
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	689b      	ldr	r3, [r3, #8]
 801b660:	2b00      	cmp	r3, #0
 801b662:	d101      	bne.n	801b668 <lv_fs_open+0xc8>
 801b664:	bf00      	nop
 801b666:	e7fd      	b.n	801b664 <lv_fs_open+0xc4>

        /* If this is a memory-mapped file, then set "cache" to the memory buffer */
        if(drv->cache_size == LV_FS_CACHE_FROM_BUFFER) {
 801b668:	6a3b      	ldr	r3, [r7, #32]
 801b66a:	685b      	ldr	r3, [r3, #4]
 801b66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b670:	d114      	bne.n	801b69c <lv_fs_open+0xfc>
            lv_fs_path_ex_t * path_ex = (lv_fs_path_ex_t *)path;
 801b672:	68bb      	ldr	r3, [r7, #8]
 801b674:	617b      	str	r3, [r7, #20]
            file_p->cache->buffer = (void *)path_ex->buffer;
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	689b      	ldr	r3, [r3, #8]
 801b67a:	697a      	ldr	r2, [r7, #20]
 801b67c:	6852      	ldr	r2, [r2, #4]
 801b67e:	60da      	str	r2, [r3, #12]
            file_p->cache->start = 0;
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	689b      	ldr	r3, [r3, #8]
 801b684:	2200      	movs	r2, #0
 801b686:	601a      	str	r2, [r3, #0]
            file_p->cache->file_position = 0;
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	689b      	ldr	r3, [r3, #8]
 801b68c:	2200      	movs	r2, #0
 801b68e:	609a      	str	r2, [r3, #8]
            file_p->cache->end = path_ex->size;
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	689b      	ldr	r3, [r3, #8]
 801b694:	697a      	ldr	r2, [r7, #20]
 801b696:	6892      	ldr	r2, [r2, #8]
 801b698:	605a      	str	r2, [r3, #4]
 801b69a:	e009      	b.n	801b6b0 <lv_fs_open+0x110>
        }
        /*Set an invalid range by default*/
        else {
            file_p->cache->start = UINT32_MAX;
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	689b      	ldr	r3, [r3, #8]
 801b6a0:	f04f 32ff 	mov.w	r2, #4294967295
 801b6a4:	601a      	str	r2, [r3, #0]
            file_p->cache->end = UINT32_MAX - 1;
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	689b      	ldr	r3, [r3, #8]
 801b6aa:	f06f 0201 	mvn.w	r2, #1
 801b6ae:	605a      	str	r2, [r3, #4]
        }
    }

    return LV_FS_RES_OK;
 801b6b0:	2300      	movs	r3, #0
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	3728      	adds	r7, #40	@ 0x28
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}

0801b6ba <lv_fs_close>:
    path->buffer = buf;
    path->size = size;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 801b6ba:	b580      	push	{r7, lr}
 801b6bc:	b084      	sub	sp, #16
 801b6be:	af00      	add	r7, sp, #0
 801b6c0:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	685b      	ldr	r3, [r3, #4]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d101      	bne.n	801b6ce <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 801b6ca:	230b      	movs	r3, #11
 801b6cc:	e03a      	b.n	801b744 <lv_fs_close+0x8a>
    }

    if(file_p->drv->close_cb == NULL) {
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	685b      	ldr	r3, [r3, #4]
 801b6d2:	691b      	ldr	r3, [r3, #16]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d101      	bne.n	801b6dc <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 801b6d8:	2309      	movs	r3, #9
 801b6da:	e033      	b.n	801b744 <lv_fs_close+0x8a>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	685b      	ldr	r3, [r3, #4]
 801b6e0:	691b      	ldr	r3, [r3, #16]
 801b6e2:	687a      	ldr	r2, [r7, #4]
 801b6e4:	6850      	ldr	r0, [r2, #4]
 801b6e6:	687a      	ldr	r2, [r7, #4]
 801b6e8:	6812      	ldr	r2, [r2, #0]
 801b6ea:	4611      	mov	r1, r2
 801b6ec:	4798      	blx	r3
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	685b      	ldr	r3, [r3, #4]
 801b6f6:	685b      	ldr	r3, [r3, #4]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d019      	beq.n	801b730 <lv_fs_close+0x76>
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	689b      	ldr	r3, [r3, #8]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d015      	beq.n	801b730 <lv_fs_close+0x76>
        /* Only free cache if it was pre-allocated (for memory-mapped files it is never allocated) */
        if(file_p->drv->cache_size != LV_FS_CACHE_FROM_BUFFER && file_p->cache->buffer) {
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	685b      	ldr	r3, [r3, #4]
 801b70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b70e:	d00a      	beq.n	801b726 <lv_fs_close+0x6c>
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	689b      	ldr	r3, [r3, #8]
 801b714:	68db      	ldr	r3, [r3, #12]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d005      	beq.n	801b726 <lv_fs_close+0x6c>
            lv_free(file_p->cache->buffer);
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	689b      	ldr	r3, [r3, #8]
 801b71e:	68db      	ldr	r3, [r3, #12]
 801b720:	4618      	mov	r0, r3
 801b722:	f002 fcf1 	bl	801e108 <lv_free>
        }

        lv_free(file_p->cache);
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	689b      	ldr	r3, [r3, #8]
 801b72a:	4618      	mov	r0, r3
 801b72c:	f002 fcec 	bl	801e108 <lv_free>
    }

    file_p->file_d = NULL;
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	2200      	movs	r2, #0
 801b734:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	2200      	movs	r2, #0
 801b73a:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	2200      	movs	r2, #0
 801b740:	609a      	str	r2, [r3, #8]

    return res;
 801b742:	7bfb      	ldrb	r3, [r7, #15]
}
 801b744:	4618      	mov	r0, r3
 801b746:	3710      	adds	r7, #16
 801b748:	46bd      	mov	sp, r7
 801b74a:	bd80      	pop	{r7, pc}

0801b74c <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 801b74c:	b5b0      	push	{r4, r5, r7, lr}
 801b74e:	b092      	sub	sp, #72	@ 0x48
 801b750:	af02      	add	r7, sp, #8
 801b752:	60f8      	str	r0, [r7, #12]
 801b754:	60b9      	str	r1, [r7, #8]
 801b756:	607a      	str	r2, [r7, #4]
 801b758:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 801b75a:	2300      	movs	r3, #0
 801b75c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint32_t file_position = file_p->cache->file_position;
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	689b      	ldr	r3, [r3, #8]
 801b764:	689b      	ldr	r3, [r3, #8]
 801b766:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t start = file_p->cache->start;
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	689b      	ldr	r3, [r3, #8]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t end = file_p->cache->end;
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	689b      	ldr	r3, [r3, #8]
 801b774:	685b      	ldr	r3, [r3, #4]
 801b776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char * buffer = file_p->cache->buffer;
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	689b      	ldr	r3, [r3, #8]
 801b77c:	68db      	ldr	r3, [r3, #12]
 801b77e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t buffer_size = file_p->drv->cache_size;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	685b      	ldr	r3, [r3, #4]
 801b786:	62bb      	str	r3, [r7, #40]	@ 0x28

    if(start <= file_position && file_position <= end) {
 801b788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b78c:	429a      	cmp	r2, r3
 801b78e:	f200 809c 	bhi.w	801b8ca <lv_fs_read_cached+0x17e>
 801b792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b796:	429a      	cmp	r2, r3
 801b798:	f200 8097 	bhi.w	801b8ca <lv_fs_read_cached+0x17e>
        /* Data can be read from cache buffer */
        uint32_t buffer_remaining_length = (uint32_t)end - file_position + 1;
 801b79c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b79e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b7a0:	1ad3      	subs	r3, r2, r3
 801b7a2:	3301      	adds	r3, #1
 801b7a4:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t buffer_offset = (end - start) - buffer_remaining_length + 1;
 801b7a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7aa:	1ad2      	subs	r2, r2, r3
 801b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ae:	1ad3      	subs	r3, r2, r3
 801b7b0:	3301      	adds	r3, #1
 801b7b2:	623b      	str	r3, [r7, #32]

        /* Do not allow reading beyond the actual memory block for memory-mapped files */
        if(file_p->drv->cache_size == LV_FS_CACHE_FROM_BUFFER) {
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	685b      	ldr	r3, [r3, #4]
 801b7b8:	685b      	ldr	r3, [r3, #4]
 801b7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7be:	d106      	bne.n	801b7ce <lv_fs_read_cached+0x82>
            if(btr > buffer_remaining_length)
 801b7c0:	687a      	ldr	r2, [r7, #4]
 801b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7c4:	429a      	cmp	r2, r3
 801b7c6:	d902      	bls.n	801b7ce <lv_fs_read_cached+0x82>
                btr = buffer_remaining_length - 1;
 801b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ca:	3b01      	subs	r3, #1
 801b7cc:	607b      	str	r3, [r7, #4]
        }

        if(btr <= buffer_remaining_length) {
 801b7ce:	687a      	ldr	r2, [r7, #4]
 801b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d80b      	bhi.n	801b7ee <lv_fs_read_cached+0xa2>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 801b7d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7d8:	6a3b      	ldr	r3, [r7, #32]
 801b7da:	4413      	add	r3, r2
 801b7dc:	687a      	ldr	r2, [r7, #4]
 801b7de:	4619      	mov	r1, r3
 801b7e0:	68b8      	ldr	r0, [r7, #8]
 801b7e2:	f001 fa9f 	bl	801cd24 <lv_memcpy>
            *br = btr;
 801b7e6:	683b      	ldr	r3, [r7, #0]
 801b7e8:	687a      	ldr	r2, [r7, #4]
 801b7ea:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position <= end) {
 801b7ec:	e0cf      	b.n	801b98e <lv_fs_read_cached+0x242>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 801b7ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7f0:	6a3b      	ldr	r3, [r7, #32]
 801b7f2:	4413      	add	r3, r2
 801b7f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b7f6:	4619      	mov	r1, r3
 801b7f8:	68b8      	ldr	r0, [r7, #8]
 801b7fa:	f001 fa93 	bl	801cd24 <lv_memcpy>

            file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->end + 1,
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	69dc      	ldr	r4, [r3, #28]
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	6858      	ldr	r0, [r3, #4]
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	6819      	ldr	r1, [r3, #0]
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	689b      	ldr	r3, [r3, #8]
 801b810:	685b      	ldr	r3, [r3, #4]
 801b812:	1c5a      	adds	r2, r3, #1
 801b814:	2300      	movs	r3, #0
 801b816:	47a0      	blx	r4
                                 LV_FS_SEEK_SET);

            uint32_t bytes_read_to_buffer = 0;
 801b818:	2300      	movs	r3, #0
 801b81a:	61bb      	str	r3, [r7, #24]
            if(btr - buffer_remaining_length > buffer_size) {
 801b81c:	687a      	ldr	r2, [r7, #4]
 801b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b820:	1ad3      	subs	r3, r2, r3
 801b822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b824:	429a      	cmp	r2, r3
 801b826:	d216      	bcs.n	801b856 <lv_fs_read_cached+0x10a>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	685b      	ldr	r3, [r3, #4]
 801b82c:	695c      	ldr	r4, [r3, #20]
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	6858      	ldr	r0, [r3, #4]
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	6819      	ldr	r1, [r3, #0]
 801b836:	68ba      	ldr	r2, [r7, #8]
 801b838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b83a:	18d5      	adds	r5, r2, r3
 801b83c:	687a      	ldr	r2, [r7, #4]
 801b83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b840:	1ad2      	subs	r2, r2, r3
 801b842:	f107 0318 	add.w	r3, r7, #24
 801b846:	9300      	str	r3, [sp, #0]
 801b848:	4613      	mov	r3, r2
 801b84a:	462a      	mov	r2, r5
 801b84c:	47a0      	blx	r4
 801b84e:	4603      	mov	r3, r0
 801b850:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801b854:	e02f      	b.n	801b8b6 <lv_fs_read_cached+0x16a>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	685b      	ldr	r3, [r3, #4]
 801b85a:	695c      	ldr	r4, [r3, #20]
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	6858      	ldr	r0, [r3, #4]
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	6819      	ldr	r1, [r3, #0]
 801b864:	f107 0318 	add.w	r3, r7, #24
 801b868:	9300      	str	r3, [sp, #0]
 801b86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b86c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b86e:	47a0      	blx	r4
 801b870:	4603      	mov	r3, r0
 801b872:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                file_p->cache->start = file_p->cache->end + 1;
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	689b      	ldr	r3, [r3, #8]
 801b87a:	685a      	ldr	r2, [r3, #4]
 801b87c:	68fb      	ldr	r3, [r7, #12]
 801b87e:	689b      	ldr	r3, [r3, #8]
 801b880:	3201      	adds	r2, #1
 801b882:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer - 1;
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	689b      	ldr	r3, [r3, #8]
 801b888:	681a      	ldr	r2, [r3, #0]
 801b88a:	69bb      	ldr	r3, [r7, #24]
 801b88c:	441a      	add	r2, r3
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	689b      	ldr	r3, [r3, #8]
 801b892:	3a01      	subs	r2, #1
 801b894:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 801b896:	687a      	ldr	r2, [r7, #4]
 801b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b89a:	1ad2      	subs	r2, r2, r3
 801b89c:	69bb      	ldr	r3, [r7, #24]
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	bf28      	it	cs
 801b8a2:	4613      	movcs	r3, r2
 801b8a4:	83fb      	strh	r3, [r7, #30]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 801b8a6:	68ba      	ldr	r2, [r7, #8]
 801b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8aa:	4413      	add	r3, r2
 801b8ac:	8bfa      	ldrh	r2, [r7, #30]
 801b8ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f001 fa37 	bl	801cd24 <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 801b8b6:	69ba      	ldr	r2, [r7, #24]
 801b8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ba:	441a      	add	r2, r3
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	bf28      	it	cs
 801b8c2:	461a      	movcs	r2, r3
 801b8c4:	683b      	ldr	r3, [r7, #0]
 801b8c6:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position <= end) {
 801b8c8:	e061      	b.n	801b98e <lv_fs_read_cached+0x242>
        }
    }
    else {
        file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position,
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	685b      	ldr	r3, [r3, #4]
 801b8ce:	69dc      	ldr	r4, [r3, #28]
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	6858      	ldr	r0, [r3, #4]
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	6819      	ldr	r1, [r3, #0]
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	689b      	ldr	r3, [r3, #8]
 801b8dc:	689a      	ldr	r2, [r3, #8]
 801b8de:	2300      	movs	r3, #0
 801b8e0:	47a0      	blx	r4
                             LV_FS_SEEK_SET);

        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 801b8e2:	687a      	ldr	r2, [r7, #4]
 801b8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d90f      	bls.n	801b90a <lv_fs_read_cached+0x1be>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	695c      	ldr	r4, [r3, #20]
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	6858      	ldr	r0, [r3, #4]
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	6819      	ldr	r1, [r3, #0]
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	9300      	str	r3, [sp, #0]
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	68ba      	ldr	r2, [r7, #8]
 801b900:	47a0      	blx	r4
 801b902:	4603      	mov	r3, r0
 801b904:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801b908:	e041      	b.n	801b98e <lv_fs_read_cached+0x242>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 801b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d111      	bne.n	801b934 <lv_fs_read_cached+0x1e8>
                file_p->cache->buffer = lv_malloc(buffer_size);
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	689c      	ldr	r4, [r3, #8]
 801b914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b916:	f002 fbbf 	bl	801e098 <lv_malloc>
 801b91a:	4603      	mov	r3, r0
 801b91c:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	689b      	ldr	r3, [r3, #8]
 801b922:	68db      	ldr	r3, [r3, #12]
 801b924:	2b00      	cmp	r3, #0
 801b926:	d101      	bne.n	801b92c <lv_fs_read_cached+0x1e0>
 801b928:	bf00      	nop
 801b92a:	e7fd      	b.n	801b928 <lv_fs_read_cached+0x1dc>
                buffer = file_p->cache->buffer;
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	689b      	ldr	r3, [r3, #8]
 801b930:	68db      	ldr	r3, [r3, #12]
 801b932:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            uint32_t bytes_read_to_buffer = 0;
 801b934:	2300      	movs	r3, #0
 801b936:	617b      	str	r3, [r7, #20]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	695c      	ldr	r4, [r3, #20]
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	6858      	ldr	r0, [r3, #4]
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	6819      	ldr	r1, [r3, #0]
 801b946:	f107 0314 	add.w	r3, r7, #20
 801b94a:	9300      	str	r3, [sp, #0]
 801b94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b94e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b950:	47a0      	blx	r4
 801b952:	4603      	mov	r3, r0
 801b954:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            file_p->cache->start = file_position;
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	689b      	ldr	r3, [r3, #8]
 801b95c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b95e:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer - 1;
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	689b      	ldr	r3, [r3, #8]
 801b964:	681a      	ldr	r2, [r3, #0]
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	441a      	add	r2, r3
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	689b      	ldr	r3, [r3, #8]
 801b96e:	3a01      	subs	r2, #1
 801b970:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 801b972:	697a      	ldr	r2, [r7, #20]
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	429a      	cmp	r2, r3
 801b978:	bf28      	it	cs
 801b97a:	461a      	movcs	r2, r3
 801b97c:	683b      	ldr	r3, [r7, #0]
 801b97e:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	461a      	mov	r2, r3
 801b986:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b988:	68b8      	ldr	r0, [r7, #8]
 801b98a:	f001 f9cb 	bl	801cd24 <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 801b98e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b992:	2b00      	cmp	r3, #0
 801b994:	d108      	bne.n	801b9a8 <lv_fs_read_cached+0x25c>
        file_p->cache->file_position += *br;
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	689b      	ldr	r3, [r3, #8]
 801b99a:	6899      	ldr	r1, [r3, #8]
 801b99c:	683b      	ldr	r3, [r7, #0]
 801b99e:	681a      	ldr	r2, [r3, #0]
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	689b      	ldr	r3, [r3, #8]
 801b9a4:	440a      	add	r2, r1
 801b9a6:	609a      	str	r2, [r3, #8]
    }

    return res;
 801b9a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	3740      	adds	r7, #64	@ 0x40
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	bdb0      	pop	{r4, r5, r7, pc}

0801b9b4 <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 801b9b4:	b590      	push	{r4, r7, lr}
 801b9b6:	b089      	sub	sp, #36	@ 0x24
 801b9b8:	af02      	add	r7, sp, #8
 801b9ba:	60f8      	str	r0, [r7, #12]
 801b9bc:	60b9      	str	r1, [r7, #8]
 801b9be:	607a      	str	r2, [r7, #4]
 801b9c0:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 801b9c2:	683b      	ldr	r3, [r7, #0]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d002      	beq.n	801b9ce <lv_fs_read+0x1a>
 801b9c8:	683b      	ldr	r3, [r7, #0]
 801b9ca:	2200      	movs	r2, #0
 801b9cc:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	685b      	ldr	r3, [r3, #4]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d101      	bne.n	801b9da <lv_fs_read+0x26>
 801b9d6:	230b      	movs	r3, #11
 801b9d8:	e02d      	b.n	801ba36 <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	695b      	ldr	r3, [r3, #20]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d101      	bne.n	801b9e8 <lv_fs_read+0x34>
 801b9e4:	2309      	movs	r3, #9
 801b9e6:	e026      	b.n	801ba36 <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	685b      	ldr	r3, [r3, #4]
 801b9f0:	685b      	ldr	r3, [r3, #4]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d009      	beq.n	801ba0a <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 801b9f6:	f107 0310 	add.w	r3, r7, #16
 801b9fa:	687a      	ldr	r2, [r7, #4]
 801b9fc:	68b9      	ldr	r1, [r7, #8]
 801b9fe:	68f8      	ldr	r0, [r7, #12]
 801ba00:	f7ff fea4 	bl	801b74c <lv_fs_read_cached>
 801ba04:	4603      	mov	r3, r0
 801ba06:	75fb      	strb	r3, [r7, #23]
 801ba08:	e00e      	b.n	801ba28 <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 801ba0a:	68fb      	ldr	r3, [r7, #12]
 801ba0c:	685b      	ldr	r3, [r3, #4]
 801ba0e:	695c      	ldr	r4, [r3, #20]
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	6858      	ldr	r0, [r3, #4]
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	6819      	ldr	r1, [r3, #0]
 801ba18:	f107 0310 	add.w	r3, r7, #16
 801ba1c:	9300      	str	r3, [sp, #0]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	68ba      	ldr	r2, [r7, #8]
 801ba22:	47a0      	blx	r4
 801ba24:	4603      	mov	r3, r0
 801ba26:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 801ba28:	683b      	ldr	r3, [r7, #0]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d002      	beq.n	801ba34 <lv_fs_read+0x80>
 801ba2e:	693a      	ldr	r2, [r7, #16]
 801ba30:	683b      	ldr	r3, [r7, #0]
 801ba32:	601a      	str	r2, [r3, #0]

    return res;
 801ba34:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba36:	4618      	mov	r0, r3
 801ba38:	371c      	adds	r7, #28
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	bd90      	pop	{r4, r7, pc}

0801ba3e <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 801ba3e:	b590      	push	{r4, r7, lr}
 801ba40:	b087      	sub	sp, #28
 801ba42:	af00      	add	r7, sp, #0
 801ba44:	60f8      	str	r0, [r7, #12]
 801ba46:	60b9      	str	r1, [r7, #8]
 801ba48:	4613      	mov	r3, r2
 801ba4a:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	685b      	ldr	r3, [r3, #4]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d101      	bne.n	801ba58 <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 801ba54:	230b      	movs	r3, #11
 801ba56:	e098      	b.n	801bb8a <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	685b      	ldr	r3, [r3, #4]
 801ba5c:	69db      	ldr	r3, [r3, #28]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d101      	bne.n	801ba66 <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 801ba62:	2309      	movs	r3, #9
 801ba64:	e091      	b.n	801bb8a <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 801ba66:	2300      	movs	r3, #0
 801ba68:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	685b      	ldr	r3, [r3, #4]
 801ba6e:	685b      	ldr	r3, [r3, #4]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d077      	beq.n	801bb64 <lv_fs_seek+0x126>
        switch(whence) {
 801ba74:	79fb      	ldrb	r3, [r7, #7]
 801ba76:	2b02      	cmp	r3, #2
 801ba78:	d051      	beq.n	801bb1e <lv_fs_seek+0xe0>
 801ba7a:	2b02      	cmp	r3, #2
 801ba7c:	f300 8084 	bgt.w	801bb88 <lv_fs_seek+0x14a>
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d002      	beq.n	801ba8a <lv_fs_seek+0x4c>
 801ba84:	2b01      	cmp	r3, #1
 801ba86:	d023      	beq.n	801bad0 <lv_fs_seek+0x92>
 801ba88:	e07e      	b.n	801bb88 <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	689b      	ldr	r3, [r3, #8]
 801ba8e:	68ba      	ldr	r2, [r7, #8]
 801ba90:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	689b      	ldr	r3, [r3, #8]
 801ba96:	689a      	ldr	r2, [r3, #8]
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	689b      	ldr	r3, [r3, #8]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	429a      	cmp	r2, r3
 801baa0:	d307      	bcc.n	801bab2 <lv_fs_seek+0x74>
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	689b      	ldr	r3, [r3, #8]
 801baa6:	689a      	ldr	r2, [r3, #8]
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	689b      	ldr	r3, [r3, #8]
 801baac:	685b      	ldr	r3, [r3, #4]
 801baae:	429a      	cmp	r2, r3
 801bab0:	d965      	bls.n	801bb7e <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	685b      	ldr	r3, [r3, #4]
 801bab6:	69dc      	ldr	r4, [r3, #28]
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	6858      	ldr	r0, [r3, #4]
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	6819      	ldr	r1, [r3, #0]
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	689b      	ldr	r3, [r3, #8]
 801bac4:	689a      	ldr	r2, [r3, #8]
 801bac6:	2300      	movs	r3, #0
 801bac8:	47a0      	blx	r4
 801baca:	4603      	mov	r3, r0
 801bacc:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 801bace:	e056      	b.n	801bb7e <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	689b      	ldr	r3, [r3, #8]
 801bad4:	6899      	ldr	r1, [r3, #8]
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	689b      	ldr	r3, [r3, #8]
 801bada:	68ba      	ldr	r2, [r7, #8]
 801badc:	440a      	add	r2, r1
 801bade:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	689b      	ldr	r3, [r3, #8]
 801bae4:	689a      	ldr	r2, [r3, #8]
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	689b      	ldr	r3, [r3, #8]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	429a      	cmp	r2, r3
 801baee:	d307      	bcc.n	801bb00 <lv_fs_seek+0xc2>
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	689b      	ldr	r3, [r3, #8]
 801baf4:	689a      	ldr	r2, [r3, #8]
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	689b      	ldr	r3, [r3, #8]
 801bafa:	685b      	ldr	r3, [r3, #4]
 801bafc:	429a      	cmp	r2, r3
 801bafe:	d940      	bls.n	801bb82 <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	685b      	ldr	r3, [r3, #4]
 801bb04:	69dc      	ldr	r4, [r3, #28]
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	6858      	ldr	r0, [r3, #4]
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	6819      	ldr	r1, [r3, #0]
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	689b      	ldr	r3, [r3, #8]
 801bb12:	689a      	ldr	r2, [r3, #8]
 801bb14:	2300      	movs	r3, #0
 801bb16:	47a0      	blx	r4
 801bb18:	4603      	mov	r3, r0
 801bb1a:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 801bb1c:	e031      	b.n	801bb82 <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get the new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	685b      	ldr	r3, [r3, #4]
 801bb22:	69dc      	ldr	r4, [r3, #28]
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	6858      	ldr	r0, [r3, #4]
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	6819      	ldr	r1, [r3, #0]
 801bb2c:	79fb      	ldrb	r3, [r7, #7]
 801bb2e:	68ba      	ldr	r2, [r7, #8]
 801bb30:	47a0      	blx	r4
 801bb32:	4603      	mov	r3, r0
 801bb34:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 801bb36:	7dfb      	ldrb	r3, [r7, #23]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d124      	bne.n	801bb86 <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	6a1b      	ldr	r3, [r3, #32]
 801bb42:	68fa      	ldr	r2, [r7, #12]
 801bb44:	6850      	ldr	r0, [r2, #4]
 801bb46:	68fa      	ldr	r2, [r7, #12]
 801bb48:	6811      	ldr	r1, [r2, #0]
 801bb4a:	f107 0210 	add.w	r2, r7, #16
 801bb4e:	4798      	blx	r3
 801bb50:	4603      	mov	r3, r0
 801bb52:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 801bb54:	7dfb      	ldrb	r3, [r7, #23]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d115      	bne.n	801bb86 <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	689b      	ldr	r3, [r3, #8]
 801bb5e:	693a      	ldr	r2, [r7, #16]
 801bb60:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 801bb62:	e010      	b.n	801bb86 <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 801bb64:	68fb      	ldr	r3, [r7, #12]
 801bb66:	685b      	ldr	r3, [r3, #4]
 801bb68:	69dc      	ldr	r4, [r3, #28]
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	6858      	ldr	r0, [r3, #4]
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	6819      	ldr	r1, [r3, #0]
 801bb72:	79fb      	ldrb	r3, [r7, #7]
 801bb74:	68ba      	ldr	r2, [r7, #8]
 801bb76:	47a0      	blx	r4
 801bb78:	4603      	mov	r3, r0
 801bb7a:	75fb      	strb	r3, [r7, #23]
 801bb7c:	e004      	b.n	801bb88 <lv_fs_seek+0x14a>
                    break;
 801bb7e:	bf00      	nop
 801bb80:	e002      	b.n	801bb88 <lv_fs_seek+0x14a>
                    break;
 801bb82:	bf00      	nop
 801bb84:	e000      	b.n	801bb88 <lv_fs_seek+0x14a>
                    break;
 801bb86:	bf00      	nop
    }

    return res;
 801bb88:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb8a:	4618      	mov	r0, r3
 801bb8c:	371c      	adds	r7, #28
 801bb8e:	46bd      	mov	sp, r7
 801bb90:	bd90      	pop	{r4, r7, pc}

0801bb92 <lv_fs_tell>:

lv_fs_res_t lv_fs_tell(lv_fs_file_t * file_p, uint32_t * pos)
{
 801bb92:	b580      	push	{r7, lr}
 801bb94:	b084      	sub	sp, #16
 801bb96:	af00      	add	r7, sp, #0
 801bb98:	6078      	str	r0, [r7, #4]
 801bb9a:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d104      	bne.n	801bbae <lv_fs_tell+0x1c>
        *pos = 0;
 801bba4:	683b      	ldr	r3, [r7, #0]
 801bba6:	2200      	movs	r2, #0
 801bba8:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_INV_PARAM;
 801bbaa:	230b      	movs	r3, #11
 801bbac:	e022      	b.n	801bbf4 <lv_fs_tell+0x62>
    }

    if(file_p->drv->tell_cb == NULL) {
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	685b      	ldr	r3, [r3, #4]
 801bbb2:	6a1b      	ldr	r3, [r3, #32]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d104      	bne.n	801bbc2 <lv_fs_tell+0x30>
        *pos = 0;
 801bbb8:	683b      	ldr	r3, [r7, #0]
 801bbba:	2200      	movs	r2, #0
 801bbbc:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_IMP;
 801bbbe:	2309      	movs	r3, #9
 801bbc0:	e018      	b.n	801bbf4 <lv_fs_tell+0x62>
    }

    lv_fs_res_t res;
    if(file_p->drv->cache_size) {
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	685b      	ldr	r3, [r3, #4]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d007      	beq.n	801bbdc <lv_fs_tell+0x4a>
        *pos = file_p->cache->file_position;
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	689b      	ldr	r3, [r3, #8]
 801bbd0:	689a      	ldr	r2, [r3, #8]
 801bbd2:	683b      	ldr	r3, [r7, #0]
 801bbd4:	601a      	str	r2, [r3, #0]
        res = LV_FS_RES_OK;
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	73fb      	strb	r3, [r7, #15]
 801bbda:	e00a      	b.n	801bbf2 <lv_fs_tell+0x60>
    }
    else {
        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, pos);
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	685b      	ldr	r3, [r3, #4]
 801bbe0:	6a1b      	ldr	r3, [r3, #32]
 801bbe2:	687a      	ldr	r2, [r7, #4]
 801bbe4:	6850      	ldr	r0, [r2, #4]
 801bbe6:	687a      	ldr	r2, [r7, #4]
 801bbe8:	6811      	ldr	r1, [r2, #0]
 801bbea:	683a      	ldr	r2, [r7, #0]
 801bbec:	4798      	blx	r3
 801bbee:	4603      	mov	r3, r0
 801bbf0:	73fb      	strb	r3, [r7, #15]
    }

    return res;
 801bbf2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	3710      	adds	r7, #16
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd80      	pop	{r7, pc}

0801bbfc <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b084      	sub	sp, #16
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	4603      	mov	r3, r0
 801bc04:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(fsdrv_ll_p, drv) {
 801bc06:	480d      	ldr	r0, [pc, #52]	@ (801bc3c <lv_fs_get_drv+0x40>)
 801bc08:	f000 f93d 	bl	801be86 <_lv_ll_get_head>
 801bc0c:	60f8      	str	r0, [r7, #12]
 801bc0e:	e00d      	b.n	801bc2c <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	781b      	ldrb	r3, [r3, #0]
 801bc16:	79fa      	ldrb	r2, [r7, #7]
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	d102      	bne.n	801bc22 <lv_fs_get_drv+0x26>
            return *drv;
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	e008      	b.n	801bc34 <lv_fs_get_drv+0x38>
    _LV_LL_READ(fsdrv_ll_p, drv) {
 801bc22:	68f9      	ldr	r1, [r7, #12]
 801bc24:	4805      	ldr	r0, [pc, #20]	@ (801bc3c <lv_fs_get_drv+0x40>)
 801bc26:	f000 f950 	bl	801beca <_lv_ll_get_next>
 801bc2a:	60f8      	str	r0, [r7, #12]
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d1ee      	bne.n	801bc10 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 801bc32:	2300      	movs	r3, #0
}
 801bc34:	4618      	mov	r0, r3
 801bc36:	3710      	adds	r7, #16
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	bd80      	pop	{r7, pc}
 801bc3c:	20000228 	.word	0x20000228

0801bc40 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 801bc40:	b580      	push	{r7, lr}
 801bc42:	b084      	sub	sp, #16
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = lv_strlen(fn); i > 0; i--) {
 801bc48:	6878      	ldr	r0, [r7, #4]
 801bc4a:	f001 fb54 	bl	801d2f6 <lv_strlen>
 801bc4e:	60f8      	str	r0, [r7, #12]
 801bc50:	e01b      	b.n	801bc8a <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 801bc52:	687a      	ldr	r2, [r7, #4]
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	4413      	add	r3, r2
 801bc58:	781b      	ldrb	r3, [r3, #0]
 801bc5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc5c:	d104      	bne.n	801bc68 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	3301      	adds	r3, #1
 801bc62:	687a      	ldr	r2, [r7, #4]
 801bc64:	4413      	add	r3, r2
 801bc66:	e014      	b.n	801bc92 <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 801bc68:	687a      	ldr	r2, [r7, #4]
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	4413      	add	r3, r2
 801bc6e:	781b      	ldrb	r3, [r3, #0]
 801bc70:	2b2f      	cmp	r3, #47	@ 0x2f
 801bc72:	d005      	beq.n	801bc80 <lv_fs_get_ext+0x40>
 801bc74:	687a      	ldr	r2, [r7, #4]
 801bc76:	68fb      	ldr	r3, [r7, #12]
 801bc78:	4413      	add	r3, r2
 801bc7a:	781b      	ldrb	r3, [r3, #0]
 801bc7c:	2b5c      	cmp	r3, #92	@ 0x5c
 801bc7e:	d101      	bne.n	801bc84 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 801bc80:	4b06      	ldr	r3, [pc, #24]	@ (801bc9c <lv_fs_get_ext+0x5c>)
 801bc82:	e006      	b.n	801bc92 <lv_fs_get_ext+0x52>
    for(i = lv_strlen(fn); i > 0; i--) {
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	3b01      	subs	r3, #1
 801bc88:	60fb      	str	r3, [r7, #12]
 801bc8a:	68fb      	ldr	r3, [r7, #12]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d1e0      	bne.n	801bc52 <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 801bc90:	4b02      	ldr	r3, [pc, #8]	@ (801bc9c <lv_fs_get_ext+0x5c>)
}
 801bc92:	4618      	mov	r0, r3
 801bc94:	3710      	adds	r7, #16
 801bc96:	46bd      	mov	sp, r7
 801bc98:	bd80      	pop	{r7, pc}
 801bc9a:	bf00      	nop
 801bc9c:	0801e2dc 	.word	0x0801e2dc

0801bca0 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 801bca0:	b480      	push	{r7}
 801bca2:	b083      	sub	sp, #12
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	3301      	adds	r3, #1
 801bcac:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	781b      	ldrb	r3, [r3, #0]
 801bcb2:	2b3a      	cmp	r3, #58	@ 0x3a
 801bcb4:	d102      	bne.n	801bcbc <lv_fs_get_real_path+0x1c>
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	3301      	adds	r3, #1
 801bcba:	607b      	str	r3, [r7, #4]

    return path;
 801bcbc:	687b      	ldr	r3, [r7, #4]
}
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	370c      	adds	r7, #12
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcc8:	4770      	bx	lr

0801bcca <_lv_ll_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 801bcca:	b480      	push	{r7}
 801bccc:	b083      	sub	sp, #12
 801bcce:	af00      	add	r7, sp, #0
 801bcd0:	6078      	str	r0, [r7, #4]
 801bcd2:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	2200      	movs	r2, #0
 801bcde:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	3303      	adds	r3, #3
 801bce4:	f023 0303 	bic.w	r3, r3, #3
 801bce8:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	683a      	ldr	r2, [r7, #0]
 801bcee:	601a      	str	r2, [r3, #0]
}
 801bcf0:	bf00      	nop
 801bcf2:	370c      	adds	r7, #12
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcfa:	4770      	bx	lr

0801bcfc <_lv_ll_ins_head>:

void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b084      	sub	sp, #16
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_malloc(ll_p->n_size + LL_NODE_META_SIZE);
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	3308      	adds	r3, #8
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	f002 f9c4 	bl	801e098 <lv_malloc>
 801bd10:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d020      	beq.n	801bd5a <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 801bd18:	2200      	movs	r2, #0
 801bd1a:	68f9      	ldr	r1, [r7, #12]
 801bd1c:	6878      	ldr	r0, [r7, #4]
 801bd1e:	f000 f8fd 	bl	801bf1c <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	461a      	mov	r2, r3
 801bd28:	68f9      	ldr	r1, [r7, #12]
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f000 f915 	bl	801bf5a <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	685b      	ldr	r3, [r3, #4]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d006      	beq.n	801bd46 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	68fa      	ldr	r2, [r7, #12]
 801bd3e:	4619      	mov	r1, r3
 801bd40:	6878      	ldr	r0, [r7, #4]
 801bd42:	f000 f8eb 	bl	801bf1c <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	68fa      	ldr	r2, [r7, #12]
 801bd4a:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	689b      	ldr	r3, [r3, #8]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d102      	bne.n	801bd5a <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	68fa      	ldr	r2, [r7, #12]
 801bd58:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 801bd5a:	68fb      	ldr	r3, [r7, #12]
}
 801bd5c:	4618      	mov	r0, r3
 801bd5e:	3710      	adds	r7, #16
 801bd60:	46bd      	mov	sp, r7
 801bd62:	bd80      	pop	{r7, pc}

0801bd64 <_lv_ll_ins_tail>:

    return n_new;
}

void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b084      	sub	sp, #16
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_malloc(ll_p->n_size + LL_NODE_META_SIZE);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	3308      	adds	r3, #8
 801bd72:	4618      	mov	r0, r3
 801bd74:	f002 f990 	bl	801e098 <lv_malloc>
 801bd78:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d020      	beq.n	801bdc2 <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 801bd80:	2200      	movs	r2, #0
 801bd82:	68f9      	ldr	r1, [r7, #12]
 801bd84:	6878      	ldr	r0, [r7, #4]
 801bd86:	f000 f8e8 	bl	801bf5a <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	689b      	ldr	r3, [r3, #8]
 801bd8e:	461a      	mov	r2, r3
 801bd90:	68f9      	ldr	r1, [r7, #12]
 801bd92:	6878      	ldr	r0, [r7, #4]
 801bd94:	f000 f8c2 	bl	801bf1c <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	689b      	ldr	r3, [r3, #8]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d006      	beq.n	801bdae <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	689b      	ldr	r3, [r3, #8]
 801bda4:	68fa      	ldr	r2, [r7, #12]
 801bda6:	4619      	mov	r1, r3
 801bda8:	6878      	ldr	r0, [r7, #4]
 801bdaa:	f000 f8d6 	bl	801bf5a <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	68fa      	ldr	r2, [r7, #12]
 801bdb2:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d102      	bne.n	801bdc2 <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	68fa      	ldr	r2, [r7, #12]
 801bdc0:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 801bdc2:	68fb      	ldr	r3, [r7, #12]
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	3710      	adds	r7, #16
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}

0801bdcc <_lv_ll_remove>:

void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b084      	sub	sp, #16
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
 801bdd4:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d050      	beq.n	801be7e <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	f000 f852 	bl	801be86 <_lv_ll_get_head>
 801bde2:	4602      	mov	r2, r0
 801bde4:	683b      	ldr	r3, [r7, #0]
 801bde6:	4293      	cmp	r3, r2
 801bde8:	d116      	bne.n	801be18 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801bdea:	6839      	ldr	r1, [r7, #0]
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	f000 f86c 	bl	801beca <_lv_ll_get_next>
 801bdf2:	4602      	mov	r2, r0
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	685b      	ldr	r3, [r3, #4]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d103      	bne.n	801be08 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	2200      	movs	r2, #0
 801be04:	609a      	str	r2, [r3, #8]
 801be06:	e03b      	b.n	801be80 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	685b      	ldr	r3, [r3, #4]
 801be0c:	2200      	movs	r2, #0
 801be0e:	4619      	mov	r1, r3
 801be10:	6878      	ldr	r0, [r7, #4]
 801be12:	f000 f883 	bl	801bf1c <node_set_prev>
 801be16:	e033      	b.n	801be80 <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 801be18:	6878      	ldr	r0, [r7, #4]
 801be1a:	f000 f845 	bl	801bea8 <_lv_ll_get_tail>
 801be1e:	4602      	mov	r2, r0
 801be20:	683b      	ldr	r3, [r7, #0]
 801be22:	4293      	cmp	r3, r2
 801be24:	d116      	bne.n	801be54 <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 801be26:	6839      	ldr	r1, [r7, #0]
 801be28:	6878      	ldr	r0, [r7, #4]
 801be2a:	f000 f863 	bl	801bef4 <_lv_ll_get_prev>
 801be2e:	4602      	mov	r2, r0
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	689b      	ldr	r3, [r3, #8]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d103      	bne.n	801be44 <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	2200      	movs	r2, #0
 801be40:	605a      	str	r2, [r3, #4]
 801be42:	e01d      	b.n	801be80 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	689b      	ldr	r3, [r3, #8]
 801be48:	2200      	movs	r2, #0
 801be4a:	4619      	mov	r1, r3
 801be4c:	6878      	ldr	r0, [r7, #4]
 801be4e:	f000 f884 	bl	801bf5a <node_set_next>
 801be52:	e015      	b.n	801be80 <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 801be54:	6839      	ldr	r1, [r7, #0]
 801be56:	6878      	ldr	r0, [r7, #4]
 801be58:	f000 f84c 	bl	801bef4 <_lv_ll_get_prev>
 801be5c:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 801be5e:	6839      	ldr	r1, [r7, #0]
 801be60:	6878      	ldr	r0, [r7, #4]
 801be62:	f000 f832 	bl	801beca <_lv_ll_get_next>
 801be66:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 801be68:	68ba      	ldr	r2, [r7, #8]
 801be6a:	68f9      	ldr	r1, [r7, #12]
 801be6c:	6878      	ldr	r0, [r7, #4]
 801be6e:	f000 f874 	bl	801bf5a <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 801be72:	68fa      	ldr	r2, [r7, #12]
 801be74:	68b9      	ldr	r1, [r7, #8]
 801be76:	6878      	ldr	r0, [r7, #4]
 801be78:	f000 f850 	bl	801bf1c <node_set_prev>
 801be7c:	e000      	b.n	801be80 <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 801be7e:	bf00      	nop
    }
}
 801be80:	3710      	adds	r7, #16
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}

0801be86 <_lv_ll_get_head>:
        }
    }
}

void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 801be86:	b480      	push	{r7}
 801be88:	b083      	sub	sp, #12
 801be8a:	af00      	add	r7, sp, #0
 801be8c:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d101      	bne.n	801be98 <_lv_ll_get_head+0x12>
 801be94:	2300      	movs	r3, #0
 801be96:	e001      	b.n	801be9c <_lv_ll_get_head+0x16>
    return ll_p->head;
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	685b      	ldr	r3, [r3, #4]
}
 801be9c:	4618      	mov	r0, r3
 801be9e:	370c      	adds	r7, #12
 801bea0:	46bd      	mov	sp, r7
 801bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea6:	4770      	bx	lr

0801bea8 <_lv_ll_get_tail>:

void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 801bea8:	b480      	push	{r7}
 801beaa:	b083      	sub	sp, #12
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d101      	bne.n	801beba <_lv_ll_get_tail+0x12>
 801beb6:	2300      	movs	r3, #0
 801beb8:	e001      	b.n	801bebe <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	689b      	ldr	r3, [r3, #8]
}
 801bebe:	4618      	mov	r0, r3
 801bec0:	370c      	adds	r7, #12
 801bec2:	46bd      	mov	sp, r7
 801bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec8:	4770      	bx	lr

0801beca <_lv_ll_get_next>:

void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 801beca:	b480      	push	{r7}
 801becc:	b085      	sub	sp, #20
 801bece:	af00      	add	r7, sp, #0
 801bed0:	6078      	str	r0, [r7, #4]
 801bed2:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 801bed4:	683b      	ldr	r3, [r7, #0]
 801bed6:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	3304      	adds	r3, #4
 801bede:	68fa      	ldr	r2, [r7, #12]
 801bee0:	4413      	add	r3, r2
 801bee2:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	681b      	ldr	r3, [r3, #0]
}
 801bee8:	4618      	mov	r0, r3
 801beea:	3714      	adds	r7, #20
 801beec:	46bd      	mov	sp, r7
 801beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef2:	4770      	bx	lr

0801bef4 <_lv_ll_get_prev>:

void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 801bef4:	b480      	push	{r7}
 801bef6:	b085      	sub	sp, #20
 801bef8:	af00      	add	r7, sp, #0
 801befa:	6078      	str	r0, [r7, #4]
 801befc:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	68fa      	ldr	r2, [r7, #12]
 801bf08:	4413      	add	r3, r2
 801bf0a:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	681b      	ldr	r3, [r3, #0]
}
 801bf10:	4618      	mov	r0, r3
 801bf12:	3714      	adds	r7, #20
 801bf14:	46bd      	mov	sp, r7
 801bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf1a:	4770      	bx	lr

0801bf1c <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 801bf1c:	b480      	push	{r7}
 801bf1e:	b089      	sub	sp, #36	@ 0x24
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	60f8      	str	r0, [r7, #12]
 801bf24:	60b9      	str	r1, [r7, #8]
 801bf26:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d00f      	beq.n	801bf4e <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 801bf2e:	68bb      	ldr	r3, [r7, #8]
 801bf30:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	69fa      	ldr	r2, [r7, #28]
 801bf38:	4413      	add	r3, r2
 801bf3a:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801bf3c:	69fb      	ldr	r3, [r7, #28]
 801bf3e:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 801bf40:	1d3b      	adds	r3, r7, #4
 801bf42:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	681a      	ldr	r2, [r3, #0]
 801bf48:	69bb      	ldr	r3, [r7, #24]
 801bf4a:	601a      	str	r2, [r3, #0]
 801bf4c:	e000      	b.n	801bf50 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801bf4e:	bf00      	nop
}
 801bf50:	3724      	adds	r7, #36	@ 0x24
 801bf52:	46bd      	mov	sp, r7
 801bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf58:	4770      	bx	lr

0801bf5a <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 801bf5a:	b480      	push	{r7}
 801bf5c:	b089      	sub	sp, #36	@ 0x24
 801bf5e:	af00      	add	r7, sp, #0
 801bf60:	60f8      	str	r0, [r7, #12]
 801bf62:	60b9      	str	r1, [r7, #8]
 801bf64:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801bf66:	68bb      	ldr	r3, [r7, #8]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d010      	beq.n	801bf8e <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 801bf6c:	68bb      	ldr	r3, [r7, #8]
 801bf6e:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	3304      	adds	r3, #4
 801bf76:	69fa      	ldr	r2, [r7, #28]
 801bf78:	4413      	add	r3, r2
 801bf7a:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 801bf7c:	69fb      	ldr	r3, [r7, #28]
 801bf7e:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 801bf80:	1d3b      	adds	r3, r7, #4
 801bf82:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 801bf84:	697b      	ldr	r3, [r7, #20]
 801bf86:	681a      	ldr	r2, [r3, #0]
 801bf88:	69bb      	ldr	r3, [r7, #24]
 801bf8a:	601a      	str	r2, [r3, #0]
 801bf8c:	e000      	b.n	801bf90 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801bf8e:	bf00      	nop
}
 801bf90:	3724      	adds	r7, #36	@ 0x24
 801bf92:	46bd      	mov	sp, r7
 801bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf98:	4770      	bx	lr
	...

0801bf9c <lv_trigo_sin>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

int32_t LV_ATTRIBUTE_FAST_MEM lv_trigo_sin(int16_t angle)
{
 801bf9c:	b480      	push	{r7}
 801bf9e:	b085      	sub	sp, #20
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	80fb      	strh	r3, [r7, #6]
    int32_t ret = 0;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	60fb      	str	r3, [r7, #12]
    while(angle < 0) angle += 360;
 801bfaa:	e004      	b.n	801bfb6 <lv_trigo_sin+0x1a>
 801bfac:	88fb      	ldrh	r3, [r7, #6]
 801bfae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	80fb      	strh	r3, [r7, #6]
 801bfb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	dbf6      	blt.n	801bfac <lv_trigo_sin+0x10>
    while(angle >= 360) angle -= 360;
 801bfbe:	e004      	b.n	801bfca <lv_trigo_sin+0x2e>
 801bfc0:	88fb      	ldrh	r3, [r7, #6]
 801bfc2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801bfc6:	b29b      	uxth	r3, r3
 801bfc8:	80fb      	strh	r3, [r7, #6]
 801bfca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bfce:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 801bfd2:	daf5      	bge.n	801bfc0 <lv_trigo_sin+0x24>

    if(angle < 90) {
 801bfd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bfd8:	2b59      	cmp	r3, #89	@ 0x59
 801bfda:	dc06      	bgt.n	801bfea <lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
 801bfdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bfe0:	4a27      	ldr	r2, [pc, #156]	@ (801c080 <lv_trigo_sin+0xe4>)
 801bfe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801bfe6:	60fb      	str	r3, [r7, #12]
 801bfe8:	e034      	b.n	801c054 <lv_trigo_sin+0xb8>
    }
    else if(angle >= 90 && angle < 180) {
 801bfea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bfee:	2b59      	cmp	r3, #89	@ 0x59
 801bff0:	dd0f      	ble.n	801c012 <lv_trigo_sin+0x76>
 801bff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bff6:	2bb3      	cmp	r3, #179	@ 0xb3
 801bff8:	dc0b      	bgt.n	801c012 <lv_trigo_sin+0x76>
        angle = 180 - angle;
 801bffa:	88fb      	ldrh	r3, [r7, #6]
 801bffc:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 801c000:	b29b      	uxth	r3, r3
 801c002:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 801c004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c008:	4a1d      	ldr	r2, [pc, #116]	@ (801c080 <lv_trigo_sin+0xe4>)
 801c00a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c00e:	60fb      	str	r3, [r7, #12]
 801c010:	e020      	b.n	801c054 <lv_trigo_sin+0xb8>
    }
    else if(angle >= 180 && angle < 270) {
 801c012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c016:	2bb3      	cmp	r3, #179	@ 0xb3
 801c018:	dd10      	ble.n	801c03c <lv_trigo_sin+0xa0>
 801c01a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c01e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801c022:	da0b      	bge.n	801c03c <lv_trigo_sin+0xa0>
        angle = angle - 180;
 801c024:	88fb      	ldrh	r3, [r7, #6]
 801c026:	3bb4      	subs	r3, #180	@ 0xb4
 801c028:	b29b      	uxth	r3, r3
 801c02a:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c02c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c030:	4a13      	ldr	r2, [pc, #76]	@ (801c080 <lv_trigo_sin+0xe4>)
 801c032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c036:	425b      	negs	r3, r3
 801c038:	60fb      	str	r3, [r7, #12]
 801c03a:	e00b      	b.n	801c054 <lv_trigo_sin+0xb8>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 801c03c:	88fb      	ldrh	r3, [r7, #6]
 801c03e:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 801c042:	b29b      	uxth	r3, r3
 801c044:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 801c046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801c04a:	4a0d      	ldr	r2, [pc, #52]	@ (801c080 <lv_trigo_sin+0xe4>)
 801c04c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c050:	425b      	negs	r3, r3
 801c052:	60fb      	str	r3, [r7, #12]
    }

    if(ret == 32767) return 32768;
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801c05a:	4293      	cmp	r3, r2
 801c05c:	d102      	bne.n	801c064 <lv_trigo_sin+0xc8>
 801c05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c062:	e006      	b.n	801c072 <lv_trigo_sin+0xd6>
    else if(ret == -32767) return -32768;
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	4a07      	ldr	r2, [pc, #28]	@ (801c084 <lv_trigo_sin+0xe8>)
 801c068:	4293      	cmp	r3, r2
 801c06a:	d101      	bne.n	801c070 <lv_trigo_sin+0xd4>
 801c06c:	4b06      	ldr	r3, [pc, #24]	@ (801c088 <lv_trigo_sin+0xec>)
 801c06e:	e000      	b.n	801c072 <lv_trigo_sin+0xd6>
    else return ret;
 801c070:	68fb      	ldr	r3, [r7, #12]
}
 801c072:	4618      	mov	r0, r3
 801c074:	3714      	adds	r7, #20
 801c076:	46bd      	mov	sp, r7
 801c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07c:	4770      	bx	lr
 801c07e:	bf00      	nop
 801c080:	08021884 	.word	0x08021884
 801c084:	ffff8001 	.word	0xffff8001
 801c088:	ffff8000 	.word	0xffff8000

0801c08c <lv_rand_set_seed>:

    return ((x - min_in) * delta_out) / delta_in + min_out;
}

void lv_rand_set_seed(uint32_t seed)
{
 801c08c:	b480      	push	{r7}
 801c08e:	b083      	sub	sp, #12
 801c090:	af00      	add	r7, sp, #0
 801c092:	6078      	str	r0, [r7, #4]
    rand_seed = seed;
 801c094:	4a04      	ldr	r2, [pc, #16]	@ (801c0a8 <lv_rand_set_seed+0x1c>)
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	6693      	str	r3, [r2, #104]	@ 0x68
}
 801c09a:	bf00      	nop
 801c09c:	370c      	adds	r7, #12
 801c09e:	46bd      	mov	sp, r7
 801c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a4:	4770      	bx	lr
 801c0a6:	bf00      	nop
 801c0a8:	2000008c 	.word	0x2000008c

0801c0ac <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font      pointer to a font
 * @return the height of a font
 */
static inline int32_t lv_font_get_line_height(const lv_font_t * font)
{
 801c0ac:	b480      	push	{r7}
 801c0ae:	b083      	sub	sp, #12
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
    return font->line_height;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	68db      	ldr	r3, [r3, #12]
}
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	370c      	adds	r7, #12
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c2:	4770      	bx	lr

0801c0c4 <_lv_text_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_text_is_break_char(uint32_t letter)
{
 801c0c4:	b480      	push	{r7}
 801c0c6:	b085      	sub	sp, #20
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	73fb      	strb	r3, [r7, #15]
 801c0d4:	e00c      	b.n	801c0f0 <_lv_text_is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801c0d6:	7bfb      	ldrb	r3, [r7, #15]
 801c0d8:	4a0b      	ldr	r2, [pc, #44]	@ (801c108 <_lv_text_is_break_char+0x44>)
 801c0da:	5cd3      	ldrb	r3, [r2, r3]
 801c0dc:	461a      	mov	r2, r3
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d102      	bne.n	801c0ea <_lv_text_is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 801c0e4:	2301      	movs	r3, #1
 801c0e6:	73bb      	strb	r3, [r7, #14]
            break;
 801c0e8:	e007      	b.n	801c0fa <_lv_text_is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801c0ea:	7bfb      	ldrb	r3, [r7, #15]
 801c0ec:	3301      	adds	r3, #1
 801c0ee:	73fb      	strb	r3, [r7, #15]
 801c0f0:	7bfb      	ldrb	r3, [r7, #15]
 801c0f2:	4a05      	ldr	r2, [pc, #20]	@ (801c108 <_lv_text_is_break_char+0x44>)
 801c0f4:	5cd3      	ldrb	r3, [r2, r3]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d1ed      	bne.n	801c0d6 <_lv_text_is_break_char+0x12>
        }
    }

    return ret;
 801c0fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	3714      	adds	r7, #20
 801c100:	46bd      	mov	sp, r7
 801c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c106:	4770      	bx	lr
 801c108:	0801e2e0 	.word	0x0801e2e0

0801c10c <_lv_text_is_a_word>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_text_is_a_word(uint32_t letter)
{
 801c10c:	b480      	push	{r7}
 801c10e:	b083      	sub	sp, #12
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
    /*Cheap check on invalid letter*/
    if(letter == 0) return false;
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d101      	bne.n	801c11e <_lv_text_is_a_word+0x12>
 801c11a:	2300      	movs	r3, #0
 801c11c:	e056      	b.n	801c1cc <_lv_text_is_a_word+0xc0>

    /*CJK Unified Ideographs*/
    if(letter >= 0x4E00 && letter <= 0x9FFF) {
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	f5b3 4f9c 	cmp.w	r3, #19968	@ 0x4e00
 801c124:	d305      	bcc.n	801c132 <_lv_text_is_a_word+0x26>
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801c12c:	d201      	bcs.n	801c132 <_lv_text_is_a_word+0x26>
        return true;
 801c12e:	2301      	movs	r3, #1
 801c130:	e04c      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*Fullwidth ASCII variants*/
    if(letter >= 0xFF01 && letter <= 0xFF5E) {
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 801c138:	d906      	bls.n	801c148 <_lv_text_is_a_word+0x3c>
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	f64f 725e 	movw	r2, #65374	@ 0xff5e
 801c140:	4293      	cmp	r3, r2
 801c142:	d801      	bhi.n	801c148 <_lv_text_is_a_word+0x3c>
        return true;
 801c144:	2301      	movs	r3, #1
 801c146:	e041      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*CJK symbols and punctuation*/
    if(letter >= 0x3000 && letter <= 0x303F) {
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801c14e:	d305      	bcc.n	801c15c <_lv_text_is_a_word+0x50>
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	f5b3 5f41 	cmp.w	r3, #12352	@ 0x3040
 801c156:	d201      	bcs.n	801c15c <_lv_text_is_a_word+0x50>
        return true;
 801c158:	2301      	movs	r3, #1
 801c15a:	e037      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*CJK Radicals Supplement*/
    if(letter >= 0x2E80 && letter <= 0x2EFF) {
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	f5b3 5f3a 	cmp.w	r3, #11904	@ 0x2e80
 801c162:	d305      	bcc.n	801c170 <_lv_text_is_a_word+0x64>
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	f5b3 5f3c 	cmp.w	r3, #12032	@ 0x2f00
 801c16a:	d201      	bcs.n	801c170 <_lv_text_is_a_word+0x64>
        return true;
 801c16c:	2301      	movs	r3, #1
 801c16e:	e02d      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*CJK Strokes*/
    if(letter >= 0x31C0 && letter <= 0x31EF) {
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	f5b3 5f47 	cmp.w	r3, #12736	@ 0x31c0
 801c176:	d306      	bcc.n	801c186 <_lv_text_is_a_word+0x7a>
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	f243 12ef 	movw	r2, #12783	@ 0x31ef
 801c17e:	4293      	cmp	r3, r2
 801c180:	d801      	bhi.n	801c186 <_lv_text_is_a_word+0x7a>
        return true;
 801c182:	2301      	movs	r3, #1
 801c184:	e022      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*Hiragana and Katakana*/
    if(letter >= 0x3040 && letter <= 0x30FF) {
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	f5b3 5f41 	cmp.w	r3, #12352	@ 0x3040
 801c18c:	d305      	bcc.n	801c19a <_lv_text_is_a_word+0x8e>
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	f5b3 5f44 	cmp.w	r3, #12544	@ 0x3100
 801c194:	d201      	bcs.n	801c19a <_lv_text_is_a_word+0x8e>
        return true;
 801c196:	2301      	movs	r3, #1
 801c198:	e018      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*Chinese Vertical Forms*/
    if(letter >= 0xFE10 && letter <= 0xFE1F) {
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	f64f 620f 	movw	r2, #65039	@ 0xfe0f
 801c1a0:	4293      	cmp	r3, r2
 801c1a2:	d906      	bls.n	801c1b2 <_lv_text_is_a_word+0xa6>
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
 801c1aa:	4293      	cmp	r3, r2
 801c1ac:	d801      	bhi.n	801c1b2 <_lv_text_is_a_word+0xa6>
        return true;
 801c1ae:	2301      	movs	r3, #1
 801c1b0:	e00c      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    /*CJK Compatibility Forms*/
    if(letter >= 0xFE30 && letter <= 0xFE4F) {
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	f64f 622f 	movw	r2, #65071	@ 0xfe2f
 801c1b8:	4293      	cmp	r3, r2
 801c1ba:	d906      	bls.n	801c1ca <_lv_text_is_a_word+0xbe>
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	f64f 624f 	movw	r2, #65103	@ 0xfe4f
 801c1c2:	4293      	cmp	r3, r2
 801c1c4:	d801      	bhi.n	801c1ca <_lv_text_is_a_word+0xbe>
        return true;
 801c1c6:	2301      	movs	r3, #1
 801c1c8:	e000      	b.n	801c1cc <_lv_text_is_a_word+0xc0>
    }

    return false;
 801c1ca:	2300      	movs	r3, #0
}
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	370c      	adds	r7, #12
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d6:	4770      	bx	lr

0801c1d8 <lv_text_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_text_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, int32_t letter_space,
                      int32_t line_space, int32_t max_width, lv_text_flag_t flag)
{
 801c1d8:	b580      	push	{r7, lr}
 801c1da:	b08a      	sub	sp, #40	@ 0x28
 801c1dc:	af02      	add	r7, sp, #8
 801c1de:	60f8      	str	r0, [r7, #12]
 801c1e0:	60b9      	str	r1, [r7, #8]
 801c1e2:	607a      	str	r2, [r7, #4]
 801c1e4:	603b      	str	r3, [r7, #0]
    size_res->x = 0;
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	2200      	movs	r2, #0
 801c1ea:	601a      	str	r2, [r3, #0]
    size_res->y = 0;
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	605a      	str	r2, [r3, #4]

    if(text == NULL) return;
 801c1f2:	68bb      	ldr	r3, [r7, #8]
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d07e      	beq.n	801c2f6 <lv_text_get_size+0x11e>
    if(font == NULL) return;
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d07d      	beq.n	801c2fa <lv_text_get_size+0x122>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801c1fe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801c202:	f003 0301 	and.w	r3, r3, #1
 801c206:	2b00      	cmp	r3, #0
 801c208:	d002      	beq.n	801c210 <lv_text_get_size+0x38>
 801c20a:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 801c20e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint32_t line_start     = 0;
 801c210:	2300      	movs	r3, #0
 801c212:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 801c214:	2300      	movs	r3, #0
 801c216:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7ff ff47 	bl	801c0ac <lv_font_get_line_height>
 801c21e:	4603      	mov	r3, r0
 801c220:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 801c222:	e03a      	b.n	801c29a <lv_text_get_size+0xc2>
        new_line_start += _lv_text_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 801c224:	68ba      	ldr	r2, [r7, #8]
 801c226:	69fb      	ldr	r3, [r7, #28]
 801c228:	18d0      	adds	r0, r2, r3
 801c22a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801c22e:	9301      	str	r3, [sp, #4]
 801c230:	2300      	movs	r3, #0
 801c232:	9300      	str	r3, [sp, #0]
 801c234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c236:	683a      	ldr	r2, [r7, #0]
 801c238:	6879      	ldr	r1, [r7, #4]
 801c23a:	f000 f937 	bl	801c4ac <_lv_text_get_next_line>
 801c23e:	4602      	mov	r2, r0
 801c240:	69bb      	ldr	r3, [r7, #24]
 801c242:	4413      	add	r3, r2
 801c244:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(int32_t)) {
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	685b      	ldr	r3, [r3, #4]
 801c24a:	461a      	mov	r2, r3
 801c24c:	8afb      	ldrh	r3, [r7, #22]
 801c24e:	441a      	add	r2, r3
 801c250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c252:	4413      	add	r3, r2
 801c254:	2b00      	cmp	r3, #0
 801c256:	db52      	blt.n	801c2fe <lv_text_get_size+0x126>
            LV_LOG_WARN("integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	685a      	ldr	r2, [r3, #4]
 801c25c:	8afb      	ldrh	r3, [r7, #22]
 801c25e:	441a      	add	r2, r3
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	605a      	str	r2, [r3, #4]
            size_res->y += line_space;
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	685a      	ldr	r2, [r3, #4]
 801c268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c26a:	441a      	add	r2, r3
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	605a      	str	r2, [r3, #4]
        }

        /*Calculate the longest line*/
        int32_t act_line_length = lv_text_get_width(&text[line_start], new_line_start - line_start, font, letter_space);
 801c270:	68ba      	ldr	r2, [r7, #8]
 801c272:	69fb      	ldr	r3, [r7, #28]
 801c274:	18d0      	adds	r0, r2, r3
 801c276:	69ba      	ldr	r2, [r7, #24]
 801c278:	69fb      	ldr	r3, [r7, #28]
 801c27a:	1ad1      	subs	r1, r2, r3
 801c27c:	683b      	ldr	r3, [r7, #0]
 801c27e:	687a      	ldr	r2, [r7, #4]
 801c280:	f000 f9e2 	bl	801c648 <lv_text_get_width>
 801c284:	6138      	str	r0, [r7, #16]

        size_res->x = LV_MAX(act_line_length, size_res->x);
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	681a      	ldr	r2, [r3, #0]
 801c28a:	693b      	ldr	r3, [r7, #16]
 801c28c:	429a      	cmp	r2, r3
 801c28e:	bfb8      	it	lt
 801c290:	461a      	movlt	r2, r3
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	601a      	str	r2, [r3, #0]
        line_start  = new_line_start;
 801c296:	69bb      	ldr	r3, [r7, #24]
 801c298:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 801c29a:	68ba      	ldr	r2, [r7, #8]
 801c29c:	69fb      	ldr	r3, [r7, #28]
 801c29e:	4413      	add	r3, r2
 801c2a0:	781b      	ldrb	r3, [r3, #0]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d1be      	bne.n	801c224 <lv_text_get_size+0x4c>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 801c2a6:	69fb      	ldr	r3, [r7, #28]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d015      	beq.n	801c2d8 <lv_text_get_size+0x100>
 801c2ac:	69fb      	ldr	r3, [r7, #28]
 801c2ae:	3b01      	subs	r3, #1
 801c2b0:	68ba      	ldr	r2, [r7, #8]
 801c2b2:	4413      	add	r3, r2
 801c2b4:	781b      	ldrb	r3, [r3, #0]
 801c2b6:	2b0a      	cmp	r3, #10
 801c2b8:	d006      	beq.n	801c2c8 <lv_text_get_size+0xf0>
 801c2ba:	69fb      	ldr	r3, [r7, #28]
 801c2bc:	3b01      	subs	r3, #1
 801c2be:	68ba      	ldr	r2, [r7, #8]
 801c2c0:	4413      	add	r3, r2
 801c2c2:	781b      	ldrb	r3, [r3, #0]
 801c2c4:	2b0d      	cmp	r3, #13
 801c2c6:	d107      	bne.n	801c2d8 <lv_text_get_size+0x100>
        size_res->y += letter_height + line_space;
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	685a      	ldr	r2, [r3, #4]
 801c2cc:	8af9      	ldrh	r1, [r7, #22]
 801c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2d0:	440b      	add	r3, r1
 801c2d2:	441a      	add	r2, r3
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	605a      	str	r2, [r3, #4]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	685b      	ldr	r3, [r3, #4]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d103      	bne.n	801c2e8 <lv_text_get_size+0x110>
        size_res->y = letter_height;
 801c2e0:	8afa      	ldrh	r2, [r7, #22]
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	605a      	str	r2, [r3, #4]
 801c2e6:	e00b      	b.n	801c300 <lv_text_get_size+0x128>
    else
        size_res->y -= line_space;
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	685a      	ldr	r2, [r3, #4]
 801c2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2ee:	1ad2      	subs	r2, r2, r3
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	605a      	str	r2, [r3, #4]
 801c2f4:	e004      	b.n	801c300 <lv_text_get_size+0x128>
    if(text == NULL) return;
 801c2f6:	bf00      	nop
 801c2f8:	e002      	b.n	801c300 <lv_text_get_size+0x128>
    if(font == NULL) return;
 801c2fa:	bf00      	nop
 801c2fc:	e000      	b.n	801c300 <lv_text_get_size+0x128>
            return;
 801c2fe:	bf00      	nop
}
 801c300:	3720      	adds	r7, #32
 801c302:	46bd      	mov	sp, r7
 801c304:	bd80      	pop	{r7, pc}
	...

0801c308 <lv_text_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_text_get_next_word(const char * txt, const lv_font_t * font,
                                      int32_t letter_space, int32_t max_width,
                                      lv_text_flag_t flag, uint32_t * word_w_ptr, bool force)
{
 801c308:	b580      	push	{r7, lr}
 801c30a:	b08e      	sub	sp, #56	@ 0x38
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	60f8      	str	r0, [r7, #12]
 801c310:	60b9      	str	r1, [r7, #8]
 801c312:	607a      	str	r2, [r7, #4]
 801c314:	603b      	str	r3, [r7, #0]
    if(txt == NULL || txt[0] == '\0') return 0;
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	d003      	beq.n	801c324 <lv_text_get_next_word+0x1c>
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	781b      	ldrb	r3, [r3, #0]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d101      	bne.n	801c328 <lv_text_get_next_word+0x20>
 801c324:	2300      	movs	r3, #0
 801c326:	e0ba      	b.n	801c49e <lv_text_get_next_word+0x196>
    if(font == NULL) return 0;
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d101      	bne.n	801c332 <lv_text_get_next_word+0x2a>
 801c32e:	2300      	movs	r3, #0
 801c330:	e0b5      	b.n	801c49e <lv_text_get_next_word+0x196>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801c332:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801c336:	f003 0301 	and.w	r3, r3, #1
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d002      	beq.n	801c344 <lv_text_get_next_word+0x3c>
 801c33e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 801c342:	603b      	str	r3, [r7, #0]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 801c344:	2300      	movs	r3, #0
 801c346:	637b      	str	r3, [r7, #52]	@ 0x34
 801c348:	2300      	movs	r3, #0
 801c34a:	617b      	str	r3, [r7, #20]
 801c34c:	2300      	movs	r3, #0
 801c34e:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 801c350:	2300      	movs	r3, #0
 801c352:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 801c354:	2300      	movs	r3, #0
 801c356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t letter_w;
    int32_t cur_w = 0;  /*Pixel Width of transversed string*/
 801c358:	2300      	movs	r3, #0
 801c35a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 801c35c:	2300      	movs	r3, #0
 801c35e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 801c360:	f04f 33ff 	mov.w	r3, #4294967295
 801c364:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 801c366:	2300      	movs	r3, #0
 801c368:	61fb      	str	r3, [r7, #28]

    letter = _lv_text_encoded_next(txt, &i_next);
 801c36a:	4b4f      	ldr	r3, [pc, #316]	@ (801c4a8 <lv_text_get_next_word+0x1a0>)
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	f107 0214 	add.w	r2, r7, #20
 801c372:	4611      	mov	r1, r2
 801c374:	68f8      	ldr	r0, [r7, #12]
 801c376:	4798      	blx	r3
 801c378:	6338      	str	r0, [r7, #48]	@ 0x30
    i_next_next = i_next;
 801c37a:	697b      	ldr	r3, [r7, #20]
 801c37c:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 801c37e:	e06a      	b.n	801c456 <lv_text_get_next_word+0x14e>
        letter_next = _lv_text_encoded_next(txt, &i_next_next);
 801c380:	4b49      	ldr	r3, [pc, #292]	@ (801c4a8 <lv_text_get_next_word+0x1a0>)
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	f107 0210 	add.w	r2, r7, #16
 801c388:	4611      	mov	r1, r2
 801c38a:	68f8      	ldr	r0, [r7, #12]
 801c38c:	4798      	blx	r3
 801c38e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        word_len++;
 801c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c392:	3301      	adds	r3, #1
 801c394:	627b      	str	r3, [r7, #36]	@ 0x24

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801c396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c39a:	68b8      	ldr	r0, [r7, #8]
 801c39c:	f7f9 fa74 	bl	8015888 <lv_font_get_glyph_width>
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	61bb      	str	r3, [r7, #24]
        cur_w += letter_w;
 801c3a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c3a6:	69bb      	ldr	r3, [r7, #24]
 801c3a8:	4413      	add	r3, r2
 801c3aa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if(letter_w > 0) {
 801c3ac:	69bb      	ldr	r3, [r7, #24]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	dd03      	ble.n	801c3ba <lv_text_get_next_word+0xb2>
            cur_w += letter_space;
 801c3b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	4413      	add	r3, r2
 801c3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 801c3ba:	6a3b      	ldr	r3, [r7, #32]
 801c3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3c0:	d10a      	bne.n	801c3d8 <lv_text_get_next_word+0xd0>
 801c3c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	1ad3      	subs	r3, r2, r3
 801c3c8:	683a      	ldr	r2, [r7, #0]
 801c3ca:	429a      	cmp	r2, r3
 801c3cc:	da04      	bge.n	801c3d8 <lv_text_get_next_word+0xd0>
            break_index = i;
 801c3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c3d0:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 801c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3d4:	3b01      	subs	r3, #1
 801c3d6:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_text_is_break_char(letter)) {
 801c3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3da:	2b0a      	cmp	r3, #10
 801c3dc:	d008      	beq.n	801c3f0 <lv_text_get_next_word+0xe8>
 801c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3e0:	2b0d      	cmp	r3, #13
 801c3e2:	d005      	beq.n	801c3f0 <lv_text_get_next_word+0xe8>
 801c3e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c3e6:	f7ff fe6d 	bl	801c0c4 <_lv_text_is_break_char>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	d010      	beq.n	801c412 <lv_text_get_next_word+0x10a>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 801c3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d109      	bne.n	801c40a <lv_text_get_next_word+0x102>
 801c3f6:	6a3b      	ldr	r3, [r7, #32]
 801c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3fc:	d105      	bne.n	801c40a <lv_text_get_next_word+0x102>
 801c3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c400:	2b00      	cmp	r3, #0
 801c402:	d002      	beq.n	801c40a <lv_text_get_next_word+0x102>
 801c404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c408:	601a      	str	r2, [r3, #0]
            word_len--;
 801c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c40c:	3b01      	subs	r3, #1
 801c40e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 801c410:	e027      	b.n	801c462 <lv_text_get_next_word+0x15a>
        }
        else if(_lv_text_is_a_word(letter_next) || _lv_text_is_a_word(letter)) {
 801c412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801c414:	f7ff fe7a 	bl	801c10c <_lv_text_is_a_word>
 801c418:	4603      	mov	r3, r0
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d105      	bne.n	801c42a <lv_text_get_next_word+0x122>
 801c41e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c420:	f7ff fe74 	bl	801c10c <_lv_text_is_a_word>
 801c424:	4603      	mov	r3, r0
 801c426:	2b00      	cmp	r3, #0
 801c428:	d005      	beq.n	801c436 <lv_text_get_next_word+0x12e>
            /*Found a word for single letter, usually true for CJK*/
            *word_w_ptr = cur_w;
 801c42a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c42c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c42e:	601a      	str	r2, [r3, #0]
            i = i_next;
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 801c434:	e015      	b.n	801c462 <lv_text_get_next_word+0x15a>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801c436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d006      	beq.n	801c44a <lv_text_get_next_word+0x142>
 801c43c:	6a3b      	ldr	r3, [r7, #32]
 801c43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c442:	d102      	bne.n	801c44a <lv_text_get_next_word+0x142>
 801c444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c448:	601a      	str	r2, [r3, #0]

        i = i_next;
 801c44a:	697b      	ldr	r3, [r7, #20]
 801c44c:	637b      	str	r3, [r7, #52]	@ 0x34
        i_next = i_next_next;
 801c44e:	693b      	ldr	r3, [r7, #16]
 801c450:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 801c452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c454:	633b      	str	r3, [r7, #48]	@ 0x30
    while(txt[i] != '\0') {
 801c456:	68fa      	ldr	r2, [r7, #12]
 801c458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c45a:	4413      	add	r3, r2
 801c45c:	781b      	ldrb	r3, [r3, #0]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d18e      	bne.n	801c380 <lv_text_get_next_word+0x78>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 801c462:	6a3b      	ldr	r3, [r7, #32]
 801c464:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c468:	d10c      	bne.n	801c484 <lv_text_get_next_word+0x17c>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 801c46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d005      	beq.n	801c47c <lv_text_get_next_word+0x174>
 801c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c472:	2b0d      	cmp	r3, #13
 801c474:	d104      	bne.n	801c480 <lv_text_get_next_word+0x178>
 801c476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c478:	2b0a      	cmp	r3, #10
 801c47a:	d101      	bne.n	801c480 <lv_text_get_next_word+0x178>
 801c47c:	697b      	ldr	r3, [r7, #20]
 801c47e:	637b      	str	r3, [r7, #52]	@ 0x34
        return i;
 801c480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c482:	e00c      	b.n	801c49e <lv_text_get_next_word+0x196>
             */
        }
    }
    return i;
#else
    if(force) return break_index;
 801c484:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d001      	beq.n	801c490 <lv_text_get_next_word+0x188>
 801c48c:	6a3b      	ldr	r3, [r7, #32]
 801c48e:	e006      	b.n	801c49e <lv_text_get_next_word+0x196>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 801c490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c492:	2b00      	cmp	r3, #0
 801c494:	d002      	beq.n	801c49c <lv_text_get_next_word+0x194>
 801c496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c498:	2200      	movs	r2, #0
 801c49a:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 801c49c:	2300      	movs	r3, #0
#endif
}
 801c49e:	4618      	mov	r0, r3
 801c4a0:	3738      	adds	r7, #56	@ 0x38
 801c4a2:	46bd      	mov	sp, r7
 801c4a4:	bd80      	pop	{r7, pc}
 801c4a6:	bf00      	nop
 801c4a8:	2000000c 	.word	0x2000000c

0801c4ac <_lv_text_get_next_line>:

uint32_t _lv_text_get_next_line(const char * txt, const lv_font_t * font,
                                int32_t letter_space, int32_t max_width,
                                int32_t * used_width, lv_text_flag_t flag)
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b08e      	sub	sp, #56	@ 0x38
 801c4b0:	af04      	add	r7, sp, #16
 801c4b2:	60f8      	str	r0, [r7, #12]
 801c4b4:	60b9      	str	r1, [r7, #8]
 801c4b6:	607a      	str	r2, [r7, #4]
 801c4b8:	603b      	str	r3, [r7, #0]
    if(used_width) *used_width = 0;
 801c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d002      	beq.n	801c4c6 <_lv_text_get_next_line+0x1a>
 801c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	601a      	str	r2, [r3, #0]

    if(txt == NULL) return 0;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d101      	bne.n	801c4d0 <_lv_text_get_next_line+0x24>
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	e0b4      	b.n	801c63a <_lv_text_get_next_line+0x18e>
    if(txt[0] == '\0') return 0;
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	781b      	ldrb	r3, [r3, #0]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d101      	bne.n	801c4dc <_lv_text_get_next_line+0x30>
 801c4d8:	2300      	movs	r3, #0
 801c4da:	e0ae      	b.n	801c63a <_lv_text_get_next_line+0x18e>
    if(font == NULL) return 0;
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d101      	bne.n	801c4e6 <_lv_text_get_next_line+0x3a>
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	e0a9      	b.n	801c63a <_lv_text_get_next_line+0x18e>

    int32_t line_w = 0;
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /*If max_width doesn't matter simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 801c4ea:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801c4ee:	f003 0301 	and.w	r3, r3, #1
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d105      	bne.n	801c502 <_lv_text_get_next_line+0x56>
 801c4f6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801c4fa:	f003 0302 	and.w	r3, r3, #2
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d029      	beq.n	801c556 <_lv_text_get_next_line+0xaa>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 801c502:	2300      	movs	r3, #0
 801c504:	623b      	str	r3, [r7, #32]
 801c506:	e002      	b.n	801c50e <_lv_text_get_next_line+0x62>
 801c508:	6a3b      	ldr	r3, [r7, #32]
 801c50a:	3301      	adds	r3, #1
 801c50c:	623b      	str	r3, [r7, #32]
 801c50e:	68fa      	ldr	r2, [r7, #12]
 801c510:	6a3b      	ldr	r3, [r7, #32]
 801c512:	4413      	add	r3, r2
 801c514:	781b      	ldrb	r3, [r3, #0]
 801c516:	2b0a      	cmp	r3, #10
 801c518:	d00b      	beq.n	801c532 <_lv_text_get_next_line+0x86>
 801c51a:	68fa      	ldr	r2, [r7, #12]
 801c51c:	6a3b      	ldr	r3, [r7, #32]
 801c51e:	4413      	add	r3, r2
 801c520:	781b      	ldrb	r3, [r3, #0]
 801c522:	2b0d      	cmp	r3, #13
 801c524:	d005      	beq.n	801c532 <_lv_text_get_next_line+0x86>
 801c526:	68fa      	ldr	r2, [r7, #12]
 801c528:	6a3b      	ldr	r3, [r7, #32]
 801c52a:	4413      	add	r3, r2
 801c52c:	781b      	ldrb	r3, [r3, #0]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d1ea      	bne.n	801c508 <_lv_text_get_next_line+0x5c>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 801c532:	68fa      	ldr	r2, [r7, #12]
 801c534:	6a3b      	ldr	r3, [r7, #32]
 801c536:	4413      	add	r3, r2
 801c538:	781b      	ldrb	r3, [r3, #0]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d002      	beq.n	801c544 <_lv_text_get_next_line+0x98>
 801c53e:	6a3b      	ldr	r3, [r7, #32]
 801c540:	3301      	adds	r3, #1
 801c542:	623b      	str	r3, [r7, #32]
        if(used_width) *used_width = -1;
 801c544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c546:	2b00      	cmp	r3, #0
 801c548:	d003      	beq.n	801c552 <_lv_text_get_next_line+0xa6>
 801c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c54c:	f04f 32ff 	mov.w	r2, #4294967295
 801c550:	601a      	str	r2, [r3, #0]
        return i;
 801c552:	6a3b      	ldr	r3, [r7, #32]
 801c554:	e071      	b.n	801c63a <_lv_text_get_next_line+0x18e>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801c556:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801c55a:	f003 0301 	and.w	r3, r3, #1
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d002      	beq.n	801c568 <_lv_text_get_next_line+0xbc>
 801c562:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 801c566:	603b      	str	r3, [r7, #0]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 801c568:	2300      	movs	r3, #0
 801c56a:	617b      	str	r3, [r7, #20]

    while(txt[i] != '\0' && max_width > 0) {
 801c56c:	e03e      	b.n	801c5ec <_lv_text_get_next_line+0x140>
        uint32_t word_w = 0;
 801c56e:	2300      	movs	r3, #0
 801c570:	613b      	str	r3, [r7, #16]
        uint32_t advance = lv_text_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, i == 0);
 801c572:	697b      	ldr	r3, [r7, #20]
 801c574:	68fa      	ldr	r2, [r7, #12]
 801c576:	18d0      	adds	r0, r2, r3
 801c578:	697b      	ldr	r3, [r7, #20]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	bf0c      	ite	eq
 801c57e:	2301      	moveq	r3, #1
 801c580:	2300      	movne	r3, #0
 801c582:	b2db      	uxtb	r3, r3
 801c584:	9302      	str	r3, [sp, #8]
 801c586:	f107 0310 	add.w	r3, r7, #16
 801c58a:	9301      	str	r3, [sp, #4]
 801c58c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801c590:	9300      	str	r3, [sp, #0]
 801c592:	683b      	ldr	r3, [r7, #0]
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	68b9      	ldr	r1, [r7, #8]
 801c598:	f7ff feb6 	bl	801c308 <lv_text_get_next_word>
 801c59c:	61f8      	str	r0, [r7, #28]
        max_width -= word_w;
 801c59e:	683a      	ldr	r2, [r7, #0]
 801c5a0:	693b      	ldr	r3, [r7, #16]
 801c5a2:	1ad3      	subs	r3, r2, r3
 801c5a4:	603b      	str	r3, [r7, #0]
        line_w += word_w;
 801c5a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c5a8:	693b      	ldr	r3, [r7, #16]
 801c5aa:	4413      	add	r3, r2
 801c5ac:	627b      	str	r3, [r7, #36]	@ 0x24

        if(advance == 0) {
 801c5ae:	69fb      	ldr	r3, [r7, #28]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d025      	beq.n	801c600 <_lv_text_get_next_line+0x154>
            break;
        }

        i += advance;
 801c5b4:	697a      	ldr	r2, [r7, #20]
 801c5b6:	69fb      	ldr	r3, [r7, #28]
 801c5b8:	4413      	add	r3, r2
 801c5ba:	617b      	str	r3, [r7, #20]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	781b      	ldrb	r3, [r3, #0]
 801c5c0:	2b0a      	cmp	r3, #10
 801c5c2:	d01d      	beq.n	801c600 <_lv_text_get_next_line+0x154>
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	781b      	ldrb	r3, [r3, #0]
 801c5c8:	2b0d      	cmp	r3, #13
 801c5ca:	d019      	beq.n	801c600 <_lv_text_get_next_line+0x154>

        if(txt[i] == '\n' || txt[i] == '\r') {
 801c5cc:	697b      	ldr	r3, [r7, #20]
 801c5ce:	68fa      	ldr	r2, [r7, #12]
 801c5d0:	4413      	add	r3, r2
 801c5d2:	781b      	ldrb	r3, [r3, #0]
 801c5d4:	2b0a      	cmp	r3, #10
 801c5d6:	d005      	beq.n	801c5e4 <_lv_text_get_next_line+0x138>
 801c5d8:	697b      	ldr	r3, [r7, #20]
 801c5da:	68fa      	ldr	r2, [r7, #12]
 801c5dc:	4413      	add	r3, r2
 801c5de:	781b      	ldrb	r3, [r3, #0]
 801c5e0:	2b0d      	cmp	r3, #13
 801c5e2:	d103      	bne.n	801c5ec <_lv_text_get_next_line+0x140>
            i++;  /*Include the following newline in the current line*/
 801c5e4:	697b      	ldr	r3, [r7, #20]
 801c5e6:	3301      	adds	r3, #1
 801c5e8:	617b      	str	r3, [r7, #20]
            break;
 801c5ea:	e00a      	b.n	801c602 <_lv_text_get_next_line+0x156>
    while(txt[i] != '\0' && max_width > 0) {
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	68fa      	ldr	r2, [r7, #12]
 801c5f0:	4413      	add	r3, r2
 801c5f2:	781b      	ldrb	r3, [r3, #0]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d004      	beq.n	801c602 <_lv_text_get_next_line+0x156>
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	dcb7      	bgt.n	801c56e <_lv_text_get_next_line+0xc2>
 801c5fe:	e000      	b.n	801c602 <_lv_text_get_next_line+0x156>
            break;
 801c600:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 801c602:	697b      	ldr	r3, [r7, #20]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d111      	bne.n	801c62c <_lv_text_get_next_line+0x180>
        uint32_t letter = _lv_text_encoded_next(txt, &i);
 801c608:	4b0e      	ldr	r3, [pc, #56]	@ (801c644 <_lv_text_get_next_line+0x198>)
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	f107 0214 	add.w	r2, r7, #20
 801c610:	4611      	mov	r1, r2
 801c612:	68f8      	ldr	r0, [r7, #12]
 801c614:	4798      	blx	r3
 801c616:	61b8      	str	r0, [r7, #24]
        if(used_width != NULL) {
 801c618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d006      	beq.n	801c62c <_lv_text_get_next_line+0x180>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 801c61e:	2200      	movs	r2, #0
 801c620:	69b9      	ldr	r1, [r7, #24]
 801c622:	68b8      	ldr	r0, [r7, #8]
 801c624:	f7f9 f930 	bl	8015888 <lv_font_get_glyph_width>
 801c628:	4603      	mov	r3, r0
 801c62a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    if(used_width != NULL) {
 801c62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d002      	beq.n	801c638 <_lv_text_get_next_line+0x18c>
        *used_width = line_w;
 801c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c636:	601a      	str	r2, [r3, #0]
    }

    return i;
 801c638:	697b      	ldr	r3, [r7, #20]
}
 801c63a:	4618      	mov	r0, r3
 801c63c:	3728      	adds	r7, #40	@ 0x28
 801c63e:	46bd      	mov	sp, r7
 801c640:	bd80      	pop	{r7, pc}
 801c642:	bf00      	nop
 801c644:	2000000c 	.word	0x2000000c

0801c648 <lv_text_get_width>:

int32_t lv_text_get_width(const char * txt, uint32_t length, const lv_font_t * font, int32_t letter_space)
{
 801c648:	b580      	push	{r7, lr}
 801c64a:	b08a      	sub	sp, #40	@ 0x28
 801c64c:	af00      	add	r7, sp, #0
 801c64e:	60f8      	str	r0, [r7, #12]
 801c650:	60b9      	str	r1, [r7, #8]
 801c652:	607a      	str	r2, [r7, #4]
 801c654:	603b      	str	r3, [r7, #0]
    if(txt == NULL) return 0;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d101      	bne.n	801c660 <lv_text_get_width+0x18>
 801c65c:	2300      	movs	r3, #0
 801c65e:	e03a      	b.n	801c6d6 <lv_text_get_width+0x8e>
    if(font == NULL) return 0;
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d101      	bne.n	801c66a <lv_text_get_width+0x22>
 801c666:	2300      	movs	r3, #0
 801c668:	e035      	b.n	801c6d6 <lv_text_get_width+0x8e>
    if(txt[0] == '\0') return 0;
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	781b      	ldrb	r3, [r3, #0]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d101      	bne.n	801c676 <lv_text_get_width+0x2e>
 801c672:	2300      	movs	r3, #0
 801c674:	e02f      	b.n	801c6d6 <lv_text_get_width+0x8e>

    uint32_t i                   = 0;
 801c676:	2300      	movs	r3, #0
 801c678:	61fb      	str	r3, [r7, #28]
    int32_t width             = 0;
 801c67a:	2300      	movs	r3, #0
 801c67c:	627b      	str	r3, [r7, #36]	@ 0x24

    if(length != 0) {
 801c67e:	68bb      	ldr	r3, [r7, #8]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d027      	beq.n	801c6d4 <lv_text_get_width+0x8c>
        while(i < length) {
 801c684:	e01b      	b.n	801c6be <lv_text_get_width+0x76>
            uint32_t letter;
            uint32_t letter_next;
            _lv_text_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 801c686:	f107 031c 	add.w	r3, r7, #28
 801c68a:	f107 0214 	add.w	r2, r7, #20
 801c68e:	f107 0118 	add.w	r1, r7, #24
 801c692:	68f8      	ldr	r0, [r7, #12]
 801c694:	f000 f824 	bl	801c6e0 <_lv_text_encoded_letter_next_2>

            int32_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801c698:	69bb      	ldr	r3, [r7, #24]
 801c69a:	697a      	ldr	r2, [r7, #20]
 801c69c:	4619      	mov	r1, r3
 801c69e:	6878      	ldr	r0, [r7, #4]
 801c6a0:	f7f9 f8f2 	bl	8015888 <lv_font_get_glyph_width>
 801c6a4:	4603      	mov	r3, r0
 801c6a6:	623b      	str	r3, [r7, #32]
            if(char_width > 0) {
 801c6a8:	6a3b      	ldr	r3, [r7, #32]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	dd07      	ble.n	801c6be <lv_text_get_width+0x76>
                width += char_width;
 801c6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6b0:	6a3b      	ldr	r3, [r7, #32]
 801c6b2:	4413      	add	r3, r2
 801c6b4:	627b      	str	r3, [r7, #36]	@ 0x24
                width += letter_space;
 801c6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6b8:	683b      	ldr	r3, [r7, #0]
 801c6ba:	4413      	add	r3, r2
 801c6bc:	627b      	str	r3, [r7, #36]	@ 0x24
        while(i < length) {
 801c6be:	69fb      	ldr	r3, [r7, #28]
 801c6c0:	68ba      	ldr	r2, [r7, #8]
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	d8df      	bhi.n	801c686 <lv_text_get_width+0x3e>
            }
        }

        if(width > 0) {
 801c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	dd03      	ble.n	801c6d4 <lv_text_get_width+0x8c>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 801c6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6ce:	683b      	ldr	r3, [r7, #0]
 801c6d0:	1ad3      	subs	r3, r2, r3
 801c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
                                      aligned*/
        }
    }

    return width;
 801c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	3728      	adds	r7, #40	@ 0x28
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	bd80      	pop	{r7, pc}
	...

0801c6e0 <_lv_text_encoded_letter_next_2>:

    return text;
}

void _lv_text_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b084      	sub	sp, #16
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	60f8      	str	r0, [r7, #12]
 801c6e8:	60b9      	str	r1, [r7, #8]
 801c6ea:	607a      	str	r2, [r7, #4]
 801c6ec:	603b      	str	r3, [r7, #0]
    *letter = _lv_text_encoded_next(txt, ofs);
 801c6ee:	4b0f      	ldr	r3, [pc, #60]	@ (801c72c <_lv_text_encoded_letter_next_2+0x4c>)
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	6839      	ldr	r1, [r7, #0]
 801c6f4:	68f8      	ldr	r0, [r7, #12]
 801c6f6:	4798      	blx	r3
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	68bb      	ldr	r3, [r7, #8]
 801c6fc:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_text_encoded_next(&txt[*ofs], NULL) : 0;
 801c6fe:	68bb      	ldr	r3, [r7, #8]
 801c700:	681b      	ldr	r3, [r3, #0]
 801c702:	2b00      	cmp	r3, #0
 801c704:	d00a      	beq.n	801c71c <_lv_text_encoded_letter_next_2+0x3c>
 801c706:	4b09      	ldr	r3, [pc, #36]	@ (801c72c <_lv_text_encoded_letter_next_2+0x4c>)
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	683a      	ldr	r2, [r7, #0]
 801c70c:	6812      	ldr	r2, [r2, #0]
 801c70e:	68f9      	ldr	r1, [r7, #12]
 801c710:	440a      	add	r2, r1
 801c712:	2100      	movs	r1, #0
 801c714:	4610      	mov	r0, r2
 801c716:	4798      	blx	r3
 801c718:	4603      	mov	r3, r0
 801c71a:	e000      	b.n	801c71e <_lv_text_encoded_letter_next_2+0x3e>
 801c71c:	2300      	movs	r3, #0
 801c71e:	687a      	ldr	r2, [r7, #4]
 801c720:	6013      	str	r3, [r2, #0]
}
 801c722:	bf00      	nop
 801c724:	3710      	adds	r7, #16
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}
 801c72a:	bf00      	nop
 801c72c:	2000000c 	.word	0x2000000c

0801c730 <lv_text_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_text_utf8_next(const char * txt, uint32_t * i)
{
 801c730:	b480      	push	{r7}
 801c732:	b085      	sub	sp, #20
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
 801c738:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 801c73a:	2300      	movs	r3, #0
 801c73c:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 801c73e:	2300      	movs	r3, #0
 801c740:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 801c742:	683b      	ldr	r3, [r7, #0]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d102      	bne.n	801c74e <lv_text_utf8_next+0x1e>
 801c748:	f107 0308 	add.w	r3, r7, #8
 801c74c:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 801c74e:	683b      	ldr	r3, [r7, #0]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	687a      	ldr	r2, [r7, #4]
 801c754:	4413      	add	r3, r2
 801c756:	781b      	ldrb	r3, [r3, #0]
 801c758:	b25b      	sxtb	r3, r3
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	db0b      	blt.n	801c776 <lv_text_utf8_next+0x46>
        result = txt[*i];
 801c75e:	683b      	ldr	r3, [r7, #0]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	687a      	ldr	r2, [r7, #4]
 801c764:	4413      	add	r3, r2
 801c766:	781b      	ldrb	r3, [r3, #0]
 801c768:	60fb      	str	r3, [r7, #12]
        (*i)++;
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	1c5a      	adds	r2, r3, #1
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	601a      	str	r2, [r3, #0]
 801c774:	e0ea      	b.n	801c94c <lv_text_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	687a      	ldr	r2, [r7, #4]
 801c77c:	4413      	add	r3, r2
 801c77e:	781b      	ldrb	r3, [r3, #0]
 801c780:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 801c784:	2bc0      	cmp	r3, #192	@ 0xc0
 801c786:	d128      	bne.n	801c7da <lv_text_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801c788:	683b      	ldr	r3, [r7, #0]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	687a      	ldr	r2, [r7, #4]
 801c78e:	4413      	add	r3, r2
 801c790:	781b      	ldrb	r3, [r3, #0]
 801c792:	019b      	lsls	r3, r3, #6
 801c794:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 801c798:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	1c5a      	adds	r2, r3, #1
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801c7a4:	683b      	ldr	r3, [r7, #0]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	687a      	ldr	r2, [r7, #4]
 801c7aa:	4413      	add	r3, r2
 801c7ac:	781b      	ldrb	r3, [r3, #0]
 801c7ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c7b2:	2b80      	cmp	r3, #128	@ 0x80
 801c7b4:	d001      	beq.n	801c7ba <lv_text_utf8_next+0x8a>
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	e0c9      	b.n	801c94e <lv_text_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	687a      	ldr	r2, [r7, #4]
 801c7c0:	4413      	add	r3, r2
 801c7c2:	781b      	ldrb	r3, [r3, #0]
 801c7c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c7c8:	68fa      	ldr	r2, [r7, #12]
 801c7ca:	4413      	add	r3, r2
 801c7cc:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	1c5a      	adds	r2, r3, #1
 801c7d4:	683b      	ldr	r3, [r7, #0]
 801c7d6:	601a      	str	r2, [r3, #0]
 801c7d8:	e0b8      	b.n	801c94c <lv_text_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 801c7da:	683b      	ldr	r3, [r7, #0]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	687a      	ldr	r2, [r7, #4]
 801c7e0:	4413      	add	r3, r2
 801c7e2:	781b      	ldrb	r3, [r3, #0]
 801c7e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c7e8:	2be0      	cmp	r3, #224	@ 0xe0
 801c7ea:	d142      	bne.n	801c872 <lv_text_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801c7ec:	683b      	ldr	r3, [r7, #0]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	687a      	ldr	r2, [r7, #4]
 801c7f2:	4413      	add	r3, r2
 801c7f4:	781b      	ldrb	r3, [r3, #0]
 801c7f6:	031b      	lsls	r3, r3, #12
 801c7f8:	b29b      	uxth	r3, r3
 801c7fa:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c7fc:	683b      	ldr	r3, [r7, #0]
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	1c5a      	adds	r2, r3, #1
 801c802:	683b      	ldr	r3, [r7, #0]
 801c804:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801c806:	683b      	ldr	r3, [r7, #0]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	687a      	ldr	r2, [r7, #4]
 801c80c:	4413      	add	r3, r2
 801c80e:	781b      	ldrb	r3, [r3, #0]
 801c810:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c814:	2b80      	cmp	r3, #128	@ 0x80
 801c816:	d001      	beq.n	801c81c <lv_text_utf8_next+0xec>
 801c818:	2300      	movs	r3, #0
 801c81a:	e098      	b.n	801c94e <lv_text_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801c81c:	683b      	ldr	r3, [r7, #0]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	687a      	ldr	r2, [r7, #4]
 801c822:	4413      	add	r3, r2
 801c824:	781b      	ldrb	r3, [r3, #0]
 801c826:	019b      	lsls	r3, r3, #6
 801c828:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 801c82c:	68fa      	ldr	r2, [r7, #12]
 801c82e:	4413      	add	r3, r2
 801c830:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c832:	683b      	ldr	r3, [r7, #0]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	1c5a      	adds	r2, r3, #1
 801c838:	683b      	ldr	r3, [r7, #0]
 801c83a:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	687a      	ldr	r2, [r7, #4]
 801c842:	4413      	add	r3, r2
 801c844:	781b      	ldrb	r3, [r3, #0]
 801c846:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c84a:	2b80      	cmp	r3, #128	@ 0x80
 801c84c:	d001      	beq.n	801c852 <lv_text_utf8_next+0x122>
 801c84e:	2300      	movs	r3, #0
 801c850:	e07d      	b.n	801c94e <lv_text_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 801c852:	683b      	ldr	r3, [r7, #0]
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	687a      	ldr	r2, [r7, #4]
 801c858:	4413      	add	r3, r2
 801c85a:	781b      	ldrb	r3, [r3, #0]
 801c85c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c860:	68fa      	ldr	r2, [r7, #12]
 801c862:	4413      	add	r3, r2
 801c864:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c866:	683b      	ldr	r3, [r7, #0]
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	1c5a      	adds	r2, r3, #1
 801c86c:	683b      	ldr	r3, [r7, #0]
 801c86e:	601a      	str	r2, [r3, #0]
 801c870:	e06c      	b.n	801c94c <lv_text_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 801c872:	683b      	ldr	r3, [r7, #0]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	687a      	ldr	r2, [r7, #4]
 801c878:	4413      	add	r3, r2
 801c87a:	781b      	ldrb	r3, [r3, #0]
 801c87c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801c880:	2bf0      	cmp	r3, #240	@ 0xf0
 801c882:	d15e      	bne.n	801c942 <lv_text_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	687a      	ldr	r2, [r7, #4]
 801c88a:	4413      	add	r3, r2
 801c88c:	781b      	ldrb	r3, [r3, #0]
 801c88e:	049b      	lsls	r3, r3, #18
 801c890:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 801c894:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c896:	683b      	ldr	r3, [r7, #0]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	1c5a      	adds	r2, r3, #1
 801c89c:	683b      	ldr	r3, [r7, #0]
 801c89e:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	687a      	ldr	r2, [r7, #4]
 801c8a6:	4413      	add	r3, r2
 801c8a8:	781b      	ldrb	r3, [r3, #0]
 801c8aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c8ae:	2b80      	cmp	r3, #128	@ 0x80
 801c8b0:	d001      	beq.n	801c8b6 <lv_text_utf8_next+0x186>
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	e04b      	b.n	801c94e <lv_text_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 801c8b6:	683b      	ldr	r3, [r7, #0]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	687a      	ldr	r2, [r7, #4]
 801c8bc:	4413      	add	r3, r2
 801c8be:	781b      	ldrb	r3, [r3, #0]
 801c8c0:	031b      	lsls	r3, r3, #12
 801c8c2:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 801c8c6:	68fa      	ldr	r2, [r7, #12]
 801c8c8:	4413      	add	r3, r2
 801c8ca:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c8cc:	683b      	ldr	r3, [r7, #0]
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	1c5a      	adds	r2, r3, #1
 801c8d2:	683b      	ldr	r3, [r7, #0]
 801c8d4:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	687a      	ldr	r2, [r7, #4]
 801c8dc:	4413      	add	r3, r2
 801c8de:	781b      	ldrb	r3, [r3, #0]
 801c8e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c8e4:	2b80      	cmp	r3, #128	@ 0x80
 801c8e6:	d001      	beq.n	801c8ec <lv_text_utf8_next+0x1bc>
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	e030      	b.n	801c94e <lv_text_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801c8ec:	683b      	ldr	r3, [r7, #0]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	687a      	ldr	r2, [r7, #4]
 801c8f2:	4413      	add	r3, r2
 801c8f4:	781b      	ldrb	r3, [r3, #0]
 801c8f6:	019b      	lsls	r3, r3, #6
 801c8f8:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 801c8fc:	68fa      	ldr	r2, [r7, #12]
 801c8fe:	4413      	add	r3, r2
 801c900:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c902:	683b      	ldr	r3, [r7, #0]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	1c5a      	adds	r2, r3, #1
 801c908:	683b      	ldr	r3, [r7, #0]
 801c90a:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 801c90c:	683b      	ldr	r3, [r7, #0]
 801c90e:	681b      	ldr	r3, [r3, #0]
 801c910:	687a      	ldr	r2, [r7, #4]
 801c912:	4413      	add	r3, r2
 801c914:	781b      	ldrb	r3, [r3, #0]
 801c916:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c91a:	2b80      	cmp	r3, #128	@ 0x80
 801c91c:	d001      	beq.n	801c922 <lv_text_utf8_next+0x1f2>
 801c91e:	2300      	movs	r3, #0
 801c920:	e015      	b.n	801c94e <lv_text_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 801c922:	683b      	ldr	r3, [r7, #0]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	687a      	ldr	r2, [r7, #4]
 801c928:	4413      	add	r3, r2
 801c92a:	781b      	ldrb	r3, [r3, #0]
 801c92c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c930:	68fa      	ldr	r2, [r7, #12]
 801c932:	4413      	add	r3, r2
 801c934:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	1c5a      	adds	r2, r3, #1
 801c93c:	683b      	ldr	r3, [r7, #0]
 801c93e:	601a      	str	r2, [r3, #0]
 801c940:	e004      	b.n	801c94c <lv_text_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 801c942:	683b      	ldr	r3, [r7, #0]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	1c5a      	adds	r2, r3, #1
 801c948:	683b      	ldr	r3, [r7, #0]
 801c94a:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 801c94c:	68fb      	ldr	r3, [r7, #12]
}
 801c94e:	4618      	mov	r0, r3
 801c950:	3714      	adds	r7, #20
 801c952:	46bd      	mov	sp, r7
 801c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c958:	4770      	bx	lr
	...

0801c95c <lv_text_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_text_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b084      	sub	sp, #16
 801c960:	af00      	add	r7, sp, #0
 801c962:	6078      	str	r0, [r7, #4]
 801c964:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 801c966:	2300      	movs	r3, #0
 801c968:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 801c96a:	2300      	movs	r3, #0
 801c96c:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 801c96e:	e009      	b.n	801c984 <lv_text_utf8_get_char_id+0x28>
        _lv_text_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 801c970:	4b09      	ldr	r3, [pc, #36]	@ (801c998 <lv_text_utf8_get_char_id+0x3c>)
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	f107 0208 	add.w	r2, r7, #8
 801c978:	4611      	mov	r1, r2
 801c97a:	6878      	ldr	r0, [r7, #4]
 801c97c:	4798      	blx	r3
        char_cnt++;
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	3301      	adds	r3, #1
 801c982:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 801c984:	68bb      	ldr	r3, [r7, #8]
 801c986:	683a      	ldr	r2, [r7, #0]
 801c988:	429a      	cmp	r2, r3
 801c98a:	d8f1      	bhi.n	801c970 <lv_text_utf8_get_char_id+0x14>
    }

    return char_cnt;
 801c98c:	68fb      	ldr	r3, [r7, #12]
}
 801c98e:	4618      	mov	r0, r3
 801c990:	3710      	adds	r7, #16
 801c992:	46bd      	mov	sp, r7
 801c994:	bd80      	pop	{r7, pc}
 801c996:	bf00      	nop
 801c998:	2000000c 	.word	0x2000000c

0801c99c <_lv_timer_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_timer_core_init(void)
{
 801c99c:	b580      	push	{r7, lr}
 801c99e:	af00      	add	r7, sp, #0
    _lv_ll_init(timer_ll_p, sizeof(lv_timer_t));
 801c9a0:	2118      	movs	r1, #24
 801c9a2:	4804      	ldr	r0, [pc, #16]	@ (801c9b4 <_lv_timer_core_init+0x18>)
 801c9a4:	f7ff f991 	bl	801bcca <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 801c9a8:	2001      	movs	r0, #1
 801c9aa:	f000 f86f 	bl	801ca8c <lv_timer_enable>
}
 801c9ae:	bf00      	nop
 801c9b0:	bd80      	pop	{r7, pc}
 801c9b2:	bf00      	nop
 801c9b4:	2000010c 	.word	0x2000010c

0801c9b8 <lv_timer_create>:
{
    return lv_timer_create(NULL, DEF_PERIOD, NULL);
}

lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b086      	sub	sp, #24
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	60f8      	str	r0, [r7, #12]
 801c9c0:	60b9      	str	r1, [r7, #8]
 801c9c2:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(timer_ll_p);
 801c9c8:	481a      	ldr	r0, [pc, #104]	@ (801ca34 <lv_timer_create+0x7c>)
 801c9ca:	f7ff f997 	bl	801bcfc <_lv_ll_ins_head>
 801c9ce:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 801c9d0:	697b      	ldr	r3, [r7, #20]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d101      	bne.n	801c9da <lv_timer_create+0x22>
 801c9d6:	bf00      	nop
 801c9d8:	e7fd      	b.n	801c9d6 <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 801c9da:	697b      	ldr	r3, [r7, #20]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d101      	bne.n	801c9e4 <lv_timer_create+0x2c>
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	e022      	b.n	801ca2a <lv_timer_create+0x72>

    new_timer->period = period;
 801c9e4:	697b      	ldr	r3, [r7, #20]
 801c9e6:	68ba      	ldr	r2, [r7, #8]
 801c9e8:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 801c9ea:	697b      	ldr	r3, [r7, #20]
 801c9ec:	68fa      	ldr	r2, [r7, #12]
 801c9ee:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 801c9f0:	697b      	ldr	r3, [r7, #20]
 801c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 801c9f6:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 801c9f8:	697a      	ldr	r2, [r7, #20]
 801c9fa:	7d13      	ldrb	r3, [r2, #20]
 801c9fc:	f36f 0300 	bfc	r3, #0, #1
 801ca00:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 801ca02:	f001 fbc1 	bl	801e188 <lv_tick_get>
 801ca06:	4602      	mov	r2, r0
 801ca08:	697b      	ldr	r3, [r7, #20]
 801ca0a:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 801ca0c:	697b      	ldr	r3, [r7, #20]
 801ca0e:	687a      	ldr	r2, [r7, #4]
 801ca10:	60da      	str	r2, [r3, #12]
    new_timer->auto_delete = true;
 801ca12:	697a      	ldr	r2, [r7, #20]
 801ca14:	7d13      	ldrb	r3, [r2, #20]
 801ca16:	f043 0302 	orr.w	r3, r3, #2
 801ca1a:	7513      	strb	r3, [r2, #20]

    state.timer_created = true;
 801ca1c:	4b06      	ldr	r3, [pc, #24]	@ (801ca38 <lv_timer_create+0x80>)
 801ca1e:	2201      	movs	r2, #1
 801ca20:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f

    lv_timer_handler_resume();
 801ca24:	f000 f846 	bl	801cab4 <lv_timer_handler_resume>

    return new_timer;
 801ca28:	697b      	ldr	r3, [r7, #20]
}
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	3718      	adds	r7, #24
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	bd80      	pop	{r7, pc}
 801ca32:	bf00      	nop
 801ca34:	2000010c 	.word	0x2000010c
 801ca38:	2000008c 	.word	0x2000008c

0801ca3c <lv_timer_pause>:

    lv_free(timer);
}

void lv_timer_pause(lv_timer_t * timer)
{
 801ca3c:	b480      	push	{r7}
 801ca3e:	b083      	sub	sp, #12
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(timer);
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d101      	bne.n	801ca4e <lv_timer_pause+0x12>
 801ca4a:	bf00      	nop
 801ca4c:	e7fd      	b.n	801ca4a <lv_timer_pause+0xe>
    timer->paused = true;
 801ca4e:	687a      	ldr	r2, [r7, #4]
 801ca50:	7d13      	ldrb	r3, [r2, #20]
 801ca52:	f043 0301 	orr.w	r3, r3, #1
 801ca56:	7513      	strb	r3, [r2, #20]
}
 801ca58:	bf00      	nop
 801ca5a:	370c      	adds	r7, #12
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca62:	4770      	bx	lr

0801ca64 <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 801ca64:	b580      	push	{r7, lr}
 801ca66:	b082      	sub	sp, #8
 801ca68:	af00      	add	r7, sp, #0
 801ca6a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_NULL(timer);
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d101      	bne.n	801ca76 <lv_timer_resume+0x12>
 801ca72:	bf00      	nop
 801ca74:	e7fd      	b.n	801ca72 <lv_timer_resume+0xe>
    timer->paused = false;
 801ca76:	687a      	ldr	r2, [r7, #4]
 801ca78:	7d13      	ldrb	r3, [r2, #20]
 801ca7a:	f36f 0300 	bfc	r3, #0, #1
 801ca7e:	7513      	strb	r3, [r2, #20]
    lv_timer_handler_resume();
 801ca80:	f000 f818 	bl	801cab4 <lv_timer_handler_resume>
}
 801ca84:	bf00      	nop
 801ca86:	3708      	adds	r7, #8
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	bd80      	pop	{r7, pc}

0801ca8c <lv_timer_enable>:
    timer->last_run = lv_tick_get();
    lv_timer_handler_resume();
}

void lv_timer_enable(bool en)
{
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b082      	sub	sp, #8
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	4603      	mov	r3, r0
 801ca94:	71fb      	strb	r3, [r7, #7]
    state.lv_timer_run = en;
 801ca96:	4a06      	ldr	r2, [pc, #24]	@ (801cab0 <lv_timer_enable+0x24>)
 801ca98:	79fb      	ldrb	r3, [r7, #7]
 801ca9a:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
    if(en) lv_timer_handler_resume();
 801ca9e:	79fb      	ldrb	r3, [r7, #7]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d001      	beq.n	801caa8 <lv_timer_enable+0x1c>
 801caa4:	f000 f806 	bl	801cab4 <lv_timer_handler_resume>
}
 801caa8:	bf00      	nop
 801caaa:	3708      	adds	r7, #8
 801caac:	46bd      	mov	sp, r7
 801caae:	bd80      	pop	{r7, pc}
 801cab0:	2000008c 	.word	0x2000008c

0801cab4 <lv_timer_handler_resume>:

/**
 * Call the ready lv_timer
 */
static void lv_timer_handler_resume(void)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	af00      	add	r7, sp, #0
    /*If there is a timer which is ready to run then resume the timer loop*/
    state.timer_time_until_next = 0;
 801cab8:	4b09      	ldr	r3, [pc, #36]	@ (801cae0 <lv_timer_handler_resume+0x2c>)
 801caba:	2200      	movs	r2, #0
 801cabc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(state.resume_cb) {
 801cac0:	4b07      	ldr	r3, [pc, #28]	@ (801cae0 <lv_timer_handler_resume+0x2c>)
 801cac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d007      	beq.n	801cada <lv_timer_handler_resume+0x26>
        state.resume_cb(state.resume_data);
 801caca:	4b05      	ldr	r3, [pc, #20]	@ (801cae0 <lv_timer_handler_resume+0x2c>)
 801cacc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cad0:	4a03      	ldr	r2, [pc, #12]	@ (801cae0 <lv_timer_handler_resume+0x2c>)
 801cad2:	f8d2 20ac 	ldr.w	r2, [r2, #172]	@ 0xac
 801cad6:	4610      	mov	r0, r2
 801cad8:	4798      	blx	r3
    }
}
 801cada:	bf00      	nop
 801cadc:	bd80      	pop	{r7, pc}
 801cade:	bf00      	nop
 801cae0:	2000008c 	.word	0x2000008c

0801cae4 <_lv_utils_bsearch>:
 *   GLOBAL FUNCTIONS
 **********************/

void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b086      	sub	sp, #24
 801cae8:	af00      	add	r7, sp, #0
 801caea:	60f8      	str	r0, [r7, #12]
 801caec:	60b9      	str	r1, [r7, #8]
 801caee:	607a      	str	r2, [r7, #4]
 801caf0:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 801caf2:	68bb      	ldr	r3, [r7, #8]
 801caf4:	617b      	str	r3, [r7, #20]
 801caf6:	e02d      	b.n	801cb54 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	085b      	lsrs	r3, r3, #1
 801cafc:	683a      	ldr	r2, [r7, #0]
 801cafe:	fb02 f303 	mul.w	r3, r2, r3
 801cb02:	697a      	ldr	r2, [r7, #20]
 801cb04:	4413      	add	r3, r2
 801cb06:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 801cb08:	6a3b      	ldr	r3, [r7, #32]
 801cb0a:	6979      	ldr	r1, [r7, #20]
 801cb0c:	68f8      	ldr	r0, [r7, #12]
 801cb0e:	4798      	blx	r3
 801cb10:	6138      	str	r0, [r7, #16]
 801cb12:	693b      	ldr	r3, [r7, #16]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	dd12      	ble.n	801cb3e <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	085b      	lsrs	r3, r3, #1
 801cb1c:	687a      	ldr	r2, [r7, #4]
 801cb1e:	f002 0201 	and.w	r2, r2, #1
 801cb22:	2a00      	cmp	r2, #0
 801cb24:	bf0c      	ite	eq
 801cb26:	2201      	moveq	r2, #1
 801cb28:	2200      	movne	r2, #0
 801cb2a:	b2d2      	uxtb	r2, r2
 801cb2c:	1a9b      	subs	r3, r3, r2
 801cb2e:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 801cb30:	697a      	ldr	r2, [r7, #20]
 801cb32:	683b      	ldr	r3, [r7, #0]
 801cb34:	4413      	add	r3, r2
 801cb36:	617b      	str	r3, [r7, #20]
 801cb38:	697b      	ldr	r3, [r7, #20]
 801cb3a:	60bb      	str	r3, [r7, #8]
 801cb3c:	e00a      	b.n	801cb54 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 801cb3e:	693b      	ldr	r3, [r7, #16]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	da05      	bge.n	801cb50 <_lv_utils_bsearch+0x6c>
            n /= 2;
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	085b      	lsrs	r3, r3, #1
 801cb48:	607b      	str	r3, [r7, #4]
            middle = base;
 801cb4a:	68bb      	ldr	r3, [r7, #8]
 801cb4c:	617b      	str	r3, [r7, #20]
 801cb4e:	e001      	b.n	801cb54 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 801cb50:	697b      	ldr	r3, [r7, #20]
 801cb52:	e003      	b.n	801cb5c <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d1ce      	bne.n	801caf8 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 801cb5a:	2300      	movs	r3, #0
}
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	3718      	adds	r7, #24
 801cb60:	46bd      	mov	sp, r7
 801cb62:	bd80      	pop	{r7, pc}

0801cb64 <lv_mutex_init>:
    LV_ASSERT(0);
    return LV_RESULT_INVALID;
}

lv_result_t lv_mutex_init(lv_mutex_t * mutex)
{
 801cb64:	b480      	push	{r7}
 801cb66:	b083      	sub	sp, #12
 801cb68:	af00      	add	r7, sp, #0
 801cb6a:	6078      	str	r0, [r7, #4]
    LV_UNUSED(mutex);
    return LV_RESULT_OK;
 801cb6c:	2301      	movs	r3, #1
}
 801cb6e:	4618      	mov	r0, r3
 801cb70:	370c      	adds	r7, #12
 801cb72:	46bd      	mov	sp, r7
 801cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb78:	4770      	bx	lr

0801cb7a <lv_mutex_lock>:

lv_result_t lv_mutex_lock(lv_mutex_t * mutex)
{
 801cb7a:	b480      	push	{r7}
 801cb7c:	b083      	sub	sp, #12
 801cb7e:	af00      	add	r7, sp, #0
 801cb80:	6078      	str	r0, [r7, #4]
    LV_UNUSED(mutex);
    return LV_RESULT_OK;
 801cb82:	2301      	movs	r3, #1
}
 801cb84:	4618      	mov	r0, r3
 801cb86:	370c      	adds	r7, #12
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8e:	4770      	bx	lr

0801cb90 <lv_mutex_unlock>:
    LV_UNUSED(mutex);
    return LV_RESULT_OK;
}

lv_result_t lv_mutex_unlock(lv_mutex_t * mutex)
{
 801cb90:	b480      	push	{r7}
 801cb92:	b083      	sub	sp, #12
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
    LV_UNUSED(mutex);
    return LV_RESULT_OK;
 801cb98:	2301      	movs	r3, #1
}
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	370c      	adds	r7, #12
 801cb9e:	46bd      	mov	sp, r7
 801cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba4:	4770      	bx	lr
	...

0801cba8 <lv_mem_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_mem_init(void)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b082      	sub	sp, #8
 801cbac:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    state.tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    state.tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 801cbae:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801cbb2:	4810      	ldr	r0, [pc, #64]	@ (801cbf4 <lv_mem_init+0x4c>)
 801cbb4:	f001 f965 	bl	801de82 <lv_tlsf_create_with_pool>
 801cbb8:	4603      	mov	r3, r0
 801cbba:	4a0f      	ldr	r2, [pc, #60]	@ (801cbf8 <lv_mem_init+0x50>)
 801cbbc:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
#endif
#else
    state.tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_ADR, LV_MEM_SIZE);
#endif

    _lv_ll_init(&state.pool_ll, sizeof(lv_pool_t));
 801cbc0:	2104      	movs	r1, #4
 801cbc2:	480e      	ldr	r0, [pc, #56]	@ (801cbfc <lv_mem_init+0x54>)
 801cbc4:	f7ff f881 	bl	801bcca <_lv_ll_init>

    /*Record the first pool*/
    lv_pool_t * pool_p = _lv_ll_ins_tail(&state.pool_ll);
 801cbc8:	480c      	ldr	r0, [pc, #48]	@ (801cbfc <lv_mem_init+0x54>)
 801cbca:	f7ff f8cb 	bl	801bd64 <_lv_ll_ins_tail>
 801cbce:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(pool_p);
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d101      	bne.n	801cbda <lv_mem_init+0x32>
 801cbd6:	bf00      	nop
 801cbd8:	e7fd      	b.n	801cbd6 <lv_mem_init+0x2e>
    *pool_p = lv_tlsf_get_pool(state.tlsf);
 801cbda:	4b07      	ldr	r3, [pc, #28]	@ (801cbf8 <lv_mem_init+0x50>)
 801cbdc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	f001 f96b 	bl	801debc <lv_tlsf_get_pool>
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	601a      	str	r2, [r3, #0]

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 801cbec:	bf00      	nop
 801cbee:	3708      	adds	r7, #8
 801cbf0:	46bd      	mov	sp, r7
 801cbf2:	bd80      	pop	{r7, pc}
 801cbf4:	2000023c 	.word	0x2000023c
 801cbf8:	2000008c 	.word	0x2000008c
 801cbfc:	2000021c 	.word	0x2000021c

0801cc00 <lv_malloc_core>:
    }
    LV_LOG_WARN("invalid pool: %p", pool);
}

void * lv_malloc_core(size_t size)
{
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b084      	sub	sp, #16
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	6078      	str	r0, [r7, #4]
#if LV_USE_OS
    lv_mutex_lock(&state.mutex);
#endif
    void * p = lv_tlsf_malloc(state.tlsf, size);
 801cc08:	4b13      	ldr	r3, [pc, #76]	@ (801cc58 <lv_malloc_core+0x58>)
 801cc0a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801cc0e:	6879      	ldr	r1, [r7, #4]
 801cc10:	4618      	mov	r0, r3
 801cc12:	f001 f960 	bl	801ded6 <lv_tlsf_malloc>
 801cc16:	60f8      	str	r0, [r7, #12]

    if(p) {
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d016      	beq.n	801cc4c <lv_malloc_core+0x4c>
        state.cur_used += lv_tlsf_block_size(p);
 801cc1e:	68f8      	ldr	r0, [r7, #12]
 801cc20:	f001 f8a9 	bl	801dd76 <lv_tlsf_block_size>
 801cc24:	4602      	mov	r2, r0
 801cc26:	4b0c      	ldr	r3, [pc, #48]	@ (801cc58 <lv_malloc_core+0x58>)
 801cc28:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801cc2c:	4413      	add	r3, r2
 801cc2e:	4a0a      	ldr	r2, [pc, #40]	@ (801cc58 <lv_malloc_core+0x58>)
 801cc30:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
        state.max_used = LV_MAX(state.cur_used, state.max_used);
 801cc34:	4b08      	ldr	r3, [pc, #32]	@ (801cc58 <lv_malloc_core+0x58>)
 801cc36:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 801cc3a:	4b07      	ldr	r3, [pc, #28]	@ (801cc58 <lv_malloc_core+0x58>)
 801cc3c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801cc40:	4293      	cmp	r3, r2
 801cc42:	bf38      	it	cc
 801cc44:	4613      	movcc	r3, r2
 801cc46:	4a04      	ldr	r2, [pc, #16]	@ (801cc58 <lv_malloc_core+0x58>)
 801cc48:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    }

#if LV_USE_OS
    lv_mutex_unlock(&state.mutex);
#endif
    return p;
 801cc4c:	68fb      	ldr	r3, [r7, #12]
}
 801cc4e:	4618      	mov	r0, r3
 801cc50:	3710      	adds	r7, #16
 801cc52:	46bd      	mov	sp, r7
 801cc54:	bd80      	pop	{r7, pc}
 801cc56:	bf00      	nop
 801cc58:	2000008c 	.word	0x2000008c

0801cc5c <lv_realloc_core>:

void * lv_realloc_core(void * p, size_t new_size)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b084      	sub	sp, #16
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]
 801cc64:	6039      	str	r1, [r7, #0]
#if LV_USE_OS
    lv_mutex_lock(&state.mutex);
#endif

    size_t old_size = lv_tlsf_block_size(p);
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f001 f885 	bl	801dd76 <lv_tlsf_block_size>
 801cc6c:	60f8      	str	r0, [r7, #12]
    void * p_new = lv_tlsf_realloc(state.tlsf, p, new_size);
 801cc6e:	4b18      	ldr	r3, [pc, #96]	@ (801ccd0 <lv_realloc_core+0x74>)
 801cc70:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801cc74:	683a      	ldr	r2, [r7, #0]
 801cc76:	6879      	ldr	r1, [r7, #4]
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f001 f978 	bl	801df6e <lv_tlsf_realloc>
 801cc7e:	60b8      	str	r0, [r7, #8]

    if(p_new) {
 801cc80:	68bb      	ldr	r3, [r7, #8]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d01e      	beq.n	801ccc4 <lv_realloc_core+0x68>
        state.cur_used -= old_size;
 801cc86:	4b12      	ldr	r3, [pc, #72]	@ (801ccd0 <lv_realloc_core+0x74>)
 801cc88:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	1ad3      	subs	r3, r2, r3
 801cc90:	4a0f      	ldr	r2, [pc, #60]	@ (801ccd0 <lv_realloc_core+0x74>)
 801cc92:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
        state.cur_used += lv_tlsf_block_size(p_new);
 801cc96:	68b8      	ldr	r0, [r7, #8]
 801cc98:	f001 f86d 	bl	801dd76 <lv_tlsf_block_size>
 801cc9c:	4602      	mov	r2, r0
 801cc9e:	4b0c      	ldr	r3, [pc, #48]	@ (801ccd0 <lv_realloc_core+0x74>)
 801cca0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801cca4:	4413      	add	r3, r2
 801cca6:	4a0a      	ldr	r2, [pc, #40]	@ (801ccd0 <lv_realloc_core+0x74>)
 801cca8:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
        state.max_used = LV_MAX(state.cur_used, state.max_used);
 801ccac:	4b08      	ldr	r3, [pc, #32]	@ (801ccd0 <lv_realloc_core+0x74>)
 801ccae:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 801ccb2:	4b07      	ldr	r3, [pc, #28]	@ (801ccd0 <lv_realloc_core+0x74>)
 801ccb4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801ccb8:	4293      	cmp	r3, r2
 801ccba:	bf38      	it	cc
 801ccbc:	4613      	movcc	r3, r2
 801ccbe:	4a04      	ldr	r2, [pc, #16]	@ (801ccd0 <lv_realloc_core+0x74>)
 801ccc0:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    }
#if LV_USE_OS
    lv_mutex_unlock(&state.mutex);
#endif

    return p_new;
 801ccc4:	68bb      	ldr	r3, [r7, #8]
}
 801ccc6:	4618      	mov	r0, r3
 801ccc8:	3710      	adds	r7, #16
 801ccca:	46bd      	mov	sp, r7
 801cccc:	bd80      	pop	{r7, pc}
 801ccce:	bf00      	nop
 801ccd0:	2000008c 	.word	0x2000008c

0801ccd4 <lv_free_core>:

void lv_free_core(void * p)
{
 801ccd4:	b580      	push	{r7, lr}
 801ccd6:	b084      	sub	sp, #16
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	6078      	str	r0, [r7, #4]
#endif

#if LV_MEM_ADD_JUNK
    lv_memset(p, 0xbb, lv_tlsf_block_size(data));
#endif
    size_t size = lv_tlsf_block_size(p);
 801ccdc:	6878      	ldr	r0, [r7, #4]
 801ccde:	f001 f84a 	bl	801dd76 <lv_tlsf_block_size>
 801cce2:	60f8      	str	r0, [r7, #12]
    lv_tlsf_free(state.tlsf, p);
 801cce4:	4b0e      	ldr	r3, [pc, #56]	@ (801cd20 <lv_free_core+0x4c>)
 801cce6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801ccea:	6879      	ldr	r1, [r7, #4]
 801ccec:	4618      	mov	r0, r3
 801ccee:	f001 f90d 	bl	801df0c <lv_tlsf_free>
    if(state.cur_used > size) state.cur_used -= size;
 801ccf2:	4b0b      	ldr	r3, [pc, #44]	@ (801cd20 <lv_free_core+0x4c>)
 801ccf4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801ccf8:	68fa      	ldr	r2, [r7, #12]
 801ccfa:	429a      	cmp	r2, r3
 801ccfc:	d208      	bcs.n	801cd10 <lv_free_core+0x3c>
 801ccfe:	4b08      	ldr	r3, [pc, #32]	@ (801cd20 <lv_free_core+0x4c>)
 801cd00:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 801cd04:	68fb      	ldr	r3, [r7, #12]
 801cd06:	1ad3      	subs	r3, r2, r3
 801cd08:	4a05      	ldr	r2, [pc, #20]	@ (801cd20 <lv_free_core+0x4c>)
 801cd0a:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
    else state.cur_used = 0;

#if LV_USE_OS
    lv_mutex_unlock(&state.mutex);
#endif
}
 801cd0e:	e003      	b.n	801cd18 <lv_free_core+0x44>
    else state.cur_used = 0;
 801cd10:	4b03      	ldr	r3, [pc, #12]	@ (801cd20 <lv_free_core+0x4c>)
 801cd12:	2200      	movs	r2, #0
 801cd14:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
}
 801cd18:	bf00      	nop
 801cd1a:	3710      	adds	r7, #16
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	2000008c 	.word	0x2000008c

0801cd24 <lv_memcpy>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void * LV_ATTRIBUTE_FAST_MEM lv_memcpy(void * dst, const void * src, size_t len)
{
 801cd24:	b480      	push	{r7}
 801cd26:	b08b      	sub	sp, #44	@ 0x2c
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	60f8      	str	r0, [r7, #12]
 801cd2c:	60b9      	str	r1, [r7, #8]
 801cd2e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 801cd30:	68fb      	ldr	r3, [r7, #12]
 801cd32:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint8_t * s8 = src;
 801cd34:	68bb      	ldr	r3, [r7, #8]
 801cd36:	623b      	str	r3, [r7, #32]

    /*Simplify for small memories*/
    if(len < 16) {
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	2b0f      	cmp	r3, #15
 801cd3c:	d812      	bhi.n	801cd64 <lv_memcpy+0x40>
        while(len) {
 801cd3e:	e00c      	b.n	801cd5a <lv_memcpy+0x36>
            *d8 = *s8;
 801cd40:	6a3b      	ldr	r3, [r7, #32]
 801cd42:	781a      	ldrb	r2, [r3, #0]
 801cd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd46:	701a      	strb	r2, [r3, #0]
            d8++;
 801cd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd4a:	3301      	adds	r3, #1
 801cd4c:	627b      	str	r3, [r7, #36]	@ 0x24
            s8++;
 801cd4e:	6a3b      	ldr	r3, [r7, #32]
 801cd50:	3301      	adds	r3, #1
 801cd52:	623b      	str	r3, [r7, #32]
            len--;
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	3b01      	subs	r3, #1
 801cd58:	607b      	str	r3, [r7, #4]
        while(len) {
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d1ef      	bne.n	801cd40 <lv_memcpy+0x1c>
        }
        return dst;
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	e1f6      	b.n	801d152 <lv_memcpy+0x42e>
    }

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801cd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd66:	f003 0303 	and.w	r3, r3, #3
 801cd6a:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 801cd6c:	6a3b      	ldr	r3, [r7, #32]
 801cd6e:	f003 0303 	and.w	r3, r3, #3
 801cd72:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 801cd74:	693a      	ldr	r2, [r7, #16]
 801cd76:	69fb      	ldr	r3, [r7, #28]
 801cd78:	429a      	cmp	r2, r3
 801cd7a:	f000 815b 	beq.w	801d034 <lv_memcpy+0x310>
        while(len > 32) {
 801cd7e:	e142      	b.n	801d006 <lv_memcpy+0x2e2>
            _REPEAT8(_COPY(d8, s8));
 801cd80:	6a3b      	ldr	r3, [r7, #32]
 801cd82:	781a      	ldrb	r2, [r3, #0]
 801cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd86:	701a      	strb	r2, [r3, #0]
 801cd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd8a:	3301      	adds	r3, #1
 801cd8c:	627b      	str	r3, [r7, #36]	@ 0x24
 801cd8e:	6a3b      	ldr	r3, [r7, #32]
 801cd90:	3301      	adds	r3, #1
 801cd92:	623b      	str	r3, [r7, #32]
 801cd94:	6a3b      	ldr	r3, [r7, #32]
 801cd96:	781a      	ldrb	r2, [r3, #0]
 801cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd9a:	701a      	strb	r2, [r3, #0]
 801cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd9e:	3301      	adds	r3, #1
 801cda0:	627b      	str	r3, [r7, #36]	@ 0x24
 801cda2:	6a3b      	ldr	r3, [r7, #32]
 801cda4:	3301      	adds	r3, #1
 801cda6:	623b      	str	r3, [r7, #32]
 801cda8:	6a3b      	ldr	r3, [r7, #32]
 801cdaa:	781a      	ldrb	r2, [r3, #0]
 801cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdae:	701a      	strb	r2, [r3, #0]
 801cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdb2:	3301      	adds	r3, #1
 801cdb4:	627b      	str	r3, [r7, #36]	@ 0x24
 801cdb6:	6a3b      	ldr	r3, [r7, #32]
 801cdb8:	3301      	adds	r3, #1
 801cdba:	623b      	str	r3, [r7, #32]
 801cdbc:	6a3b      	ldr	r3, [r7, #32]
 801cdbe:	781a      	ldrb	r2, [r3, #0]
 801cdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdc2:	701a      	strb	r2, [r3, #0]
 801cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdc6:	3301      	adds	r3, #1
 801cdc8:	627b      	str	r3, [r7, #36]	@ 0x24
 801cdca:	6a3b      	ldr	r3, [r7, #32]
 801cdcc:	3301      	adds	r3, #1
 801cdce:	623b      	str	r3, [r7, #32]
 801cdd0:	6a3b      	ldr	r3, [r7, #32]
 801cdd2:	781a      	ldrb	r2, [r3, #0]
 801cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdd6:	701a      	strb	r2, [r3, #0]
 801cdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdda:	3301      	adds	r3, #1
 801cddc:	627b      	str	r3, [r7, #36]	@ 0x24
 801cdde:	6a3b      	ldr	r3, [r7, #32]
 801cde0:	3301      	adds	r3, #1
 801cde2:	623b      	str	r3, [r7, #32]
 801cde4:	6a3b      	ldr	r3, [r7, #32]
 801cde6:	781a      	ldrb	r2, [r3, #0]
 801cde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdea:	701a      	strb	r2, [r3, #0]
 801cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdee:	3301      	adds	r3, #1
 801cdf0:	627b      	str	r3, [r7, #36]	@ 0x24
 801cdf2:	6a3b      	ldr	r3, [r7, #32]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	623b      	str	r3, [r7, #32]
 801cdf8:	6a3b      	ldr	r3, [r7, #32]
 801cdfa:	781a      	ldrb	r2, [r3, #0]
 801cdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdfe:	701a      	strb	r2, [r3, #0]
 801ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce02:	3301      	adds	r3, #1
 801ce04:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce06:	6a3b      	ldr	r3, [r7, #32]
 801ce08:	3301      	adds	r3, #1
 801ce0a:	623b      	str	r3, [r7, #32]
 801ce0c:	6a3b      	ldr	r3, [r7, #32]
 801ce0e:	781a      	ldrb	r2, [r3, #0]
 801ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce12:	701a      	strb	r2, [r3, #0]
 801ce14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce16:	3301      	adds	r3, #1
 801ce18:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce1a:	6a3b      	ldr	r3, [r7, #32]
 801ce1c:	3301      	adds	r3, #1
 801ce1e:	623b      	str	r3, [r7, #32]
            _REPEAT8(_COPY(d8, s8));
 801ce20:	6a3b      	ldr	r3, [r7, #32]
 801ce22:	781a      	ldrb	r2, [r3, #0]
 801ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce26:	701a      	strb	r2, [r3, #0]
 801ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce2a:	3301      	adds	r3, #1
 801ce2c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce2e:	6a3b      	ldr	r3, [r7, #32]
 801ce30:	3301      	adds	r3, #1
 801ce32:	623b      	str	r3, [r7, #32]
 801ce34:	6a3b      	ldr	r3, [r7, #32]
 801ce36:	781a      	ldrb	r2, [r3, #0]
 801ce38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce3a:	701a      	strb	r2, [r3, #0]
 801ce3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce3e:	3301      	adds	r3, #1
 801ce40:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce42:	6a3b      	ldr	r3, [r7, #32]
 801ce44:	3301      	adds	r3, #1
 801ce46:	623b      	str	r3, [r7, #32]
 801ce48:	6a3b      	ldr	r3, [r7, #32]
 801ce4a:	781a      	ldrb	r2, [r3, #0]
 801ce4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce4e:	701a      	strb	r2, [r3, #0]
 801ce50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce52:	3301      	adds	r3, #1
 801ce54:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce56:	6a3b      	ldr	r3, [r7, #32]
 801ce58:	3301      	adds	r3, #1
 801ce5a:	623b      	str	r3, [r7, #32]
 801ce5c:	6a3b      	ldr	r3, [r7, #32]
 801ce5e:	781a      	ldrb	r2, [r3, #0]
 801ce60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce62:	701a      	strb	r2, [r3, #0]
 801ce64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce66:	3301      	adds	r3, #1
 801ce68:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce6a:	6a3b      	ldr	r3, [r7, #32]
 801ce6c:	3301      	adds	r3, #1
 801ce6e:	623b      	str	r3, [r7, #32]
 801ce70:	6a3b      	ldr	r3, [r7, #32]
 801ce72:	781a      	ldrb	r2, [r3, #0]
 801ce74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce76:	701a      	strb	r2, [r3, #0]
 801ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce7a:	3301      	adds	r3, #1
 801ce7c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce7e:	6a3b      	ldr	r3, [r7, #32]
 801ce80:	3301      	adds	r3, #1
 801ce82:	623b      	str	r3, [r7, #32]
 801ce84:	6a3b      	ldr	r3, [r7, #32]
 801ce86:	781a      	ldrb	r2, [r3, #0]
 801ce88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce8a:	701a      	strb	r2, [r3, #0]
 801ce8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce8e:	3301      	adds	r3, #1
 801ce90:	627b      	str	r3, [r7, #36]	@ 0x24
 801ce92:	6a3b      	ldr	r3, [r7, #32]
 801ce94:	3301      	adds	r3, #1
 801ce96:	623b      	str	r3, [r7, #32]
 801ce98:	6a3b      	ldr	r3, [r7, #32]
 801ce9a:	781a      	ldrb	r2, [r3, #0]
 801ce9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce9e:	701a      	strb	r2, [r3, #0]
 801cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cea2:	3301      	adds	r3, #1
 801cea4:	627b      	str	r3, [r7, #36]	@ 0x24
 801cea6:	6a3b      	ldr	r3, [r7, #32]
 801cea8:	3301      	adds	r3, #1
 801ceaa:	623b      	str	r3, [r7, #32]
 801ceac:	6a3b      	ldr	r3, [r7, #32]
 801ceae:	781a      	ldrb	r2, [r3, #0]
 801ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceb2:	701a      	strb	r2, [r3, #0]
 801ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceb6:	3301      	adds	r3, #1
 801ceb8:	627b      	str	r3, [r7, #36]	@ 0x24
 801ceba:	6a3b      	ldr	r3, [r7, #32]
 801cebc:	3301      	adds	r3, #1
 801cebe:	623b      	str	r3, [r7, #32]
            _REPEAT8(_COPY(d8, s8));
 801cec0:	6a3b      	ldr	r3, [r7, #32]
 801cec2:	781a      	ldrb	r2, [r3, #0]
 801cec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cec6:	701a      	strb	r2, [r3, #0]
 801cec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceca:	3301      	adds	r3, #1
 801cecc:	627b      	str	r3, [r7, #36]	@ 0x24
 801cece:	6a3b      	ldr	r3, [r7, #32]
 801ced0:	3301      	adds	r3, #1
 801ced2:	623b      	str	r3, [r7, #32]
 801ced4:	6a3b      	ldr	r3, [r7, #32]
 801ced6:	781a      	ldrb	r2, [r3, #0]
 801ced8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceda:	701a      	strb	r2, [r3, #0]
 801cedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cede:	3301      	adds	r3, #1
 801cee0:	627b      	str	r3, [r7, #36]	@ 0x24
 801cee2:	6a3b      	ldr	r3, [r7, #32]
 801cee4:	3301      	adds	r3, #1
 801cee6:	623b      	str	r3, [r7, #32]
 801cee8:	6a3b      	ldr	r3, [r7, #32]
 801ceea:	781a      	ldrb	r2, [r3, #0]
 801ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceee:	701a      	strb	r2, [r3, #0]
 801cef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cef2:	3301      	adds	r3, #1
 801cef4:	627b      	str	r3, [r7, #36]	@ 0x24
 801cef6:	6a3b      	ldr	r3, [r7, #32]
 801cef8:	3301      	adds	r3, #1
 801cefa:	623b      	str	r3, [r7, #32]
 801cefc:	6a3b      	ldr	r3, [r7, #32]
 801cefe:	781a      	ldrb	r2, [r3, #0]
 801cf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf02:	701a      	strb	r2, [r3, #0]
 801cf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf06:	3301      	adds	r3, #1
 801cf08:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf0a:	6a3b      	ldr	r3, [r7, #32]
 801cf0c:	3301      	adds	r3, #1
 801cf0e:	623b      	str	r3, [r7, #32]
 801cf10:	6a3b      	ldr	r3, [r7, #32]
 801cf12:	781a      	ldrb	r2, [r3, #0]
 801cf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf16:	701a      	strb	r2, [r3, #0]
 801cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf1a:	3301      	adds	r3, #1
 801cf1c:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf1e:	6a3b      	ldr	r3, [r7, #32]
 801cf20:	3301      	adds	r3, #1
 801cf22:	623b      	str	r3, [r7, #32]
 801cf24:	6a3b      	ldr	r3, [r7, #32]
 801cf26:	781a      	ldrb	r2, [r3, #0]
 801cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf2a:	701a      	strb	r2, [r3, #0]
 801cf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf2e:	3301      	adds	r3, #1
 801cf30:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf32:	6a3b      	ldr	r3, [r7, #32]
 801cf34:	3301      	adds	r3, #1
 801cf36:	623b      	str	r3, [r7, #32]
 801cf38:	6a3b      	ldr	r3, [r7, #32]
 801cf3a:	781a      	ldrb	r2, [r3, #0]
 801cf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf3e:	701a      	strb	r2, [r3, #0]
 801cf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf42:	3301      	adds	r3, #1
 801cf44:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf46:	6a3b      	ldr	r3, [r7, #32]
 801cf48:	3301      	adds	r3, #1
 801cf4a:	623b      	str	r3, [r7, #32]
 801cf4c:	6a3b      	ldr	r3, [r7, #32]
 801cf4e:	781a      	ldrb	r2, [r3, #0]
 801cf50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf52:	701a      	strb	r2, [r3, #0]
 801cf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf56:	3301      	adds	r3, #1
 801cf58:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf5a:	6a3b      	ldr	r3, [r7, #32]
 801cf5c:	3301      	adds	r3, #1
 801cf5e:	623b      	str	r3, [r7, #32]
            _REPEAT8(_COPY(d8, s8));
 801cf60:	6a3b      	ldr	r3, [r7, #32]
 801cf62:	781a      	ldrb	r2, [r3, #0]
 801cf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf66:	701a      	strb	r2, [r3, #0]
 801cf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf6e:	6a3b      	ldr	r3, [r7, #32]
 801cf70:	3301      	adds	r3, #1
 801cf72:	623b      	str	r3, [r7, #32]
 801cf74:	6a3b      	ldr	r3, [r7, #32]
 801cf76:	781a      	ldrb	r2, [r3, #0]
 801cf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf7a:	701a      	strb	r2, [r3, #0]
 801cf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf7e:	3301      	adds	r3, #1
 801cf80:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf82:	6a3b      	ldr	r3, [r7, #32]
 801cf84:	3301      	adds	r3, #1
 801cf86:	623b      	str	r3, [r7, #32]
 801cf88:	6a3b      	ldr	r3, [r7, #32]
 801cf8a:	781a      	ldrb	r2, [r3, #0]
 801cf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf8e:	701a      	strb	r2, [r3, #0]
 801cf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf92:	3301      	adds	r3, #1
 801cf94:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf96:	6a3b      	ldr	r3, [r7, #32]
 801cf98:	3301      	adds	r3, #1
 801cf9a:	623b      	str	r3, [r7, #32]
 801cf9c:	6a3b      	ldr	r3, [r7, #32]
 801cf9e:	781a      	ldrb	r2, [r3, #0]
 801cfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfa2:	701a      	strb	r2, [r3, #0]
 801cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfa6:	3301      	adds	r3, #1
 801cfa8:	627b      	str	r3, [r7, #36]	@ 0x24
 801cfaa:	6a3b      	ldr	r3, [r7, #32]
 801cfac:	3301      	adds	r3, #1
 801cfae:	623b      	str	r3, [r7, #32]
 801cfb0:	6a3b      	ldr	r3, [r7, #32]
 801cfb2:	781a      	ldrb	r2, [r3, #0]
 801cfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfb6:	701a      	strb	r2, [r3, #0]
 801cfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfba:	3301      	adds	r3, #1
 801cfbc:	627b      	str	r3, [r7, #36]	@ 0x24
 801cfbe:	6a3b      	ldr	r3, [r7, #32]
 801cfc0:	3301      	adds	r3, #1
 801cfc2:	623b      	str	r3, [r7, #32]
 801cfc4:	6a3b      	ldr	r3, [r7, #32]
 801cfc6:	781a      	ldrb	r2, [r3, #0]
 801cfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfca:	701a      	strb	r2, [r3, #0]
 801cfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfce:	3301      	adds	r3, #1
 801cfd0:	627b      	str	r3, [r7, #36]	@ 0x24
 801cfd2:	6a3b      	ldr	r3, [r7, #32]
 801cfd4:	3301      	adds	r3, #1
 801cfd6:	623b      	str	r3, [r7, #32]
 801cfd8:	6a3b      	ldr	r3, [r7, #32]
 801cfda:	781a      	ldrb	r2, [r3, #0]
 801cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfde:	701a      	strb	r2, [r3, #0]
 801cfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfe2:	3301      	adds	r3, #1
 801cfe4:	627b      	str	r3, [r7, #36]	@ 0x24
 801cfe6:	6a3b      	ldr	r3, [r7, #32]
 801cfe8:	3301      	adds	r3, #1
 801cfea:	623b      	str	r3, [r7, #32]
 801cfec:	6a3b      	ldr	r3, [r7, #32]
 801cfee:	781a      	ldrb	r2, [r3, #0]
 801cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cff2:	701a      	strb	r2, [r3, #0]
 801cff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cff6:	3301      	adds	r3, #1
 801cff8:	627b      	str	r3, [r7, #36]	@ 0x24
 801cffa:	6a3b      	ldr	r3, [r7, #32]
 801cffc:	3301      	adds	r3, #1
 801cffe:	623b      	str	r3, [r7, #32]
            len -= 32;
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	3b20      	subs	r3, #32
 801d004:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	2b20      	cmp	r3, #32
 801d00a:	f63f aeb9 	bhi.w	801cd80 <lv_memcpy+0x5c>
        }
        while(len) {
 801d00e:	e00c      	b.n	801d02a <lv_memcpy+0x306>
            _COPY(d8, s8)
 801d010:	6a3b      	ldr	r3, [r7, #32]
 801d012:	781a      	ldrb	r2, [r3, #0]
 801d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d016:	701a      	strb	r2, [r3, #0]
 801d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d01a:	3301      	adds	r3, #1
 801d01c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d01e:	6a3b      	ldr	r3, [r7, #32]
 801d020:	3301      	adds	r3, #1
 801d022:	623b      	str	r3, [r7, #32]
            len--;
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	3b01      	subs	r3, #1
 801d028:	607b      	str	r3, [r7, #4]
        while(len) {
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d1ef      	bne.n	801d010 <lv_memcpy+0x2ec>
        }
        return dst;
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	e08e      	b.n	801d152 <lv_memcpy+0x42e>
    }

    /*Make the memories aligned*/
    if(d_align) {
 801d034:	69fb      	ldr	r3, [r7, #28]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d01a      	beq.n	801d070 <lv_memcpy+0x34c>
        d_align = ALIGN_MASK + 1 - d_align;
 801d03a:	69fb      	ldr	r3, [r7, #28]
 801d03c:	f1c3 0304 	rsb	r3, r3, #4
 801d040:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 801d042:	e00f      	b.n	801d064 <lv_memcpy+0x340>
            _COPY(d8, s8);
 801d044:	6a3b      	ldr	r3, [r7, #32]
 801d046:	781a      	ldrb	r2, [r3, #0]
 801d048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d04a:	701a      	strb	r2, [r3, #0]
 801d04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d04e:	3301      	adds	r3, #1
 801d050:	627b      	str	r3, [r7, #36]	@ 0x24
 801d052:	6a3b      	ldr	r3, [r7, #32]
 801d054:	3301      	adds	r3, #1
 801d056:	623b      	str	r3, [r7, #32]
            d_align--;
 801d058:	69fb      	ldr	r3, [r7, #28]
 801d05a:	3b01      	subs	r3, #1
 801d05c:	61fb      	str	r3, [r7, #28]
            len--;
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	3b01      	subs	r3, #1
 801d062:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 801d064:	69fb      	ldr	r3, [r7, #28]
 801d066:	2b00      	cmp	r3, #0
 801d068:	d002      	beq.n	801d070 <lv_memcpy+0x34c>
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d1e9      	bne.n	801d044 <lv_memcpy+0x320>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 801d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d072:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 801d074:	6a3b      	ldr	r3, [r7, #32]
 801d076:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 801d078:	e052      	b.n	801d120 <lv_memcpy+0x3fc>
        _REPEAT8(_COPY(d32, s32))
 801d07a:	697b      	ldr	r3, [r7, #20]
 801d07c:	681a      	ldr	r2, [r3, #0]
 801d07e:	69bb      	ldr	r3, [r7, #24]
 801d080:	601a      	str	r2, [r3, #0]
 801d082:	69bb      	ldr	r3, [r7, #24]
 801d084:	3304      	adds	r3, #4
 801d086:	61bb      	str	r3, [r7, #24]
 801d088:	697b      	ldr	r3, [r7, #20]
 801d08a:	3304      	adds	r3, #4
 801d08c:	617b      	str	r3, [r7, #20]
 801d08e:	697b      	ldr	r3, [r7, #20]
 801d090:	681a      	ldr	r2, [r3, #0]
 801d092:	69bb      	ldr	r3, [r7, #24]
 801d094:	601a      	str	r2, [r3, #0]
 801d096:	69bb      	ldr	r3, [r7, #24]
 801d098:	3304      	adds	r3, #4
 801d09a:	61bb      	str	r3, [r7, #24]
 801d09c:	697b      	ldr	r3, [r7, #20]
 801d09e:	3304      	adds	r3, #4
 801d0a0:	617b      	str	r3, [r7, #20]
 801d0a2:	697b      	ldr	r3, [r7, #20]
 801d0a4:	681a      	ldr	r2, [r3, #0]
 801d0a6:	69bb      	ldr	r3, [r7, #24]
 801d0a8:	601a      	str	r2, [r3, #0]
 801d0aa:	69bb      	ldr	r3, [r7, #24]
 801d0ac:	3304      	adds	r3, #4
 801d0ae:	61bb      	str	r3, [r7, #24]
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	3304      	adds	r3, #4
 801d0b4:	617b      	str	r3, [r7, #20]
 801d0b6:	697b      	ldr	r3, [r7, #20]
 801d0b8:	681a      	ldr	r2, [r3, #0]
 801d0ba:	69bb      	ldr	r3, [r7, #24]
 801d0bc:	601a      	str	r2, [r3, #0]
 801d0be:	69bb      	ldr	r3, [r7, #24]
 801d0c0:	3304      	adds	r3, #4
 801d0c2:	61bb      	str	r3, [r7, #24]
 801d0c4:	697b      	ldr	r3, [r7, #20]
 801d0c6:	3304      	adds	r3, #4
 801d0c8:	617b      	str	r3, [r7, #20]
 801d0ca:	697b      	ldr	r3, [r7, #20]
 801d0cc:	681a      	ldr	r2, [r3, #0]
 801d0ce:	69bb      	ldr	r3, [r7, #24]
 801d0d0:	601a      	str	r2, [r3, #0]
 801d0d2:	69bb      	ldr	r3, [r7, #24]
 801d0d4:	3304      	adds	r3, #4
 801d0d6:	61bb      	str	r3, [r7, #24]
 801d0d8:	697b      	ldr	r3, [r7, #20]
 801d0da:	3304      	adds	r3, #4
 801d0dc:	617b      	str	r3, [r7, #20]
 801d0de:	697b      	ldr	r3, [r7, #20]
 801d0e0:	681a      	ldr	r2, [r3, #0]
 801d0e2:	69bb      	ldr	r3, [r7, #24]
 801d0e4:	601a      	str	r2, [r3, #0]
 801d0e6:	69bb      	ldr	r3, [r7, #24]
 801d0e8:	3304      	adds	r3, #4
 801d0ea:	61bb      	str	r3, [r7, #24]
 801d0ec:	697b      	ldr	r3, [r7, #20]
 801d0ee:	3304      	adds	r3, #4
 801d0f0:	617b      	str	r3, [r7, #20]
 801d0f2:	697b      	ldr	r3, [r7, #20]
 801d0f4:	681a      	ldr	r2, [r3, #0]
 801d0f6:	69bb      	ldr	r3, [r7, #24]
 801d0f8:	601a      	str	r2, [r3, #0]
 801d0fa:	69bb      	ldr	r3, [r7, #24]
 801d0fc:	3304      	adds	r3, #4
 801d0fe:	61bb      	str	r3, [r7, #24]
 801d100:	697b      	ldr	r3, [r7, #20]
 801d102:	3304      	adds	r3, #4
 801d104:	617b      	str	r3, [r7, #20]
 801d106:	697b      	ldr	r3, [r7, #20]
 801d108:	681a      	ldr	r2, [r3, #0]
 801d10a:	69bb      	ldr	r3, [r7, #24]
 801d10c:	601a      	str	r2, [r3, #0]
 801d10e:	69bb      	ldr	r3, [r7, #24]
 801d110:	3304      	adds	r3, #4
 801d112:	61bb      	str	r3, [r7, #24]
 801d114:	697b      	ldr	r3, [r7, #20]
 801d116:	3304      	adds	r3, #4
 801d118:	617b      	str	r3, [r7, #20]
        len -= 32;
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	3b20      	subs	r3, #32
 801d11e:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	2b20      	cmp	r3, #32
 801d124:	d8a9      	bhi.n	801d07a <lv_memcpy+0x356>
    }

    d8 = (uint8_t *)d32;
 801d126:	69bb      	ldr	r3, [r7, #24]
 801d128:	627b      	str	r3, [r7, #36]	@ 0x24
    s8 = (const uint8_t *)s32;
 801d12a:	697b      	ldr	r3, [r7, #20]
 801d12c:	623b      	str	r3, [r7, #32]
    while(len) {
 801d12e:	e00c      	b.n	801d14a <lv_memcpy+0x426>
        _COPY(d8, s8)
 801d130:	6a3b      	ldr	r3, [r7, #32]
 801d132:	781a      	ldrb	r2, [r3, #0]
 801d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d136:	701a      	strb	r2, [r3, #0]
 801d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d13a:	3301      	adds	r3, #1
 801d13c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d13e:	6a3b      	ldr	r3, [r7, #32]
 801d140:	3301      	adds	r3, #1
 801d142:	623b      	str	r3, [r7, #32]
        len--;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	3b01      	subs	r3, #1
 801d148:	607b      	str	r3, [r7, #4]
    while(len) {
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d1ef      	bne.n	801d130 <lv_memcpy+0x40c>
    }

    return dst;
 801d150:	68fb      	ldr	r3, [r7, #12]
}
 801d152:	4618      	mov	r0, r3
 801d154:	372c      	adds	r7, #44	@ 0x2c
 801d156:	46bd      	mov	sp, r7
 801d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d15c:	4770      	bx	lr

0801d15e <lv_memset>:

void LV_ATTRIBUTE_FAST_MEM lv_memset(void * dst, uint8_t v, size_t len)
{
 801d15e:	b480      	push	{r7}
 801d160:	b089      	sub	sp, #36	@ 0x24
 801d162:	af00      	add	r7, sp, #0
 801d164:	60f8      	str	r0, [r7, #12]
 801d166:	460b      	mov	r3, r1
 801d168:	607a      	str	r2, [r7, #4]
 801d16a:	72fb      	strb	r3, [r7, #11]
    uint8_t * d8 = (uint8_t *)dst;
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	61fb      	str	r3, [r7, #28]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801d170:	69fb      	ldr	r3, [r7, #28]
 801d172:	f003 0303 	and.w	r3, r3, #3
 801d176:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 801d178:	69bb      	ldr	r3, [r7, #24]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d016      	beq.n	801d1ac <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 801d17e:	69bb      	ldr	r3, [r7, #24]
 801d180:	f1c3 0304 	rsb	r3, r3, #4
 801d184:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801d186:	e00b      	b.n	801d1a0 <lv_memset+0x42>
            _SET(d8, v);
 801d188:	69fb      	ldr	r3, [r7, #28]
 801d18a:	7afa      	ldrb	r2, [r7, #11]
 801d18c:	701a      	strb	r2, [r3, #0]
 801d18e:	69fb      	ldr	r3, [r7, #28]
 801d190:	3301      	adds	r3, #1
 801d192:	61fb      	str	r3, [r7, #28]
            len--;
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	3b01      	subs	r3, #1
 801d198:	607b      	str	r3, [r7, #4]
            d_align--;
 801d19a:	69bb      	ldr	r3, [r7, #24]
 801d19c:	3b01      	subs	r3, #1
 801d19e:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 801d1a0:	69bb      	ldr	r3, [r7, #24]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d002      	beq.n	801d1ac <lv_memset+0x4e>
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d1ed      	bne.n	801d188 <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 801d1ac:	7afa      	ldrb	r2, [r7, #11]
 801d1ae:	7afb      	ldrb	r3, [r7, #11]
 801d1b0:	021b      	lsls	r3, r3, #8
 801d1b2:	441a      	add	r2, r3
 801d1b4:	7afb      	ldrb	r3, [r7, #11]
 801d1b6:	041b      	lsls	r3, r3, #16
 801d1b8:	441a      	add	r2, r3
 801d1ba:	7afb      	ldrb	r3, [r7, #11]
 801d1bc:	061b      	lsls	r3, r3, #24
 801d1be:	4413      	add	r3, r2
 801d1c0:	613b      	str	r3, [r7, #16]
    uint32_t * d32 = (uint32_t *)d8;
 801d1c2:	69fb      	ldr	r3, [r7, #28]
 801d1c4:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 801d1c6:	e032      	b.n	801d22e <lv_memset+0xd0>
        _REPEAT8(_SET(d32, v32));
 801d1c8:	697b      	ldr	r3, [r7, #20]
 801d1ca:	693a      	ldr	r2, [r7, #16]
 801d1cc:	601a      	str	r2, [r3, #0]
 801d1ce:	697b      	ldr	r3, [r7, #20]
 801d1d0:	3304      	adds	r3, #4
 801d1d2:	617b      	str	r3, [r7, #20]
 801d1d4:	697b      	ldr	r3, [r7, #20]
 801d1d6:	693a      	ldr	r2, [r7, #16]
 801d1d8:	601a      	str	r2, [r3, #0]
 801d1da:	697b      	ldr	r3, [r7, #20]
 801d1dc:	3304      	adds	r3, #4
 801d1de:	617b      	str	r3, [r7, #20]
 801d1e0:	697b      	ldr	r3, [r7, #20]
 801d1e2:	693a      	ldr	r2, [r7, #16]
 801d1e4:	601a      	str	r2, [r3, #0]
 801d1e6:	697b      	ldr	r3, [r7, #20]
 801d1e8:	3304      	adds	r3, #4
 801d1ea:	617b      	str	r3, [r7, #20]
 801d1ec:	697b      	ldr	r3, [r7, #20]
 801d1ee:	693a      	ldr	r2, [r7, #16]
 801d1f0:	601a      	str	r2, [r3, #0]
 801d1f2:	697b      	ldr	r3, [r7, #20]
 801d1f4:	3304      	adds	r3, #4
 801d1f6:	617b      	str	r3, [r7, #20]
 801d1f8:	697b      	ldr	r3, [r7, #20]
 801d1fa:	693a      	ldr	r2, [r7, #16]
 801d1fc:	601a      	str	r2, [r3, #0]
 801d1fe:	697b      	ldr	r3, [r7, #20]
 801d200:	3304      	adds	r3, #4
 801d202:	617b      	str	r3, [r7, #20]
 801d204:	697b      	ldr	r3, [r7, #20]
 801d206:	693a      	ldr	r2, [r7, #16]
 801d208:	601a      	str	r2, [r3, #0]
 801d20a:	697b      	ldr	r3, [r7, #20]
 801d20c:	3304      	adds	r3, #4
 801d20e:	617b      	str	r3, [r7, #20]
 801d210:	697b      	ldr	r3, [r7, #20]
 801d212:	693a      	ldr	r2, [r7, #16]
 801d214:	601a      	str	r2, [r3, #0]
 801d216:	697b      	ldr	r3, [r7, #20]
 801d218:	3304      	adds	r3, #4
 801d21a:	617b      	str	r3, [r7, #20]
 801d21c:	697b      	ldr	r3, [r7, #20]
 801d21e:	693a      	ldr	r2, [r7, #16]
 801d220:	601a      	str	r2, [r3, #0]
 801d222:	697b      	ldr	r3, [r7, #20]
 801d224:	3304      	adds	r3, #4
 801d226:	617b      	str	r3, [r7, #20]
        len -= 32;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	3b20      	subs	r3, #32
 801d22c:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	2b20      	cmp	r3, #32
 801d232:	d8c9      	bhi.n	801d1c8 <lv_memset+0x6a>
    }

    d8 = (uint8_t *)d32;
 801d234:	697b      	ldr	r3, [r7, #20]
 801d236:	61fb      	str	r3, [r7, #28]
    while(len) {
 801d238:	e008      	b.n	801d24c <lv_memset+0xee>
        _SET(d8, v);
 801d23a:	69fb      	ldr	r3, [r7, #28]
 801d23c:	7afa      	ldrb	r2, [r7, #11]
 801d23e:	701a      	strb	r2, [r3, #0]
 801d240:	69fb      	ldr	r3, [r7, #28]
 801d242:	3301      	adds	r3, #1
 801d244:	61fb      	str	r3, [r7, #28]
        len--;
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	3b01      	subs	r3, #1
 801d24a:	607b      	str	r3, [r7, #4]
    while(len) {
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d1f3      	bne.n	801d23a <lv_memset+0xdc>
    }
}
 801d252:	bf00      	nop
 801d254:	bf00      	nop
 801d256:	3724      	adds	r7, #36	@ 0x24
 801d258:	46bd      	mov	sp, r7
 801d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d25e:	4770      	bx	lr

0801d260 <lv_memmove>:

void * LV_ATTRIBUTE_FAST_MEM lv_memmove(void * dst, const void * src, size_t len)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b088      	sub	sp, #32
 801d264:	af00      	add	r7, sp, #0
 801d266:	60f8      	str	r0, [r7, #12]
 801d268:	60b9      	str	r1, [r7, #8]
 801d26a:	607a      	str	r2, [r7, #4]
    if(dst < src || (char *)dst > ((char *)src + len)) {
 801d26c:	68fa      	ldr	r2, [r7, #12]
 801d26e:	68bb      	ldr	r3, [r7, #8]
 801d270:	429a      	cmp	r2, r3
 801d272:	d305      	bcc.n	801d280 <lv_memmove+0x20>
 801d274:	68ba      	ldr	r2, [r7, #8]
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	4413      	add	r3, r2
 801d27a:	68fa      	ldr	r2, [r7, #12]
 801d27c:	429a      	cmp	r2, r3
 801d27e:	d906      	bls.n	801d28e <lv_memmove+0x2e>
        return lv_memcpy(dst, src, len);
 801d280:	687a      	ldr	r2, [r7, #4]
 801d282:	68b9      	ldr	r1, [r7, #8]
 801d284:	68f8      	ldr	r0, [r7, #12]
 801d286:	f7ff fd4d 	bl	801cd24 <lv_memcpy>
 801d28a:	4603      	mov	r3, r0
 801d28c:	e02f      	b.n	801d2ee <lv_memmove+0x8e>
    }

    if(dst > src) {
 801d28e:	68fa      	ldr	r2, [r7, #12]
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	429a      	cmp	r2, r3
 801d294:	d918      	bls.n	801d2c8 <lv_memmove+0x68>
        char * tmp = (char *)dst + len - 1;
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	3b01      	subs	r3, #1
 801d29a:	68fa      	ldr	r2, [r7, #12]
 801d29c:	4413      	add	r3, r2
 801d29e:	61fb      	str	r3, [r7, #28]
        char * s   = (char *)src + len - 1;
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	3b01      	subs	r3, #1
 801d2a4:	68ba      	ldr	r2, [r7, #8]
 801d2a6:	4413      	add	r3, r2
 801d2a8:	61bb      	str	r3, [r7, #24]

        while(len--) {
 801d2aa:	e007      	b.n	801d2bc <lv_memmove+0x5c>
            *tmp-- = *s--;
 801d2ac:	69ba      	ldr	r2, [r7, #24]
 801d2ae:	1e53      	subs	r3, r2, #1
 801d2b0:	61bb      	str	r3, [r7, #24]
 801d2b2:	69fb      	ldr	r3, [r7, #28]
 801d2b4:	1e59      	subs	r1, r3, #1
 801d2b6:	61f9      	str	r1, [r7, #28]
 801d2b8:	7812      	ldrb	r2, [r2, #0]
 801d2ba:	701a      	strb	r2, [r3, #0]
        while(len--) {
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	1e5a      	subs	r2, r3, #1
 801d2c0:	607a      	str	r2, [r7, #4]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d1f2      	bne.n	801d2ac <lv_memmove+0x4c>
 801d2c6:	e011      	b.n	801d2ec <lv_memmove+0x8c>
        }
    }
    else {
        char * tmp = (char *)dst;
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	617b      	str	r3, [r7, #20]
        char * s   = (char *)src;
 801d2cc:	68bb      	ldr	r3, [r7, #8]
 801d2ce:	613b      	str	r3, [r7, #16]

        while(len--) {
 801d2d0:	e007      	b.n	801d2e2 <lv_memmove+0x82>
            *tmp++ = *s++;
 801d2d2:	693a      	ldr	r2, [r7, #16]
 801d2d4:	1c53      	adds	r3, r2, #1
 801d2d6:	613b      	str	r3, [r7, #16]
 801d2d8:	697b      	ldr	r3, [r7, #20]
 801d2da:	1c59      	adds	r1, r3, #1
 801d2dc:	6179      	str	r1, [r7, #20]
 801d2de:	7812      	ldrb	r2, [r2, #0]
 801d2e0:	701a      	strb	r2, [r3, #0]
        while(len--) {
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	1e5a      	subs	r2, r3, #1
 801d2e6:	607a      	str	r2, [r7, #4]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d1f2      	bne.n	801d2d2 <lv_memmove+0x72>
        }
    }

    return dst;
 801d2ec:	68fb      	ldr	r3, [r7, #12]
}
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	3720      	adds	r7, #32
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bd80      	pop	{r7, pc}

0801d2f6 <lv_strlen>:

/* See https://en.cppreference.com/w/c/string/byte/strlen for reference */
size_t lv_strlen(const char * str)
{
 801d2f6:	b480      	push	{r7}
 801d2f8:	b085      	sub	sp, #20
 801d2fa:	af00      	add	r7, sp, #0
 801d2fc:	6078      	str	r0, [r7, #4]
    size_t i = 0;
 801d2fe:	2300      	movs	r3, #0
 801d300:	60fb      	str	r3, [r7, #12]
    while(str[i]) i++;
 801d302:	e002      	b.n	801d30a <lv_strlen+0x14>
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	3301      	adds	r3, #1
 801d308:	60fb      	str	r3, [r7, #12]
 801d30a:	687a      	ldr	r2, [r7, #4]
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	4413      	add	r3, r2
 801d310:	781b      	ldrb	r3, [r3, #0]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d1f6      	bne.n	801d304 <lv_strlen+0xe>

    return i;
 801d316:	68fb      	ldr	r3, [r7, #12]
}
 801d318:	4618      	mov	r0, r3
 801d31a:	3714      	adds	r7, #20
 801d31c:	46bd      	mov	sp, r7
 801d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d322:	4770      	bx	lr

0801d324 <lv_strcmp>:
    while((*dst++ = *src++) != '\0');
    return tmp;
}

int32_t lv_strcmp(const char * s1, const char * s2)
{
 801d324:	b480      	push	{r7}
 801d326:	b083      	sub	sp, #12
 801d328:	af00      	add	r7, sp, #0
 801d32a:	6078      	str	r0, [r7, #4]
 801d32c:	6039      	str	r1, [r7, #0]
    while(*s1 && (*s1 == *s2)) {
 801d32e:	e005      	b.n	801d33c <lv_strcmp+0x18>
        s1++;
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	3301      	adds	r3, #1
 801d334:	607b      	str	r3, [r7, #4]
        s2++;
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	3301      	adds	r3, #1
 801d33a:	603b      	str	r3, [r7, #0]
    while(*s1 && (*s1 == *s2)) {
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	781b      	ldrb	r3, [r3, #0]
 801d340:	2b00      	cmp	r3, #0
 801d342:	d005      	beq.n	801d350 <lv_strcmp+0x2c>
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	781a      	ldrb	r2, [r3, #0]
 801d348:	683b      	ldr	r3, [r7, #0]
 801d34a:	781b      	ldrb	r3, [r3, #0]
 801d34c:	429a      	cmp	r2, r3
 801d34e:	d0ef      	beq.n	801d330 <lv_strcmp+0xc>
    }
    return *(const unsigned char *)s1 - *(const unsigned char *)s2;
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	781b      	ldrb	r3, [r3, #0]
 801d354:	461a      	mov	r2, r3
 801d356:	683b      	ldr	r3, [r7, #0]
 801d358:	781b      	ldrb	r3, [r3, #0]
 801d35a:	1ad3      	subs	r3, r2, r3
}
 801d35c:	4618      	mov	r0, r3
 801d35e:	370c      	adds	r7, #12
 801d360:	46bd      	mov	sp, r7
 801d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d366:	4770      	bx	lr

0801d368 <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 801d368:	b480      	push	{r7}
 801d36a:	b083      	sub	sp, #12
 801d36c:	af00      	add	r7, sp, #0
 801d36e:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	fa93 f2a3 	rbit	r2, r3
 801d376:	fab2 f282 	clz	r2, r2
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d101      	bne.n	801d382 <tlsf_ffs+0x1a>
 801d37e:	f04f 32ff 	mov.w	r2, #4294967295
 801d382:	1c53      	adds	r3, r2, #1
 801d384:	3b01      	subs	r3, #1
}
 801d386:	4618      	mov	r0, r3
 801d388:	370c      	adds	r7, #12
 801d38a:	46bd      	mov	sp, r7
 801d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d390:	4770      	bx	lr

0801d392 <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 801d392:	b480      	push	{r7}
 801d394:	b085      	sub	sp, #20
 801d396:	af00      	add	r7, sp, #0
 801d398:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d005      	beq.n	801d3ac <tlsf_fls+0x1a>
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	fab3 f383 	clz	r3, r3
 801d3a6:	f1c3 0320 	rsb	r3, r3, #32
 801d3aa:	e000      	b.n	801d3ae <tlsf_fls+0x1c>
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	3b01      	subs	r3, #1
}
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	3714      	adds	r7, #20
 801d3b8:	46bd      	mov	sp, r7
 801d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3be:	4770      	bx	lr

0801d3c0 <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 801d3c0:	b480      	push	{r7}
 801d3c2:	b083      	sub	sp, #12
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	685a      	ldr	r2, [r3, #4]
 801d3cc:	2101      	movs	r1, #1
 801d3ce:	2302      	movs	r3, #2
 801d3d0:	430b      	orrs	r3, r1
 801d3d2:	43db      	mvns	r3, r3
 801d3d4:	4013      	ands	r3, r2
}
 801d3d6:	4618      	mov	r0, r3
 801d3d8:	370c      	adds	r7, #12
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e0:	4770      	bx	lr

0801d3e2 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 801d3e2:	b480      	push	{r7}
 801d3e4:	b085      	sub	sp, #20
 801d3e6:	af00      	add	r7, sp, #0
 801d3e8:	6078      	str	r0, [r7, #4]
 801d3ea:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	685b      	ldr	r3, [r3, #4]
 801d3f0:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 801d3f2:	2201      	movs	r2, #1
 801d3f4:	2302      	movs	r3, #2
 801d3f6:	431a      	orrs	r2, r3
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	401a      	ands	r2, r3
 801d3fc:	683b      	ldr	r3, [r7, #0]
 801d3fe:	431a      	orrs	r2, r3
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	605a      	str	r2, [r3, #4]
}
 801d404:	bf00      	nop
 801d406:	3714      	adds	r7, #20
 801d408:	46bd      	mov	sp, r7
 801d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d40e:	4770      	bx	lr

0801d410 <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 801d418:	6878      	ldr	r0, [r7, #4]
 801d41a:	f7ff ffd1 	bl	801d3c0 <block_size>
 801d41e:	4603      	mov	r3, r0
 801d420:	2b00      	cmp	r3, #0
 801d422:	bf0c      	ite	eq
 801d424:	2301      	moveq	r3, #1
 801d426:	2300      	movne	r3, #0
 801d428:	b2db      	uxtb	r3, r3
}
 801d42a:	4618      	mov	r0, r3
 801d42c:	3708      	adds	r7, #8
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}

0801d432 <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 801d432:	b480      	push	{r7}
 801d434:	b083      	sub	sp, #12
 801d436:	af00      	add	r7, sp, #0
 801d438:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	685b      	ldr	r3, [r3, #4]
 801d43e:	2201      	movs	r2, #1
 801d440:	4013      	ands	r3, r2
}
 801d442:	4618      	mov	r0, r3
 801d444:	370c      	adds	r7, #12
 801d446:	46bd      	mov	sp, r7
 801d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d44c:	4770      	bx	lr

0801d44e <block_set_free>:

static void block_set_free(block_header_t * block)
{
 801d44e:	b480      	push	{r7}
 801d450:	b083      	sub	sp, #12
 801d452:	af00      	add	r7, sp, #0
 801d454:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	685b      	ldr	r3, [r3, #4]
 801d45a:	2201      	movs	r2, #1
 801d45c:	431a      	orrs	r2, r3
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	605a      	str	r2, [r3, #4]
}
 801d462:	bf00      	nop
 801d464:	370c      	adds	r7, #12
 801d466:	46bd      	mov	sp, r7
 801d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d46c:	4770      	bx	lr

0801d46e <block_set_used>:

static void block_set_used(block_header_t * block)
{
 801d46e:	b480      	push	{r7}
 801d470:	b083      	sub	sp, #12
 801d472:	af00      	add	r7, sp, #0
 801d474:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	685a      	ldr	r2, [r3, #4]
 801d47a:	2301      	movs	r3, #1
 801d47c:	43db      	mvns	r3, r3
 801d47e:	401a      	ands	r2, r3
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	605a      	str	r2, [r3, #4]
}
 801d484:	bf00      	nop
 801d486:	370c      	adds	r7, #12
 801d488:	46bd      	mov	sp, r7
 801d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d48e:	4770      	bx	lr

0801d490 <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 801d490:	b480      	push	{r7}
 801d492:	b083      	sub	sp, #12
 801d494:	af00      	add	r7, sp, #0
 801d496:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	685b      	ldr	r3, [r3, #4]
 801d49c:	2202      	movs	r2, #2
 801d49e:	4013      	ands	r3, r2
}
 801d4a0:	4618      	mov	r0, r3
 801d4a2:	370c      	adds	r7, #12
 801d4a4:	46bd      	mov	sp, r7
 801d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4aa:	4770      	bx	lr

0801d4ac <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 801d4ac:	b480      	push	{r7}
 801d4ae:	b083      	sub	sp, #12
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	685b      	ldr	r3, [r3, #4]
 801d4b8:	2202      	movs	r2, #2
 801d4ba:	431a      	orrs	r2, r3
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	605a      	str	r2, [r3, #4]
}
 801d4c0:	bf00      	nop
 801d4c2:	370c      	adds	r7, #12
 801d4c4:	46bd      	mov	sp, r7
 801d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ca:	4770      	bx	lr

0801d4cc <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 801d4cc:	b480      	push	{r7}
 801d4ce:	b083      	sub	sp, #12
 801d4d0:	af00      	add	r7, sp, #0
 801d4d2:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	685a      	ldr	r2, [r3, #4]
 801d4d8:	2302      	movs	r3, #2
 801d4da:	43db      	mvns	r3, r3
 801d4dc:	401a      	ands	r2, r3
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	605a      	str	r2, [r3, #4]
}
 801d4e2:	bf00      	nop
 801d4e4:	370c      	adds	r7, #12
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4ec:	4770      	bx	lr

0801d4ee <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 801d4ee:	b480      	push	{r7}
 801d4f0:	b083      	sub	sp, #12
 801d4f2:	af00      	add	r7, sp, #0
 801d4f4:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 801d4f6:	2308      	movs	r3, #8
 801d4f8:	425b      	negs	r3, r3
 801d4fa:	687a      	ldr	r2, [r7, #4]
 801d4fc:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 801d4fe:	4618      	mov	r0, r3
 801d500:	370c      	adds	r7, #12
 801d502:	46bd      	mov	sp, r7
 801d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d508:	4770      	bx	lr

0801d50a <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 801d50a:	b480      	push	{r7}
 801d50c:	b083      	sub	sp, #12
 801d50e:	af00      	add	r7, sp, #0
 801d510:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 801d512:	2208      	movs	r2, #8
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 801d518:	4618      	mov	r0, r3
 801d51a:	370c      	adds	r7, #12
 801d51c:	46bd      	mov	sp, r7
 801d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d522:	4770      	bx	lr

0801d524 <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 801d524:	b480      	push	{r7}
 801d526:	b083      	sub	sp, #12
 801d528:	af00      	add	r7, sp, #0
 801d52a:	6078      	str	r0, [r7, #4]
 801d52c:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 801d52e:	687a      	ldr	r2, [r7, #4]
 801d530:	683b      	ldr	r3, [r7, #0]
 801d532:	4413      	add	r3, r2
}
 801d534:	4618      	mov	r0, r3
 801d536:	370c      	adds	r7, #12
 801d538:	46bd      	mov	sp, r7
 801d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d53e:	4770      	bx	lr

0801d540 <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 801d540:	b580      	push	{r7, lr}
 801d542:	b082      	sub	sp, #8
 801d544:	af00      	add	r7, sp, #0
 801d546:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 801d548:	6878      	ldr	r0, [r7, #4]
 801d54a:	f7ff ffa1 	bl	801d490 <block_is_prev_free>
 801d54e:	4603      	mov	r3, r0
 801d550:	2b00      	cmp	r3, #0
 801d552:	d101      	bne.n	801d558 <block_prev+0x18>
 801d554:	bf00      	nop
 801d556:	e7fd      	b.n	801d554 <block_prev+0x14>
    return block->prev_phys_block;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	681b      	ldr	r3, [r3, #0]
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3708      	adds	r7, #8
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}

0801d564 <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 801d564:	b590      	push	{r4, r7, lr}
 801d566:	b085      	sub	sp, #20
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 801d56c:	6878      	ldr	r0, [r7, #4]
 801d56e:	f7ff ffcc 	bl	801d50a <block_to_ptr>
 801d572:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f7ff ff23 	bl	801d3c0 <block_size>
 801d57a:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 801d57c:	2204      	movs	r2, #4
 801d57e:	1a9b      	subs	r3, r3, r2
 801d580:	4619      	mov	r1, r3
 801d582:	4620      	mov	r0, r4
 801d584:	f7ff ffce 	bl	801d524 <offset_to_block>
 801d588:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 801d58a:	6878      	ldr	r0, [r7, #4]
 801d58c:	f7ff ff40 	bl	801d410 <block_is_last>
 801d590:	4603      	mov	r3, r0
 801d592:	2b00      	cmp	r3, #0
 801d594:	d001      	beq.n	801d59a <block_next+0x36>
 801d596:	bf00      	nop
 801d598:	e7fd      	b.n	801d596 <block_next+0x32>
    return next;
 801d59a:	68fb      	ldr	r3, [r7, #12]
}
 801d59c:	4618      	mov	r0, r3
 801d59e:	3714      	adds	r7, #20
 801d5a0:	46bd      	mov	sp, r7
 801d5a2:	bd90      	pop	{r4, r7, pc}

0801d5a4 <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	b084      	sub	sp, #16
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 801d5ac:	6878      	ldr	r0, [r7, #4]
 801d5ae:	f7ff ffd9 	bl	801d564 <block_next>
 801d5b2:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	687a      	ldr	r2, [r7, #4]
 801d5b8:	601a      	str	r2, [r3, #0]
    return next;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
}
 801d5bc:	4618      	mov	r0, r3
 801d5be:	3710      	adds	r7, #16
 801d5c0:	46bd      	mov	sp, r7
 801d5c2:	bd80      	pop	{r7, pc}

0801d5c4 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 801d5c4:	b580      	push	{r7, lr}
 801d5c6:	b084      	sub	sp, #16
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 801d5cc:	6878      	ldr	r0, [r7, #4]
 801d5ce:	f7ff ffe9 	bl	801d5a4 <block_link_next>
 801d5d2:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 801d5d4:	68f8      	ldr	r0, [r7, #12]
 801d5d6:	f7ff ff69 	bl	801d4ac <block_set_prev_free>
    block_set_free(block);
 801d5da:	6878      	ldr	r0, [r7, #4]
 801d5dc:	f7ff ff37 	bl	801d44e <block_set_free>
}
 801d5e0:	bf00      	nop
 801d5e2:	3710      	adds	r7, #16
 801d5e4:	46bd      	mov	sp, r7
 801d5e6:	bd80      	pop	{r7, pc}

0801d5e8 <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b084      	sub	sp, #16
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 801d5f0:	6878      	ldr	r0, [r7, #4]
 801d5f2:	f7ff ffb7 	bl	801d564 <block_next>
 801d5f6:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 801d5f8:	68f8      	ldr	r0, [r7, #12]
 801d5fa:	f7ff ff67 	bl	801d4cc <block_set_prev_used>
    block_set_used(block);
 801d5fe:	6878      	ldr	r0, [r7, #4]
 801d600:	f7ff ff35 	bl	801d46e <block_set_used>
}
 801d604:	bf00      	nop
 801d606:	3710      	adds	r7, #16
 801d608:	46bd      	mov	sp, r7
 801d60a:	bd80      	pop	{r7, pc}

0801d60c <align_up>:

static size_t align_up(size_t x, size_t align)
{
 801d60c:	b480      	push	{r7}
 801d60e:	b083      	sub	sp, #12
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]
 801d614:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 801d616:	683b      	ldr	r3, [r7, #0]
 801d618:	1e5a      	subs	r2, r3, #1
 801d61a:	683b      	ldr	r3, [r7, #0]
 801d61c:	4013      	ands	r3, r2
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d001      	beq.n	801d626 <align_up+0x1a>
 801d622:	bf00      	nop
 801d624:	e7fd      	b.n	801d622 <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 801d626:	683a      	ldr	r2, [r7, #0]
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	4413      	add	r3, r2
 801d62c:	1e5a      	subs	r2, r3, #1
 801d62e:	683b      	ldr	r3, [r7, #0]
 801d630:	425b      	negs	r3, r3
 801d632:	4013      	ands	r3, r2
}
 801d634:	4618      	mov	r0, r3
 801d636:	370c      	adds	r7, #12
 801d638:	46bd      	mov	sp, r7
 801d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d63e:	4770      	bx	lr

0801d640 <align_down>:

static size_t align_down(size_t x, size_t align)
{
 801d640:	b480      	push	{r7}
 801d642:	b083      	sub	sp, #12
 801d644:	af00      	add	r7, sp, #0
 801d646:	6078      	str	r0, [r7, #4]
 801d648:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 801d64a:	683b      	ldr	r3, [r7, #0]
 801d64c:	1e5a      	subs	r2, r3, #1
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	4013      	ands	r3, r2
 801d652:	2b00      	cmp	r3, #0
 801d654:	d001      	beq.n	801d65a <align_down+0x1a>
 801d656:	bf00      	nop
 801d658:	e7fd      	b.n	801d656 <align_down+0x16>
    return x - (x & (align - 1));
 801d65a:	683b      	ldr	r3, [r7, #0]
 801d65c:	425a      	negs	r2, r3
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	4013      	ands	r3, r2
}
 801d662:	4618      	mov	r0, r3
 801d664:	370c      	adds	r7, #12
 801d666:	46bd      	mov	sp, r7
 801d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d66c:	4770      	bx	lr

0801d66e <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 801d66e:	b480      	push	{r7}
 801d670:	b085      	sub	sp, #20
 801d672:	af00      	add	r7, sp, #0
 801d674:	6078      	str	r0, [r7, #4]
 801d676:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 801d678:	687a      	ldr	r2, [r7, #4]
 801d67a:	683b      	ldr	r3, [r7, #0]
 801d67c:	4413      	add	r3, r2
 801d67e:	1e5a      	subs	r2, r3, #1
 801d680:	683b      	ldr	r3, [r7, #0]
 801d682:	425b      	negs	r3, r3
 801d684:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 801d686:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 801d688:	683b      	ldr	r3, [r7, #0]
 801d68a:	1e5a      	subs	r2, r3, #1
 801d68c:	683b      	ldr	r3, [r7, #0]
 801d68e:	4013      	ands	r3, r2
 801d690:	2b00      	cmp	r3, #0
 801d692:	d001      	beq.n	801d698 <align_ptr+0x2a>
 801d694:	bf00      	nop
 801d696:	e7fd      	b.n	801d694 <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 801d698:	68fb      	ldr	r3, [r7, #12]
}
 801d69a:	4618      	mov	r0, r3
 801d69c:	3714      	adds	r7, #20
 801d69e:	46bd      	mov	sp, r7
 801d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a4:	4770      	bx	lr

0801d6a6 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 801d6a6:	b580      	push	{r7, lr}
 801d6a8:	b084      	sub	sp, #16
 801d6aa:	af00      	add	r7, sp, #0
 801d6ac:	6078      	str	r0, [r7, #4]
 801d6ae:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	60fb      	str	r3, [r7, #12]
    if(size) {
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d00f      	beq.n	801d6da <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 801d6ba:	6839      	ldr	r1, [r7, #0]
 801d6bc:	6878      	ldr	r0, [r7, #4]
 801d6be:	f7ff ffa5 	bl	801d60c <align_up>
 801d6c2:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 801d6c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801d6c8:	68bb      	ldr	r3, [r7, #8]
 801d6ca:	4293      	cmp	r3, r2
 801d6cc:	d205      	bcs.n	801d6da <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 801d6ce:	220c      	movs	r2, #12
 801d6d0:	68bb      	ldr	r3, [r7, #8]
 801d6d2:	4293      	cmp	r3, r2
 801d6d4:	bf38      	it	cc
 801d6d6:	4613      	movcc	r3, r2
 801d6d8:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 801d6da:	68fb      	ldr	r3, [r7, #12]
}
 801d6dc:	4618      	mov	r0, r3
 801d6de:	3710      	adds	r7, #16
 801d6e0:	46bd      	mov	sp, r7
 801d6e2:	bd80      	pop	{r7, pc}

0801d6e4 <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	b086      	sub	sp, #24
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	60f8      	str	r0, [r7, #12]
 801d6ec:	60b9      	str	r1, [r7, #8]
 801d6ee:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	2b7f      	cmp	r3, #127	@ 0x7f
 801d6f4:	d808      	bhi.n	801d708 <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	da00      	bge.n	801d702 <mapping_insert+0x1e>
 801d700:	3303      	adds	r3, #3
 801d702:	109b      	asrs	r3, r3, #2
 801d704:	613b      	str	r3, [r7, #16]
 801d706:	e00e      	b.n	801d726 <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 801d708:	68f8      	ldr	r0, [r7, #12]
 801d70a:	f7ff fe42 	bl	801d392 <tlsf_fls>
 801d70e:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 801d710:	697b      	ldr	r3, [r7, #20]
 801d712:	3b05      	subs	r3, #5
 801d714:	68fa      	ldr	r2, [r7, #12]
 801d716:	fa22 f303 	lsr.w	r3, r2, r3
 801d71a:	f083 0320 	eor.w	r3, r3, #32
 801d71e:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 801d720:	697b      	ldr	r3, [r7, #20]
 801d722:	3b06      	subs	r3, #6
 801d724:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 801d726:	68bb      	ldr	r3, [r7, #8]
 801d728:	697a      	ldr	r2, [r7, #20]
 801d72a:	601a      	str	r2, [r3, #0]
    *sli = sl;
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	693a      	ldr	r2, [r7, #16]
 801d730:	601a      	str	r2, [r3, #0]
}
 801d732:	bf00      	nop
 801d734:	3718      	adds	r7, #24
 801d736:	46bd      	mov	sp, r7
 801d738:	bd80      	pop	{r7, pc}

0801d73a <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 801d73a:	b580      	push	{r7, lr}
 801d73c:	b086      	sub	sp, #24
 801d73e:	af00      	add	r7, sp, #0
 801d740:	60f8      	str	r0, [r7, #12]
 801d742:	60b9      	str	r1, [r7, #8]
 801d744:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	2b7f      	cmp	r3, #127	@ 0x7f
 801d74a:	d90d      	bls.n	801d768 <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 801d74c:	68f8      	ldr	r0, [r7, #12]
 801d74e:	f7ff fe20 	bl	801d392 <tlsf_fls>
 801d752:	4603      	mov	r3, r0
 801d754:	3b05      	subs	r3, #5
 801d756:	2201      	movs	r2, #1
 801d758:	fa02 f303 	lsl.w	r3, r2, r3
 801d75c:	3b01      	subs	r3, #1
 801d75e:	617b      	str	r3, [r7, #20]
        size += round;
 801d760:	68fa      	ldr	r2, [r7, #12]
 801d762:	697b      	ldr	r3, [r7, #20]
 801d764:	4413      	add	r3, r2
 801d766:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 801d768:	687a      	ldr	r2, [r7, #4]
 801d76a:	68b9      	ldr	r1, [r7, #8]
 801d76c:	68f8      	ldr	r0, [r7, #12]
 801d76e:	f7ff ffb9 	bl	801d6e4 <mapping_insert>
}
 801d772:	bf00      	nop
 801d774:	3718      	adds	r7, #24
 801d776:	46bd      	mov	sp, r7
 801d778:	bd80      	pop	{r7, pc}

0801d77a <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 801d77a:	b580      	push	{r7, lr}
 801d77c:	b088      	sub	sp, #32
 801d77e:	af00      	add	r7, sp, #0
 801d780:	60f8      	str	r0, [r7, #12]
 801d782:	60b9      	str	r1, [r7, #8]
 801d784:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 801d786:	68bb      	ldr	r3, [r7, #8]
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 801d792:	68fa      	ldr	r2, [r7, #12]
 801d794:	69fb      	ldr	r3, [r7, #28]
 801d796:	3304      	adds	r3, #4
 801d798:	009b      	lsls	r3, r3, #2
 801d79a:	4413      	add	r3, r2
 801d79c:	685a      	ldr	r2, [r3, #4]
 801d79e:	f04f 31ff 	mov.w	r1, #4294967295
 801d7a2:	697b      	ldr	r3, [r7, #20]
 801d7a4:	fa01 f303 	lsl.w	r3, r1, r3
 801d7a8:	4013      	ands	r3, r2
 801d7aa:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 801d7ac:	69bb      	ldr	r3, [r7, #24]
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d11c      	bne.n	801d7ec <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	691a      	ldr	r2, [r3, #16]
 801d7b6:	69fb      	ldr	r3, [r7, #28]
 801d7b8:	3301      	adds	r3, #1
 801d7ba:	f04f 31ff 	mov.w	r1, #4294967295
 801d7be:	fa01 f303 	lsl.w	r3, r1, r3
 801d7c2:	4013      	ands	r3, r2
 801d7c4:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 801d7c6:	693b      	ldr	r3, [r7, #16]
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d101      	bne.n	801d7d0 <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 801d7cc:	2300      	movs	r3, #0
 801d7ce:	e022      	b.n	801d816 <search_suitable_block+0x9c>
        }

        fl = tlsf_ffs(fl_map);
 801d7d0:	6938      	ldr	r0, [r7, #16]
 801d7d2:	f7ff fdc9 	bl	801d368 <tlsf_ffs>
 801d7d6:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 801d7d8:	68bb      	ldr	r3, [r7, #8]
 801d7da:	69fa      	ldr	r2, [r7, #28]
 801d7dc:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 801d7de:	68fa      	ldr	r2, [r7, #12]
 801d7e0:	69fb      	ldr	r3, [r7, #28]
 801d7e2:	3304      	adds	r3, #4
 801d7e4:	009b      	lsls	r3, r3, #2
 801d7e6:	4413      	add	r3, r2
 801d7e8:	685b      	ldr	r3, [r3, #4]
 801d7ea:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 801d7ec:	69bb      	ldr	r3, [r7, #24]
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d101      	bne.n	801d7f6 <search_suitable_block+0x7c>
 801d7f2:	bf00      	nop
 801d7f4:	e7fd      	b.n	801d7f2 <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 801d7f6:	69b8      	ldr	r0, [r7, #24]
 801d7f8:	f7ff fdb6 	bl	801d368 <tlsf_ffs>
 801d7fc:	6178      	str	r0, [r7, #20]
    *sli = sl;
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	697a      	ldr	r2, [r7, #20]
 801d802:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 801d804:	68fa      	ldr	r2, [r7, #12]
 801d806:	69fb      	ldr	r3, [r7, #28]
 801d808:	0159      	lsls	r1, r3, #5
 801d80a:	697b      	ldr	r3, [r7, #20]
 801d80c:	440b      	add	r3, r1
 801d80e:	330e      	adds	r3, #14
 801d810:	009b      	lsls	r3, r3, #2
 801d812:	4413      	add	r3, r2
 801d814:	685b      	ldr	r3, [r3, #4]
}
 801d816:	4618      	mov	r0, r3
 801d818:	3720      	adds	r7, #32
 801d81a:	46bd      	mov	sp, r7
 801d81c:	bd80      	pop	{r7, pc}

0801d81e <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 801d81e:	b480      	push	{r7}
 801d820:	b087      	sub	sp, #28
 801d822:	af00      	add	r7, sp, #0
 801d824:	60f8      	str	r0, [r7, #12]
 801d826:	60b9      	str	r1, [r7, #8]
 801d828:	607a      	str	r2, [r7, #4]
 801d82a:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 801d82c:	68bb      	ldr	r3, [r7, #8]
 801d82e:	68db      	ldr	r3, [r3, #12]
 801d830:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 801d832:	68bb      	ldr	r3, [r7, #8]
 801d834:	689b      	ldr	r3, [r3, #8]
 801d836:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 801d838:	697b      	ldr	r3, [r7, #20]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d101      	bne.n	801d842 <remove_free_block+0x24>
 801d83e:	bf00      	nop
 801d840:	e7fd      	b.n	801d83e <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 801d842:	693b      	ldr	r3, [r7, #16]
 801d844:	2b00      	cmp	r3, #0
 801d846:	d101      	bne.n	801d84c <remove_free_block+0x2e>
 801d848:	bf00      	nop
 801d84a:	e7fd      	b.n	801d848 <remove_free_block+0x2a>
    next->prev_free = prev;
 801d84c:	693b      	ldr	r3, [r7, #16]
 801d84e:	697a      	ldr	r2, [r7, #20]
 801d850:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 801d852:	697b      	ldr	r3, [r7, #20]
 801d854:	693a      	ldr	r2, [r7, #16]
 801d856:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 801d858:	68fa      	ldr	r2, [r7, #12]
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	0159      	lsls	r1, r3, #5
 801d85e:	683b      	ldr	r3, [r7, #0]
 801d860:	440b      	add	r3, r1
 801d862:	330e      	adds	r3, #14
 801d864:	009b      	lsls	r3, r3, #2
 801d866:	4413      	add	r3, r2
 801d868:	685b      	ldr	r3, [r3, #4]
 801d86a:	68ba      	ldr	r2, [r7, #8]
 801d86c:	429a      	cmp	r2, r3
 801d86e:	d131      	bne.n	801d8d4 <remove_free_block+0xb6>
        control->blocks[fl][sl] = next;
 801d870:	68fa      	ldr	r2, [r7, #12]
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	0159      	lsls	r1, r3, #5
 801d876:	683b      	ldr	r3, [r7, #0]
 801d878:	440b      	add	r3, r1
 801d87a:	330e      	adds	r3, #14
 801d87c:	009b      	lsls	r3, r3, #2
 801d87e:	4413      	add	r3, r2
 801d880:	693a      	ldr	r2, [r7, #16]
 801d882:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	693a      	ldr	r2, [r7, #16]
 801d888:	429a      	cmp	r2, r3
 801d88a:	d123      	bne.n	801d8d4 <remove_free_block+0xb6>
            control->sl_bitmap[fl] &= ~(1U << sl);
 801d88c:	68fa      	ldr	r2, [r7, #12]
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	3304      	adds	r3, #4
 801d892:	009b      	lsls	r3, r3, #2
 801d894:	4413      	add	r3, r2
 801d896:	685a      	ldr	r2, [r3, #4]
 801d898:	2101      	movs	r1, #1
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	fa01 f303 	lsl.w	r3, r1, r3
 801d8a0:	43db      	mvns	r3, r3
 801d8a2:	401a      	ands	r2, r3
 801d8a4:	68f9      	ldr	r1, [r7, #12]
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	3304      	adds	r3, #4
 801d8aa:	009b      	lsls	r3, r3, #2
 801d8ac:	440b      	add	r3, r1
 801d8ae:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 801d8b0:	68fa      	ldr	r2, [r7, #12]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	3304      	adds	r3, #4
 801d8b6:	009b      	lsls	r3, r3, #2
 801d8b8:	4413      	add	r3, r2
 801d8ba:	685b      	ldr	r3, [r3, #4]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d109      	bne.n	801d8d4 <remove_free_block+0xb6>
                control->fl_bitmap &= ~(1U << fl);
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	691a      	ldr	r2, [r3, #16]
 801d8c4:	2101      	movs	r1, #1
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	fa01 f303 	lsl.w	r3, r1, r3
 801d8cc:	43db      	mvns	r3, r3
 801d8ce:	401a      	ands	r2, r3
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 801d8d4:	bf00      	nop
 801d8d6:	371c      	adds	r7, #28
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8de:	4770      	bx	lr

0801d8e0 <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 801d8e0:	b590      	push	{r4, r7, lr}
 801d8e2:	b087      	sub	sp, #28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	60f8      	str	r0, [r7, #12]
 801d8e8:	60b9      	str	r1, [r7, #8]
 801d8ea:	607a      	str	r2, [r7, #4]
 801d8ec:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 801d8ee:	68fa      	ldr	r2, [r7, #12]
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	0159      	lsls	r1, r3, #5
 801d8f4:	683b      	ldr	r3, [r7, #0]
 801d8f6:	440b      	add	r3, r1
 801d8f8:	330e      	adds	r3, #14
 801d8fa:	009b      	lsls	r3, r3, #2
 801d8fc:	4413      	add	r3, r2
 801d8fe:	685b      	ldr	r3, [r3, #4]
 801d900:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 801d902:	697b      	ldr	r3, [r7, #20]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d101      	bne.n	801d90c <insert_free_block+0x2c>
 801d908:	bf00      	nop
 801d90a:	e7fd      	b.n	801d908 <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 801d90c:	68bb      	ldr	r3, [r7, #8]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d101      	bne.n	801d916 <insert_free_block+0x36>
 801d912:	bf00      	nop
 801d914:	e7fd      	b.n	801d912 <insert_free_block+0x32>
    block->next_free = current;
 801d916:	68bb      	ldr	r3, [r7, #8]
 801d918:	697a      	ldr	r2, [r7, #20]
 801d91a:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 801d91c:	68fa      	ldr	r2, [r7, #12]
 801d91e:	68bb      	ldr	r3, [r7, #8]
 801d920:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 801d922:	697b      	ldr	r3, [r7, #20]
 801d924:	68ba      	ldr	r2, [r7, #8]
 801d926:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 801d928:	68b8      	ldr	r0, [r7, #8]
 801d92a:	f7ff fdee 	bl	801d50a <block_to_ptr>
 801d92e:	4604      	mov	r4, r0
 801d930:	68b8      	ldr	r0, [r7, #8]
 801d932:	f7ff fdea 	bl	801d50a <block_to_ptr>
 801d936:	4603      	mov	r3, r0
 801d938:	2104      	movs	r1, #4
 801d93a:	4618      	mov	r0, r3
 801d93c:	f7ff fe97 	bl	801d66e <align_ptr>
 801d940:	4603      	mov	r3, r0
 801d942:	429c      	cmp	r4, r3
 801d944:	d001      	beq.n	801d94a <insert_free_block+0x6a>
 801d946:	bf00      	nop
 801d948:	e7fd      	b.n	801d946 <insert_free_block+0x66>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 801d94a:	68fa      	ldr	r2, [r7, #12]
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	0159      	lsls	r1, r3, #5
 801d950:	683b      	ldr	r3, [r7, #0]
 801d952:	440b      	add	r3, r1
 801d954:	330e      	adds	r3, #14
 801d956:	009b      	lsls	r3, r3, #2
 801d958:	4413      	add	r3, r2
 801d95a:	68ba      	ldr	r2, [r7, #8]
 801d95c:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 801d95e:	68fb      	ldr	r3, [r7, #12]
 801d960:	691a      	ldr	r2, [r3, #16]
 801d962:	2101      	movs	r1, #1
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	fa01 f303 	lsl.w	r3, r1, r3
 801d96a:	431a      	orrs	r2, r3
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 801d970:	68fa      	ldr	r2, [r7, #12]
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	3304      	adds	r3, #4
 801d976:	009b      	lsls	r3, r3, #2
 801d978:	4413      	add	r3, r2
 801d97a:	685a      	ldr	r2, [r3, #4]
 801d97c:	2101      	movs	r1, #1
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	fa01 f303 	lsl.w	r3, r1, r3
 801d984:	431a      	orrs	r2, r3
 801d986:	68f9      	ldr	r1, [r7, #12]
 801d988:	687b      	ldr	r3, [r7, #4]
 801d98a:	3304      	adds	r3, #4
 801d98c:	009b      	lsls	r3, r3, #2
 801d98e:	440b      	add	r3, r1
 801d990:	605a      	str	r2, [r3, #4]
}
 801d992:	bf00      	nop
 801d994:	371c      	adds	r7, #28
 801d996:	46bd      	mov	sp, r7
 801d998:	bd90      	pop	{r4, r7, pc}

0801d99a <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 801d99a:	b580      	push	{r7, lr}
 801d99c:	b084      	sub	sp, #16
 801d99e:	af00      	add	r7, sp, #0
 801d9a0:	6078      	str	r0, [r7, #4]
 801d9a2:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 801d9a4:	6838      	ldr	r0, [r7, #0]
 801d9a6:	f7ff fd0b 	bl	801d3c0 <block_size>
 801d9aa:	f107 0208 	add.w	r2, r7, #8
 801d9ae:	f107 030c 	add.w	r3, r7, #12
 801d9b2:	4619      	mov	r1, r3
 801d9b4:	f7ff fe96 	bl	801d6e4 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 801d9b8:	68fa      	ldr	r2, [r7, #12]
 801d9ba:	68bb      	ldr	r3, [r7, #8]
 801d9bc:	6839      	ldr	r1, [r7, #0]
 801d9be:	6878      	ldr	r0, [r7, #4]
 801d9c0:	f7ff ff2d 	bl	801d81e <remove_free_block>
}
 801d9c4:	bf00      	nop
 801d9c6:	3710      	adds	r7, #16
 801d9c8:	46bd      	mov	sp, r7
 801d9ca:	bd80      	pop	{r7, pc}

0801d9cc <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 801d9cc:	b580      	push	{r7, lr}
 801d9ce:	b084      	sub	sp, #16
 801d9d0:	af00      	add	r7, sp, #0
 801d9d2:	6078      	str	r0, [r7, #4]
 801d9d4:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 801d9d6:	6838      	ldr	r0, [r7, #0]
 801d9d8:	f7ff fcf2 	bl	801d3c0 <block_size>
 801d9dc:	f107 0208 	add.w	r2, r7, #8
 801d9e0:	f107 030c 	add.w	r3, r7, #12
 801d9e4:	4619      	mov	r1, r3
 801d9e6:	f7ff fe7d 	bl	801d6e4 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 801d9ea:	68fa      	ldr	r2, [r7, #12]
 801d9ec:	68bb      	ldr	r3, [r7, #8]
 801d9ee:	6839      	ldr	r1, [r7, #0]
 801d9f0:	6878      	ldr	r0, [r7, #4]
 801d9f2:	f7ff ff75 	bl	801d8e0 <insert_free_block>
}
 801d9f6:	bf00      	nop
 801d9f8:	3710      	adds	r7, #16
 801d9fa:	46bd      	mov	sp, r7
 801d9fc:	bd80      	pop	{r7, pc}

0801d9fe <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 801d9fe:	b580      	push	{r7, lr}
 801da00:	b082      	sub	sp, #8
 801da02:	af00      	add	r7, sp, #0
 801da04:	6078      	str	r0, [r7, #4]
 801da06:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 801da08:	6878      	ldr	r0, [r7, #4]
 801da0a:	f7ff fcd9 	bl	801d3c0 <block_size>
 801da0e:	4602      	mov	r2, r0
 801da10:	683b      	ldr	r3, [r7, #0]
 801da12:	3310      	adds	r3, #16
 801da14:	429a      	cmp	r2, r3
 801da16:	bf2c      	ite	cs
 801da18:	2301      	movcs	r3, #1
 801da1a:	2300      	movcc	r3, #0
 801da1c:	b2db      	uxtb	r3, r3
}
 801da1e:	4618      	mov	r0, r3
 801da20:	3708      	adds	r7, #8
 801da22:	46bd      	mov	sp, r7
 801da24:	bd80      	pop	{r7, pc}

0801da26 <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 801da26:	b590      	push	{r4, r7, lr}
 801da28:	b085      	sub	sp, #20
 801da2a:	af00      	add	r7, sp, #0
 801da2c:	6078      	str	r0, [r7, #4]
 801da2e:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 801da30:	6878      	ldr	r0, [r7, #4]
 801da32:	f7ff fd6a 	bl	801d50a <block_to_ptr>
 801da36:	4602      	mov	r2, r0
 801da38:	2104      	movs	r1, #4
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	1a5b      	subs	r3, r3, r1
 801da3e:	4619      	mov	r1, r3
 801da40:	4610      	mov	r0, r2
 801da42:	f7ff fd6f 	bl	801d524 <offset_to_block>
 801da46:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 801da48:	6878      	ldr	r0, [r7, #4]
 801da4a:	f7ff fcb9 	bl	801d3c0 <block_size>
 801da4e:	4602      	mov	r2, r0
 801da50:	2104      	movs	r1, #4
 801da52:	683b      	ldr	r3, [r7, #0]
 801da54:	440b      	add	r3, r1
 801da56:	1ad3      	subs	r3, r2, r3
 801da58:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 801da5a:	68f8      	ldr	r0, [r7, #12]
 801da5c:	f7ff fd55 	bl	801d50a <block_to_ptr>
 801da60:	4604      	mov	r4, r0
 801da62:	68f8      	ldr	r0, [r7, #12]
 801da64:	f7ff fd51 	bl	801d50a <block_to_ptr>
 801da68:	4603      	mov	r3, r0
 801da6a:	2104      	movs	r1, #4
 801da6c:	4618      	mov	r0, r3
 801da6e:	f7ff fdfe 	bl	801d66e <align_ptr>
 801da72:	4603      	mov	r3, r0
 801da74:	429c      	cmp	r4, r3
 801da76:	d001      	beq.n	801da7c <block_split+0x56>
 801da78:	bf00      	nop
 801da7a:	e7fd      	b.n	801da78 <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 801da7c:	6878      	ldr	r0, [r7, #4]
 801da7e:	f7ff fc9f 	bl	801d3c0 <block_size>
 801da82:	4601      	mov	r1, r0
 801da84:	68ba      	ldr	r2, [r7, #8]
 801da86:	683b      	ldr	r3, [r7, #0]
 801da88:	4413      	add	r3, r2
 801da8a:	2204      	movs	r2, #4
 801da8c:	4413      	add	r3, r2
 801da8e:	4299      	cmp	r1, r3
 801da90:	d001      	beq.n	801da96 <block_split+0x70>
 801da92:	bf00      	nop
 801da94:	e7fd      	b.n	801da92 <block_split+0x6c>
    block_set_size(remaining, remain_size);
 801da96:	68b9      	ldr	r1, [r7, #8]
 801da98:	68f8      	ldr	r0, [r7, #12]
 801da9a:	f7ff fca2 	bl	801d3e2 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 801da9e:	68f8      	ldr	r0, [r7, #12]
 801daa0:	f7ff fc8e 	bl	801d3c0 <block_size>
 801daa4:	4603      	mov	r3, r0
 801daa6:	220c      	movs	r2, #12
 801daa8:	4293      	cmp	r3, r2
 801daaa:	d201      	bcs.n	801dab0 <block_split+0x8a>
 801daac:	bf00      	nop
 801daae:	e7fd      	b.n	801daac <block_split+0x86>

    block_set_size(block, size);
 801dab0:	6839      	ldr	r1, [r7, #0]
 801dab2:	6878      	ldr	r0, [r7, #4]
 801dab4:	f7ff fc95 	bl	801d3e2 <block_set_size>
    block_mark_as_free(remaining);
 801dab8:	68f8      	ldr	r0, [r7, #12]
 801daba:	f7ff fd83 	bl	801d5c4 <block_mark_as_free>

    return remaining;
 801dabe:	68fb      	ldr	r3, [r7, #12]
}
 801dac0:	4618      	mov	r0, r3
 801dac2:	3714      	adds	r7, #20
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bd90      	pop	{r4, r7, pc}

0801dac8 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 801dac8:	b580      	push	{r7, lr}
 801daca:	b082      	sub	sp, #8
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
 801dad0:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 801dad2:	6878      	ldr	r0, [r7, #4]
 801dad4:	f7ff fc9c 	bl	801d410 <block_is_last>
 801dad8:	4603      	mov	r3, r0
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d001      	beq.n	801dae2 <block_absorb+0x1a>
 801dade:	bf00      	nop
 801dae0:	e7fd      	b.n	801dade <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 801dae2:	6838      	ldr	r0, [r7, #0]
 801dae4:	f7ff fc6c 	bl	801d3c0 <block_size>
 801dae8:	4603      	mov	r3, r0
 801daea:	2204      	movs	r2, #4
 801daec:	441a      	add	r2, r3
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	685b      	ldr	r3, [r3, #4]
 801daf2:	441a      	add	r2, r3
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 801daf8:	6878      	ldr	r0, [r7, #4]
 801dafa:	f7ff fd53 	bl	801d5a4 <block_link_next>
    return prev;
 801dafe:	687b      	ldr	r3, [r7, #4]
}
 801db00:	4618      	mov	r0, r3
 801db02:	3708      	adds	r7, #8
 801db04:	46bd      	mov	sp, r7
 801db06:	bd80      	pop	{r7, pc}

0801db08 <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 801db08:	b580      	push	{r7, lr}
 801db0a:	b084      	sub	sp, #16
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	6078      	str	r0, [r7, #4]
 801db10:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 801db12:	6838      	ldr	r0, [r7, #0]
 801db14:	f7ff fcbc 	bl	801d490 <block_is_prev_free>
 801db18:	4603      	mov	r3, r0
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d019      	beq.n	801db52 <block_merge_prev+0x4a>
        block_header_t * prev = block_prev(block);
 801db1e:	6838      	ldr	r0, [r7, #0]
 801db20:	f7ff fd0e 	bl	801d540 <block_prev>
 801db24:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d101      	bne.n	801db30 <block_merge_prev+0x28>
 801db2c:	bf00      	nop
 801db2e:	e7fd      	b.n	801db2c <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 801db30:	68f8      	ldr	r0, [r7, #12]
 801db32:	f7ff fc7e 	bl	801d432 <block_is_free>
 801db36:	4603      	mov	r3, r0
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d101      	bne.n	801db40 <block_merge_prev+0x38>
 801db3c:	bf00      	nop
 801db3e:	e7fd      	b.n	801db3c <block_merge_prev+0x34>
        block_remove(control, prev);
 801db40:	68f9      	ldr	r1, [r7, #12]
 801db42:	6878      	ldr	r0, [r7, #4]
 801db44:	f7ff ff29 	bl	801d99a <block_remove>
        block = block_absorb(prev, block);
 801db48:	6839      	ldr	r1, [r7, #0]
 801db4a:	68f8      	ldr	r0, [r7, #12]
 801db4c:	f7ff ffbc 	bl	801dac8 <block_absorb>
 801db50:	6038      	str	r0, [r7, #0]
    }

    return block;
 801db52:	683b      	ldr	r3, [r7, #0]
}
 801db54:	4618      	mov	r0, r3
 801db56:	3710      	adds	r7, #16
 801db58:	46bd      	mov	sp, r7
 801db5a:	bd80      	pop	{r7, pc}

0801db5c <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 801db5c:	b580      	push	{r7, lr}
 801db5e:	b084      	sub	sp, #16
 801db60:	af00      	add	r7, sp, #0
 801db62:	6078      	str	r0, [r7, #4]
 801db64:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 801db66:	6838      	ldr	r0, [r7, #0]
 801db68:	f7ff fcfc 	bl	801d564 <block_next>
 801db6c:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d101      	bne.n	801db78 <block_merge_next+0x1c>
 801db74:	bf00      	nop
 801db76:	e7fd      	b.n	801db74 <block_merge_next+0x18>

    if(block_is_free(next)) {
 801db78:	68f8      	ldr	r0, [r7, #12]
 801db7a:	f7ff fc5a 	bl	801d432 <block_is_free>
 801db7e:	4603      	mov	r3, r0
 801db80:	2b00      	cmp	r3, #0
 801db82:	d010      	beq.n	801dba6 <block_merge_next+0x4a>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 801db84:	6838      	ldr	r0, [r7, #0]
 801db86:	f7ff fc43 	bl	801d410 <block_is_last>
 801db8a:	4603      	mov	r3, r0
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d001      	beq.n	801db94 <block_merge_next+0x38>
 801db90:	bf00      	nop
 801db92:	e7fd      	b.n	801db90 <block_merge_next+0x34>
        block_remove(control, next);
 801db94:	68f9      	ldr	r1, [r7, #12]
 801db96:	6878      	ldr	r0, [r7, #4]
 801db98:	f7ff feff 	bl	801d99a <block_remove>
        block = block_absorb(block, next);
 801db9c:	68f9      	ldr	r1, [r7, #12]
 801db9e:	6838      	ldr	r0, [r7, #0]
 801dba0:	f7ff ff92 	bl	801dac8 <block_absorb>
 801dba4:	6038      	str	r0, [r7, #0]
    }

    return block;
 801dba6:	683b      	ldr	r3, [r7, #0]
}
 801dba8:	4618      	mov	r0, r3
 801dbaa:	3710      	adds	r7, #16
 801dbac:	46bd      	mov	sp, r7
 801dbae:	bd80      	pop	{r7, pc}

0801dbb0 <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b086      	sub	sp, #24
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	60f8      	str	r0, [r7, #12]
 801dbb8:	60b9      	str	r1, [r7, #8]
 801dbba:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 801dbbc:	68b8      	ldr	r0, [r7, #8]
 801dbbe:	f7ff fc38 	bl	801d432 <block_is_free>
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d101      	bne.n	801dbcc <block_trim_free+0x1c>
 801dbc8:	bf00      	nop
 801dbca:	e7fd      	b.n	801dbc8 <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 801dbcc:	6879      	ldr	r1, [r7, #4]
 801dbce:	68b8      	ldr	r0, [r7, #8]
 801dbd0:	f7ff ff15 	bl	801d9fe <block_can_split>
 801dbd4:	4603      	mov	r3, r0
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d00e      	beq.n	801dbf8 <block_trim_free+0x48>
        block_header_t * remaining_block = block_split(block, size);
 801dbda:	6879      	ldr	r1, [r7, #4]
 801dbdc:	68b8      	ldr	r0, [r7, #8]
 801dbde:	f7ff ff22 	bl	801da26 <block_split>
 801dbe2:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 801dbe4:	68b8      	ldr	r0, [r7, #8]
 801dbe6:	f7ff fcdd 	bl	801d5a4 <block_link_next>
        block_set_prev_free(remaining_block);
 801dbea:	6978      	ldr	r0, [r7, #20]
 801dbec:	f7ff fc5e 	bl	801d4ac <block_set_prev_free>
        block_insert(control, remaining_block);
 801dbf0:	6979      	ldr	r1, [r7, #20]
 801dbf2:	68f8      	ldr	r0, [r7, #12]
 801dbf4:	f7ff feea 	bl	801d9cc <block_insert>
    }
}
 801dbf8:	bf00      	nop
 801dbfa:	3718      	adds	r7, #24
 801dbfc:	46bd      	mov	sp, r7
 801dbfe:	bd80      	pop	{r7, pc}

0801dc00 <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 801dc00:	b580      	push	{r7, lr}
 801dc02:	b086      	sub	sp, #24
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	60f8      	str	r0, [r7, #12]
 801dc08:	60b9      	str	r1, [r7, #8]
 801dc0a:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 801dc0c:	68b8      	ldr	r0, [r7, #8]
 801dc0e:	f7ff fc10 	bl	801d432 <block_is_free>
 801dc12:	4603      	mov	r3, r0
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d001      	beq.n	801dc1c <block_trim_used+0x1c>
 801dc18:	bf00      	nop
 801dc1a:	e7fd      	b.n	801dc18 <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 801dc1c:	6879      	ldr	r1, [r7, #4]
 801dc1e:	68b8      	ldr	r0, [r7, #8]
 801dc20:	f7ff feed 	bl	801d9fe <block_can_split>
 801dc24:	4603      	mov	r3, r0
 801dc26:	2b00      	cmp	r3, #0
 801dc28:	d010      	beq.n	801dc4c <block_trim_used+0x4c>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 801dc2a:	6879      	ldr	r1, [r7, #4]
 801dc2c:	68b8      	ldr	r0, [r7, #8]
 801dc2e:	f7ff fefa 	bl	801da26 <block_split>
 801dc32:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 801dc34:	6978      	ldr	r0, [r7, #20]
 801dc36:	f7ff fc49 	bl	801d4cc <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 801dc3a:	6979      	ldr	r1, [r7, #20]
 801dc3c:	68f8      	ldr	r0, [r7, #12]
 801dc3e:	f7ff ff8d 	bl	801db5c <block_merge_next>
 801dc42:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 801dc44:	6979      	ldr	r1, [r7, #20]
 801dc46:	68f8      	ldr	r0, [r7, #12]
 801dc48:	f7ff fec0 	bl	801d9cc <block_insert>
    }
}
 801dc4c:	bf00      	nop
 801dc4e:	3718      	adds	r7, #24
 801dc50:	46bd      	mov	sp, r7
 801dc52:	bd80      	pop	{r7, pc}

0801dc54 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 801dc54:	b580      	push	{r7, lr}
 801dc56:	b086      	sub	sp, #24
 801dc58:	af00      	add	r7, sp, #0
 801dc5a:	6078      	str	r0, [r7, #4]
 801dc5c:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 801dc5e:	2300      	movs	r3, #0
 801dc60:	613b      	str	r3, [r7, #16]
 801dc62:	2300      	movs	r3, #0
 801dc64:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 801dc66:	2300      	movs	r3, #0
 801dc68:	617b      	str	r3, [r7, #20]

    if(size) {
 801dc6a:	683b      	ldr	r3, [r7, #0]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d013      	beq.n	801dc98 <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 801dc70:	f107 020c 	add.w	r2, r7, #12
 801dc74:	f107 0310 	add.w	r3, r7, #16
 801dc78:	4619      	mov	r1, r3
 801dc7a:	6838      	ldr	r0, [r7, #0]
 801dc7c:	f7ff fd5d 	bl	801d73a <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 801dc80:	693b      	ldr	r3, [r7, #16]
 801dc82:	2b09      	cmp	r3, #9
 801dc84:	dc08      	bgt.n	801dc98 <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 801dc86:	f107 020c 	add.w	r2, r7, #12
 801dc8a:	f107 0310 	add.w	r3, r7, #16
 801dc8e:	4619      	mov	r1, r3
 801dc90:	6878      	ldr	r0, [r7, #4]
 801dc92:	f7ff fd72 	bl	801d77a <search_suitable_block>
 801dc96:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 801dc98:	697b      	ldr	r3, [r7, #20]
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d00e      	beq.n	801dcbc <block_locate_free+0x68>
        tlsf_assert(block_size(block) >= size);
 801dc9e:	6978      	ldr	r0, [r7, #20]
 801dca0:	f7ff fb8e 	bl	801d3c0 <block_size>
 801dca4:	4602      	mov	r2, r0
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	4293      	cmp	r3, r2
 801dcaa:	d901      	bls.n	801dcb0 <block_locate_free+0x5c>
 801dcac:	bf00      	nop
 801dcae:	e7fd      	b.n	801dcac <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 801dcb0:	693a      	ldr	r2, [r7, #16]
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	6979      	ldr	r1, [r7, #20]
 801dcb6:	6878      	ldr	r0, [r7, #4]
 801dcb8:	f7ff fdb1 	bl	801d81e <remove_free_block>
    }

    return block;
 801dcbc:	697b      	ldr	r3, [r7, #20]
}
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	3718      	adds	r7, #24
 801dcc2:	46bd      	mov	sp, r7
 801dcc4:	bd80      	pop	{r7, pc}

0801dcc6 <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 801dcc6:	b580      	push	{r7, lr}
 801dcc8:	b086      	sub	sp, #24
 801dcca:	af00      	add	r7, sp, #0
 801dccc:	60f8      	str	r0, [r7, #12]
 801dcce:	60b9      	str	r1, [r7, #8]
 801dcd0:	607a      	str	r2, [r7, #4]
    void * p = 0;
 801dcd2:	2300      	movs	r3, #0
 801dcd4:	617b      	str	r3, [r7, #20]
    if(block) {
 801dcd6:	68bb      	ldr	r3, [r7, #8]
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d010      	beq.n	801dcfe <block_prepare_used+0x38>
        tlsf_assert(size && "size must be non-zero");
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d101      	bne.n	801dce6 <block_prepare_used+0x20>
 801dce2:	bf00      	nop
 801dce4:	e7fd      	b.n	801dce2 <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 801dce6:	687a      	ldr	r2, [r7, #4]
 801dce8:	68b9      	ldr	r1, [r7, #8]
 801dcea:	68f8      	ldr	r0, [r7, #12]
 801dcec:	f7ff ff60 	bl	801dbb0 <block_trim_free>
        block_mark_as_used(block);
 801dcf0:	68b8      	ldr	r0, [r7, #8]
 801dcf2:	f7ff fc79 	bl	801d5e8 <block_mark_as_used>
        p = block_to_ptr(block);
 801dcf6:	68b8      	ldr	r0, [r7, #8]
 801dcf8:	f7ff fc07 	bl	801d50a <block_to_ptr>
 801dcfc:	6178      	str	r0, [r7, #20]
    }
    return p;
 801dcfe:	697b      	ldr	r3, [r7, #20]
}
 801dd00:	4618      	mov	r0, r3
 801dd02:	3718      	adds	r7, #24
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bd80      	pop	{r7, pc}

0801dd08 <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 801dd08:	b480      	push	{r7}
 801dd0a:	b085      	sub	sp, #20
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 801dd10:	687a      	ldr	r2, [r7, #4]
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 801dd16:	687a      	ldr	r2, [r7, #4]
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	2200      	movs	r2, #0
 801dd20:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 801dd22:	2300      	movs	r3, #0
 801dd24:	60fb      	str	r3, [r7, #12]
 801dd26:	e01c      	b.n	801dd62 <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 801dd28:	687a      	ldr	r2, [r7, #4]
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	3304      	adds	r3, #4
 801dd2e:	009b      	lsls	r3, r3, #2
 801dd30:	4413      	add	r3, r2
 801dd32:	2200      	movs	r2, #0
 801dd34:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801dd36:	2300      	movs	r3, #0
 801dd38:	60bb      	str	r3, [r7, #8]
 801dd3a:	e00c      	b.n	801dd56 <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 801dd3c:	687a      	ldr	r2, [r7, #4]
 801dd3e:	6879      	ldr	r1, [r7, #4]
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	0158      	lsls	r0, r3, #5
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	4403      	add	r3, r0
 801dd48:	330e      	adds	r3, #14
 801dd4a:	009b      	lsls	r3, r3, #2
 801dd4c:	440b      	add	r3, r1
 801dd4e:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801dd50:	68bb      	ldr	r3, [r7, #8]
 801dd52:	3301      	adds	r3, #1
 801dd54:	60bb      	str	r3, [r7, #8]
 801dd56:	68bb      	ldr	r3, [r7, #8]
 801dd58:	2b1f      	cmp	r3, #31
 801dd5a:	ddef      	ble.n	801dd3c <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	3301      	adds	r3, #1
 801dd60:	60fb      	str	r3, [r7, #12]
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	2b09      	cmp	r3, #9
 801dd66:	dddf      	ble.n	801dd28 <control_constructor+0x20>
        }
    }
}
 801dd68:	bf00      	nop
 801dd6a:	bf00      	nop
 801dd6c:	3714      	adds	r7, #20
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd74:	4770      	bx	lr

0801dd76 <lv_tlsf_block_size>:
        block = block_next(block);
    }
}

size_t lv_tlsf_block_size(void * ptr)
{
 801dd76:	b580      	push	{r7, lr}
 801dd78:	b084      	sub	sp, #16
 801dd7a:	af00      	add	r7, sp, #0
 801dd7c:	6078      	str	r0, [r7, #4]
    size_t size = 0;
 801dd7e:	2300      	movs	r3, #0
 801dd80:	60fb      	str	r3, [r7, #12]
    if(ptr) {
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d007      	beq.n	801dd98 <lv_tlsf_block_size+0x22>
        const block_header_t * block = block_from_ptr(ptr);
 801dd88:	6878      	ldr	r0, [r7, #4]
 801dd8a:	f7ff fbb0 	bl	801d4ee <block_from_ptr>
 801dd8e:	60b8      	str	r0, [r7, #8]
        size = block_size(block);
 801dd90:	68b8      	ldr	r0, [r7, #8]
 801dd92:	f7ff fb15 	bl	801d3c0 <block_size>
 801dd96:	60f8      	str	r0, [r7, #12]
    }
    return size;
 801dd98:	68fb      	ldr	r3, [r7, #12]
}
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	3710      	adds	r7, #16
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	bd80      	pop	{r7, pc}

0801dda2 <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 801dda2:	b480      	push	{r7}
 801dda4:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 801dda6:	f240 533c 	movw	r3, #1340	@ 0x53c
}
 801ddaa:	4618      	mov	r0, r3
 801ddac:	46bd      	mov	sp, r7
 801ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddb2:	4770      	bx	lr

0801ddb4 <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 801ddb4:	b480      	push	{r7}
 801ddb6:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 801ddb8:	2304      	movs	r3, #4
 801ddba:	005b      	lsls	r3, r3, #1
}
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc4:	4770      	bx	lr

0801ddc6 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 801ddc6:	b580      	push	{r7, lr}
 801ddc8:	b088      	sub	sp, #32
 801ddca:	af00      	add	r7, sp, #0
 801ddcc:	60f8      	str	r0, [r7, #12]
 801ddce:	60b9      	str	r1, [r7, #8]
 801ddd0:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 801ddd2:	f7ff ffef 	bl	801ddb4 <lv_tlsf_pool_overhead>
 801ddd6:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 801ddd8:	687a      	ldr	r2, [r7, #4]
 801ddda:	69fb      	ldr	r3, [r7, #28]
 801dddc:	1ad3      	subs	r3, r2, r3
 801ddde:	2104      	movs	r1, #4
 801dde0:	4618      	mov	r0, r3
 801dde2:	f7ff fc2d 	bl	801d640 <align_down>
 801dde6:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 801dde8:	68bb      	ldr	r3, [r7, #8]
 801ddea:	f003 0303 	and.w	r3, r3, #3
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d001      	beq.n	801ddf6 <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	e02e      	b.n	801de54 <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 801ddf6:	220c      	movs	r2, #12
 801ddf8:	69bb      	ldr	r3, [r7, #24]
 801ddfa:	4293      	cmp	r3, r2
 801ddfc:	d304      	bcc.n	801de08 <lv_tlsf_add_pool+0x42>
 801ddfe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801de02:	69bb      	ldr	r3, [r7, #24]
 801de04:	4293      	cmp	r3, r2
 801de06:	d901      	bls.n	801de0c <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 801de08:	2300      	movs	r3, #0
 801de0a:	e023      	b.n	801de54 <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 801de0c:	2304      	movs	r3, #4
 801de0e:	425b      	negs	r3, r3
 801de10:	4619      	mov	r1, r3
 801de12:	68b8      	ldr	r0, [r7, #8]
 801de14:	f7ff fb86 	bl	801d524 <offset_to_block>
 801de18:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 801de1a:	69b9      	ldr	r1, [r7, #24]
 801de1c:	6978      	ldr	r0, [r7, #20]
 801de1e:	f7ff fae0 	bl	801d3e2 <block_set_size>
    block_set_free(block);
 801de22:	6978      	ldr	r0, [r7, #20]
 801de24:	f7ff fb13 	bl	801d44e <block_set_free>
    block_set_prev_used(block);
 801de28:	6978      	ldr	r0, [r7, #20]
 801de2a:	f7ff fb4f 	bl	801d4cc <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 801de2e:	6979      	ldr	r1, [r7, #20]
 801de30:	68f8      	ldr	r0, [r7, #12]
 801de32:	f7ff fdcb 	bl	801d9cc <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 801de36:	6978      	ldr	r0, [r7, #20]
 801de38:	f7ff fbb4 	bl	801d5a4 <block_link_next>
 801de3c:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 801de3e:	2100      	movs	r1, #0
 801de40:	6938      	ldr	r0, [r7, #16]
 801de42:	f7ff face 	bl	801d3e2 <block_set_size>
    block_set_used(next);
 801de46:	6938      	ldr	r0, [r7, #16]
 801de48:	f7ff fb11 	bl	801d46e <block_set_used>
    block_set_prev_free(next);
 801de4c:	6938      	ldr	r0, [r7, #16]
 801de4e:	f7ff fb2d 	bl	801d4ac <block_set_prev_free>

    return mem;
 801de52:	68bb      	ldr	r3, [r7, #8]
}
 801de54:	4618      	mov	r0, r3
 801de56:	3720      	adds	r7, #32
 801de58:	46bd      	mov	sp, r7
 801de5a:	bd80      	pop	{r7, pc}

0801de5c <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 801de5c:	b580      	push	{r7, lr}
 801de5e:	b082      	sub	sp, #8
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	f003 0303 	and.w	r3, r3, #3
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d001      	beq.n	801de72 <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 801de6e:	2300      	movs	r3, #0
 801de70:	e003      	b.n	801de7a <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 801de72:	6878      	ldr	r0, [r7, #4]
 801de74:	f7ff ff48 	bl	801dd08 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 801de78:	687b      	ldr	r3, [r7, #4]
}
 801de7a:	4618      	mov	r0, r3
 801de7c:	3708      	adds	r7, #8
 801de7e:	46bd      	mov	sp, r7
 801de80:	bd80      	pop	{r7, pc}

0801de82 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 801de82:	b590      	push	{r4, r7, lr}
 801de84:	b085      	sub	sp, #20
 801de86:	af00      	add	r7, sp, #0
 801de88:	6078      	str	r0, [r7, #4]
 801de8a:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 801de8c:	6878      	ldr	r0, [r7, #4]
 801de8e:	f7ff ffe5 	bl	801de5c <lv_tlsf_create>
 801de92:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 801de94:	f7ff ff85 	bl	801dda2 <lv_tlsf_size>
 801de98:	4602      	mov	r2, r0
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	189c      	adds	r4, r3, r2
 801de9e:	f7ff ff80 	bl	801dda2 <lv_tlsf_size>
 801dea2:	4602      	mov	r2, r0
 801dea4:	683b      	ldr	r3, [r7, #0]
 801dea6:	1a9b      	subs	r3, r3, r2
 801dea8:	461a      	mov	r2, r3
 801deaa:	4621      	mov	r1, r4
 801deac:	68f8      	ldr	r0, [r7, #12]
 801deae:	f7ff ff8a 	bl	801ddc6 <lv_tlsf_add_pool>
    return tlsf;
 801deb2:	68fb      	ldr	r3, [r7, #12]
}
 801deb4:	4618      	mov	r0, r3
 801deb6:	3714      	adds	r7, #20
 801deb8:	46bd      	mov	sp, r7
 801deba:	bd90      	pop	{r4, r7, pc}

0801debc <lv_tlsf_get_pool>:
    /* Nothing to do. */
    LV_UNUSED(tlsf);
}

lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
{
 801debc:	b580      	push	{r7, lr}
 801debe:	b082      	sub	sp, #8
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	6078      	str	r0, [r7, #4]
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
 801dec4:	f7ff ff6d 	bl	801dda2 <lv_tlsf_size>
 801dec8:	4602      	mov	r2, r0
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	4413      	add	r3, r2
}
 801dece:	4618      	mov	r0, r3
 801ded0:	3708      	adds	r7, #8
 801ded2:	46bd      	mov	sp, r7
 801ded4:	bd80      	pop	{r7, pc}

0801ded6 <lv_tlsf_malloc>:

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 801ded6:	b580      	push	{r7, lr}
 801ded8:	b086      	sub	sp, #24
 801deda:	af00      	add	r7, sp, #0
 801dedc:	6078      	str	r0, [r7, #4]
 801dede:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 801dee4:	2104      	movs	r1, #4
 801dee6:	6838      	ldr	r0, [r7, #0]
 801dee8:	f7ff fbdd 	bl	801d6a6 <adjust_request_size>
 801deec:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 801deee:	6939      	ldr	r1, [r7, #16]
 801def0:	6978      	ldr	r0, [r7, #20]
 801def2:	f7ff feaf 	bl	801dc54 <block_locate_free>
 801def6:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 801def8:	693a      	ldr	r2, [r7, #16]
 801defa:	68f9      	ldr	r1, [r7, #12]
 801defc:	6978      	ldr	r0, [r7, #20]
 801defe:	f7ff fee2 	bl	801dcc6 <block_prepare_used>
 801df02:	4603      	mov	r3, r0
}
 801df04:	4618      	mov	r0, r3
 801df06:	3718      	adds	r7, #24
 801df08:	46bd      	mov	sp, r7
 801df0a:	bd80      	pop	{r7, pc}

0801df0c <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 801df0c:	b580      	push	{r7, lr}
 801df0e:	b086      	sub	sp, #24
 801df10:	af00      	add	r7, sp, #0
 801df12:	6078      	str	r0, [r7, #4]
 801df14:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 801df16:	2300      	movs	r3, #0
 801df18:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 801df1a:	683b      	ldr	r3, [r7, #0]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d021      	beq.n	801df64 <lv_tlsf_free+0x58>
        control_t * control = tlsf_cast(control_t *, tlsf);
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 801df24:	6838      	ldr	r0, [r7, #0]
 801df26:	f7ff fae2 	bl	801d4ee <block_from_ptr>
 801df2a:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 801df2c:	68f8      	ldr	r0, [r7, #12]
 801df2e:	f7ff fa80 	bl	801d432 <block_is_free>
 801df32:	4603      	mov	r3, r0
 801df34:	2b00      	cmp	r3, #0
 801df36:	d001      	beq.n	801df3c <lv_tlsf_free+0x30>
 801df38:	bf00      	nop
 801df3a:	e7fd      	b.n	801df38 <lv_tlsf_free+0x2c>
        size = block->size;
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	685b      	ldr	r3, [r3, #4]
 801df40:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 801df42:	68f8      	ldr	r0, [r7, #12]
 801df44:	f7ff fb3e 	bl	801d5c4 <block_mark_as_free>
        block = block_merge_prev(control, block);
 801df48:	68f9      	ldr	r1, [r7, #12]
 801df4a:	6938      	ldr	r0, [r7, #16]
 801df4c:	f7ff fddc 	bl	801db08 <block_merge_prev>
 801df50:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 801df52:	68f9      	ldr	r1, [r7, #12]
 801df54:	6938      	ldr	r0, [r7, #16]
 801df56:	f7ff fe01 	bl	801db5c <block_merge_next>
 801df5a:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 801df5c:	68f9      	ldr	r1, [r7, #12]
 801df5e:	6938      	ldr	r0, [r7, #16]
 801df60:	f7ff fd34 	bl	801d9cc <block_insert>
    }

    return size;
 801df64:	697b      	ldr	r3, [r7, #20]
}
 801df66:	4618      	mov	r0, r3
 801df68:	3718      	adds	r7, #24
 801df6a:	46bd      	mov	sp, r7
 801df6c:	bd80      	pop	{r7, pc}

0801df6e <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 801df6e:	b580      	push	{r7, lr}
 801df70:	b08c      	sub	sp, #48	@ 0x30
 801df72:	af00      	add	r7, sp, #0
 801df74:	60f8      	str	r0, [r7, #12]
 801df76:	60b9      	str	r1, [r7, #8]
 801df78:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    void * p = 0;
 801df7e:	2300      	movs	r3, #0
 801df80:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 801df82:	68bb      	ldr	r3, [r7, #8]
 801df84:	2b00      	cmp	r3, #0
 801df86:	d007      	beq.n	801df98 <lv_tlsf_realloc+0x2a>
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d104      	bne.n	801df98 <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 801df8e:	68b9      	ldr	r1, [r7, #8]
 801df90:	68f8      	ldr	r0, [r7, #12]
 801df92:	f7ff ffbb 	bl	801df0c <lv_tlsf_free>
 801df96:	e06b      	b.n	801e070 <lv_tlsf_realloc+0x102>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 801df98:	68bb      	ldr	r3, [r7, #8]
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d105      	bne.n	801dfaa <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 801df9e:	6879      	ldr	r1, [r7, #4]
 801dfa0:	68f8      	ldr	r0, [r7, #12]
 801dfa2:	f7ff ff98 	bl	801ded6 <lv_tlsf_malloc>
 801dfa6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801dfa8:	e062      	b.n	801e070 <lv_tlsf_realloc+0x102>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 801dfaa:	68b8      	ldr	r0, [r7, #8]
 801dfac:	f7ff fa9f 	bl	801d4ee <block_from_ptr>
 801dfb0:	6278      	str	r0, [r7, #36]	@ 0x24
        block_header_t * next = block_next(block);
 801dfb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dfb4:	f7ff fad6 	bl	801d564 <block_next>
 801dfb8:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 801dfba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dfbc:	f7ff fa00 	bl	801d3c0 <block_size>
 801dfc0:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 801dfc2:	6a38      	ldr	r0, [r7, #32]
 801dfc4:	f7ff f9fc 	bl	801d3c0 <block_size>
 801dfc8:	4602      	mov	r2, r0
 801dfca:	69fb      	ldr	r3, [r7, #28]
 801dfcc:	4413      	add	r3, r2
 801dfce:	2204      	movs	r2, #4
 801dfd0:	4413      	add	r3, r2
 801dfd2:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 801dfd4:	2104      	movs	r1, #4
 801dfd6:	6878      	ldr	r0, [r7, #4]
 801dfd8:	f7ff fb65 	bl	801d6a6 <adjust_request_size>
 801dfdc:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 801dfde:	687a      	ldr	r2, [r7, #4]
 801dfe0:	69fb      	ldr	r3, [r7, #28]
 801dfe2:	429a      	cmp	r2, r3
 801dfe4:	d904      	bls.n	801dff0 <lv_tlsf_realloc+0x82>
 801dfe6:	697b      	ldr	r3, [r7, #20]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d101      	bne.n	801dff0 <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 801dfec:	2300      	movs	r3, #0
 801dfee:	e040      	b.n	801e072 <lv_tlsf_realloc+0x104>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 801dff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dff2:	f7ff fa1e 	bl	801d432 <block_is_free>
 801dff6:	4603      	mov	r3, r0
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d001      	beq.n	801e000 <lv_tlsf_realloc+0x92>
 801dffc:	bf00      	nop
 801dffe:	e7fd      	b.n	801dffc <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801e000:	697a      	ldr	r2, [r7, #20]
 801e002:	69fb      	ldr	r3, [r7, #28]
 801e004:	429a      	cmp	r2, r3
 801e006:	d921      	bls.n	801e04c <lv_tlsf_realloc+0xde>
 801e008:	6a38      	ldr	r0, [r7, #32]
 801e00a:	f7ff fa12 	bl	801d432 <block_is_free>
 801e00e:	4603      	mov	r3, r0
 801e010:	2b00      	cmp	r3, #0
 801e012:	d003      	beq.n	801e01c <lv_tlsf_realloc+0xae>
 801e014:	697a      	ldr	r2, [r7, #20]
 801e016:	69bb      	ldr	r3, [r7, #24]
 801e018:	429a      	cmp	r2, r3
 801e01a:	d917      	bls.n	801e04c <lv_tlsf_realloc+0xde>
            p = lv_tlsf_malloc(tlsf, size);
 801e01c:	6879      	ldr	r1, [r7, #4]
 801e01e:	68f8      	ldr	r0, [r7, #12]
 801e020:	f7ff ff59 	bl	801ded6 <lv_tlsf_malloc>
 801e024:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if(p) {
 801e026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d021      	beq.n	801e070 <lv_tlsf_realloc+0x102>
                const size_t minsize = tlsf_min(cursize, size);
 801e02c:	687a      	ldr	r2, [r7, #4]
 801e02e:	69fb      	ldr	r3, [r7, #28]
 801e030:	4293      	cmp	r3, r2
 801e032:	bf28      	it	cs
 801e034:	4613      	movcs	r3, r2
 801e036:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 801e038:	693a      	ldr	r2, [r7, #16]
 801e03a:	68b9      	ldr	r1, [r7, #8]
 801e03c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e03e:	f7fe fe71 	bl	801cd24 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 801e042:	68b9      	ldr	r1, [r7, #8]
 801e044:	68f8      	ldr	r0, [r7, #12]
 801e046:	f7ff ff61 	bl	801df0c <lv_tlsf_free>
            if(p) {
 801e04a:	e011      	b.n	801e070 <lv_tlsf_realloc+0x102>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 801e04c:	697a      	ldr	r2, [r7, #20]
 801e04e:	69fb      	ldr	r3, [r7, #28]
 801e050:	429a      	cmp	r2, r3
 801e052:	d906      	bls.n	801e062 <lv_tlsf_realloc+0xf4>
                block_merge_next(control, block);
 801e054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e058:	f7ff fd80 	bl	801db5c <block_merge_next>
                block_mark_as_used(block);
 801e05c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e05e:	f7ff fac3 	bl	801d5e8 <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 801e062:	697a      	ldr	r2, [r7, #20]
 801e064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e068:	f7ff fdca 	bl	801dc00 <block_trim_used>
            p = ptr;
 801e06c:	68bb      	ldr	r3, [r7, #8]
 801e06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return p;
 801e070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801e072:	4618      	mov	r0, r3
 801e074:	3730      	adds	r7, #48	@ 0x30
 801e076:	46bd      	mov	sp, r7
 801e078:	bd80      	pop	{r7, pc}

0801e07a <lv_memzero>:
 * Same as `memset(dst, 0x00, len)`.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void lv_memzero(void * dst, size_t len)
{
 801e07a:	b580      	push	{r7, lr}
 801e07c:	b082      	sub	sp, #8
 801e07e:	af00      	add	r7, sp, #0
 801e080:	6078      	str	r0, [r7, #4]
 801e082:	6039      	str	r1, [r7, #0]
    lv_memset(dst, 0x00, len);
 801e084:	683a      	ldr	r2, [r7, #0]
 801e086:	2100      	movs	r1, #0
 801e088:	6878      	ldr	r0, [r7, #4]
 801e08a:	f7ff f868 	bl	801d15e <lv_memset>
}
 801e08e:	bf00      	nop
 801e090:	3708      	adds	r7, #8
 801e092:	46bd      	mov	sp, r7
 801e094:	bd80      	pop	{r7, pc}
	...

0801e098 <lv_malloc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void * lv_malloc(size_t size)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b084      	sub	sp, #16
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
    LV_TRACE_MEM("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d101      	bne.n	801e0aa <lv_malloc+0x12>
        LV_TRACE_MEM("using zero_mem");
        return &zero_mem;
 801e0a6:	4b08      	ldr	r3, [pc, #32]	@ (801e0c8 <lv_malloc+0x30>)
 801e0a8:	e009      	b.n	801e0be <lv_malloc+0x26>
    }

    void * alloc = lv_malloc_core(size);
 801e0aa:	6878      	ldr	r0, [r7, #4]
 801e0ac:	f7fe fda8 	bl	801cc00 <lv_malloc_core>
 801e0b0:	60f8      	str	r0, [r7, #12]

    if(alloc == NULL) {
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d101      	bne.n	801e0bc <lv_malloc+0x24>
        lv_mem_monitor(&mon);
        LV_LOG_INFO("used: %zu (%3d %%), frag: %3d %%, biggest free: %zu",
                    mon.total_size - mon.free_size, mon.used_pct, mon.frag_pct,
                    mon.free_biggest_size);
#endif
        return NULL;
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	e000      	b.n	801e0be <lv_malloc+0x26>
#if LV_MEM_ADD_JUNK
    lv_memset(alloc, 0xaa, size);
#endif

    LV_TRACE_MEM("allocated at %p", alloc);
    return alloc;
 801e0bc:	68fb      	ldr	r3, [r7, #12]
}
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3710      	adds	r7, #16
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}
 801e0c6:	bf00      	nop
 801e0c8:	200000f0 	.word	0x200000f0

0801e0cc <lv_malloc_zeroed>:

void * lv_malloc_zeroed(size_t size)
{
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b084      	sub	sp, #16
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	6078      	str	r0, [r7, #4]
    LV_TRACE_MEM("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d101      	bne.n	801e0de <lv_malloc_zeroed+0x12>
        LV_TRACE_MEM("using zero_mem");
        return &zero_mem;
 801e0da:	4b0a      	ldr	r3, [pc, #40]	@ (801e104 <lv_malloc_zeroed+0x38>)
 801e0dc:	e00d      	b.n	801e0fa <lv_malloc_zeroed+0x2e>
    }

    void * alloc = lv_malloc_core(size);
 801e0de:	6878      	ldr	r0, [r7, #4]
 801e0e0:	f7fe fd8e 	bl	801cc00 <lv_malloc_core>
 801e0e4:	60f8      	str	r0, [r7, #12]
    if(alloc == NULL) {
 801e0e6:	68fb      	ldr	r3, [r7, #12]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	d101      	bne.n	801e0f0 <lv_malloc_zeroed+0x24>
        lv_mem_monitor(&mon);
        LV_LOG_INFO("used: %zu (%3d %%), frag: %3d %%, biggest free: %zu",
                    mon.total_size - mon.free_size, mon.used_pct, mon.frag_pct,
                    mon.free_biggest_size);
#endif
        return NULL;
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	e004      	b.n	801e0fa <lv_malloc_zeroed+0x2e>
    }

    lv_memzero(alloc, size);
 801e0f0:	6879      	ldr	r1, [r7, #4]
 801e0f2:	68f8      	ldr	r0, [r7, #12]
 801e0f4:	f7ff ffc1 	bl	801e07a <lv_memzero>

    LV_TRACE_MEM("allocated at %p", alloc);
    return alloc;
 801e0f8:	68fb      	ldr	r3, [r7, #12]
}
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	3710      	adds	r7, #16
 801e0fe:	46bd      	mov	sp, r7
 801e100:	bd80      	pop	{r7, pc}
 801e102:	bf00      	nop
 801e104:	200000f0 	.word	0x200000f0

0801e108 <lv_free>:

void lv_free(void * data)
{
 801e108:	b580      	push	{r7, lr}
 801e10a:	b082      	sub	sp, #8
 801e10c:	af00      	add	r7, sp, #0
 801e10e:	6078      	str	r0, [r7, #4]
    LV_TRACE_MEM("freeing %p", data);
    if(data == &zero_mem) return;
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	4a08      	ldr	r2, [pc, #32]	@ (801e134 <lv_free+0x2c>)
 801e114:	4293      	cmp	r3, r2
 801e116:	d006      	beq.n	801e126 <lv_free+0x1e>
    if(data == NULL) return;
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d005      	beq.n	801e12a <lv_free+0x22>

    lv_free_core(data);
 801e11e:	6878      	ldr	r0, [r7, #4]
 801e120:	f7fe fdd8 	bl	801ccd4 <lv_free_core>
 801e124:	e002      	b.n	801e12c <lv_free+0x24>
    if(data == &zero_mem) return;
 801e126:	bf00      	nop
 801e128:	e000      	b.n	801e12c <lv_free+0x24>
    if(data == NULL) return;
 801e12a:	bf00      	nop
}
 801e12c:	3708      	adds	r7, #8
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd80      	pop	{r7, pc}
 801e132:	bf00      	nop
 801e134:	200000f0 	.word	0x200000f0

0801e138 <lv_realloc>:

void * lv_realloc(void * data_p, size_t new_size)
{
 801e138:	b580      	push	{r7, lr}
 801e13a:	b084      	sub	sp, #16
 801e13c:	af00      	add	r7, sp, #0
 801e13e:	6078      	str	r0, [r7, #4]
 801e140:	6039      	str	r1, [r7, #0]
    LV_TRACE_MEM("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 801e142:	683b      	ldr	r3, [r7, #0]
 801e144:	2b00      	cmp	r3, #0
 801e146:	d104      	bne.n	801e152 <lv_realloc+0x1a>
        LV_TRACE_MEM("using zero_mem");
        lv_free(data_p);
 801e148:	6878      	ldr	r0, [r7, #4]
 801e14a:	f7ff ffdd 	bl	801e108 <lv_free>
        return &zero_mem;
 801e14e:	4b0d      	ldr	r3, [pc, #52]	@ (801e184 <lv_realloc+0x4c>)
 801e150:	e013      	b.n	801e17a <lv_realloc+0x42>
    }

    if(data_p == &zero_mem) return lv_malloc(new_size);
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	4a0b      	ldr	r2, [pc, #44]	@ (801e184 <lv_realloc+0x4c>)
 801e156:	4293      	cmp	r3, r2
 801e158:	d104      	bne.n	801e164 <lv_realloc+0x2c>
 801e15a:	6838      	ldr	r0, [r7, #0]
 801e15c:	f7ff ff9c 	bl	801e098 <lv_malloc>
 801e160:	4603      	mov	r3, r0
 801e162:	e00a      	b.n	801e17a <lv_realloc+0x42>

    void * new_p = lv_realloc_core(data_p, new_size);
 801e164:	6839      	ldr	r1, [r7, #0]
 801e166:	6878      	ldr	r0, [r7, #4]
 801e168:	f7fe fd78 	bl	801cc5c <lv_realloc_core>
 801e16c:	60f8      	str	r0, [r7, #12]

    if(new_p == NULL) {
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	2b00      	cmp	r3, #0
 801e172:	d101      	bne.n	801e178 <lv_realloc+0x40>
        LV_LOG_ERROR("couldn't reallocate memory");
        return NULL;
 801e174:	2300      	movs	r3, #0
 801e176:	e000      	b.n	801e17a <lv_realloc+0x42>
    }

    LV_TRACE_MEM("reallocated at %p", new_p);
    return new_p;
 801e178:	68fb      	ldr	r3, [r7, #12]
}
 801e17a:	4618      	mov	r0, r3
 801e17c:	3710      	adds	r7, #16
 801e17e:	46bd      	mov	sp, r7
 801e180:	bd80      	pop	{r7, pc}
 801e182:	bf00      	nop
 801e184:	200000f0 	.word	0x200000f0

0801e188 <lv_tick_get>:
    state_p->sys_irq_flag = 0;
    state_p->sys_time += tick_period;
}

uint32_t lv_tick_get(void)
{
 801e188:	b580      	push	{r7, lr}
 801e18a:	b082      	sub	sp, #8
 801e18c:	af00      	add	r7, sp, #0
    lv_tick_state_t * state_p = &state;
 801e18e:	4b0d      	ldr	r3, [pc, #52]	@ (801e1c4 <lv_tick_get+0x3c>)
 801e190:	607b      	str	r3, [r7, #4]

    if(state_p->tick_get_cb)
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	689b      	ldr	r3, [r3, #8]
 801e196:	2b00      	cmp	r3, #0
 801e198:	d004      	beq.n	801e1a4 <lv_tick_get+0x1c>
        return state_p->tick_get_cb();
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	689b      	ldr	r3, [r3, #8]
 801e19e:	4798      	blx	r3
 801e1a0:	4603      	mov	r3, r0
 801e1a2:	e00b      	b.n	801e1bc <lv_tick_get+0x34>
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        state_p->sys_irq_flag = 1;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	2201      	movs	r2, #1
 801e1a8:	711a      	strb	r2, [r3, #4]
        result        = state_p->sys_time;
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	603b      	str	r3, [r7, #0]
    } while(!state_p->sys_irq_flag); /*Continue until see a non interrupted cycle*/
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	791b      	ldrb	r3, [r3, #4]
 801e1b4:	b2db      	uxtb	r3, r3
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d0f4      	beq.n	801e1a4 <lv_tick_get+0x1c>

    return result;
 801e1ba:	683b      	ldr	r3, [r7, #0]
}
 801e1bc:	4618      	mov	r0, r3
 801e1be:	3708      	adds	r7, #8
 801e1c0:	46bd      	mov	sp, r7
 801e1c2:	bd80      	pop	{r7, pc}
 801e1c4:	20000150 	.word	0x20000150

0801e1c8 <lv_tick_elaps>:

uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 801e1c8:	b580      	push	{r7, lr}
 801e1ca:	b084      	sub	sp, #16
 801e1cc:	af00      	add	r7, sp, #0
 801e1ce:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 801e1d0:	f7ff ffda 	bl	801e188 <lv_tick_get>
 801e1d4:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 801e1d6:	68fa      	ldr	r2, [r7, #12]
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	429a      	cmp	r2, r3
 801e1dc:	d304      	bcc.n	801e1e8 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 801e1de:	68fa      	ldr	r2, [r7, #12]
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	1ad3      	subs	r3, r2, r3
 801e1e4:	607b      	str	r3, [r7, #4]
 801e1e6:	e006      	b.n	801e1f6 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	425b      	negs	r3, r3
 801e1ec:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 801e1ee:	687a      	ldr	r2, [r7, #4]
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	4413      	add	r3, r2
 801e1f4:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 801e1f6:	687b      	ldr	r3, [r7, #4]
}
 801e1f8:	4618      	mov	r0, r3
 801e1fa:	3710      	adds	r7, #16
 801e1fc:	46bd      	mov	sp, r7
 801e1fe:	bd80      	pop	{r7, pc}

0801e200 <lv_span_stack_init>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/
void lv_span_stack_init(void)
{
 801e200:	b580      	push	{r7, lr}
 801e202:	b082      	sub	sp, #8
 801e204:	af00      	add	r7, sp, #0
    struct _snippet_stack * stack = snippet_stack = lv_malloc(sizeof(struct _snippet_stack));
 801e206:	f240 7004 	movw	r0, #1796	@ 0x704
 801e20a:	f7ff ff45 	bl	801e098 <lv_malloc>
 801e20e:	4603      	mov	r3, r0
 801e210:	4a07      	ldr	r2, [pc, #28]	@ (801e230 <lv_span_stack_init+0x30>)
 801e212:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
 801e216:	4b06      	ldr	r3, [pc, #24]	@ (801e230 <lv_span_stack_init+0x30>)
 801e218:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 801e21c:	607b      	str	r3, [r7, #4]
    LV_ASSERT_MALLOC(stack);
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	2b00      	cmp	r3, #0
 801e222:	d101      	bne.n	801e228 <lv_span_stack_init+0x28>
 801e224:	bf00      	nop
 801e226:	e7fd      	b.n	801e224 <lv_span_stack_init+0x24>
    if(!stack) {
        LV_LOG_ERROR("malloc failed for snippet_stack");
    }
}
 801e228:	bf00      	nop
 801e22a:	3708      	adds	r7, #8
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd80      	pop	{r7, pc}
 801e230:	2000008c 	.word	0x2000008c

0801e234 <memset>:
 801e234:	4402      	add	r2, r0
 801e236:	4603      	mov	r3, r0
 801e238:	4293      	cmp	r3, r2
 801e23a:	d100      	bne.n	801e23e <memset+0xa>
 801e23c:	4770      	bx	lr
 801e23e:	f803 1b01 	strb.w	r1, [r3], #1
 801e242:	e7f9      	b.n	801e238 <memset+0x4>

0801e244 <__libc_init_array>:
 801e244:	b570      	push	{r4, r5, r6, lr}
 801e246:	4d0d      	ldr	r5, [pc, #52]	@ (801e27c <__libc_init_array+0x38>)
 801e248:	4c0d      	ldr	r4, [pc, #52]	@ (801e280 <__libc_init_array+0x3c>)
 801e24a:	1b64      	subs	r4, r4, r5
 801e24c:	10a4      	asrs	r4, r4, #2
 801e24e:	2600      	movs	r6, #0
 801e250:	42a6      	cmp	r6, r4
 801e252:	d109      	bne.n	801e268 <__libc_init_array+0x24>
 801e254:	4d0b      	ldr	r5, [pc, #44]	@ (801e284 <__libc_init_array+0x40>)
 801e256:	4c0c      	ldr	r4, [pc, #48]	@ (801e288 <__libc_init_array+0x44>)
 801e258:	f000 f826 	bl	801e2a8 <_init>
 801e25c:	1b64      	subs	r4, r4, r5
 801e25e:	10a4      	asrs	r4, r4, #2
 801e260:	2600      	movs	r6, #0
 801e262:	42a6      	cmp	r6, r4
 801e264:	d105      	bne.n	801e272 <__libc_init_array+0x2e>
 801e266:	bd70      	pop	{r4, r5, r6, pc}
 801e268:	f855 3b04 	ldr.w	r3, [r5], #4
 801e26c:	4798      	blx	r3
 801e26e:	3601      	adds	r6, #1
 801e270:	e7ee      	b.n	801e250 <__libc_init_array+0xc>
 801e272:	f855 3b04 	ldr.w	r3, [r5], #4
 801e276:	4798      	blx	r3
 801e278:	3601      	adds	r6, #1
 801e27a:	e7f2      	b.n	801e262 <__libc_init_array+0x1e>
 801e27c:	080219d4 	.word	0x080219d4
 801e280:	080219d4 	.word	0x080219d4
 801e284:	080219d4 	.word	0x080219d4
 801e288:	080219d8 	.word	0x080219d8

0801e28c <memcpy>:
 801e28c:	440a      	add	r2, r1
 801e28e:	4291      	cmp	r1, r2
 801e290:	f100 33ff 	add.w	r3, r0, #4294967295
 801e294:	d100      	bne.n	801e298 <memcpy+0xc>
 801e296:	4770      	bx	lr
 801e298:	b510      	push	{r4, lr}
 801e29a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e29e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e2a2:	4291      	cmp	r1, r2
 801e2a4:	d1f9      	bne.n	801e29a <memcpy+0xe>
 801e2a6:	bd10      	pop	{r4, pc}

0801e2a8 <_init>:
 801e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2aa:	bf00      	nop
 801e2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2ae:	bc08      	pop	{r3}
 801e2b0:	469e      	mov	lr, r3
 801e2b2:	4770      	bx	lr

0801e2b4 <_fini>:
 801e2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2b6:	bf00      	nop
 801e2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2ba:	bc08      	pop	{r3}
 801e2bc:	469e      	mov	lr, r3
 801e2be:	4770      	bx	lr
